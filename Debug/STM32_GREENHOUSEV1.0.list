
STM32_GREENHOUSEV1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010754  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000818  080108e8  080108e8  000208e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011100  08011100  00030208  2**0
                  CONTENTS
  4 .ARM          00000008  08011100  08011100  00021100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011108  08011108  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011108  08011108  00021108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801110c  0801110c  0002110c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08011110  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e0  20000208  08011318  00030208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ae8  08011318  00030ae8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c0ee  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c2a  00000000  00000000  0004c326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001580  00000000  00000000  0004ff50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c8  00000000  00000000  000514d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c35e  00000000  00000000  00052898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ddd9  00000000  00000000  0007ebf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108725  00000000  00000000  0009c9cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a50f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072f8  00000000  00000000  001a5144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080108cc 	.word	0x080108cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	080108cc 	.word	0x080108cc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
 8001018:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800101a:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <MX_ADC1_Init+0xe0>)
 800101c:	4a2f      	ldr	r2, [pc, #188]	; (80010dc <MX_ADC1_Init+0xe4>)
 800101e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001020:	4b2d      	ldr	r3, [pc, #180]	; (80010d8 <MX_ADC1_Init+0xe0>)
 8001022:	2200      	movs	r2, #0
 8001024:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001026:	4b2c      	ldr	r3, [pc, #176]	; (80010d8 <MX_ADC1_Init+0xe0>)
 8001028:	2208      	movs	r2, #8
 800102a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800102c:	4b2a      	ldr	r3, [pc, #168]	; (80010d8 <MX_ADC1_Init+0xe0>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001032:	4b29      	ldr	r3, [pc, #164]	; (80010d8 <MX_ADC1_Init+0xe0>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001038:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <MX_ADC1_Init+0xe0>)
 800103a:	2204      	movs	r2, #4
 800103c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800103e:	4b26      	ldr	r3, [pc, #152]	; (80010d8 <MX_ADC1_Init+0xe0>)
 8001040:	2200      	movs	r2, #0
 8001042:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001044:	4b24      	ldr	r3, [pc, #144]	; (80010d8 <MX_ADC1_Init+0xe0>)
 8001046:	2200      	movs	r2, #0
 8001048:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800104a:	4b23      	ldr	r3, [pc, #140]	; (80010d8 <MX_ADC1_Init+0xe0>)
 800104c:	2201      	movs	r2, #1
 800104e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001050:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <MX_ADC1_Init+0xe0>)
 8001052:	2200      	movs	r2, #0
 8001054:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001058:	4b1f      	ldr	r3, [pc, #124]	; (80010d8 <MX_ADC1_Init+0xe0>)
 800105a:	2200      	movs	r2, #0
 800105c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800105e:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <MX_ADC1_Init+0xe0>)
 8001060:	2200      	movs	r2, #0
 8001062:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001064:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <MX_ADC1_Init+0xe0>)
 8001066:	2200      	movs	r2, #0
 8001068:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800106c:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <MX_ADC1_Init+0xe0>)
 800106e:	2200      	movs	r2, #0
 8001070:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001072:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <MX_ADC1_Init+0xe0>)
 8001074:	2200      	movs	r2, #0
 8001076:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800107a:	4817      	ldr	r0, [pc, #92]	; (80010d8 <MX_ADC1_Init+0xe0>)
 800107c:	f002 fefe 	bl	8003e7c <HAL_ADC_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001086:	f001 f969 	bl	800235c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	4619      	mov	r1, r3
 8001094:	4810      	ldr	r0, [pc, #64]	; (80010d8 <MX_ADC1_Init+0xe0>)
 8001096:	f004 fb9f 	bl	80057d8 <HAL_ADCEx_MultiModeConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010a0:	f001 f95c 	bl	800235c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010a4:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <MX_ADC1_Init+0xe8>)
 80010a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010a8:	2306      	movs	r3, #6
 80010aa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010b0:	237f      	movs	r3, #127	; 0x7f
 80010b2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010b4:	2304      	movs	r3, #4
 80010b6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	4619      	mov	r1, r3
 80010c0:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_ADC1_Init+0xe0>)
 80010c2:	f003 fd9f 	bl	8004c04 <HAL_ADC_ConfigChannel>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80010cc:	f001 f946 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	3728      	adds	r7, #40	; 0x28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000224 	.word	0x20000224
 80010dc:	50040000 	.word	0x50040000
 80010e0:	04300002 	.word	0x04300002

080010e4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ea:	463b      	mov	r3, r7
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
 80010f8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80010fa:	4b29      	ldr	r3, [pc, #164]	; (80011a0 <MX_ADC2_Init+0xbc>)
 80010fc:	4a29      	ldr	r2, [pc, #164]	; (80011a4 <MX_ADC2_Init+0xc0>)
 80010fe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001100:	4b27      	ldr	r3, [pc, #156]	; (80011a0 <MX_ADC2_Init+0xbc>)
 8001102:	2200      	movs	r2, #0
 8001104:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 8001106:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <MX_ADC2_Init+0xbc>)
 8001108:	2208      	movs	r2, #8
 800110a:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800110c:	4b24      	ldr	r3, [pc, #144]	; (80011a0 <MX_ADC2_Init+0xbc>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001112:	4b23      	ldr	r3, [pc, #140]	; (80011a0 <MX_ADC2_Init+0xbc>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001118:	4b21      	ldr	r3, [pc, #132]	; (80011a0 <MX_ADC2_Init+0xbc>)
 800111a:	2204      	movs	r2, #4
 800111c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800111e:	4b20      	ldr	r3, [pc, #128]	; (80011a0 <MX_ADC2_Init+0xbc>)
 8001120:	2200      	movs	r2, #0
 8001122:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001124:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <MX_ADC2_Init+0xbc>)
 8001126:	2200      	movs	r2, #0
 8001128:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800112a:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <MX_ADC2_Init+0xbc>)
 800112c:	2201      	movs	r2, #1
 800112e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <MX_ADC2_Init+0xbc>)
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001138:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <MX_ADC2_Init+0xbc>)
 800113a:	2200      	movs	r2, #0
 800113c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800113e:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <MX_ADC2_Init+0xbc>)
 8001140:	2200      	movs	r2, #0
 8001142:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001144:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <MX_ADC2_Init+0xbc>)
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <MX_ADC2_Init+0xbc>)
 800114e:	2200      	movs	r2, #0
 8001150:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <MX_ADC2_Init+0xbc>)
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800115a:	4811      	ldr	r0, [pc, #68]	; (80011a0 <MX_ADC2_Init+0xbc>)
 800115c:	f002 fe8e 	bl	8003e7c <HAL_ADC_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8001166:	f001 f8f9 	bl	800235c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <MX_ADC2_Init+0xc4>)
 800116c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800116e:	2306      	movs	r3, #6
 8001170:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001176:	237f      	movs	r3, #127	; 0x7f
 8001178:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800117a:	2304      	movs	r3, #4
 800117c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001182:	463b      	mov	r3, r7
 8001184:	4619      	mov	r1, r3
 8001186:	4806      	ldr	r0, [pc, #24]	; (80011a0 <MX_ADC2_Init+0xbc>)
 8001188:	f003 fd3c 	bl	8004c04 <HAL_ADC_ConfigChannel>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8001192:	f001 f8e3 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001196:	bf00      	nop
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000288 	.word	0x20000288
 80011a4:	50040100 	.word	0x50040100
 80011a8:	3ef08000 	.word	0x3ef08000

080011ac <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011b2:	463b      	mov	r3, r7
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
 80011c0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80011c2:	4b29      	ldr	r3, [pc, #164]	; (8001268 <MX_ADC3_Init+0xbc>)
 80011c4:	4a29      	ldr	r2, [pc, #164]	; (800126c <MX_ADC3_Init+0xc0>)
 80011c6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011c8:	4b27      	ldr	r3, [pc, #156]	; (8001268 <MX_ADC3_Init+0xbc>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 80011ce:	4b26      	ldr	r3, [pc, #152]	; (8001268 <MX_ADC3_Init+0xbc>)
 80011d0:	2208      	movs	r2, #8
 80011d2:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011d4:	4b24      	ldr	r3, [pc, #144]	; (8001268 <MX_ADC3_Init+0xbc>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011da:	4b23      	ldr	r3, [pc, #140]	; (8001268 <MX_ADC3_Init+0xbc>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80011e0:	4b21      	ldr	r3, [pc, #132]	; (8001268 <MX_ADC3_Init+0xbc>)
 80011e2:	2208      	movs	r2, #8
 80011e4:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80011e6:	4b20      	ldr	r3, [pc, #128]	; (8001268 <MX_ADC3_Init+0xbc>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80011ec:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <MX_ADC3_Init+0xbc>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80011f2:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <MX_ADC3_Init+0xbc>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011f8:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <MX_ADC3_Init+0xbc>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001200:	4b19      	ldr	r3, [pc, #100]	; (8001268 <MX_ADC3_Init+0xbc>)
 8001202:	2200      	movs	r2, #0
 8001204:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001206:	4b18      	ldr	r3, [pc, #96]	; (8001268 <MX_ADC3_Init+0xbc>)
 8001208:	2200      	movs	r2, #0
 800120a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800120c:	4b16      	ldr	r3, [pc, #88]	; (8001268 <MX_ADC3_Init+0xbc>)
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <MX_ADC3_Init+0xbc>)
 8001216:	2200      	movs	r2, #0
 8001218:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <MX_ADC3_Init+0xbc>)
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001222:	4811      	ldr	r0, [pc, #68]	; (8001268 <MX_ADC3_Init+0xbc>)
 8001224:	f002 fe2a 	bl	8003e7c <HAL_ADC_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 800122e:	f001 f895 	bl	800235c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001232:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <MX_ADC3_Init+0xc4>)
 8001234:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001236:	2306      	movs	r3, #6
 8001238:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800123e:	237f      	movs	r3, #127	; 0x7f
 8001240:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001242:	2304      	movs	r3, #4
 8001244:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800124a:	463b      	mov	r3, r7
 800124c:	4619      	mov	r1, r3
 800124e:	4806      	ldr	r0, [pc, #24]	; (8001268 <MX_ADC3_Init+0xbc>)
 8001250:	f003 fcd8 	bl	8004c04 <HAL_ADC_ConfigChannel>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800125a:	f001 f87f 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200002ec 	.word	0x200002ec
 800126c:	50040200 	.word	0x50040200
 8001270:	08600004 	.word	0x08600004

08001274 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08e      	sub	sp, #56	; 0x38
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a58      	ldr	r2, [pc, #352]	; (80013f4 <HAL_ADC_MspInit+0x180>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d135      	bne.n	8001302 <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001296:	4b58      	ldr	r3, [pc, #352]	; (80013f8 <HAL_ADC_MspInit+0x184>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	3301      	adds	r3, #1
 800129c:	4a56      	ldr	r2, [pc, #344]	; (80013f8 <HAL_ADC_MspInit+0x184>)
 800129e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80012a0:	4b55      	ldr	r3, [pc, #340]	; (80013f8 <HAL_ADC_MspInit+0x184>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d10b      	bne.n	80012c0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80012a8:	4b54      	ldr	r3, [pc, #336]	; (80013fc <HAL_ADC_MspInit+0x188>)
 80012aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ac:	4a53      	ldr	r2, [pc, #332]	; (80013fc <HAL_ADC_MspInit+0x188>)
 80012ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b4:	4b51      	ldr	r3, [pc, #324]	; (80013fc <HAL_ADC_MspInit+0x188>)
 80012b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012bc:	623b      	str	r3, [r7, #32]
 80012be:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c0:	4b4e      	ldr	r3, [pc, #312]	; (80013fc <HAL_ADC_MspInit+0x188>)
 80012c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c4:	4a4d      	ldr	r2, [pc, #308]	; (80013fc <HAL_ADC_MspInit+0x188>)
 80012c6:	f043 0304 	orr.w	r3, r3, #4
 80012ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012cc:	4b4b      	ldr	r3, [pc, #300]	; (80013fc <HAL_ADC_MspInit+0x188>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	61fb      	str	r3, [r7, #28]
 80012d6:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = WATER_LEVEL_Pin;
 80012d8:	2301      	movs	r3, #1
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012dc:	230b      	movs	r3, #11
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(WATER_LEVEL_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e8:	4619      	mov	r1, r3
 80012ea:	4845      	ldr	r0, [pc, #276]	; (8001400 <HAL_ADC_MspInit+0x18c>)
 80012ec:	f004 fe6e 	bl	8005fcc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2100      	movs	r1, #0
 80012f4:	2012      	movs	r0, #18
 80012f6:	f004 fbfa 	bl	8005aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80012fa:	2012      	movs	r0, #18
 80012fc:	f004 fc13 	bl	8005b26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001300:	e074      	b.n	80013ec <HAL_ADC_MspInit+0x178>
  else if(adcHandle->Instance==ADC2)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a3f      	ldr	r2, [pc, #252]	; (8001404 <HAL_ADC_MspInit+0x190>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d135      	bne.n	8001378 <HAL_ADC_MspInit+0x104>
    HAL_RCC_ADC_CLK_ENABLED++;
 800130c:	4b3a      	ldr	r3, [pc, #232]	; (80013f8 <HAL_ADC_MspInit+0x184>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	3301      	adds	r3, #1
 8001312:	4a39      	ldr	r2, [pc, #228]	; (80013f8 <HAL_ADC_MspInit+0x184>)
 8001314:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001316:	4b38      	ldr	r3, [pc, #224]	; (80013f8 <HAL_ADC_MspInit+0x184>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d10b      	bne.n	8001336 <HAL_ADC_MspInit+0xc2>
      __HAL_RCC_ADC_CLK_ENABLE();
 800131e:	4b37      	ldr	r3, [pc, #220]	; (80013fc <HAL_ADC_MspInit+0x188>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	4a36      	ldr	r2, [pc, #216]	; (80013fc <HAL_ADC_MspInit+0x188>)
 8001324:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132a:	4b34      	ldr	r3, [pc, #208]	; (80013fc <HAL_ADC_MspInit+0x188>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001332:	61bb      	str	r3, [r7, #24]
 8001334:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001336:	4b31      	ldr	r3, [pc, #196]	; (80013fc <HAL_ADC_MspInit+0x188>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	4a30      	ldr	r2, [pc, #192]	; (80013fc <HAL_ADC_MspInit+0x188>)
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001342:	4b2e      	ldr	r3, [pc, #184]	; (80013fc <HAL_ADC_MspInit+0x188>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PHOTORESISTOR_Pin;
 800134e:	2301      	movs	r3, #1
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001352:	230b      	movs	r3, #11
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PHOTORESISTOR_GPIO_Port, &GPIO_InitStruct);
 800135a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135e:	4619      	mov	r1, r3
 8001360:	4829      	ldr	r0, [pc, #164]	; (8001408 <HAL_ADC_MspInit+0x194>)
 8001362:	f004 fe33 	bl	8005fcc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2100      	movs	r1, #0
 800136a:	2012      	movs	r0, #18
 800136c:	f004 fbbf 	bl	8005aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001370:	2012      	movs	r0, #18
 8001372:	f004 fbd8 	bl	8005b26 <HAL_NVIC_EnableIRQ>
}
 8001376:	e039      	b.n	80013ec <HAL_ADC_MspInit+0x178>
  else if(adcHandle->Instance==ADC3)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a23      	ldr	r2, [pc, #140]	; (800140c <HAL_ADC_MspInit+0x198>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d134      	bne.n	80013ec <HAL_ADC_MspInit+0x178>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001382:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <HAL_ADC_MspInit+0x184>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	3301      	adds	r3, #1
 8001388:	4a1b      	ldr	r2, [pc, #108]	; (80013f8 <HAL_ADC_MspInit+0x184>)
 800138a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800138c:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <HAL_ADC_MspInit+0x184>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d10b      	bne.n	80013ac <HAL_ADC_MspInit+0x138>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <HAL_ADC_MspInit+0x188>)
 8001396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001398:	4a18      	ldr	r2, [pc, #96]	; (80013fc <HAL_ADC_MspInit+0x188>)
 800139a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800139e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a0:	4b16      	ldr	r3, [pc, #88]	; (80013fc <HAL_ADC_MspInit+0x188>)
 80013a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013a8:	613b      	str	r3, [r7, #16]
 80013aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <HAL_ADC_MspInit+0x188>)
 80013ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b0:	4a12      	ldr	r2, [pc, #72]	; (80013fc <HAL_ADC_MspInit+0x188>)
 80013b2:	f043 0304 	orr.w	r3, r3, #4
 80013b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b8:	4b10      	ldr	r3, [pc, #64]	; (80013fc <HAL_ADC_MspInit+0x188>)
 80013ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EC_READ_Pin|PH_READ_Pin;
 80013c4:	2306      	movs	r3, #6
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013c8:	230b      	movs	r3, #11
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d4:	4619      	mov	r1, r3
 80013d6:	480a      	ldr	r0, [pc, #40]	; (8001400 <HAL_ADC_MspInit+0x18c>)
 80013d8:	f004 fdf8 	bl	8005fcc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80013dc:	2200      	movs	r2, #0
 80013de:	2100      	movs	r1, #0
 80013e0:	202f      	movs	r0, #47	; 0x2f
 80013e2:	f004 fb84 	bl	8005aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80013e6:	202f      	movs	r0, #47	; 0x2f
 80013e8:	f004 fb9d 	bl	8005b26 <HAL_NVIC_EnableIRQ>
}
 80013ec:	bf00      	nop
 80013ee:	3738      	adds	r7, #56	; 0x38
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	50040000 	.word	0x50040000
 80013f8:	20000350 	.word	0x20000350
 80013fc:	40021000 	.word	0x40021000
 8001400:	48000800 	.word	0x48000800
 8001404:	50040100 	.word	0x50040100
 8001408:	48000400 	.word	0x48000400
 800140c:	50040200 	.word	0x50040200

08001410 <DHT11_Read>:
//float tCelsius = 0;
//float tFahrenheit = 0;
//float RH = 0;

uint8_t DHT11_Read (void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 8001416:	2300      	movs	r3, #0
 8001418:	71fb      	strb	r3, [r7, #7]
 800141a:	e06a      	b.n	80014f2 <DHT11_Read+0xe2>
  {
    pMillis = __HAL_TIM_GET_COUNTER(&htim2);
 800141c:	4b39      	ldr	r3, [pc, #228]	; (8001504 <DHT11_Read+0xf4>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001422:	4a39      	ldr	r2, [pc, #228]	; (8001508 <DHT11_Read+0xf8>)
 8001424:	6013      	str	r3, [r2, #0]
    cMillis = __HAL_TIM_GET_COUNTER(&htim2);
 8001426:	4b37      	ldr	r3, [pc, #220]	; (8001504 <DHT11_Read+0xf4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142c:	4a37      	ldr	r2, [pc, #220]	; (800150c <DHT11_Read+0xfc>)
 800142e:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)) && pMillis + 20000 > cMillis)
 8001430:	e004      	b.n	800143c <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = __HAL_TIM_GET_COUNTER(&htim2);
 8001432:	4b34      	ldr	r3, [pc, #208]	; (8001504 <DHT11_Read+0xf4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001438:	4a34      	ldr	r2, [pc, #208]	; (800150c <DHT11_Read+0xfc>)
 800143a:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)) && pMillis + 20000 > cMillis)
 800143c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001440:	4833      	ldr	r0, [pc, #204]	; (8001510 <DHT11_Read+0x100>)
 8001442:	f004 ff6d 	bl	8006320 <HAL_GPIO_ReadPin>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d108      	bne.n	800145e <DHT11_Read+0x4e>
 800144c:	4b2e      	ldr	r3, [pc, #184]	; (8001508 <DHT11_Read+0xf8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8001454:	3320      	adds	r3, #32
 8001456:	4a2d      	ldr	r2, [pc, #180]	; (800150c <DHT11_Read+0xfc>)
 8001458:	6812      	ldr	r2, [r2, #0]
 800145a:	4293      	cmp	r3, r2
 800145c:	d8e9      	bhi.n	8001432 <DHT11_Read+0x22>
    }
    delay_us (40);   // wait for 40 us
 800145e:	2028      	movs	r0, #40	; 0x28
 8001460:	f001 fe16 	bl	8003090 <delay_us>
    if (!(HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)))   // if the pin is low
 8001464:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001468:	4829      	ldr	r0, [pc, #164]	; (8001510 <DHT11_Read+0x100>)
 800146a:	f004 ff59 	bl	8006320 <HAL_GPIO_ReadPin>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d10e      	bne.n	8001492 <DHT11_Read+0x82>
      b&= ~(1<<(7-a));
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	f1c3 0307 	rsb	r3, r3, #7
 800147a:	2201      	movs	r2, #1
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	b25b      	sxtb	r3, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	b25a      	sxtb	r2, r3
 8001486:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800148a:	4013      	ands	r3, r2
 800148c:	b25b      	sxtb	r3, r3
 800148e:	71bb      	strb	r3, [r7, #6]
 8001490:	e00b      	b.n	80014aa <DHT11_Read+0x9a>
    else
      b|= (1<<(7-a));
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	f1c3 0307 	rsb	r3, r3, #7
 8001498:	2201      	movs	r2, #1
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	b25a      	sxtb	r2, r3
 80014a0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	b25b      	sxtb	r3, r3
 80014a8:	71bb      	strb	r3, [r7, #6]
    pMillis = __HAL_TIM_GET_COUNTER(&htim2);
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <DHT11_Read+0xf4>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b0:	4a15      	ldr	r2, [pc, #84]	; (8001508 <DHT11_Read+0xf8>)
 80014b2:	6013      	str	r3, [r2, #0]
    cMillis = __HAL_TIM_GET_COUNTER(&htim2);
 80014b4:	4b13      	ldr	r3, [pc, #76]	; (8001504 <DHT11_Read+0xf4>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ba:	4a14      	ldr	r2, [pc, #80]	; (800150c <DHT11_Read+0xfc>)
 80014bc:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)) && pMillis + 20000 > cMillis)
 80014be:	e004      	b.n	80014ca <DHT11_Read+0xba>
    {  // wait for the pin to go low
      cMillis = __HAL_TIM_GET_COUNTER(&htim2);
 80014c0:	4b10      	ldr	r3, [pc, #64]	; (8001504 <DHT11_Read+0xf4>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c6:	4a11      	ldr	r2, [pc, #68]	; (800150c <DHT11_Read+0xfc>)
 80014c8:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)) && pMillis + 20000 > cMillis)
 80014ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014ce:	4810      	ldr	r0, [pc, #64]	; (8001510 <DHT11_Read+0x100>)
 80014d0:	f004 ff26 	bl	8006320 <HAL_GPIO_ReadPin>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d008      	beq.n	80014ec <DHT11_Read+0xdc>
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <DHT11_Read+0xf8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80014e2:	3320      	adds	r3, #32
 80014e4:	4a09      	ldr	r2, [pc, #36]	; (800150c <DHT11_Read+0xfc>)
 80014e6:	6812      	ldr	r2, [r2, #0]
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d8e9      	bhi.n	80014c0 <DHT11_Read+0xb0>
  for (a=0;a<8;a++)
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	3301      	adds	r3, #1
 80014f0:	71fb      	strb	r3, [r7, #7]
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	2b07      	cmp	r3, #7
 80014f6:	d991      	bls.n	800141c <DHT11_Read+0xc>
    }
  }
  return b;
 80014f8:	79bb      	ldrb	r3, [r7, #6]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200008b4 	.word	0x200008b4
 8001508:	20000354 	.word	0x20000354
 800150c:	20000358 	.word	0x20000358
 8001510:	48000400 	.word	0x48000400

08001514 <DHT11_Start>:

uint8_t DHT11_Start (void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 800151e:	463b      	mov	r3, r7
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  GPIO_InitStructPrivate.Pin = DHT11_Pin;
 800152c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001530:	603b      	str	r3, [r7, #0]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8001532:	2301      	movs	r3, #1
 8001534:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStructPrivate); // set the pin as output
 800153e:	463b      	mov	r3, r7
 8001540:	4619      	mov	r1, r3
 8001542:	482e      	ldr	r0, [pc, #184]	; (80015fc <DHT11_Start+0xe8>)
 8001544:	f004 fd42 	bl	8005fcc <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_GPIO_Port, DHT11_Pin, 0);   // pull the pin low
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800154e:	482b      	ldr	r0, [pc, #172]	; (80015fc <DHT11_Start+0xe8>)
 8001550:	f004 fefe 	bl	8006350 <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 8001554:	2014      	movs	r0, #20
 8001556:	f002 fa29 	bl	80039ac <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_GPIO_Port, DHT11_Pin, 1);   // pull the pin high
 800155a:	2201      	movs	r2, #1
 800155c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001560:	4826      	ldr	r0, [pc, #152]	; (80015fc <DHT11_Start+0xe8>)
 8001562:	f004 fef5 	bl	8006350 <HAL_GPIO_WritePin>
  delay_us(30);   // wait for 30us
 8001566:	201e      	movs	r0, #30
 8001568:	f001 fd92 	bl	8003090 <delay_us>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 800156c:	2300      	movs	r3, #0
 800156e:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8001570:	2301      	movs	r3, #1
 8001572:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStructPrivate); // set the pin as input
 8001574:	463b      	mov	r3, r7
 8001576:	4619      	mov	r1, r3
 8001578:	4820      	ldr	r0, [pc, #128]	; (80015fc <DHT11_Start+0xe8>)
 800157a:	f004 fd27 	bl	8005fcc <HAL_GPIO_Init>
  delay_us (40);
 800157e:	2028      	movs	r0, #40	; 0x28
 8001580:	f001 fd86 	bl	8003090 <delay_us>
  if (!(HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)))
 8001584:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001588:	481c      	ldr	r0, [pc, #112]	; (80015fc <DHT11_Start+0xe8>)
 800158a:	f004 fec9 	bl	8006320 <HAL_GPIO_ReadPin>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d10c      	bne.n	80015ae <DHT11_Start+0x9a>
  {
	  delay_us (80);
 8001594:	2050      	movs	r0, #80	; 0x50
 8001596:	f001 fd7b 	bl	8003090 <delay_us>
    if ((HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin))) Response = 1;
 800159a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800159e:	4817      	ldr	r0, [pc, #92]	; (80015fc <DHT11_Start+0xe8>)
 80015a0:	f004 febe 	bl	8006320 <HAL_GPIO_ReadPin>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <DHT11_Start+0x9a>
 80015aa:	2301      	movs	r3, #1
 80015ac:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = __HAL_TIM_GET_COUNTER(&htim2);
 80015ae:	4b14      	ldr	r3, [pc, #80]	; (8001600 <DHT11_Start+0xec>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	4a13      	ldr	r2, [pc, #76]	; (8001604 <DHT11_Start+0xf0>)
 80015b6:	6013      	str	r3, [r2, #0]
  cMillis = __HAL_TIM_GET_COUNTER(&htim2);
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <DHT11_Start+0xec>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015be:	4a12      	ldr	r2, [pc, #72]	; (8001608 <DHT11_Start+0xf4>)
 80015c0:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)) && pMillis + 20000 > cMillis)
 80015c2:	e004      	b.n	80015ce <DHT11_Start+0xba>
  {
    cMillis = __HAL_TIM_GET_COUNTER(&htim2);
 80015c4:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <DHT11_Start+0xec>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ca:	4a0f      	ldr	r2, [pc, #60]	; (8001608 <DHT11_Start+0xf4>)
 80015cc:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)) && pMillis + 20000 > cMillis)
 80015ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015d2:	480a      	ldr	r0, [pc, #40]	; (80015fc <DHT11_Start+0xe8>)
 80015d4:	f004 fea4 	bl	8006320 <HAL_GPIO_ReadPin>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d008      	beq.n	80015f0 <DHT11_Start+0xdc>
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <DHT11_Start+0xf0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80015e6:	3320      	adds	r3, #32
 80015e8:	4a07      	ldr	r2, [pc, #28]	; (8001608 <DHT11_Start+0xf4>)
 80015ea:	6812      	ldr	r2, [r2, #0]
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d8e9      	bhi.n	80015c4 <DHT11_Start+0xb0>
  }
  return Response;
 80015f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	48000400 	.word	0x48000400
 8001600:	200008b4 	.word	0x200008b4
 8001604:	20000354 	.word	0x20000354
 8001608:	20000358 	.word	0x20000358

0800160c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001612:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <MX_DMA_Init+0x38>)
 8001614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001616:	4a0b      	ldr	r2, [pc, #44]	; (8001644 <MX_DMA_Init+0x38>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6493      	str	r3, [r2, #72]	; 0x48
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <MX_DMA_Init+0x38>)
 8001620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2100      	movs	r1, #0
 800162e:	200c      	movs	r0, #12
 8001630:	f004 fa5d 	bl	8005aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001634:	200c      	movs	r0, #12
 8001636:	f004 fa76 	bl	8005b26 <HAL_NVIC_EnableIRQ>

}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40021000 	.word	0x40021000

08001648 <ec_init>:
//}

uint32_t ecph_time_prev;

void ec_init ()
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	if (is_counting_ec == 0)
 800164c:	4b13      	ldr	r3, [pc, #76]	; (800169c <ec_init+0x54>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	f083 0301 	eor.w	r3, r3, #1
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00e      	beq.n	8001678 <ec_init+0x30>
	{
		ecph_time_prev = __HAL_TIM_GET_COUNTER(&htim2);
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <ec_init+0x58>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001660:	4a10      	ldr	r2, [pc, #64]	; (80016a4 <ec_init+0x5c>)
 8001662:	6013      	str	r3, [r2, #0]
		is_counting_ec = 1;
 8001664:	4b0d      	ldr	r3, [pc, #52]	; (800169c <ec_init+0x54>)
 8001666:	2201      	movs	r2, #1
 8001668:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(EC_WRITE_GPIO_Port, EC_WRITE_Pin, GPIO_PIN_SET); // Imposto il pin ECPower(PC0 -> A5) a livello alto: 3.3v
 800166a:	2201      	movs	r2, #1
 800166c:	2180      	movs	r1, #128	; 0x80
 800166e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001672:	f004 fe6d 	bl	8006350 <HAL_GPIO_WritePin>
		{
			is_counting_ec = 0;
			ec_initialized = 1;
		}
	}
}
 8001676:	e00e      	b.n	8001696 <ec_init+0x4e>
		if (__HAL_TIM_GET_COUNTER(&htim2) - ecph_time_prev >= 6000000)
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <ec_init+0x58>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <ec_init+0x5c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	4a08      	ldr	r2, [pc, #32]	; (80016a8 <ec_init+0x60>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d905      	bls.n	8001696 <ec_init+0x4e>
			is_counting_ec = 0;
 800168a:	4b04      	ldr	r3, [pc, #16]	; (800169c <ec_init+0x54>)
 800168c:	2200      	movs	r2, #0
 800168e:	701a      	strb	r2, [r3, #0]
			ec_initialized = 1;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <ec_init+0x64>)
 8001692:	2201      	movs	r2, #1
 8001694:	701a      	strb	r2, [r3, #0]
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000369 	.word	0x20000369
 80016a0:	200008b4 	.word	0x200008b4
 80016a4:	2000036c 	.word	0x2000036c
 80016a8:	005b8d7f 	.word	0x005b8d7f
 80016ac:	2000036a 	.word	0x2000036a

080016b0 <ph_read>:
	    EC = EC + 0.35;
	}
}

void ph_read (ADC_HandleTypeDef* hadc)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	set_ph_channel();
 80016b8:	f000 fa0e 	bl	8001ad8 <set_ph_channel>

	HAL_ADC_Start(hadc);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f002 fd33 	bl	8004128 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 100);
 80016c2:	2164      	movs	r1, #100	; 0x64
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f002 fe1d 	bl	8004304 <HAL_ADC_PollForConversion>
	adPH = HAL_ADC_GetValue(hadc);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f003 f85f 	bl	800478e <HAL_ADC_GetValue>
 80016d0:	ee07 0a90 	vmov	s15, r0
 80016d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016d8:	4baf      	ldr	r3, [pc, #700]	; (8001998 <ph_read+0x2e8>)
 80016da:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(hadc);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f002 fddc 	bl	800429c <HAL_ADC_Stop>

	VdropPH = (Vin * adPH) / 1024.0; //converto bit(adPH) in tensione(VdropPH) (precision_ADC = 2^10 -> = 1024)
 80016e4:	4bac      	ldr	r3, [pc, #688]	; (8001998 <ph_read+0x2e8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe ff2d 	bl	8000548 <__aeabi_f2d>
 80016ee:	a396      	add	r3, pc, #600	; (adr r3, 8001948 <ph_read+0x298>)
 80016f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f4:	f7fe ff80 	bl	80005f8 <__aeabi_dmul>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	4ba5      	ldr	r3, [pc, #660]	; (800199c <ph_read+0x2ec>)
 8001706:	f7ff f8a1 	bl	800084c <__aeabi_ddiv>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	f7ff fa69 	bl	8000be8 <__aeabi_d2f>
 8001716:	4603      	mov	r3, r0
 8001718:	4aa1      	ldr	r2, [pc, #644]	; (80019a0 <ph_read+0x2f0>)
 800171a:	6013      	str	r3, [r2, #0]

	if (VdropPH == 0)
 800171c:	4ba0      	ldr	r3, [pc, #640]	; (80019a0 <ph_read+0x2f0>)
 800171e:	edd3 7a00 	vldr	s15, [r3]
 8001722:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172a:	d103      	bne.n	8001734 <ph_read+0x84>
		PH = 0;
 800172c:	4b9d      	ldr	r3, [pc, #628]	; (80019a4 <ph_read+0x2f4>)
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]
	{
		PH = 14;
	}

//	ph_value_readed = 1;
}
 8001732:	e1b5      	b.n	8001aa0 <ph_read+0x3f0>
	else if (VdropPH > 0 && VdropPH <= ph_interval)
 8001734:	4b9a      	ldr	r3, [pc, #616]	; (80019a0 <ph_read+0x2f0>)
 8001736:	edd3 7a00 	vldr	s15, [r3]
 800173a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800173e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001742:	dd10      	ble.n	8001766 <ph_read+0xb6>
 8001744:	4b96      	ldr	r3, [pc, #600]	; (80019a0 <ph_read+0x2f0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fefd 	bl	8000548 <__aeabi_f2d>
 800174e:	a380      	add	r3, pc, #512	; (adr r3, 8001950 <ph_read+0x2a0>)
 8001750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001754:	f7ff f9cc 	bl	8000af0 <__aeabi_dcmple>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <ph_read+0xb6>
		PH = 1;
 800175e:	4b91      	ldr	r3, [pc, #580]	; (80019a4 <ph_read+0x2f4>)
 8001760:	2201      	movs	r2, #1
 8001762:	701a      	strb	r2, [r3, #0]
 8001764:	e19c      	b.n	8001aa0 <ph_read+0x3f0>
	else if (VdropPH > ph_interval && VdropPH <= ph_interval*2)
 8001766:	4b8e      	ldr	r3, [pc, #568]	; (80019a0 <ph_read+0x2f0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f7fe feec 	bl	8000548 <__aeabi_f2d>
 8001770:	a377      	add	r3, pc, #476	; (adr r3, 8001950 <ph_read+0x2a0>)
 8001772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001776:	f7ff f9cf 	bl	8000b18 <__aeabi_dcmpgt>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d010      	beq.n	80017a2 <ph_read+0xf2>
 8001780:	4b87      	ldr	r3, [pc, #540]	; (80019a0 <ph_read+0x2f0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fedf 	bl	8000548 <__aeabi_f2d>
 800178a:	a373      	add	r3, pc, #460	; (adr r3, 8001958 <ph_read+0x2a8>)
 800178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001790:	f7ff f9ae 	bl	8000af0 <__aeabi_dcmple>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <ph_read+0xf2>
		PH = 2;
 800179a:	4b82      	ldr	r3, [pc, #520]	; (80019a4 <ph_read+0x2f4>)
 800179c:	2202      	movs	r2, #2
 800179e:	701a      	strb	r2, [r3, #0]
 80017a0:	e17e      	b.n	8001aa0 <ph_read+0x3f0>
	else if (VdropPH > ph_interval*2 && VdropPH <= ph_interval*3)
 80017a2:	4b7f      	ldr	r3, [pc, #508]	; (80019a0 <ph_read+0x2f0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fece 	bl	8000548 <__aeabi_f2d>
 80017ac:	a36a      	add	r3, pc, #424	; (adr r3, 8001958 <ph_read+0x2a8>)
 80017ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b2:	f7ff f9b1 	bl	8000b18 <__aeabi_dcmpgt>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d010      	beq.n	80017de <ph_read+0x12e>
 80017bc:	4b78      	ldr	r3, [pc, #480]	; (80019a0 <ph_read+0x2f0>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fec1 	bl	8000548 <__aeabi_f2d>
 80017c6:	a366      	add	r3, pc, #408	; (adr r3, 8001960 <ph_read+0x2b0>)
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	f7ff f990 	bl	8000af0 <__aeabi_dcmple>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <ph_read+0x12e>
		PH = 3;
 80017d6:	4b73      	ldr	r3, [pc, #460]	; (80019a4 <ph_read+0x2f4>)
 80017d8:	2203      	movs	r2, #3
 80017da:	701a      	strb	r2, [r3, #0]
 80017dc:	e160      	b.n	8001aa0 <ph_read+0x3f0>
	else if (VdropPH > ph_interval*3 && VdropPH <= ph_interval*4)
 80017de:	4b70      	ldr	r3, [pc, #448]	; (80019a0 <ph_read+0x2f0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe feb0 	bl	8000548 <__aeabi_f2d>
 80017e8:	a35d      	add	r3, pc, #372	; (adr r3, 8001960 <ph_read+0x2b0>)
 80017ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ee:	f7ff f993 	bl	8000b18 <__aeabi_dcmpgt>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d010      	beq.n	800181a <ph_read+0x16a>
 80017f8:	4b69      	ldr	r3, [pc, #420]	; (80019a0 <ph_read+0x2f0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7fe fea3 	bl	8000548 <__aeabi_f2d>
 8001802:	a359      	add	r3, pc, #356	; (adr r3, 8001968 <ph_read+0x2b8>)
 8001804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001808:	f7ff f972 	bl	8000af0 <__aeabi_dcmple>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <ph_read+0x16a>
		PH = 4;
 8001812:	4b64      	ldr	r3, [pc, #400]	; (80019a4 <ph_read+0x2f4>)
 8001814:	2204      	movs	r2, #4
 8001816:	701a      	strb	r2, [r3, #0]
 8001818:	e142      	b.n	8001aa0 <ph_read+0x3f0>
	else if (VdropPH > ph_interval*4 && VdropPH <= ph_interval*5)
 800181a:	4b61      	ldr	r3, [pc, #388]	; (80019a0 <ph_read+0x2f0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe fe92 	bl	8000548 <__aeabi_f2d>
 8001824:	a350      	add	r3, pc, #320	; (adr r3, 8001968 <ph_read+0x2b8>)
 8001826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182a:	f7ff f975 	bl	8000b18 <__aeabi_dcmpgt>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d010      	beq.n	8001856 <ph_read+0x1a6>
 8001834:	4b5a      	ldr	r3, [pc, #360]	; (80019a0 <ph_read+0x2f0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fe85 	bl	8000548 <__aeabi_f2d>
 800183e:	a34c      	add	r3, pc, #304	; (adr r3, 8001970 <ph_read+0x2c0>)
 8001840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001844:	f7ff f954 	bl	8000af0 <__aeabi_dcmple>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <ph_read+0x1a6>
		PH = 5;
 800184e:	4b55      	ldr	r3, [pc, #340]	; (80019a4 <ph_read+0x2f4>)
 8001850:	2205      	movs	r2, #5
 8001852:	701a      	strb	r2, [r3, #0]
 8001854:	e124      	b.n	8001aa0 <ph_read+0x3f0>
	else if (VdropPH > ph_interval*5 && VdropPH <= ph_interval*6)
 8001856:	4b52      	ldr	r3, [pc, #328]	; (80019a0 <ph_read+0x2f0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f7fe fe74 	bl	8000548 <__aeabi_f2d>
 8001860:	a343      	add	r3, pc, #268	; (adr r3, 8001970 <ph_read+0x2c0>)
 8001862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001866:	f7ff f957 	bl	8000b18 <__aeabi_dcmpgt>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d010      	beq.n	8001892 <ph_read+0x1e2>
 8001870:	4b4b      	ldr	r3, [pc, #300]	; (80019a0 <ph_read+0x2f0>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fe67 	bl	8000548 <__aeabi_f2d>
 800187a:	a33f      	add	r3, pc, #252	; (adr r3, 8001978 <ph_read+0x2c8>)
 800187c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001880:	f7ff f936 	bl	8000af0 <__aeabi_dcmple>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <ph_read+0x1e2>
		PH = 6;
 800188a:	4b46      	ldr	r3, [pc, #280]	; (80019a4 <ph_read+0x2f4>)
 800188c:	2206      	movs	r2, #6
 800188e:	701a      	strb	r2, [r3, #0]
 8001890:	e106      	b.n	8001aa0 <ph_read+0x3f0>
	else if (VdropPH > ph_interval*6 && VdropPH <= ph_interval*7)
 8001892:	4b43      	ldr	r3, [pc, #268]	; (80019a0 <ph_read+0x2f0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fe56 	bl	8000548 <__aeabi_f2d>
 800189c:	a336      	add	r3, pc, #216	; (adr r3, 8001978 <ph_read+0x2c8>)
 800189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a2:	f7ff f939 	bl	8000b18 <__aeabi_dcmpgt>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d010      	beq.n	80018ce <ph_read+0x21e>
 80018ac:	4b3c      	ldr	r3, [pc, #240]	; (80019a0 <ph_read+0x2f0>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fe49 	bl	8000548 <__aeabi_f2d>
 80018b6:	a332      	add	r3, pc, #200	; (adr r3, 8001980 <ph_read+0x2d0>)
 80018b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018bc:	f7ff f918 	bl	8000af0 <__aeabi_dcmple>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <ph_read+0x21e>
		PH = 7;
 80018c6:	4b37      	ldr	r3, [pc, #220]	; (80019a4 <ph_read+0x2f4>)
 80018c8:	2207      	movs	r2, #7
 80018ca:	701a      	strb	r2, [r3, #0]
 80018cc:	e0e8      	b.n	8001aa0 <ph_read+0x3f0>
	else if (VdropPH > ph_interval*7 && VdropPH <= ph_interval*8)
 80018ce:	4b34      	ldr	r3, [pc, #208]	; (80019a0 <ph_read+0x2f0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fe38 	bl	8000548 <__aeabi_f2d>
 80018d8:	a329      	add	r3, pc, #164	; (adr r3, 8001980 <ph_read+0x2d0>)
 80018da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018de:	f7ff f91b 	bl	8000b18 <__aeabi_dcmpgt>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d010      	beq.n	800190a <ph_read+0x25a>
 80018e8:	4b2d      	ldr	r3, [pc, #180]	; (80019a0 <ph_read+0x2f0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe fe2b 	bl	8000548 <__aeabi_f2d>
 80018f2:	a325      	add	r3, pc, #148	; (adr r3, 8001988 <ph_read+0x2d8>)
 80018f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f8:	f7ff f8fa 	bl	8000af0 <__aeabi_dcmple>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <ph_read+0x25a>
		PH = 8;
 8001902:	4b28      	ldr	r3, [pc, #160]	; (80019a4 <ph_read+0x2f4>)
 8001904:	2208      	movs	r2, #8
 8001906:	701a      	strb	r2, [r3, #0]
 8001908:	e0ca      	b.n	8001aa0 <ph_read+0x3f0>
	else if (VdropPH > ph_interval*8 && VdropPH <= ph_interval*9)
 800190a:	4b25      	ldr	r3, [pc, #148]	; (80019a0 <ph_read+0x2f0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fe1a 	bl	8000548 <__aeabi_f2d>
 8001914:	a31c      	add	r3, pc, #112	; (adr r3, 8001988 <ph_read+0x2d8>)
 8001916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191a:	f7ff f8fd 	bl	8000b18 <__aeabi_dcmpgt>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d041      	beq.n	80019a8 <ph_read+0x2f8>
 8001924:	4b1e      	ldr	r3, [pc, #120]	; (80019a0 <ph_read+0x2f0>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f7fe fe0d 	bl	8000548 <__aeabi_f2d>
 800192e:	a318      	add	r3, pc, #96	; (adr r3, 8001990 <ph_read+0x2e0>)
 8001930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001934:	f7ff f8dc 	bl	8000af0 <__aeabi_dcmple>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d034      	beq.n	80019a8 <ph_read+0x2f8>
		PH = 9;
 800193e:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <ph_read+0x2f4>)
 8001940:	2209      	movs	r2, #9
 8001942:	701a      	strb	r2, [r3, #0]
 8001944:	e0ac      	b.n	8001aa0 <ph_read+0x3f0>
 8001946:	bf00      	nop
 8001948:	66666666 	.word	0x66666666
 800194c:	400a6666 	.word	0x400a6666
 8001950:	e7d566cf 	.word	0xe7d566cf
 8001954:	3fce2b6a 	.word	0x3fce2b6a
 8001958:	e7d566cf 	.word	0xe7d566cf
 800195c:	3fde2b6a 	.word	0x3fde2b6a
 8001960:	2de00d1b 	.word	0x2de00d1b
 8001964:	3fe6a090 	.word	0x3fe6a090
 8001968:	e7d566cf 	.word	0xe7d566cf
 800196c:	3fee2b6a 	.word	0x3fee2b6a
 8001970:	d0e56041 	.word	0xd0e56041
 8001974:	3ff2db22 	.word	0x3ff2db22
 8001978:	2de00d1b 	.word	0x2de00d1b
 800197c:	3ff6a090 	.word	0x3ff6a090
 8001980:	8adab9f5 	.word	0x8adab9f5
 8001984:	3ffa65fd 	.word	0x3ffa65fd
 8001988:	e7d566cf 	.word	0xe7d566cf
 800198c:	3ffe2b6a 	.word	0x3ffe2b6a
 8001990:	226809d4 	.word	0x226809d4
 8001994:	4000f86c 	.word	0x4000f86c
 8001998:	20000360 	.word	0x20000360
 800199c:	40900000 	.word	0x40900000
 80019a0:	20000364 	.word	0x20000364
 80019a4:	20000368 	.word	0x20000368
	else if (VdropPH > ph_interval*9 && VdropPH <= ph_interval*10)
 80019a8:	4b49      	ldr	r3, [pc, #292]	; (8001ad0 <ph_read+0x420>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fdcb 	bl	8000548 <__aeabi_f2d>
 80019b2:	a33d      	add	r3, pc, #244	; (adr r3, 8001aa8 <ph_read+0x3f8>)
 80019b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b8:	f7ff f8ae 	bl	8000b18 <__aeabi_dcmpgt>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d010      	beq.n	80019e4 <ph_read+0x334>
 80019c2:	4b43      	ldr	r3, [pc, #268]	; (8001ad0 <ph_read+0x420>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fdbe 	bl	8000548 <__aeabi_f2d>
 80019cc:	a338      	add	r3, pc, #224	; (adr r3, 8001ab0 <ph_read+0x400>)
 80019ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d2:	f7ff f88d 	bl	8000af0 <__aeabi_dcmple>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <ph_read+0x334>
		PH = 10;
 80019dc:	4b3d      	ldr	r3, [pc, #244]	; (8001ad4 <ph_read+0x424>)
 80019de:	220a      	movs	r2, #10
 80019e0:	701a      	strb	r2, [r3, #0]
 80019e2:	e05d      	b.n	8001aa0 <ph_read+0x3f0>
	else if (VdropPH > ph_interval*10 && VdropPH <= ph_interval*11)
 80019e4:	4b3a      	ldr	r3, [pc, #232]	; (8001ad0 <ph_read+0x420>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fdad 	bl	8000548 <__aeabi_f2d>
 80019ee:	a330      	add	r3, pc, #192	; (adr r3, 8001ab0 <ph_read+0x400>)
 80019f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f4:	f7ff f890 	bl	8000b18 <__aeabi_dcmpgt>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d010      	beq.n	8001a20 <ph_read+0x370>
 80019fe:	4b34      	ldr	r3, [pc, #208]	; (8001ad0 <ph_read+0x420>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe fda0 	bl	8000548 <__aeabi_f2d>
 8001a08:	a32b      	add	r3, pc, #172	; (adr r3, 8001ab8 <ph_read+0x408>)
 8001a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0e:	f7ff f86f 	bl	8000af0 <__aeabi_dcmple>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <ph_read+0x370>
		PH = 11;
 8001a18:	4b2e      	ldr	r3, [pc, #184]	; (8001ad4 <ph_read+0x424>)
 8001a1a:	220b      	movs	r2, #11
 8001a1c:	701a      	strb	r2, [r3, #0]
 8001a1e:	e03f      	b.n	8001aa0 <ph_read+0x3f0>
	else if (VdropPH > ph_interval*11 && VdropPH <= ph_interval*12)
 8001a20:	4b2b      	ldr	r3, [pc, #172]	; (8001ad0 <ph_read+0x420>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7fe fd8f 	bl	8000548 <__aeabi_f2d>
 8001a2a:	a323      	add	r3, pc, #140	; (adr r3, 8001ab8 <ph_read+0x408>)
 8001a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a30:	f7ff f872 	bl	8000b18 <__aeabi_dcmpgt>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d010      	beq.n	8001a5c <ph_read+0x3ac>
 8001a3a:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <ph_read+0x420>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fd82 	bl	8000548 <__aeabi_f2d>
 8001a44:	a31e      	add	r3, pc, #120	; (adr r3, 8001ac0 <ph_read+0x410>)
 8001a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4a:	f7ff f851 	bl	8000af0 <__aeabi_dcmple>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <ph_read+0x3ac>
		PH = 12;
 8001a54:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <ph_read+0x424>)
 8001a56:	220c      	movs	r2, #12
 8001a58:	701a      	strb	r2, [r3, #0]
 8001a5a:	e021      	b.n	8001aa0 <ph_read+0x3f0>
	else if (VdropPH > ph_interval*12 && VdropPH <= ph_interval*13)
 8001a5c:	4b1c      	ldr	r3, [pc, #112]	; (8001ad0 <ph_read+0x420>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7fe fd71 	bl	8000548 <__aeabi_f2d>
 8001a66:	a316      	add	r3, pc, #88	; (adr r3, 8001ac0 <ph_read+0x410>)
 8001a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6c:	f7ff f854 	bl	8000b18 <__aeabi_dcmpgt>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d010      	beq.n	8001a98 <ph_read+0x3e8>
 8001a76:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <ph_read+0x420>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fd64 	bl	8000548 <__aeabi_f2d>
 8001a80:	a311      	add	r3, pc, #68	; (adr r3, 8001ac8 <ph_read+0x418>)
 8001a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a86:	f7ff f833 	bl	8000af0 <__aeabi_dcmple>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <ph_read+0x3e8>
		PH = 13;
 8001a90:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <ph_read+0x424>)
 8001a92:	220d      	movs	r2, #13
 8001a94:	701a      	strb	r2, [r3, #0]
 8001a96:	e003      	b.n	8001aa0 <ph_read+0x3f0>
		PH = 14;
 8001a98:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <ph_read+0x424>)
 8001a9a:	220e      	movs	r2, #14
 8001a9c:	701a      	strb	r2, [r3, #0]
}
 8001a9e:	e7ff      	b.n	8001aa0 <ph_read+0x3f0>
 8001aa0:	bf00      	nop
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	226809d4 	.word	0x226809d4
 8001aac:	4000f86c 	.word	0x4000f86c
 8001ab0:	d0e56041 	.word	0xd0e56041
 8001ab4:	4002db22 	.word	0x4002db22
 8001ab8:	7f62b6ae 	.word	0x7f62b6ae
 8001abc:	4004bdd9 	.word	0x4004bdd9
 8001ac0:	2de00d1b 	.word	0x2de00d1b
 8001ac4:	4006a090 	.word	0x4006a090
 8001ac8:	dc5d6388 	.word	0xdc5d6388
 8001acc:	40088346 	.word	0x40088346
 8001ad0:	20000364 	.word	0x20000364
 8001ad4:	20000368 	.word	0x20000368

08001ad8 <set_ph_channel>:
  /* USER CODE END ADC3_Init 2 */

}

void set_ph_channel()
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ade:	463b      	mov	r3, r7
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
 8001aec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001aee:	4b29      	ldr	r3, [pc, #164]	; (8001b94 <set_ph_channel+0xbc>)
 8001af0:	4a29      	ldr	r2, [pc, #164]	; (8001b98 <set_ph_channel+0xc0>)
 8001af2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001af4:	4b27      	ldr	r3, [pc, #156]	; (8001b94 <set_ph_channel+0xbc>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 8001afa:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <set_ph_channel+0xbc>)
 8001afc:	2208      	movs	r2, #8
 8001afe:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b00:	4b24      	ldr	r3, [pc, #144]	; (8001b94 <set_ph_channel+0xbc>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b06:	4b23      	ldr	r3, [pc, #140]	; (8001b94 <set_ph_channel+0xbc>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001b0c:	4b21      	ldr	r3, [pc, #132]	; (8001b94 <set_ph_channel+0xbc>)
 8001b0e:	2208      	movs	r2, #8
 8001b10:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001b12:	4b20      	ldr	r3, [pc, #128]	; (8001b94 <set_ph_channel+0xbc>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001b18:	4b1e      	ldr	r3, [pc, #120]	; (8001b94 <set_ph_channel+0xbc>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001b1e:	4b1d      	ldr	r3, [pc, #116]	; (8001b94 <set_ph_channel+0xbc>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001b24:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <set_ph_channel+0xbc>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b2c:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <set_ph_channel+0xbc>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b32:	4b18      	ldr	r3, [pc, #96]	; (8001b94 <set_ph_channel+0xbc>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001b38:	4b16      	ldr	r3, [pc, #88]	; (8001b94 <set_ph_channel+0xbc>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b40:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <set_ph_channel+0xbc>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001b46:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <set_ph_channel+0xbc>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001b4e:	4811      	ldr	r0, [pc, #68]	; (8001b94 <set_ph_channel+0xbc>)
 8001b50:	f002 f994 	bl	8003e7c <HAL_ADC_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <set_ph_channel+0x86>
  {
    Error_Handler();
 8001b5a:	f000 fbff 	bl	800235c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = PH_CHANNEL;
 8001b5e:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <set_ph_channel+0xc4>)
 8001b60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b62:	2306      	movs	r3, #6
 8001b64:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b6a:	237f      	movs	r3, #127	; 0x7f
 8001b6c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b6e:	2304      	movs	r3, #4
 8001b70:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001b76:	463b      	mov	r3, r7
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4806      	ldr	r0, [pc, #24]	; (8001b94 <set_ph_channel+0xbc>)
 8001b7c:	f003 f842 	bl	8004c04 <HAL_ADC_ConfigChannel>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <set_ph_channel+0xb2>
  {
    Error_Handler();
 8001b86:	f000 fbe9 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001b8a:	bf00      	nop
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200002ec 	.word	0x200002ec
 8001b98:	50040200 	.word	0x50040200
 8001b9c:	0c900008 	.word	0x0c900008

08001ba0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	; 0x28
 8001ba4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
 8001bb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb6:	4b55      	ldr	r3, [pc, #340]	; (8001d0c <MX_GPIO_Init+0x16c>)
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bba:	4a54      	ldr	r2, [pc, #336]	; (8001d0c <MX_GPIO_Init+0x16c>)
 8001bbc:	f043 0304 	orr.w	r3, r3, #4
 8001bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc2:	4b52      	ldr	r3, [pc, #328]	; (8001d0c <MX_GPIO_Init+0x16c>)
 8001bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bce:	4b4f      	ldr	r3, [pc, #316]	; (8001d0c <MX_GPIO_Init+0x16c>)
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd2:	4a4e      	ldr	r2, [pc, #312]	; (8001d0c <MX_GPIO_Init+0x16c>)
 8001bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bda:	4b4c      	ldr	r3, [pc, #304]	; (8001d0c <MX_GPIO_Init+0x16c>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be6:	4b49      	ldr	r3, [pc, #292]	; (8001d0c <MX_GPIO_Init+0x16c>)
 8001be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bea:	4a48      	ldr	r2, [pc, #288]	; (8001d0c <MX_GPIO_Init+0x16c>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf2:	4b46      	ldr	r3, [pc, #280]	; (8001d0c <MX_GPIO_Init+0x16c>)
 8001bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	4b43      	ldr	r3, [pc, #268]	; (8001d0c <MX_GPIO_Init+0x16c>)
 8001c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c02:	4a42      	ldr	r2, [pc, #264]	; (8001d0c <MX_GPIO_Init+0x16c>)
 8001c04:	f043 0302 	orr.w	r3, r3, #2
 8001c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c0a:	4b40      	ldr	r3, [pc, #256]	; (8001d0c <MX_GPIO_Init+0x16c>)
 8001c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c16:	4b3d      	ldr	r3, [pc, #244]	; (8001d0c <MX_GPIO_Init+0x16c>)
 8001c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1a:	4a3c      	ldr	r2, [pc, #240]	; (8001d0c <MX_GPIO_Init+0x16c>)
 8001c1c:	f043 0308 	orr.w	r3, r3, #8
 8001c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c22:	4b3a      	ldr	r3, [pc, #232]	; (8001d0c <MX_GPIO_Init+0x16c>)
 8001c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	603b      	str	r3, [r7, #0]
 8001c2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|EC_WRITE_Pin|STEP_IN3_Pin, GPIO_PIN_RESET);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f44f 5185 	mov.w	r1, #4256	; 0x10a0
 8001c34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c38:	f004 fb8a 	bl	8006350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MIX_PUMP_Pin|STEP_IN4_Pin|STEP_IN2_Pin|UNLOAD_WATER_PUMP_Pin
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f24a 21c4 	movw	r1, #41668	; 0xa2c4
 8001c42:	4833      	ldr	r0, [pc, #204]	; (8001d10 <MX_GPIO_Init+0x170>)
 8001c44:	f004 fb84 	bl	8006350 <HAL_GPIO_WritePin>
                          |LOAD_WATER_PUMP_Pin|DHT11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEP_IN1_GPIO_Port, STEP_IN1_Pin, GPIO_PIN_RESET);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2104      	movs	r1, #4
 8001c4c:	4831      	ldr	r0, [pc, #196]	; (8001d14 <MX_GPIO_Init+0x174>)
 8001c4e:	f004 fb7f 	bl	8006350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c58:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4619      	mov	r1, r3
 8001c68:	482b      	ldr	r0, [pc, #172]	; (8001d18 <MX_GPIO_Init+0x178>)
 8001c6a:	f004 f9af 	bl	8005fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|EC_WRITE_Pin|STEP_IN3_Pin;
 8001c6e:	f44f 5385 	mov.w	r3, #4256	; 0x10a0
 8001c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c74:	2301      	movs	r3, #1
 8001c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	4619      	mov	r1, r3
 8001c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c8a:	f004 f99f 	bl	8005fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = MIX_PUMP_Pin|STEP_IN4_Pin|STEP_IN2_Pin|UNLOAD_WATER_PUMP_Pin
 8001c8e:	f24a 23c4 	movw	r3, #41668	; 0xa2c4
 8001c92:	617b      	str	r3, [r7, #20]
                          |LOAD_WATER_PUMP_Pin|DHT11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c94:	2301      	movs	r3, #1
 8001c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	481a      	ldr	r0, [pc, #104]	; (8001d10 <MX_GPIO_Init+0x170>)
 8001ca8:	f004 f990 	bl	8005fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001cb0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001cb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4815      	ldr	r0, [pc, #84]	; (8001d18 <MX_GPIO_Init+0x178>)
 8001cc2:	f004 f983 	bl	8005fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STEP_IN1_Pin;
 8001cc6:	2304      	movs	r3, #4
 8001cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STEP_IN1_GPIO_Port, &GPIO_InitStruct);
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	4619      	mov	r1, r3
 8001cdc:	480d      	ldr	r0, [pc, #52]	; (8001d14 <MX_GPIO_Init+0x174>)
 8001cde:	f004 f975 	bl	8005fcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	2017      	movs	r0, #23
 8001ce8:	f003 ff01 	bl	8005aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001cec:	2017      	movs	r0, #23
 8001cee:	f003 ff1a 	bl	8005b26 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	2028      	movs	r0, #40	; 0x28
 8001cf8:	f003 fef9 	bl	8005aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cfc:	2028      	movs	r0, #40	; 0x28
 8001cfe:	f003 ff12 	bl	8005b26 <HAL_NVIC_EnableIRQ>

}
 8001d02:	bf00      	nop
 8001d04:	3728      	adds	r7, #40	; 0x28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	48000400 	.word	0x48000400
 8001d14:	48000c00 	.word	0x48000c00
 8001d18:	48000800 	.word	0x48000800
 8001d1c:	00000000 	.word	0x00000000

08001d20 <readNaturalLight>:
// Violet 400nm light #8300b5 ---> (131, 0, 181)
// Red 680nm light ---> (255, 0, 0)
// whiteBlue 460nm light #007bff --> (0, 123, 255)


void readNaturalLight(){
 8001d20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d24:	ed2d 8b02 	vpush	{d8}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0

	int rRef = 10000;
 8001d2c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001d30:	607b      	str	r3, [r7, #4]

	HAL_ADC_Start_IT(&hadc2);
 8001d32:	4849      	ldr	r0, [pc, #292]	; (8001e58 <readNaturalLight+0x138>)
 8001d34:	f002 fbbe 	bl	80044b4 <HAL_ADC_Start_IT>

//	volatage_value = get_lights_voltage_value();

	voltage_value = voltage_value * voltageSource/1024;
 8001d38:	4b48      	ldr	r3, [pc, #288]	; (8001e5c <readNaturalLight+0x13c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fc03 	bl	8000548 <__aeabi_f2d>
 8001d42:	a343      	add	r3, pc, #268	; (adr r3, 8001e50 <readNaturalLight+0x130>)
 8001d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d48:	f7fe fc56 	bl	80005f8 <__aeabi_dmul>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4610      	mov	r0, r2
 8001d52:	4619      	mov	r1, r3
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	4b41      	ldr	r3, [pc, #260]	; (8001e60 <readNaturalLight+0x140>)
 8001d5a:	f7fe fd77 	bl	800084c <__aeabi_ddiv>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4610      	mov	r0, r2
 8001d64:	4619      	mov	r1, r3
 8001d66:	f7fe ff3f 	bl	8000be8 <__aeabi_d2f>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	4a3b      	ldr	r2, [pc, #236]	; (8001e5c <readNaturalLight+0x13c>)
 8001d6e:	6013      	str	r3, [r2, #0]
	float lightValue = B * pow((voltageSource/voltage_value - 1)  * rRef, m);
 8001d70:	4b3c      	ldr	r3, [pc, #240]	; (8001e64 <readNaturalLight+0x144>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe fbe7 	bl	8000548 <__aeabi_f2d>
 8001d7a:	4604      	mov	r4, r0
 8001d7c:	460d      	mov	r5, r1
 8001d7e:	4b37      	ldr	r3, [pc, #220]	; (8001e5c <readNaturalLight+0x13c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fbe0 	bl	8000548 <__aeabi_f2d>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	a130      	add	r1, pc, #192	; (adr r1, 8001e50 <readNaturalLight+0x130>)
 8001d8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d92:	f7fe fd5b 	bl	800084c <__aeabi_ddiv>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	4b31      	ldr	r3, [pc, #196]	; (8001e68 <readNaturalLight+0x148>)
 8001da4:	f7fe fa70 	bl	8000288 <__aeabi_dsub>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4690      	mov	r8, r2
 8001dae:	4699      	mov	r9, r3
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7fe fbb7 	bl	8000524 <__aeabi_i2d>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	4640      	mov	r0, r8
 8001dbc:	4649      	mov	r1, r9
 8001dbe:	f7fe fc1b 	bl	80005f8 <__aeabi_dmul>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	ec43 2b18 	vmov	d8, r2, r3
 8001dca:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <readNaturalLight+0x14c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe fbba 	bl	8000548 <__aeabi_f2d>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	ec43 2b11 	vmov	d1, r2, r3
 8001ddc:	eeb0 0a48 	vmov.f32	s0, s16
 8001de0:	eef0 0a68 	vmov.f32	s1, s17
 8001de4:	f00c fe6c 	bl	800eac0 <pow>
 8001de8:	ec53 2b10 	vmov	r2, r3, d0
 8001dec:	4620      	mov	r0, r4
 8001dee:	4629      	mov	r1, r5
 8001df0:	f7fe fc02 	bl	80005f8 <__aeabi_dmul>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4610      	mov	r0, r2
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f7fe fef4 	bl	8000be8 <__aeabi_d2f>
 8001e00:	4603      	mov	r3, r0
 8001e02:	603b      	str	r3, [r7, #0]

	if (lightValue < LOW_LIGHT_THREESHOLD){
 8001e04:	edd7 7a00 	vldr	s15, [r7]
 8001e08:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001e70 <readNaturalLight+0x150>
 8001e0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e14:	d503      	bpl.n	8001e1e <readNaturalLight+0xfe>
			naturalLightLevel = Low;
 8001e16:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <readNaturalLight+0x154>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]
		}
	else {
		naturalLightLevel = Med;
	}

}
 8001e1c:	e00f      	b.n	8001e3e <readNaturalLight+0x11e>
	else if (lightValue > HIGH_LIGHT_THREESHOLD){
 8001e1e:	edd7 7a00 	vldr	s15, [r7]
 8001e22:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001e78 <readNaturalLight+0x158>
 8001e26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2e:	dd03      	ble.n	8001e38 <readNaturalLight+0x118>
		naturalLightLevel = High;
 8001e30:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <readNaturalLight+0x154>)
 8001e32:	2202      	movs	r2, #2
 8001e34:	701a      	strb	r2, [r3, #0]
}
 8001e36:	e002      	b.n	8001e3e <readNaturalLight+0x11e>
		naturalLightLevel = Med;
 8001e38:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <readNaturalLight+0x154>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	701a      	strb	r2, [r3, #0]
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	ecbd 8b02 	vpop	{d8}
 8001e48:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e4c:	f3af 8000 	nop.w
 8001e50:	66666666 	.word	0x66666666
 8001e54:	400a6666 	.word	0x400a6666
 8001e58:	20000288 	.word	0x20000288
 8001e5c:	200003d4 	.word	0x200003d4
 8001e60:	40900000 	.word	0x40900000
 8001e64:	20000018 	.word	0x20000018
 8001e68:	3ff00000 	.word	0x3ff00000
 8001e6c:	2000001c 	.word	0x2000001c
 8001e70:	42c80000 	.word	0x42c80000
 8001e74:	20000370 	.word	0x20000370
 8001e78:	43480000 	.word	0x43480000

08001e7c <setLed>:

/*
 * With SetLed function we store data G,R,B data for each LED (row)
 */

void setLed (int LEDnum, int color[3]){
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]

	LED_Data[LEDnum][0]= LEDnum;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	b2d9      	uxtb	r1, r3
 8001e8a:	4a13      	ldr	r2, [pc, #76]	; (8001ed8 <setLed+0x5c>)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1]= color[1];
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	3304      	adds	r3, #4
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	b2d9      	uxtb	r1, r3
 8001e9a:	4a0f      	ldr	r2, [pc, #60]	; (8001ed8 <setLed+0x5c>)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	460a      	mov	r2, r1
 8001ea4:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2]= color[0];
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	b2d9      	uxtb	r1, r3
 8001eac:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <setLed+0x5c>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	460a      	mov	r2, r1
 8001eb6:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3]= color[2];
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	3308      	adds	r3, #8
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	b2d9      	uxtb	r1, r3
 8001ec0:	4a05      	ldr	r2, [pc, #20]	; (8001ed8 <setLed+0x5c>)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	460a      	mov	r2, r1
 8001eca:	70da      	strb	r2, [r3, #3]

}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	20000374 	.word	0x20000374
 8001edc:	00000000 	.word	0x00000000

08001ee0 <setBrightness>:
/*
 * With SetBrightness function we store data B,G,R,B data for each LED (row)
 */

void setBrightness (int brightness)
{
 8001ee0:	b5b0      	push	{r4, r5, r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
	if (USE_BRIGHTNESS){
		if(brightness > 45) brightness = 45; //If call value exceed limits
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b2d      	cmp	r3, #45	; 0x2d
 8001eec:	dd01      	ble.n	8001ef2 <setBrightness+0x12>
 8001eee:	232d      	movs	r3, #45	; 0x2d
 8001ef0:	607b      	str	r3, [r7, #4]
		for (int i =0; i < LEDUsed; i++){
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	e060      	b.n	8001fba <setBrightness+0xda>
			LED_Mode[i][0] = LED_Data[i][0];
 8001ef8:	4a37      	ldr	r2, [pc, #220]	; (8001fd8 <setBrightness+0xf8>)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8001f00:	4a36      	ldr	r2, [pc, #216]	; (8001fdc <setBrightness+0xfc>)
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
			for(int j=1; j<4; j++){
 8001f08:	2301      	movs	r3, #1
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	e04f      	b.n	8001fae <setBrightness+0xce>
				float angle = 90-brightness;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8001f14:	ee07 3a90 	vmov	s15, r3
 8001f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f1c:	edc7 7a03 	vstr	s15, [r7, #12]
				angle = angle *PI/180;
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f7fe fb11 	bl	8000548 <__aeabi_f2d>
 8001f26:	a32a      	add	r3, pc, #168	; (adr r3, 8001fd0 <setBrightness+0xf0>)
 8001f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2c:	f7fe fb64 	bl	80005f8 <__aeabi_dmul>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	4610      	mov	r0, r2
 8001f36:	4619      	mov	r1, r3
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	4b28      	ldr	r3, [pc, #160]	; (8001fe0 <setBrightness+0x100>)
 8001f3e:	f7fe fc85 	bl	800084c <__aeabi_ddiv>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4610      	mov	r0, r2
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f7fe fe4d 	bl	8000be8 <__aeabi_d2f>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	60fb      	str	r3, [r7, #12]
//				angle = -0.02 * angle + 1.0;
				LED_Mode[i][j]=(LED_Data[i][j])/(tan(angle)); //use tan to increase linearity of lights' control
 8001f52:	4a21      	ldr	r2, [pc, #132]	; (8001fd8 <setBrightness+0xf8>)
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	441a      	add	r2, r3
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe fadf 	bl	8000524 <__aeabi_i2d>
 8001f66:	4604      	mov	r4, r0
 8001f68:	460d      	mov	r5, r1
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f7fe faec 	bl	8000548 <__aeabi_f2d>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	ec43 2b10 	vmov	d0, r2, r3
 8001f78:	f00c fd6e 	bl	800ea58 <tan>
 8001f7c:	ec53 2b10 	vmov	r2, r3, d0
 8001f80:	4620      	mov	r0, r4
 8001f82:	4629      	mov	r1, r5
 8001f84:	f7fe fc62 	bl	800084c <__aeabi_ddiv>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	4619      	mov	r1, r3
 8001f90:	f7fe fe0a 	bl	8000ba8 <__aeabi_d2uiz>
 8001f94:	4603      	mov	r3, r0
 8001f96:	b2d9      	uxtb	r1, r3
 8001f98:	4a10      	ldr	r2, [pc, #64]	; (8001fdc <setBrightness+0xfc>)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	441a      	add	r2, r3
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	460a      	mov	r2, r1
 8001fa6:	701a      	strb	r2, [r3, #0]
			for(int j=1; j<4; j++){
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	3301      	adds	r3, #1
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	ddac      	ble.n	8001f0e <setBrightness+0x2e>
		for (int i =0; i < LEDUsed; i++){
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	2b09      	cmp	r3, #9
 8001fbe:	dd9b      	ble.n	8001ef8 <setBrightness+0x18>
			}
		}
	}
}
 8001fc0:	bf00      	nop
 8001fc2:	bf00      	nop
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	f3af 8000 	nop.w
 8001fd0:	51eb851f 	.word	0x51eb851f
 8001fd4:	40091eb8 	.word	0x40091eb8
 8001fd8:	20000374 	.word	0x20000374
 8001fdc:	2000039c 	.word	0x2000039c
 8001fe0:	40668000 	.word	0x40668000

08001fe4 <ws2812SendData>:
 */

uint32_t pwmData[(24*LEDUsed)+50]; //24-bit wide communication per each LED

void ws2812SendData (void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]

/*
 * Check if we need to use Brightness values or noBrightness values set color of each led
 * as a 24 bit wide string format of bit FOR EACH LED USED
 */
	for (int i= 0; i<LEDUsed; i++){
 8001fee:	2300      	movs	r3, #0
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	e036      	b.n	8002062 <ws2812SendData+0x7e>

		if (USE_BRIGHTNESS)
				color = ((LED_Mode[i][1]<<16) | (LED_Mode[i][2]<<8) | (LED_Mode[i][3]));
 8001ff4:	4a2e      	ldr	r2, [pc, #184]	; (80020b0 <ws2812SendData+0xcc>)
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	785b      	ldrb	r3, [r3, #1]
 8001ffe:	041a      	lsls	r2, r3, #16
 8002000:	492b      	ldr	r1, [pc, #172]	; (80020b0 <ws2812SendData+0xcc>)
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	440b      	add	r3, r1
 8002008:	789b      	ldrb	r3, [r3, #2]
 800200a:	021b      	lsls	r3, r3, #8
 800200c:	431a      	orrs	r2, r3
 800200e:	4928      	ldr	r1, [pc, #160]	; (80020b0 <ws2812SendData+0xcc>)
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	78db      	ldrb	r3, [r3, #3]
 8002018:	4313      	orrs	r3, r2
 800201a:	607b      	str	r3, [r7, #4]
		else //If we don't use Brightness we can go over
				color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));


		for (int i=23; i>=0; i--) //need to start from LSB on MSB - DataSheet
 800201c:	2317      	movs	r3, #23
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	e019      	b.n	8002056 <ws2812SendData+0x72>
		{
			if (color&(1<<i)){
 8002022:	2201      	movs	r2, #1
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	461a      	mov	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4013      	ands	r3, r2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <ws2812SendData+0x5c>
				pwmData[indx] = 60; // 2/3 of 90 duty cycle to write 1
 8002034:	4a1f      	ldr	r2, [pc, #124]	; (80020b4 <ws2812SendData+0xd0>)
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	213c      	movs	r1, #60	; 0x3c
 800203a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800203e:	e004      	b.n	800204a <ws2812SendData+0x66>
			}
			else pwmData[indx] = 30;  // 1/3 of 90 duty cycle to write 0
 8002040:	4a1c      	ldr	r2, [pc, #112]	; (80020b4 <ws2812SendData+0xd0>)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	211e      	movs	r1, #30
 8002046:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		indx++;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	3301      	adds	r3, #1
 800204e:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--) //need to start from LSB on MSB - DataSheet
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	3b01      	subs	r3, #1
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	dae2      	bge.n	8002022 <ws2812SendData+0x3e>
	for (int i= 0; i<LEDUsed; i++){
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	3301      	adds	r3, #1
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	2b09      	cmp	r3, #9
 8002066:	ddc5      	ble.n	8001ff4 <ws2812SendData+0x10>
		}
	}

	//Then i need to store 50 pwm signal ->1.25us*50 = 62.5us>50 us for sure to 0 before as close communication singal - DataSheet WS2812
	for (int i=0; i<50; i++){
 8002068:	2300      	movs	r3, #0
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	e00a      	b.n	8002084 <ws2812SendData+0xa0>

		pwmData[indx] = 0;
 800206e:	4a11      	ldr	r2, [pc, #68]	; (80020b4 <ws2812SendData+0xd0>)
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	2100      	movs	r1, #0
 8002074:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		indx++;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	3301      	adds	r3, #1
 800207c:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++){
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	3301      	adds	r3, #1
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	2b31      	cmp	r3, #49	; 0x31
 8002088:	ddf1      	ble.n	800206e <ws2812SendData+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, (24*LEDUsed)+50);
 800208a:	f44f 7391 	mov.w	r3, #290	; 0x122
 800208e:	4a09      	ldr	r2, [pc, #36]	; (80020b4 <ws2812SendData+0xd0>)
 8002090:	2100      	movs	r1, #0
 8002092:	4809      	ldr	r0, [pc, #36]	; (80020b8 <ws2812SendData+0xd4>)
 8002094:	f005 ffae 	bl	8007ff4 <HAL_TIM_PWM_Start_DMA>
	while (!dataSentFlag){}; //Giving time to callback function to stop and set datasentflag to 1
 8002098:	bf00      	nop
 800209a:	4b08      	ldr	r3, [pc, #32]	; (80020bc <ws2812SendData+0xd8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0fb      	beq.n	800209a <ws2812SendData+0xb6>

	dataSentFlag = 0; //To eventually being called another time
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <ws2812SendData+0xd8>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]

}
 80020a8:	bf00      	nop
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	2000039c 	.word	0x2000039c
 80020b4:	200003d8 	.word	0x200003d8
 80020b8:	20000868 	.word	0x20000868
 80020bc:	200003d0 	.word	0x200003d0

080020c0 <HAL_TIM_PWM_PulseFinishedCallback>:

//Function to be used to end writing the same data on pwm stream data line
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]

	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80020c8:	2100      	movs	r1, #0
 80020ca:	4805      	ldr	r0, [pc, #20]	; (80020e0 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80020cc:	f006 f9b2 	bl	8008434 <HAL_TIM_PWM_Stop_DMA>
	dataSentFlag = 1;
 80020d0:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	601a      	str	r2, [r3, #0]

}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000868 	.word	0x20000868
 80020e4:	200003d0 	.word	0x200003d0

080020e8 <setLight>:

void setLight(int check){
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
	if (check == 1){
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d155      	bne.n	80021a2 <setLight+0xba>

		for(int i = 0; i<LEDUsed; i++){
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	e04e      	b.n	800219a <setLight+0xb2>
			switch(i){
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2b09      	cmp	r3, #9
 8002100:	d848      	bhi.n	8002194 <setLight+0xac>
 8002102:	a201      	add	r2, pc, #4	; (adr r2, 8002108 <setLight+0x20>)
 8002104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002108:	08002131 	.word	0x08002131
 800210c:	0800213b 	.word	0x0800213b
 8002110:	08002145 	.word	0x08002145
 8002114:	0800214f 	.word	0x0800214f
 8002118:	08002159 	.word	0x08002159
 800211c:	08002163 	.word	0x08002163
 8002120:	0800216d 	.word	0x0800216d
 8002124:	08002177 	.word	0x08002177
 8002128:	08002181 	.word	0x08002181
 800212c:	0800218b 	.word	0x0800218b
			case(0):
				setLed(i, violetColor400);
 8002130:	4932      	ldr	r1, [pc, #200]	; (80021fc <setLight+0x114>)
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f7ff fea2 	bl	8001e7c <setLed>
//				setBrightness(brightness);
				break;
 8002138:	e02c      	b.n	8002194 <setLight+0xac>
			case(1):
				setLed(i, redColor680);
 800213a:	4931      	ldr	r1, [pc, #196]	; (8002200 <setLight+0x118>)
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f7ff fe9d 	bl	8001e7c <setLed>
//				setBrightness(brightness);
				break;
 8002142:	e027      	b.n	8002194 <setLight+0xac>
			case(2):
				setLed(i, redColor680);
 8002144:	492e      	ldr	r1, [pc, #184]	; (8002200 <setLight+0x118>)
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f7ff fe98 	bl	8001e7c <setLed>
//				setBrightness(brightness);
				break;
 800214c:	e022      	b.n	8002194 <setLight+0xac>
			case(3):
				setLed(i, redColor680);
 800214e:	492c      	ldr	r1, [pc, #176]	; (8002200 <setLight+0x118>)
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f7ff fe93 	bl	8001e7c <setLed>
//				setBrightness(brightness);
				break;
 8002156:	e01d      	b.n	8002194 <setLight+0xac>
			case(4):
				setLed(i, violetColor400);
 8002158:	4928      	ldr	r1, [pc, #160]	; (80021fc <setLight+0x114>)
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f7ff fe8e 	bl	8001e7c <setLed>
//				setBrightness(brightness);
				break;
 8002160:	e018      	b.n	8002194 <setLight+0xac>
			case(5):
				setLed(i, violetColor400);
 8002162:	4926      	ldr	r1, [pc, #152]	; (80021fc <setLight+0x114>)
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f7ff fe89 	bl	8001e7c <setLed>
//				setBrightness(brightness);
				break;
 800216a:	e013      	b.n	8002194 <setLight+0xac>
			case(6):
				setLed(i, redColor680);
 800216c:	4924      	ldr	r1, [pc, #144]	; (8002200 <setLight+0x118>)
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f7ff fe84 	bl	8001e7c <setLed>
//				setBrightness(brightness);
				break;
 8002174:	e00e      	b.n	8002194 <setLight+0xac>
			case(7):
				setLed(i, redColor680);
 8002176:	4922      	ldr	r1, [pc, #136]	; (8002200 <setLight+0x118>)
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f7ff fe7f 	bl	8001e7c <setLed>
//				setBrightness(brightness);
				break;
 800217e:	e009      	b.n	8002194 <setLight+0xac>
			case(8):
				setLed(i, redColor680);
 8002180:	491f      	ldr	r1, [pc, #124]	; (8002200 <setLight+0x118>)
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f7ff fe7a 	bl	8001e7c <setLed>
//				setBrightness(brightness);
				break;
 8002188:	e004      	b.n	8002194 <setLight+0xac>
			case(9):
				setLed(i, violetColor400);
 800218a:	491c      	ldr	r1, [pc, #112]	; (80021fc <setLight+0x114>)
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f7ff fe75 	bl	8001e7c <setLed>
//				setBrightness(brightness);
				break;
 8002192:	bf00      	nop
		for(int i = 0; i<LEDUsed; i++){
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	3301      	adds	r3, #1
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2b09      	cmp	r3, #9
 800219e:	ddad      	ble.n	80020fc <setLight+0x14>
 80021a0:	e00c      	b.n	80021bc <setLight+0xd4>
			}

		}
	}
	else  {
		for(int i=0; i<LEDUsed; i++){
 80021a2:	2300      	movs	r3, #0
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	e006      	b.n	80021b6 <setLight+0xce>

			setLed(i, nullColor);
 80021a8:	4916      	ldr	r1, [pc, #88]	; (8002204 <setLight+0x11c>)
 80021aa:	68b8      	ldr	r0, [r7, #8]
 80021ac:	f7ff fe66 	bl	8001e7c <setLed>
		for(int i=0; i<LEDUsed; i++){
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	3301      	adds	r3, #1
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	2b09      	cmp	r3, #9
 80021ba:	ddf5      	ble.n	80021a8 <setLight+0xc0>
		}
	}

	//Reading natural light level value threshold and save it to naturalLightLevel
	readNaturalLight();
 80021bc:	f7ff fdb0 	bl	8001d20 <readNaturalLight>

	switch(naturalLightLevel){
 80021c0:	4b11      	ldr	r3, [pc, #68]	; (8002208 <setLight+0x120>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d00e      	beq.n	80021e6 <setLight+0xfe>
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	dc10      	bgt.n	80021ee <setLight+0x106>
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d002      	beq.n	80021d6 <setLight+0xee>
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d004      	beq.n	80021de <setLight+0xf6>
 80021d4:	e00b      	b.n	80021ee <setLight+0x106>
		case (Low):
			setBrightness(45);
 80021d6:	202d      	movs	r0, #45	; 0x2d
 80021d8:	f7ff fe82 	bl	8001ee0 <setBrightness>
			break;
 80021dc:	e007      	b.n	80021ee <setLight+0x106>
		case(Med):
			setBrightness(25);
 80021de:	2019      	movs	r0, #25
 80021e0:	f7ff fe7e 	bl	8001ee0 <setBrightness>
			break;
 80021e4:	e003      	b.n	80021ee <setLight+0x106>
		case(High):
			setBrightness(1);
 80021e6:	2001      	movs	r0, #1
 80021e8:	f7ff fe7a 	bl	8001ee0 <setBrightness>
			break;
 80021ec:	bf00      	nop
	}
	//Once data has been defined, send the data to ledStripe
	ws2812SendData();
 80021ee:	f7ff fef9 	bl	8001fe4 <ws2812SendData>
}
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000000 	.word	0x20000000
 8002200:	2000000c 	.word	0x2000000c
 8002204:	200003c4 	.word	0x200003c4
 8002208:	20000370 	.word	0x20000370

0800220c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002210:	f001 fb50 	bl	80038b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002214:	f000 f826 	bl	8002264 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002218:	f000 f875 	bl	8002306 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800221c:	f7ff fcc0 	bl	8001ba0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002220:	f7ff f9f4 	bl	800160c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002224:	f000 fe62 	bl	8002eec <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002228:	f000 fb44 	bl	80028b4 <MX_TIM1_Init>
  MX_ADC2_Init();
 800222c:	f7fe ff5a 	bl	80010e4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8002230:	f7fe ffbc 	bl	80011ac <MX_ADC3_Init>
  MX_TIM2_Init();
 8002234:	f000 fbea 	bl	8002a0c <MX_TIM2_Init>
  MX_ADC1_Init();
 8002238:	f7fe fede 	bl	8000ff8 <MX_ADC1_Init>
  MX_TIM8_Init();
 800223c:	f000 fc34 	bl	8002aa8 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8002240:	f000 fe24 	bl	8002e8c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8002244:	4805      	ldr	r0, [pc, #20]	; (800225c <main+0x50>)
 8002246:	f005 fc2b 	bl	8007aa0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);
 800224a:	2100      	movs	r1, #0
 800224c:	4804      	ldr	r0, [pc, #16]	; (8002260 <main+0x54>)
 800224e:	f005 fd7d 	bl	8007d4c <HAL_TIM_PWM_Start_IT>
  setup_pwm();
 8002252:	f000 fd95 	bl	8002d80 <setup_pwm>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  virtual_main();
 8002256:	f000 ff6f 	bl	8003138 <virtual_main>
 800225a:	e7fc      	b.n	8002256 <main+0x4a>
 800225c:	200008b4 	.word	0x200008b4
 8002260:	20000900 	.word	0x20000900

08002264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b096      	sub	sp, #88	; 0x58
 8002268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800226a:	f107 0314 	add.w	r3, r7, #20
 800226e:	2244      	movs	r2, #68	; 0x44
 8002270:	2100      	movs	r1, #0
 8002272:	4618      	mov	r0, r3
 8002274:	f007 ff42 	bl	800a0fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002278:	463b      	mov	r3, r7
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	605a      	str	r2, [r3, #4]
 8002280:	609a      	str	r2, [r3, #8]
 8002282:	60da      	str	r2, [r3, #12]
 8002284:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002286:	f44f 7000 	mov.w	r0, #512	; 0x200
 800228a:	f004 f89f 	bl	80063cc <HAL_PWREx_ControlVoltageScaling>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002294:	f000 f862 	bl	800235c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002298:	2302      	movs	r3, #2
 800229a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800229c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022a2:	2310      	movs	r3, #16
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022a6:	2302      	movs	r3, #2
 80022a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022aa:	2302      	movs	r3, #2
 80022ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80022ae:	2301      	movs	r3, #1
 80022b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 9;
 80022b2:	2309      	movs	r3, #9
 80022b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80022b6:	2307      	movs	r3, #7
 80022b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80022ba:	2302      	movs	r3, #2
 80022bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80022be:	2302      	movs	r3, #2
 80022c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022c2:	f107 0314 	add.w	r3, r7, #20
 80022c6:	4618      	mov	r0, r3
 80022c8:	f004 f8d6 	bl	8006478 <HAL_RCC_OscConfig>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80022d2:	f000 f843 	bl	800235c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022d6:	230f      	movs	r3, #15
 80022d8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022da:	2303      	movs	r3, #3
 80022dc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022de:	2300      	movs	r3, #0
 80022e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022e6:	2300      	movs	r3, #0
 80022e8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80022ea:	463b      	mov	r3, r7
 80022ec:	2104      	movs	r1, #4
 80022ee:	4618      	mov	r0, r3
 80022f0:	f004 fc9e 	bl	8006c30 <HAL_RCC_ClockConfig>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80022fa:	f000 f82f 	bl	800235c <Error_Handler>
  }
}
 80022fe:	bf00      	nop
 8002300:	3758      	adds	r7, #88	; 0x58
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b0a2      	sub	sp, #136	; 0x88
 800230a:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800230c:	463b      	mov	r3, r7
 800230e:	2288      	movs	r2, #136	; 0x88
 8002310:	2100      	movs	r1, #0
 8002312:	4618      	mov	r0, r3
 8002314:	f007 fef2 	bl	800a0fc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002318:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800231c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800231e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002322:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8002324:	2302      	movs	r3, #2
 8002326:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002328:	2301      	movs	r3, #1
 800232a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800232c:	2308      	movs	r3, #8
 800232e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002330:	2307      	movs	r3, #7
 8002332:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002334:	2302      	movs	r3, #2
 8002336:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002338:	2302      	movs	r3, #2
 800233a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800233c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002340:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002342:	463b      	mov	r3, r7
 8002344:	4618      	mov	r0, r3
 8002346:	f004 fe97 	bl	8007078 <HAL_RCCEx_PeriphCLKConfig>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8002350:	f000 f804 	bl	800235c <Error_Handler>
  }
}
 8002354:	bf00      	nop
 8002356:	3788      	adds	r7, #136	; 0x88
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002360:	b672      	cpsid	i
}
 8002362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002364:	e7fe      	b.n	8002364 <Error_Handler+0x8>

08002366 <stepper_set_rpm>:
//{
//	nutrs_deployed = 0;
//}

void stepper_set_rpm(int rpm)  // Set rpm--> max 13, min 1,,,  went to 14 rev/min
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
	delay_us(60000000 / stepsperrev / rpm);
 800236e:	f643 1238 	movw	r2, #14648	; 0x3938
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	fb92 f3f3 	sdiv	r3, r2, r3
 8002378:	4618      	mov	r0, r3
 800237a:	f000 fe89 	bl	8003090 <delay_us>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <stepper_half_drive>:

void stepper_half_drive(int step)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
	switch (step) {
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b07      	cmp	r3, #7
 8002394:	f200 80dc 	bhi.w	8002550 <stepper_half_drive+0x1c8>
 8002398:	a201      	add	r2, pc, #4	; (adr r2, 80023a0 <stepper_half_drive+0x18>)
 800239a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800239e:	bf00      	nop
 80023a0:	080023c1 	.word	0x080023c1
 80023a4:	080023f3 	.word	0x080023f3
 80023a8:	08002425 	.word	0x08002425
 80023ac:	08002457 	.word	0x08002457
 80023b0:	08002489 	.word	0x08002489
 80023b4:	080024bb 	.word	0x080024bb
 80023b8:	080024ed 	.word	0x080024ed
 80023bc:	0800251f 	.word	0x0800251f
	case 0:
		HAL_GPIO_WritePin(STEP_IN1_GPIO_Port, STEP_IN1_Pin, GPIO_PIN_SET);   // IN1
 80023c0:	2201      	movs	r2, #1
 80023c2:	2104      	movs	r1, #4
 80023c4:	4864      	ldr	r0, [pc, #400]	; (8002558 <stepper_half_drive+0x1d0>)
 80023c6:	f003 ffc3 	bl	8006350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEP_IN2_GPIO_Port, STEP_IN2_Pin, GPIO_PIN_RESET);   // IN2
 80023ca:	2200      	movs	r2, #0
 80023cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023d0:	4862      	ldr	r0, [pc, #392]	; (800255c <stepper_half_drive+0x1d4>)
 80023d2:	f003 ffbd 	bl	8006350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEP_IN3_GPIO_Port, STEP_IN3_Pin, GPIO_PIN_RESET);   // IN3
 80023d6:	2200      	movs	r2, #0
 80023d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023e0:	f003 ffb6 	bl	8006350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEP_IN4_GPIO_Port, STEP_IN4_Pin, GPIO_PIN_RESET);   // IN4
 80023e4:	2200      	movs	r2, #0
 80023e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023ea:	485c      	ldr	r0, [pc, #368]	; (800255c <stepper_half_drive+0x1d4>)
 80023ec:	f003 ffb0 	bl	8006350 <HAL_GPIO_WritePin>
		break;
 80023f0:	e0ae      	b.n	8002550 <stepper_half_drive+0x1c8>

	case 1:
		HAL_GPIO_WritePin(STEP_IN1_GPIO_Port, STEP_IN1_Pin, GPIO_PIN_SET);   // IN1
 80023f2:	2201      	movs	r2, #1
 80023f4:	2104      	movs	r1, #4
 80023f6:	4858      	ldr	r0, [pc, #352]	; (8002558 <stepper_half_drive+0x1d0>)
 80023f8:	f003 ffaa 	bl	8006350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEP_IN2_GPIO_Port, STEP_IN2_Pin, GPIO_PIN_SET);   // IN2
 80023fc:	2201      	movs	r2, #1
 80023fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002402:	4856      	ldr	r0, [pc, #344]	; (800255c <stepper_half_drive+0x1d4>)
 8002404:	f003 ffa4 	bl	8006350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEP_IN3_GPIO_Port, STEP_IN3_Pin, GPIO_PIN_RESET);   // IN3
 8002408:	2200      	movs	r2, #0
 800240a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800240e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002412:	f003 ff9d 	bl	8006350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEP_IN4_GPIO_Port, STEP_IN4_Pin, GPIO_PIN_RESET);   // IN4
 8002416:	2200      	movs	r2, #0
 8002418:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800241c:	484f      	ldr	r0, [pc, #316]	; (800255c <stepper_half_drive+0x1d4>)
 800241e:	f003 ff97 	bl	8006350 <HAL_GPIO_WritePin>
		break;
 8002422:	e095      	b.n	8002550 <stepper_half_drive+0x1c8>

	case 2:
		HAL_GPIO_WritePin(STEP_IN1_GPIO_Port, STEP_IN1_Pin, GPIO_PIN_RESET);   // IN1
 8002424:	2200      	movs	r2, #0
 8002426:	2104      	movs	r1, #4
 8002428:	484b      	ldr	r0, [pc, #300]	; (8002558 <stepper_half_drive+0x1d0>)
 800242a:	f003 ff91 	bl	8006350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEP_IN2_GPIO_Port, STEP_IN2_Pin, GPIO_PIN_SET);   // IN2
 800242e:	2201      	movs	r2, #1
 8002430:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002434:	4849      	ldr	r0, [pc, #292]	; (800255c <stepper_half_drive+0x1d4>)
 8002436:	f003 ff8b 	bl	8006350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEP_IN3_GPIO_Port, STEP_IN3_Pin, GPIO_PIN_RESET);   // IN3
 800243a:	2200      	movs	r2, #0
 800243c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002444:	f003 ff84 	bl	8006350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEP_IN4_GPIO_Port, STEP_IN4_Pin, GPIO_PIN_RESET);   // IN4
 8002448:	2200      	movs	r2, #0
 800244a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800244e:	4843      	ldr	r0, [pc, #268]	; (800255c <stepper_half_drive+0x1d4>)
 8002450:	f003 ff7e 	bl	8006350 <HAL_GPIO_WritePin>
		break;
 8002454:	e07c      	b.n	8002550 <stepper_half_drive+0x1c8>

	case 3:
		HAL_GPIO_WritePin(STEP_IN1_GPIO_Port, STEP_IN1_Pin, GPIO_PIN_RESET);   // IN1
 8002456:	2200      	movs	r2, #0
 8002458:	2104      	movs	r1, #4
 800245a:	483f      	ldr	r0, [pc, #252]	; (8002558 <stepper_half_drive+0x1d0>)
 800245c:	f003 ff78 	bl	8006350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEP_IN2_GPIO_Port, STEP_IN2_Pin, GPIO_PIN_SET);   // IN2
 8002460:	2201      	movs	r2, #1
 8002462:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002466:	483d      	ldr	r0, [pc, #244]	; (800255c <stepper_half_drive+0x1d4>)
 8002468:	f003 ff72 	bl	8006350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEP_IN3_GPIO_Port, STEP_IN3_Pin, GPIO_PIN_SET);   // IN3
 800246c:	2201      	movs	r2, #1
 800246e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002472:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002476:	f003 ff6b 	bl	8006350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEP_IN4_GPIO_Port, STEP_IN4_Pin, GPIO_PIN_RESET);   // IN4
 800247a:	2200      	movs	r2, #0
 800247c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002480:	4836      	ldr	r0, [pc, #216]	; (800255c <stepper_half_drive+0x1d4>)
 8002482:	f003 ff65 	bl	8006350 <HAL_GPIO_WritePin>
		break;
 8002486:	e063      	b.n	8002550 <stepper_half_drive+0x1c8>

	case 4:
		HAL_GPIO_WritePin(STEP_IN1_GPIO_Port, STEP_IN1_Pin, GPIO_PIN_RESET);   // IN1
 8002488:	2200      	movs	r2, #0
 800248a:	2104      	movs	r1, #4
 800248c:	4832      	ldr	r0, [pc, #200]	; (8002558 <stepper_half_drive+0x1d0>)
 800248e:	f003 ff5f 	bl	8006350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEP_IN2_GPIO_Port, STEP_IN2_Pin, GPIO_PIN_RESET);   // IN2
 8002492:	2200      	movs	r2, #0
 8002494:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002498:	4830      	ldr	r0, [pc, #192]	; (800255c <stepper_half_drive+0x1d4>)
 800249a:	f003 ff59 	bl	8006350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEP_IN3_GPIO_Port, STEP_IN3_Pin, GPIO_PIN_SET);   // IN3
 800249e:	2201      	movs	r2, #1
 80024a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024a8:	f003 ff52 	bl	8006350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEP_IN4_GPIO_Port, STEP_IN4_Pin, GPIO_PIN_RESET);   // IN4
 80024ac:	2200      	movs	r2, #0
 80024ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024b2:	482a      	ldr	r0, [pc, #168]	; (800255c <stepper_half_drive+0x1d4>)
 80024b4:	f003 ff4c 	bl	8006350 <HAL_GPIO_WritePin>
		break;
 80024b8:	e04a      	b.n	8002550 <stepper_half_drive+0x1c8>

	case 5:
		HAL_GPIO_WritePin(STEP_IN1_GPIO_Port, STEP_IN1_Pin, GPIO_PIN_RESET);   // IN1
 80024ba:	2200      	movs	r2, #0
 80024bc:	2104      	movs	r1, #4
 80024be:	4826      	ldr	r0, [pc, #152]	; (8002558 <stepper_half_drive+0x1d0>)
 80024c0:	f003 ff46 	bl	8006350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEP_IN2_GPIO_Port, STEP_IN2_Pin, GPIO_PIN_RESET);   // IN2
 80024c4:	2200      	movs	r2, #0
 80024c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024ca:	4824      	ldr	r0, [pc, #144]	; (800255c <stepper_half_drive+0x1d4>)
 80024cc:	f003 ff40 	bl	8006350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEP_IN3_GPIO_Port, STEP_IN3_Pin, GPIO_PIN_SET);   // IN3
 80024d0:	2201      	movs	r2, #1
 80024d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024da:	f003 ff39 	bl	8006350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEP_IN4_GPIO_Port, STEP_IN4_Pin, GPIO_PIN_SET);   // IN4
 80024de:	2201      	movs	r2, #1
 80024e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024e4:	481d      	ldr	r0, [pc, #116]	; (800255c <stepper_half_drive+0x1d4>)
 80024e6:	f003 ff33 	bl	8006350 <HAL_GPIO_WritePin>
		break;
 80024ea:	e031      	b.n	8002550 <stepper_half_drive+0x1c8>

	case 6:
		HAL_GPIO_WritePin(STEP_IN1_GPIO_Port, STEP_IN1_Pin, GPIO_PIN_RESET);   // IN1
 80024ec:	2200      	movs	r2, #0
 80024ee:	2104      	movs	r1, #4
 80024f0:	4819      	ldr	r0, [pc, #100]	; (8002558 <stepper_half_drive+0x1d0>)
 80024f2:	f003 ff2d 	bl	8006350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEP_IN2_GPIO_Port, STEP_IN2_Pin, GPIO_PIN_RESET);   // IN2
 80024f6:	2200      	movs	r2, #0
 80024f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024fc:	4817      	ldr	r0, [pc, #92]	; (800255c <stepper_half_drive+0x1d4>)
 80024fe:	f003 ff27 	bl	8006350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEP_IN3_GPIO_Port, STEP_IN3_Pin, GPIO_PIN_RESET);   // IN3
 8002502:	2200      	movs	r2, #0
 8002504:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800250c:	f003 ff20 	bl	8006350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEP_IN4_GPIO_Port, STEP_IN4_Pin, GPIO_PIN_SET);   // IN4
 8002510:	2201      	movs	r2, #1
 8002512:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002516:	4811      	ldr	r0, [pc, #68]	; (800255c <stepper_half_drive+0x1d4>)
 8002518:	f003 ff1a 	bl	8006350 <HAL_GPIO_WritePin>
		break;
 800251c:	e018      	b.n	8002550 <stepper_half_drive+0x1c8>

	case 7:
		HAL_GPIO_WritePin(STEP_IN1_GPIO_Port, STEP_IN1_Pin, GPIO_PIN_SET);   // IN1
 800251e:	2201      	movs	r2, #1
 8002520:	2104      	movs	r1, #4
 8002522:	480d      	ldr	r0, [pc, #52]	; (8002558 <stepper_half_drive+0x1d0>)
 8002524:	f003 ff14 	bl	8006350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEP_IN2_GPIO_Port, STEP_IN2_Pin, GPIO_PIN_RESET);   // IN2
 8002528:	2200      	movs	r2, #0
 800252a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800252e:	480b      	ldr	r0, [pc, #44]	; (800255c <stepper_half_drive+0x1d4>)
 8002530:	f003 ff0e 	bl	8006350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEP_IN3_GPIO_Port, STEP_IN3_Pin, GPIO_PIN_RESET);   // IN3
 8002534:	2200      	movs	r2, #0
 8002536:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800253a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800253e:	f003 ff07 	bl	8006350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEP_IN4_GPIO_Port, STEP_IN4_Pin, GPIO_PIN_SET);   // IN4
 8002542:	2201      	movs	r2, #1
 8002544:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002548:	4804      	ldr	r0, [pc, #16]	; (800255c <stepper_half_drive+0x1d4>)
 800254a:	f003 ff01 	bl	8006350 <HAL_GPIO_WritePin>
		break;
 800254e:	bf00      	nop
	}
}
 8002550:	bf00      	nop
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	48000c00 	.word	0x48000c00
 800255c:	48000400 	.word	0x48000400

08002560 <stepper_step_angle>:

void stepper_step_angle(float angle, int direction, int rpm)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b088      	sub	sp, #32
 8002564:	af00      	add	r7, sp, #0
 8002566:	ed87 0a03 	vstr	s0, [r7, #12]
 800256a:	60b8      	str	r0, [r7, #8]
 800256c:	6079      	str	r1, [r7, #4]
	int numberofsequences = (int)(angle / anglepersequence);
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f7fd ffea 	bl	8000548 <__aeabi_f2d>
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	4b20      	ldr	r3, [pc, #128]	; (80025fc <stepper_step_angle+0x9c>)
 800257a:	f7fe f967 	bl	800084c <__aeabi_ddiv>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	4610      	mov	r0, r2
 8002584:	4619      	mov	r1, r3
 8002586:	f7fe fae7 	bl	8000b58 <__aeabi_d2iz>
 800258a:	4603      	mov	r3, r0
 800258c:	613b      	str	r3, [r7, #16]

	for (int seq = 0; seq < numberofsequences; seq++)
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]
 8002592:	e027      	b.n	80025e4 <stepper_step_angle+0x84>
	{
		if (direction == 0)  // for clockwise
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10f      	bne.n	80025ba <stepper_step_angle+0x5a>
		{
			for (int step = 7; step >= 0; step--)
 800259a:	2307      	movs	r3, #7
 800259c:	61bb      	str	r3, [r7, #24]
 800259e:	e008      	b.n	80025b2 <stepper_step_angle+0x52>
			{
				stepper_half_drive(step);
 80025a0:	69b8      	ldr	r0, [r7, #24]
 80025a2:	f7ff fef1 	bl	8002388 <stepper_half_drive>
				stepper_set_rpm(rpm);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7ff fedd 	bl	8002366 <stepper_set_rpm>
			for (int step = 7; step >= 0; step--)
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	61bb      	str	r3, [r7, #24]
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	daf3      	bge.n	80025a0 <stepper_step_angle+0x40>
 80025b8:	e011      	b.n	80025de <stepper_step_angle+0x7e>
			}
		}
		else if (direction == 1)  // for anti-clockwise
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d10e      	bne.n	80025de <stepper_step_angle+0x7e>
		{
			for (int step = 0; step < 8; step++)
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	e008      	b.n	80025d8 <stepper_step_angle+0x78>
			{
				stepper_half_drive(step);
 80025c6:	6978      	ldr	r0, [r7, #20]
 80025c8:	f7ff fede 	bl	8002388 <stepper_half_drive>
				stepper_set_rpm(rpm);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7ff feca 	bl	8002366 <stepper_set_rpm>
			for (int step = 0; step < 8; step++)
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	3301      	adds	r3, #1
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	2b07      	cmp	r3, #7
 80025dc:	ddf3      	ble.n	80025c6 <stepper_step_angle+0x66>
	for (int seq = 0; seq < numberofsequences; seq++)
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3301      	adds	r3, #1
 80025e2:	61fb      	str	r3, [r7, #28]
 80025e4:	69fa      	ldr	r2, [r7, #28]
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	dbd3      	blt.n	8002594 <stepper_step_angle+0x34>
			}
		}
	}

	nutrs_deployed = 1;
 80025ec:	4b04      	ldr	r3, [pc, #16]	; (8002600 <stepper_step_angle+0xa0>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	701a      	strb	r2, [r3, #0]
}
 80025f2:	bf00      	nop
 80025f4:	3720      	adds	r7, #32
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	3fe68000 	.word	0x3fe68000
 8002600:	20000860 	.word	0x20000860

08002604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260a:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <HAL_MspInit+0x44>)
 800260c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800260e:	4a0e      	ldr	r2, [pc, #56]	; (8002648 <HAL_MspInit+0x44>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	6613      	str	r3, [r2, #96]	; 0x60
 8002616:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <HAL_MspInit+0x44>)
 8002618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	607b      	str	r3, [r7, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002622:	4b09      	ldr	r3, [pc, #36]	; (8002648 <HAL_MspInit+0x44>)
 8002624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002626:	4a08      	ldr	r2, [pc, #32]	; (8002648 <HAL_MspInit+0x44>)
 8002628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800262c:	6593      	str	r3, [r2, #88]	; 0x58
 800262e:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_MspInit+0x44>)
 8002630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002636:	603b      	str	r3, [r7, #0]
 8002638:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	40021000 	.word	0x40021000

0800264c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002650:	e7fe      	b.n	8002650 <NMI_Handler+0x4>

08002652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002656:	e7fe      	b.n	8002656 <HardFault_Handler+0x4>

08002658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800265c:	e7fe      	b.n	800265c <MemManage_Handler+0x4>

0800265e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800265e:	b480      	push	{r7}
 8002660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002662:	e7fe      	b.n	8002662 <BusFault_Handler+0x4>

08002664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002668:	e7fe      	b.n	8002668 <UsageFault_Handler+0x4>

0800266a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800266a:	b480      	push	{r7}
 800266c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800267c:	bf00      	nop
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002686:	b480      	push	{r7}
 8002688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002698:	f001 f968 	bl	800396c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800269c:	bf00      	nop
 800269e:	bd80      	pop	{r7, pc}

080026a0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80026a4:	4802      	ldr	r0, [pc, #8]	; (80026b0 <DMA1_Channel2_IRQHandler+0x10>)
 80026a6:	f003 fbb2 	bl	8005e0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	2000094c 	.word	0x2000094c

080026b4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80026b8:	4803      	ldr	r0, [pc, #12]	; (80026c8 <ADC1_2_IRQHandler+0x14>)
 80026ba:	f002 f875 	bl	80047a8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80026be:	4803      	ldr	r0, [pc, #12]	; (80026cc <ADC1_2_IRQHandler+0x18>)
 80026c0:	f002 f872 	bl	80047a8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80026c4:	bf00      	nop
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20000224 	.word	0x20000224
 80026cc:	20000288 	.word	0x20000288

080026d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ECHO_Pin);
 80026d4:	2080      	movs	r0, #128	; 0x80
 80026d6:	f003 fe53 	bl	8006380 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}

080026de <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80026e2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80026e6:	f003 fe4b 	bl	8006380 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80026f4:	4802      	ldr	r0, [pc, #8]	; (8002700 <ADC3_IRQHandler+0x10>)
 80026f6:	f002 f857 	bl	80047a8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	200002ec 	.word	0x200002ec

08002704 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return 1;
 8002708:	2301      	movs	r3, #1
}
 800270a:	4618      	mov	r0, r3
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <_kill>:

int _kill(int pid, int sig)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800271e:	f007 fcc3 	bl	800a0a8 <__errno>
 8002722:	4603      	mov	r3, r0
 8002724:	2216      	movs	r2, #22
 8002726:	601a      	str	r2, [r3, #0]
  return -1;
 8002728:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800272c:	4618      	mov	r0, r3
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <_exit>:

void _exit (int status)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800273c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7ff ffe7 	bl	8002714 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002746:	e7fe      	b.n	8002746 <_exit+0x12>

08002748 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	e00a      	b.n	8002770 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800275a:	f3af 8000 	nop.w
 800275e:	4601      	mov	r1, r0
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	1c5a      	adds	r2, r3, #1
 8002764:	60ba      	str	r2, [r7, #8]
 8002766:	b2ca      	uxtb	r2, r1
 8002768:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	3301      	adds	r3, #1
 800276e:	617b      	str	r3, [r7, #20]
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	429a      	cmp	r2, r3
 8002776:	dbf0      	blt.n	800275a <_read+0x12>
  }

  return len;
 8002778:	687b      	ldr	r3, [r7, #4]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b086      	sub	sp, #24
 8002786:	af00      	add	r7, sp, #0
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	e009      	b.n	80027a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	1c5a      	adds	r2, r3, #1
 8002798:	60ba      	str	r2, [r7, #8]
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	3301      	adds	r3, #1
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	dbf1      	blt.n	8002794 <_write+0x12>
  }
  return len;
 80027b0:	687b      	ldr	r3, [r7, #4]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <_close>:

int _close(int file)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027e2:	605a      	str	r2, [r3, #4]
  return 0;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <_isatty>:

int _isatty(int file)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027fa:	2301      	movs	r3, #1
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
	...

08002824 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800282c:	4a14      	ldr	r2, [pc, #80]	; (8002880 <_sbrk+0x5c>)
 800282e:	4b15      	ldr	r3, [pc, #84]	; (8002884 <_sbrk+0x60>)
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002838:	4b13      	ldr	r3, [pc, #76]	; (8002888 <_sbrk+0x64>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d102      	bne.n	8002846 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002840:	4b11      	ldr	r3, [pc, #68]	; (8002888 <_sbrk+0x64>)
 8002842:	4a12      	ldr	r2, [pc, #72]	; (800288c <_sbrk+0x68>)
 8002844:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002846:	4b10      	ldr	r3, [pc, #64]	; (8002888 <_sbrk+0x64>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4413      	add	r3, r2
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	429a      	cmp	r2, r3
 8002852:	d207      	bcs.n	8002864 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002854:	f007 fc28 	bl	800a0a8 <__errno>
 8002858:	4603      	mov	r3, r0
 800285a:	220c      	movs	r2, #12
 800285c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800285e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002862:	e009      	b.n	8002878 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002864:	4b08      	ldr	r3, [pc, #32]	; (8002888 <_sbrk+0x64>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800286a:	4b07      	ldr	r3, [pc, #28]	; (8002888 <_sbrk+0x64>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4413      	add	r3, r2
 8002872:	4a05      	ldr	r2, [pc, #20]	; (8002888 <_sbrk+0x64>)
 8002874:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002876:	68fb      	ldr	r3, [r7, #12]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	20018000 	.word	0x20018000
 8002884:	00000400 	.word	0x00000400
 8002888:	20000864 	.word	0x20000864
 800288c:	20000ae8 	.word	0x20000ae8

08002890 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002894:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <SystemInit+0x20>)
 8002896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289a:	4a05      	ldr	r2, [pc, #20]	; (80028b0 <SystemInit+0x20>)
 800289c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80028a4:	bf00      	nop
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	e000ed00 	.word	0xe000ed00

080028b4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b09a      	sub	sp, #104	; 0x68
 80028b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	605a      	str	r2, [r3, #4]
 80028c4:	609a      	str	r2, [r3, #8]
 80028c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	60da      	str	r2, [r3, #12]
 80028e2:	611a      	str	r2, [r3, #16]
 80028e4:	615a      	str	r2, [r3, #20]
 80028e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028e8:	1d3b      	adds	r3, r7, #4
 80028ea:	222c      	movs	r2, #44	; 0x2c
 80028ec:	2100      	movs	r1, #0
 80028ee:	4618      	mov	r0, r3
 80028f0:	f007 fc04 	bl	800a0fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80028f4:	4b43      	ldr	r3, [pc, #268]	; (8002a04 <MX_TIM1_Init+0x150>)
 80028f6:	4a44      	ldr	r2, [pc, #272]	; (8002a08 <MX_TIM1_Init+0x154>)
 80028f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80028fa:	4b42      	ldr	r3, [pc, #264]	; (8002a04 <MX_TIM1_Init+0x150>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002900:	4b40      	ldr	r3, [pc, #256]	; (8002a04 <MX_TIM1_Init+0x150>)
 8002902:	2200      	movs	r2, #0
 8002904:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8002906:	4b3f      	ldr	r3, [pc, #252]	; (8002a04 <MX_TIM1_Init+0x150>)
 8002908:	2259      	movs	r2, #89	; 0x59
 800290a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800290c:	4b3d      	ldr	r3, [pc, #244]	; (8002a04 <MX_TIM1_Init+0x150>)
 800290e:	2200      	movs	r2, #0
 8002910:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002912:	4b3c      	ldr	r3, [pc, #240]	; (8002a04 <MX_TIM1_Init+0x150>)
 8002914:	2200      	movs	r2, #0
 8002916:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002918:	4b3a      	ldr	r3, [pc, #232]	; (8002a04 <MX_TIM1_Init+0x150>)
 800291a:	2200      	movs	r2, #0
 800291c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800291e:	4839      	ldr	r0, [pc, #228]	; (8002a04 <MX_TIM1_Init+0x150>)
 8002920:	f005 f866 	bl	80079f0 <HAL_TIM_Base_Init>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800292a:	f7ff fd17 	bl	800235c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800292e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002932:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002934:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002938:	4619      	mov	r1, r3
 800293a:	4832      	ldr	r0, [pc, #200]	; (8002a04 <MX_TIM1_Init+0x150>)
 800293c:	f005 ff86 	bl	800884c <HAL_TIM_ConfigClockSource>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002946:	f7ff fd09 	bl	800235c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800294a:	482e      	ldr	r0, [pc, #184]	; (8002a04 <MX_TIM1_Init+0x150>)
 800294c:	f005 f910 	bl	8007b70 <HAL_TIM_PWM_Init>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002956:	f7ff fd01 	bl	800235c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800295a:	2300      	movs	r3, #0
 800295c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800295e:	2300      	movs	r3, #0
 8002960:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002962:	2300      	movs	r3, #0
 8002964:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002966:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800296a:	4619      	mov	r1, r3
 800296c:	4825      	ldr	r0, [pc, #148]	; (8002a04 <MX_TIM1_Init+0x150>)
 800296e:	f006 fd4b 	bl	8009408 <HAL_TIMEx_MasterConfigSynchronization>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8002978:	f7ff fcf0 	bl	800235c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800297c:	2360      	movs	r3, #96	; 0x60
 800297e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 54;
 8002980:	2336      	movs	r3, #54	; 0x36
 8002982:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002984:	2300      	movs	r3, #0
 8002986:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002988:	2300      	movs	r3, #0
 800298a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800298c:	2300      	movs	r3, #0
 800298e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002990:	2300      	movs	r3, #0
 8002992:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002994:	2300      	movs	r3, #0
 8002996:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002998:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800299c:	2200      	movs	r2, #0
 800299e:	4619      	mov	r1, r3
 80029a0:	4818      	ldr	r0, [pc, #96]	; (8002a04 <MX_TIM1_Init+0x150>)
 80029a2:	f005 fe3f 	bl	8008624 <HAL_TIM_PWM_ConfigChannel>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80029ac:	f7ff fcd6 	bl	800235c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80029b0:	2300      	movs	r3, #0
 80029b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80029b4:	2300      	movs	r3, #0
 80029b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80029b8:	2300      	movs	r3, #0
 80029ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80029bc:	2300      	movs	r3, #0
 80029be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80029c0:	2300      	movs	r3, #0
 80029c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80029c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80029ce:	2300      	movs	r3, #0
 80029d0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80029d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80029d8:	2300      	movs	r3, #0
 80029da:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80029dc:	2300      	movs	r3, #0
 80029de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80029e0:	1d3b      	adds	r3, r7, #4
 80029e2:	4619      	mov	r1, r3
 80029e4:	4807      	ldr	r0, [pc, #28]	; (8002a04 <MX_TIM1_Init+0x150>)
 80029e6:	f006 fd97 	bl	8009518 <HAL_TIMEx_ConfigBreakDeadTime>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80029f0:	f7ff fcb4 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80029f4:	4803      	ldr	r0, [pc, #12]	; (8002a04 <MX_TIM1_Init+0x150>)
 80029f6:	f000 f965 	bl	8002cc4 <HAL_TIM_MspPostInit>

}
 80029fa:	bf00      	nop
 80029fc:	3768      	adds	r7, #104	; 0x68
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20000868 	.word	0x20000868
 8002a08:	40012c00 	.word	0x40012c00

08002a0c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a12:	f107 0310 	add.w	r3, r7, #16
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	605a      	str	r2, [r3, #4]
 8002a1c:	609a      	str	r2, [r3, #8]
 8002a1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a20:	1d3b      	adds	r3, r7, #4
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a2a:	4b1e      	ldr	r3, [pc, #120]	; (8002aa4 <MX_TIM2_Init+0x98>)
 8002a2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a30:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8002a32:	4b1c      	ldr	r3, [pc, #112]	; (8002aa4 <MX_TIM2_Init+0x98>)
 8002a34:	2247      	movs	r2, #71	; 0x47
 8002a36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a38:	4b1a      	ldr	r3, [pc, #104]	; (8002aa4 <MX_TIM2_Init+0x98>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002a3e:	4b19      	ldr	r3, [pc, #100]	; (8002aa4 <MX_TIM2_Init+0x98>)
 8002a40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a46:	4b17      	ldr	r3, [pc, #92]	; (8002aa4 <MX_TIM2_Init+0x98>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a4c:	4b15      	ldr	r3, [pc, #84]	; (8002aa4 <MX_TIM2_Init+0x98>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a52:	4814      	ldr	r0, [pc, #80]	; (8002aa4 <MX_TIM2_Init+0x98>)
 8002a54:	f004 ffcc 	bl	80079f0 <HAL_TIM_Base_Init>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002a5e:	f7ff fc7d 	bl	800235c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a68:	f107 0310 	add.w	r3, r7, #16
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	480d      	ldr	r0, [pc, #52]	; (8002aa4 <MX_TIM2_Init+0x98>)
 8002a70:	f005 feec 	bl	800884c <HAL_TIM_ConfigClockSource>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002a7a:	f7ff fc6f 	bl	800235c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a86:	1d3b      	adds	r3, r7, #4
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4806      	ldr	r0, [pc, #24]	; (8002aa4 <MX_TIM2_Init+0x98>)
 8002a8c:	f006 fcbc 	bl	8009408 <HAL_TIMEx_MasterConfigSynchronization>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002a96:	f7ff fc61 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a9a:	bf00      	nop
 8002a9c:	3720      	adds	r7, #32
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	200008b4 	.word	0x200008b4

08002aa8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b096      	sub	sp, #88	; 0x58
 8002aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	605a      	str	r2, [r3, #4]
 8002ab8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002aba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	605a      	str	r2, [r3, #4]
 8002ac4:	609a      	str	r2, [r3, #8]
 8002ac6:	60da      	str	r2, [r3, #12]
 8002ac8:	611a      	str	r2, [r3, #16]
 8002aca:	615a      	str	r2, [r3, #20]
 8002acc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ace:	1d3b      	adds	r3, r7, #4
 8002ad0:	222c      	movs	r2, #44	; 0x2c
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f007 fb11 	bl	800a0fc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002ada:	4b39      	ldr	r3, [pc, #228]	; (8002bc0 <MX_TIM8_Init+0x118>)
 8002adc:	4a39      	ldr	r2, [pc, #228]	; (8002bc4 <MX_TIM8_Init+0x11c>)
 8002ade:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 72-1;
 8002ae0:	4b37      	ldr	r3, [pc, #220]	; (8002bc0 <MX_TIM8_Init+0x118>)
 8002ae2:	2247      	movs	r2, #71	; 0x47
 8002ae4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae6:	4b36      	ldr	r3, [pc, #216]	; (8002bc0 <MX_TIM8_Init+0x118>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0xffff - 1;
 8002aec:	4b34      	ldr	r3, [pc, #208]	; (8002bc0 <MX_TIM8_Init+0x118>)
 8002aee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002af2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002af4:	4b32      	ldr	r3, [pc, #200]	; (8002bc0 <MX_TIM8_Init+0x118>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002afa:	4b31      	ldr	r3, [pc, #196]	; (8002bc0 <MX_TIM8_Init+0x118>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b00:	4b2f      	ldr	r3, [pc, #188]	; (8002bc0 <MX_TIM8_Init+0x118>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002b06:	482e      	ldr	r0, [pc, #184]	; (8002bc0 <MX_TIM8_Init+0x118>)
 8002b08:	f005 f832 	bl	8007b70 <HAL_TIM_PWM_Init>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8002b12:	f7ff fc23 	bl	800235c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b16:	2300      	movs	r3, #0
 8002b18:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002b22:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b26:	4619      	mov	r1, r3
 8002b28:	4825      	ldr	r0, [pc, #148]	; (8002bc0 <MX_TIM8_Init+0x118>)
 8002b2a:	f006 fc6d 	bl	8009408 <HAL_TIMEx_MasterConfigSynchronization>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8002b34:	f7ff fc12 	bl	800235c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b38:	2360      	movs	r3, #96	; 0x60
 8002b3a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b40:	2300      	movs	r3, #0
 8002b42:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b44:	2300      	movs	r3, #0
 8002b46:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b50:	2300      	movs	r3, #0
 8002b52:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b58:	2200      	movs	r2, #0
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4818      	ldr	r0, [pc, #96]	; (8002bc0 <MX_TIM8_Init+0x118>)
 8002b5e:	f005 fd61 	bl	8008624 <HAL_TIM_PWM_ConfigChannel>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002b68:	f7ff fbf8 	bl	800235c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b70:	2300      	movs	r3, #0
 8002b72:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b74:	2300      	movs	r3, #0
 8002b76:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b84:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002b8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002b94:	2300      	movs	r3, #0
 8002b96:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002b9c:	1d3b      	adds	r3, r7, #4
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4807      	ldr	r0, [pc, #28]	; (8002bc0 <MX_TIM8_Init+0x118>)
 8002ba2:	f006 fcb9 	bl	8009518 <HAL_TIMEx_ConfigBreakDeadTime>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8002bac:	f7ff fbd6 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002bb0:	4803      	ldr	r0, [pc, #12]	; (8002bc0 <MX_TIM8_Init+0x118>)
 8002bb2:	f000 f887 	bl	8002cc4 <HAL_TIM_MspPostInit>

}
 8002bb6:	bf00      	nop
 8002bb8:	3758      	adds	r7, #88	; 0x58
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000900 	.word	0x20000900
 8002bc4:	40013400 	.word	0x40013400

08002bc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a27      	ldr	r2, [pc, #156]	; (8002c74 <HAL_TIM_Base_MspInit+0xac>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d137      	bne.n	8002c4a <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bda:	4b27      	ldr	r3, [pc, #156]	; (8002c78 <HAL_TIM_Base_MspInit+0xb0>)
 8002bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bde:	4a26      	ldr	r2, [pc, #152]	; (8002c78 <HAL_TIM_Base_MspInit+0xb0>)
 8002be0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002be4:	6613      	str	r3, [r2, #96]	; 0x60
 8002be6:	4b24      	ldr	r3, [pc, #144]	; (8002c78 <HAL_TIM_Base_MspInit+0xb0>)
 8002be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8002bf2:	4b22      	ldr	r3, [pc, #136]	; (8002c7c <HAL_TIM_Base_MspInit+0xb4>)
 8002bf4:	4a22      	ldr	r2, [pc, #136]	; (8002c80 <HAL_TIM_Base_MspInit+0xb8>)
 8002bf6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 8002bf8:	4b20      	ldr	r3, [pc, #128]	; (8002c7c <HAL_TIM_Base_MspInit+0xb4>)
 8002bfa:	2207      	movs	r2, #7
 8002bfc:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bfe:	4b1f      	ldr	r3, [pc, #124]	; (8002c7c <HAL_TIM_Base_MspInit+0xb4>)
 8002c00:	2210      	movs	r2, #16
 8002c02:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c04:	4b1d      	ldr	r3, [pc, #116]	; (8002c7c <HAL_TIM_Base_MspInit+0xb4>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002c0a:	4b1c      	ldr	r3, [pc, #112]	; (8002c7c <HAL_TIM_Base_MspInit+0xb4>)
 8002c0c:	2280      	movs	r2, #128	; 0x80
 8002c0e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c10:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <HAL_TIM_Base_MspInit+0xb4>)
 8002c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c16:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002c18:	4b18      	ldr	r3, [pc, #96]	; (8002c7c <HAL_TIM_Base_MspInit+0xb4>)
 8002c1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c1e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8002c20:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <HAL_TIM_Base_MspInit+0xb4>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002c26:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <HAL_TIM_Base_MspInit+0xb4>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8002c2c:	4813      	ldr	r0, [pc, #76]	; (8002c7c <HAL_TIM_Base_MspInit+0xb4>)
 8002c2e:	f002 ff95 	bl	8005b5c <HAL_DMA_Init>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8002c38:	f7ff fb90 	bl	800235c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a0f      	ldr	r2, [pc, #60]	; (8002c7c <HAL_TIM_Base_MspInit+0xb4>)
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24
 8002c42:	4a0e      	ldr	r2, [pc, #56]	; (8002c7c <HAL_TIM_Base_MspInit+0xb4>)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002c48:	e010      	b.n	8002c6c <HAL_TIM_Base_MspInit+0xa4>
  else if(tim_baseHandle->Instance==TIM2)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c52:	d10b      	bne.n	8002c6c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c54:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <HAL_TIM_Base_MspInit+0xb0>)
 8002c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c58:	4a07      	ldr	r2, [pc, #28]	; (8002c78 <HAL_TIM_Base_MspInit+0xb0>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_TIM_Base_MspInit+0xb0>)
 8002c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
}
 8002c6c:	bf00      	nop
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40012c00 	.word	0x40012c00
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	2000094c 	.word	0x2000094c
 8002c80:	4002001c 	.word	0x4002001c

08002c84 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a0a      	ldr	r2, [pc, #40]	; (8002cbc <HAL_TIM_PWM_MspInit+0x38>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d10b      	bne.n	8002cae <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c96:	4b0a      	ldr	r3, [pc, #40]	; (8002cc0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c9a:	4a09      	ldr	r2, [pc, #36]	; (8002cc0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002c9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ca0:	6613      	str	r3, [r2, #96]	; 0x60
 8002ca2:	4b07      	ldr	r3, [pc, #28]	; (8002cc0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002cae:	bf00      	nop
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	40013400 	.word	0x40013400
 8002cc0:	40021000 	.word	0x40021000

08002cc4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08a      	sub	sp, #40	; 0x28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ccc:	f107 0314 	add.w	r3, r7, #20
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a23      	ldr	r2, [pc, #140]	; (8002d70 <HAL_TIM_MspPostInit+0xac>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d11e      	bne.n	8002d24 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce6:	4b23      	ldr	r3, [pc, #140]	; (8002d74 <HAL_TIM_MspPostInit+0xb0>)
 8002ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cea:	4a22      	ldr	r2, [pc, #136]	; (8002d74 <HAL_TIM_MspPostInit+0xb0>)
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cf2:	4b20      	ldr	r3, [pc, #128]	; (8002d74 <HAL_TIM_MspPostInit+0xb0>)
 8002cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = LIGHTS_PWM_Pin;
 8002cfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d04:	2302      	movs	r3, #2
 8002d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d10:	2301      	movs	r3, #1
 8002d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LIGHTS_PWM_GPIO_Port, &GPIO_InitStruct);
 8002d14:	f107 0314 	add.w	r3, r7, #20
 8002d18:	4619      	mov	r1, r3
 8002d1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d1e:	f003 f955 	bl	8005fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002d22:	e020      	b.n	8002d66 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM8)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a13      	ldr	r2, [pc, #76]	; (8002d78 <HAL_TIM_MspPostInit+0xb4>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d11b      	bne.n	8002d66 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d2e:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <HAL_TIM_MspPostInit+0xb0>)
 8002d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d32:	4a10      	ldr	r2, [pc, #64]	; (8002d74 <HAL_TIM_MspPostInit+0xb0>)
 8002d34:	f043 0304 	orr.w	r3, r3, #4
 8002d38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <HAL_TIM_MspPostInit+0xb0>)
 8002d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TRIG_Pin;
 8002d46:	2340      	movs	r3, #64	; 0x40
 8002d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d52:	2300      	movs	r3, #0
 8002d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002d56:	2303      	movs	r3, #3
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8002d5a:	f107 0314 	add.w	r3, r7, #20
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4806      	ldr	r0, [pc, #24]	; (8002d7c <HAL_TIM_MspPostInit+0xb8>)
 8002d62:	f003 f933 	bl	8005fcc <HAL_GPIO_Init>
}
 8002d66:	bf00      	nop
 8002d68:	3728      	adds	r7, #40	; 0x28
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40012c00 	.word	0x40012c00
 8002d74:	40021000 	.word	0x40021000
 8002d78:	40013400 	.word	0x40013400
 8002d7c:	48000800 	.word	0x48000800

08002d80 <setup_pwm>:
_Bool prev_pwm_state = 0;				//variable to measured previous pwm state
_Bool echo_state = 0;					//variable to store echo state
float water_level = 0;

void setup_pwm(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af00      	add	r7, sp, #0
	//Setup config variable
	TIM_OC_InitTypeDef my_sConfigOC = {0};
 8002d86:	1d3b      	adds	r3, r7, #4
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	60da      	str	r2, [r3, #12]
 8002d92:	611a      	str	r2, [r3, #16]
 8002d94:	615a      	str	r2, [r3, #20]
 8002d96:	619a      	str	r2, [r3, #24]
	my_sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d98:	2360      	movs	r3, #96	; 0x60
 8002d9a:	607b      	str	r3, [r7, #4]
	my_sConfigOC.Pulse = 1;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	60bb      	str	r3, [r7, #8]
	my_sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60fb      	str	r3, [r7, #12]
	my_sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002da4:	2300      	movs	r3, #0
 8002da6:	617b      	str	r3, [r7, #20]

	//Start PWM
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8002da8:	2100      	movs	r1, #0
 8002daa:	480b      	ldr	r0, [pc, #44]	; (8002dd8 <setup_pwm+0x58>)
 8002dac:	f004 ff38 	bl	8007c20 <HAL_TIM_PWM_Stop>
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &my_sConfigOC, TIM_CHANNEL_1) != HAL_OK){Error_Handler();}
 8002db0:	1d3b      	adds	r3, r7, #4
 8002db2:	2200      	movs	r2, #0
 8002db4:	4619      	mov	r1, r3
 8002db6:	4808      	ldr	r0, [pc, #32]	; (8002dd8 <setup_pwm+0x58>)
 8002db8:	f005 fc34 	bl	8008624 <HAL_TIM_PWM_ConfigChannel>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <setup_pwm+0x46>
 8002dc2:	f7ff facb 	bl	800235c <Error_Handler>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	4803      	ldr	r0, [pc, #12]	; (8002dd8 <setup_pwm+0x58>)
 8002dca:	f004 ffbf 	bl	8007d4c <HAL_TIM_PWM_Start_IT>
}
 8002dce:	bf00      	nop
 8002dd0:	3720      	adds	r7, #32
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20000900 	.word	0x20000900
 8002ddc:	00000000 	.word	0x00000000

08002de0 <echo_callback>:

//this function is called when a rising/falling event of the interrupt occurs
void echo_callback (void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
	//Read the state of the GPIO
	echo_state = HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin);
 8002de4:	2180      	movs	r1, #128	; 0x80
 8002de6:	4824      	ldr	r0, [pc, #144]	; (8002e78 <echo_callback+0x98>)
 8002de8:	f003 fa9a 	bl	8006320 <HAL_GPIO_ReadPin>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	bf14      	ite	ne
 8002df2:	2301      	movne	r3, #1
 8002df4:	2300      	moveq	r3, #0
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	4b20      	ldr	r3, [pc, #128]	; (8002e7c <echo_callback+0x9c>)
 8002dfa:	701a      	strb	r2, [r3, #0]
	//If the state is HIGH, start counting, else stop
	if(echo_state)
 8002dfc:	4b1f      	ldr	r3, [pc, #124]	; (8002e7c <echo_callback+0x9c>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <echo_callback+0x30>
	{
		hc_counter = __HAL_TIM_GET_COUNTER(&htim2);
 8002e04:	4b1e      	ldr	r3, [pc, #120]	; (8002e80 <echo_callback+0xa0>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	4a1e      	ldr	r2, [pc, #120]	; (8002e84 <echo_callback+0xa4>)
 8002e0c:	6013      	str	r3, [r2, #0]
	else if (!echo_state)
	{
		//Convert distance into
		water_level = (float)(__HAL_TIM_GET_COUNTER(&htim2) - hc_counter)*0.034/2;;
	}
}
 8002e0e:	e02c      	b.n	8002e6a <echo_callback+0x8a>
	else if (!echo_state)
 8002e10:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <echo_callback+0x9c>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	f083 0301 	eor.w	r3, r3, #1
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d025      	beq.n	8002e6a <echo_callback+0x8a>
		water_level = (float)(__HAL_TIM_GET_COUNTER(&htim2) - hc_counter)*0.034/2;;
 8002e1e:	4b18      	ldr	r3, [pc, #96]	; (8002e80 <echo_callback+0xa0>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e24:	4b17      	ldr	r3, [pc, #92]	; (8002e84 <echo_callback+0xa4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	ee07 3a90 	vmov	s15, r3
 8002e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e32:	ee17 0a90 	vmov	r0, s15
 8002e36:	f7fd fb87 	bl	8000548 <__aeabi_f2d>
 8002e3a:	a30d      	add	r3, pc, #52	; (adr r3, 8002e70 <echo_callback+0x90>)
 8002e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e40:	f7fd fbda 	bl	80005f8 <__aeabi_dmul>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4610      	mov	r0, r2
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e54:	f7fd fcfa 	bl	800084c <__aeabi_ddiv>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	4619      	mov	r1, r3
 8002e60:	f7fd fec2 	bl	8000be8 <__aeabi_d2f>
 8002e64:	4603      	mov	r3, r0
 8002e66:	4a08      	ldr	r2, [pc, #32]	; (8002e88 <echo_callback+0xa8>)
 8002e68:	6013      	str	r3, [r2, #0]
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	b020c49c 	.word	0xb020c49c
 8002e74:	3fa16872 	.word	0x3fa16872
 8002e78:	48000800 	.word	0x48000800
 8002e7c:	20000998 	.word	0x20000998
 8002e80:	200008b4 	.word	0x200008b4
 8002e84:	20000994 	.word	0x20000994
 8002e88:	2000099c 	.word	0x2000099c

08002e8c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e90:	4b14      	ldr	r3, [pc, #80]	; (8002ee4 <MX_USART1_UART_Init+0x58>)
 8002e92:	4a15      	ldr	r2, [pc, #84]	; (8002ee8 <MX_USART1_UART_Init+0x5c>)
 8002e94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e96:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <MX_USART1_UART_Init+0x58>)
 8002e98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e9e:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <MX_USART1_UART_Init+0x58>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ea4:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <MX_USART1_UART_Init+0x58>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002eaa:	4b0e      	ldr	r3, [pc, #56]	; (8002ee4 <MX_USART1_UART_Init+0x58>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002eb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <MX_USART1_UART_Init+0x58>)
 8002eb2:	220c      	movs	r2, #12
 8002eb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <MX_USART1_UART_Init+0x58>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ebc:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <MX_USART1_UART_Init+0x58>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ec2:	4b08      	ldr	r3, [pc, #32]	; (8002ee4 <MX_USART1_UART_Init+0x58>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ec8:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <MX_USART1_UART_Init+0x58>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ece:	4805      	ldr	r0, [pc, #20]	; (8002ee4 <MX_USART1_UART_Init+0x58>)
 8002ed0:	f006 fba0 	bl	8009614 <HAL_UART_Init>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002eda:	f7ff fa3f 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	200009a0 	.word	0x200009a0
 8002ee8:	40013800 	.word	0x40013800

08002eec <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ef0:	4b14      	ldr	r3, [pc, #80]	; (8002f44 <MX_USART2_UART_Init+0x58>)
 8002ef2:	4a15      	ldr	r2, [pc, #84]	; (8002f48 <MX_USART2_UART_Init+0x5c>)
 8002ef4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ef6:	4b13      	ldr	r3, [pc, #76]	; (8002f44 <MX_USART2_UART_Init+0x58>)
 8002ef8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002efc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002efe:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <MX_USART2_UART_Init+0x58>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f04:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <MX_USART2_UART_Init+0x58>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f0a:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <MX_USART2_UART_Init+0x58>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f10:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <MX_USART2_UART_Init+0x58>)
 8002f12:	220c      	movs	r2, #12
 8002f14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f16:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <MX_USART2_UART_Init+0x58>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f1c:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <MX_USART2_UART_Init+0x58>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f22:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <MX_USART2_UART_Init+0x58>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f28:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <MX_USART2_UART_Init+0x58>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f2e:	4805      	ldr	r0, [pc, #20]	; (8002f44 <MX_USART2_UART_Init+0x58>)
 8002f30:	f006 fb70 	bl	8009614 <HAL_UART_Init>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002f3a:	f7ff fa0f 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f3e:	bf00      	nop
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	20000a24 	.word	0x20000a24
 8002f48:	40004400 	.word	0x40004400

08002f4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b0ae      	sub	sp, #184	; 0xb8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f54:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	605a      	str	r2, [r3, #4]
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	60da      	str	r2, [r3, #12]
 8002f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f64:	f107 031c 	add.w	r3, r7, #28
 8002f68:	2288      	movs	r2, #136	; 0x88
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f007 f8c5 	bl	800a0fc <memset>
  if(uartHandle->Instance==USART1)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a43      	ldr	r2, [pc, #268]	; (8003084 <HAL_UART_MspInit+0x138>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d13d      	bne.n	8002ff8 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f80:	2300      	movs	r3, #0
 8002f82:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f84:	f107 031c 	add.w	r3, r7, #28
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f004 f875 	bl	8007078 <HAL_RCCEx_PeriphCLKConfig>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f94:	f7ff f9e2 	bl	800235c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f98:	4b3b      	ldr	r3, [pc, #236]	; (8003088 <HAL_UART_MspInit+0x13c>)
 8002f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f9c:	4a3a      	ldr	r2, [pc, #232]	; (8003088 <HAL_UART_MspInit+0x13c>)
 8002f9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fa2:	6613      	str	r3, [r2, #96]	; 0x60
 8002fa4:	4b38      	ldr	r3, [pc, #224]	; (8003088 <HAL_UART_MspInit+0x13c>)
 8002fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fac:	61bb      	str	r3, [r7, #24]
 8002fae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb0:	4b35      	ldr	r3, [pc, #212]	; (8003088 <HAL_UART_MspInit+0x13c>)
 8002fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb4:	4a34      	ldr	r2, [pc, #208]	; (8003088 <HAL_UART_MspInit+0x13c>)
 8002fb6:	f043 0301 	orr.w	r3, r3, #1
 8002fba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fbc:	4b32      	ldr	r3, [pc, #200]	; (8003088 <HAL_UART_MspInit+0x13c>)
 8002fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002fc8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002fcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002fe2:	2307      	movs	r3, #7
 8002fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002fec:	4619      	mov	r1, r3
 8002fee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ff2:	f002 ffeb 	bl	8005fcc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002ff6:	e040      	b.n	800307a <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART2)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a23      	ldr	r2, [pc, #140]	; (800308c <HAL_UART_MspInit+0x140>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d13b      	bne.n	800307a <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003002:	2302      	movs	r3, #2
 8003004:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003006:	2300      	movs	r3, #0
 8003008:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800300a:	f107 031c 	add.w	r3, r7, #28
 800300e:	4618      	mov	r0, r3
 8003010:	f004 f832 	bl	8007078 <HAL_RCCEx_PeriphCLKConfig>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800301a:	f7ff f99f 	bl	800235c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800301e:	4b1a      	ldr	r3, [pc, #104]	; (8003088 <HAL_UART_MspInit+0x13c>)
 8003020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003022:	4a19      	ldr	r2, [pc, #100]	; (8003088 <HAL_UART_MspInit+0x13c>)
 8003024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003028:	6593      	str	r3, [r2, #88]	; 0x58
 800302a:	4b17      	ldr	r3, [pc, #92]	; (8003088 <HAL_UART_MspInit+0x13c>)
 800302c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003032:	613b      	str	r3, [r7, #16]
 8003034:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003036:	4b14      	ldr	r3, [pc, #80]	; (8003088 <HAL_UART_MspInit+0x13c>)
 8003038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800303a:	4a13      	ldr	r2, [pc, #76]	; (8003088 <HAL_UART_MspInit+0x13c>)
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003042:	4b11      	ldr	r3, [pc, #68]	; (8003088 <HAL_UART_MspInit+0x13c>)
 8003044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800304e:	230c      	movs	r3, #12
 8003050:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003054:	2302      	movs	r3, #2
 8003056:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305a:	2300      	movs	r3, #0
 800305c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003060:	2303      	movs	r3, #3
 8003062:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003066:	2307      	movs	r3, #7
 8003068:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800306c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003070:	4619      	mov	r1, r3
 8003072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003076:	f002 ffa9 	bl	8005fcc <HAL_GPIO_Init>
}
 800307a:	bf00      	nop
 800307c:	37b8      	adds	r7, #184	; 0xb8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40013800 	.word	0x40013800
 8003088:	40021000 	.word	0x40021000
 800308c:	40004400 	.word	0x40004400

08003090 <delay_us>:
//{
//	return voltage_value;
//}

void delay_us (uint32_t us)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
	uint32_t actual = __HAL_TIM_GET_COUNTER(&htim2);
 8003098:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <delay_us+0x30>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	60fb      	str	r3, [r7, #12]
	while(__HAL_TIM_GET_COUNTER(&htim2) - actual <= us);
 80030a0:	bf00      	nop
 80030a2:	4b07      	ldr	r3, [pc, #28]	; (80030c0 <delay_us+0x30>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d2f7      	bcs.n	80030a2 <delay_us+0x12>
}
 80030b2:	bf00      	nop
 80030b4:	bf00      	nop
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	200008b4 	.word	0x200008b4

080030c4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ECHO_Pin)
 80030ce:	88fb      	ldrh	r3, [r7, #6]
 80030d0:	2b80      	cmp	r3, #128	; 0x80
 80030d2:	d101      	bne.n	80030d8 <HAL_GPIO_EXTI_Callback+0x14>
	{
		echo_callback();
 80030d4:	f7ff fe84 	bl	8002de0 <echo_callback>
	}
}
 80030d8:	bf00      	nop
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
//		acquired_value_ADC_volt = (float) acquired_value_ADC_count / 4095 * 3.3;
//
//		water_reading = 1;
//
//	}
	HAL_ADC_Stop_IT(hadc);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f001 fb15 	bl	8004718 <HAL_ADC_Stop_IT>

	if (hadc == &hadc2)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a0d      	ldr	r2, [pc, #52]	; (8003128 <HAL_ADC_ConvCpltCallback+0x48>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d10a      	bne.n	800310c <HAL_ADC_ConvCpltCallback+0x2c>
	{
		// LIGHTS PROCEDURE
		// READ FROM THE PHOTORESISTENCE
		voltage_value = HAL_ADC_GetValue(hadc);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f001 fb49 	bl	800478e <HAL_ADC_GetValue>
 80030fc:	ee07 0a90 	vmov	s15, r0
 8003100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003104:	4b09      	ldr	r3, [pc, #36]	; (800312c <HAL_ADC_ConvCpltCallback+0x4c>)
 8003106:	edc3 7a00 	vstr	s15, [r3]
	else if (hadc == &hadc1)
	{
		water_level_gt = HAL_ADC_GetValue(hadc);
//		water_reading = 1;
	}
}
 800310a:	e009      	b.n	8003120 <HAL_ADC_ConvCpltCallback+0x40>
	else if (hadc == &hadc1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a08      	ldr	r2, [pc, #32]	; (8003130 <HAL_ADC_ConvCpltCallback+0x50>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d105      	bne.n	8003120 <HAL_ADC_ConvCpltCallback+0x40>
		water_level_gt = HAL_ADC_GetValue(hadc);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f001 fb3a 	bl	800478e <HAL_ADC_GetValue>
 800311a:	4603      	mov	r3, r0
 800311c:	4a05      	ldr	r2, [pc, #20]	; (8003134 <HAL_ADC_ConvCpltCallback+0x54>)
 800311e:	6013      	str	r3, [r2, #0]
}
 8003120:	bf00      	nop
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	20000288 	.word	0x20000288
 800312c:	200003d4 	.word	0x200003d4
 8003130:	20000224 	.word	0x20000224
 8003134:	20000024 	.word	0x20000024

08003138 <virtual_main>:

char datahome[32];
char datadht11[32];

void virtual_main()
{
 8003138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800313c:	ed2d 8b02 	vpush	{d8}
 8003140:	b0a7      	sub	sp, #156	; 0x9c
 8003142:	af08      	add	r7, sp, #32
	switch(state)
 8003144:	4b83      	ldr	r3, [pc, #524]	; (8003354 <virtual_main+0x21c>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b0a      	cmp	r3, #10
 800314a:	f200 835d 	bhi.w	8003808 <virtual_main+0x6d0>
 800314e:	a201      	add	r2, pc, #4	; (adr r2, 8003154 <virtual_main+0x1c>)
 8003150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003154:	08003529 	.word	0x08003529
 8003158:	08003809 	.word	0x08003809
 800315c:	0800359d 	.word	0x0800359d
 8003160:	0800360b 	.word	0x0800360b
 8003164:	0800371d 	.word	0x0800371d
 8003168:	080033b1 	.word	0x080033b1
 800316c:	08003809 	.word	0x08003809
 8003170:	080037d5 	.word	0x080037d5
 8003174:	08003809 	.word	0x08003809
 8003178:	080031ef 	.word	0x080031ef
 800317c:	08003181 	.word	0x08003181
	{
	case INIT:
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8003180:	4b75      	ldr	r3, [pc, #468]	; (8003358 <virtual_main+0x220>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2200      	movs	r2, #0
 8003186:	625a      	str	r2, [r3, #36]	; 0x24
		water_proc_time_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8003188:	4b73      	ldr	r3, [pc, #460]	; (8003358 <virtual_main+0x220>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	4a73      	ldr	r2, [pc, #460]	; (800335c <virtual_main+0x224>)
 8003190:	6013      	str	r3, [r2, #0]
		lights_proc_time_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8003192:	4b71      	ldr	r3, [pc, #452]	; (8003358 <virtual_main+0x220>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	4a71      	ldr	r2, [pc, #452]	; (8003360 <virtual_main+0x228>)
 800319a:	6013      	str	r3, [r2, #0]
		send_data_time_prev = __HAL_TIM_GET_COUNTER(&htim2);
 800319c:	4b6e      	ldr	r3, [pc, #440]	; (8003358 <virtual_main+0x220>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	4a70      	ldr	r2, [pc, #448]	; (8003364 <virtual_main+0x22c>)
 80031a4:	6013      	str	r3, [r2, #0]
		mix_time_prev = __HAL_TIM_GET_COUNTER(&htim2);
 80031a6:	4b6c      	ldr	r3, [pc, #432]	; (8003358 <virtual_main+0x220>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	4a6e      	ldr	r2, [pc, #440]	; (8003368 <virtual_main+0x230>)
 80031ae:	6013      	str	r3, [r2, #0]
		ev_time_prev = __HAL_TIM_GET_COUNTER(&htim2);
 80031b0:	4b69      	ldr	r3, [pc, #420]	; (8003358 <virtual_main+0x220>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	4a6d      	ldr	r2, [pc, #436]	; (800336c <virtual_main+0x234>)
 80031b8:	6013      	str	r3, [r2, #0]
//		setLight(1);

		counting_to_load = 1; // Default cycle
 80031ba:	4b6d      	ldr	r3, [pc, #436]	; (8003370 <virtual_main+0x238>)
 80031bc:	2201      	movs	r2, #1
 80031be:	701a      	strb	r2, [r3, #0]
		counting_to_unload = 0;
 80031c0:	4b6c      	ldr	r3, [pc, #432]	; (8003374 <virtual_main+0x23c>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	701a      	strb	r2, [r3, #0]

		 tCelsius = 27.0;
 80031c6:	4b6c      	ldr	r3, [pc, #432]	; (8003378 <virtual_main+0x240>)
 80031c8:	4a6c      	ldr	r2, [pc, #432]	; (800337c <virtual_main+0x244>)
 80031ca:	601a      	str	r2, [r3, #0]
		 RH = 12.0;
 80031cc:	4b6c      	ldr	r3, [pc, #432]	; (8003380 <virtual_main+0x248>)
 80031ce:	4a6d      	ldr	r2, [pc, #436]	; (8003384 <virtual_main+0x24c>)
 80031d0:	601a      	str	r2, [r3, #0]
		 EC = 1.5;
 80031d2:	4b6d      	ldr	r3, [pc, #436]	; (8003388 <virtual_main+0x250>)
 80031d4:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80031d8:	601a      	str	r2, [r3, #0]
		 PH = 7.0;
 80031da:	4b6c      	ldr	r3, [pc, #432]	; (800338c <virtual_main+0x254>)
 80031dc:	2207      	movs	r2, #7
 80031de:	701a      	strb	r2, [r3, #0]
		 water_status = 0;
 80031e0:	4b6b      	ldr	r3, [pc, #428]	; (8003390 <virtual_main+0x258>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	701a      	strb	r2, [r3, #0]

		state = HOME;
 80031e6:	4b5b      	ldr	r3, [pc, #364]	; (8003354 <virtual_main+0x21c>)
 80031e8:	2209      	movs	r2, #9
 80031ea:	701a      	strb	r2, [r3, #0]

//		char datainit[32];
//		sprintf(datainit, "INIT STATE \n\r");
//		HAL_UART_Transmit(&huart2, (uint8_t*)datainit, strlen(datainit), HAL_MAX_DELAY);
		break;
 80031ec:	e313      	b.n	8003816 <virtual_main+0x6de>


		/*
		 * SEND DATA
		 */
		if (__HAL_TIM_GET_COUNTER(&htim2) - send_data_time_prev >= 1e+7)
 80031ee:	4b5a      	ldr	r3, [pc, #360]	; (8003358 <virtual_main+0x220>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031f4:	4b5b      	ldr	r3, [pc, #364]	; (8003364 <virtual_main+0x22c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	4a66      	ldr	r2, [pc, #408]	; (8003394 <virtual_main+0x25c>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	f0c0 8307 	bcc.w	8003810 <virtual_main+0x6d8>
		{
 8003202:	466b      	mov	r3, sp
 8003204:	461e      	mov	r6, r3
				// RH: float
				// EC: float
				// PH: uint8_t
				// Water_status: Int

				uint8_t max_size = snprintf(NULL, 0, "%f;%f;%f;%u;%u;\n\r", tCelsius, RH, EC, PH, water_status) + 1;
 8003206:	4b5c      	ldr	r3, [pc, #368]	; (8003378 <virtual_main+0x240>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f7fd f99c 	bl	8000548 <__aeabi_f2d>
 8003210:	4682      	mov	sl, r0
 8003212:	468b      	mov	fp, r1
 8003214:	4b5a      	ldr	r3, [pc, #360]	; (8003380 <virtual_main+0x248>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f7fd f995 	bl	8000548 <__aeabi_f2d>
 800321e:	e9c7 0100 	strd	r0, r1, [r7]
 8003222:	4b59      	ldr	r3, [pc, #356]	; (8003388 <virtual_main+0x250>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f7fd f98e 	bl	8000548 <__aeabi_f2d>
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4956      	ldr	r1, [pc, #344]	; (800338c <virtual_main+0x254>)
 8003232:	7809      	ldrb	r1, [r1, #0]
 8003234:	4608      	mov	r0, r1
 8003236:	4956      	ldr	r1, [pc, #344]	; (8003390 <virtual_main+0x258>)
 8003238:	7809      	ldrb	r1, [r1, #0]
 800323a:	9107      	str	r1, [sp, #28]
 800323c:	9006      	str	r0, [sp, #24]
 800323e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003242:	ed97 7b00 	vldr	d7, [r7]
 8003246:	ed8d 7b02 	vstr	d7, [sp, #8]
 800324a:	e9cd ab00 	strd	sl, fp, [sp]
 800324e:	4a52      	ldr	r2, [pc, #328]	; (8003398 <virtual_main+0x260>)
 8003250:	2100      	movs	r1, #0
 8003252:	2000      	movs	r0, #0
 8003254:	f007 fdda 	bl	800ae0c <sniprintf>
 8003258:	4603      	mov	r3, r0
 800325a:	b2db      	uxtb	r3, r3
 800325c:	3301      	adds	r3, #1
 800325e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

				char data_to_send[max_size];
 8003262:	f897 1077 	ldrb.w	r1, [r7, #119]	; 0x77
 8003266:	460b      	mov	r3, r1
 8003268:	3b01      	subs	r3, #1
 800326a:	673b      	str	r3, [r7, #112]	; 0x70
 800326c:	b2cb      	uxtb	r3, r1
 800326e:	2200      	movs	r2, #0
 8003270:	4698      	mov	r8, r3
 8003272:	4691      	mov	r9, r2
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003280:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003284:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003288:	b2cb      	uxtb	r3, r1
 800328a:	2200      	movs	r2, #0
 800328c:	461c      	mov	r4, r3
 800328e:	4615      	mov	r5, r2
 8003290:	f04f 0200 	mov.w	r2, #0
 8003294:	f04f 0300 	mov.w	r3, #0
 8003298:	00eb      	lsls	r3, r5, #3
 800329a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800329e:	00e2      	lsls	r2, r4, #3
 80032a0:	460b      	mov	r3, r1
 80032a2:	3307      	adds	r3, #7
 80032a4:	08db      	lsrs	r3, r3, #3
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	ebad 0d03 	sub.w	sp, sp, r3
 80032ac:	ab08      	add	r3, sp, #32
 80032ae:	3300      	adds	r3, #0
 80032b0:	66fb      	str	r3, [r7, #108]	; 0x6c
				sprintf(data_to_send, "%f;%f;%f;%u;%u; \n\r", tCelsius, RH, EC, PH, water_status);
 80032b2:	4b31      	ldr	r3, [pc, #196]	; (8003378 <virtual_main+0x240>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fd f946 	bl	8000548 <__aeabi_f2d>
 80032bc:	4680      	mov	r8, r0
 80032be:	4689      	mov	r9, r1
 80032c0:	4b2f      	ldr	r3, [pc, #188]	; (8003380 <virtual_main+0x248>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fd f93f 	bl	8000548 <__aeabi_f2d>
 80032ca:	4604      	mov	r4, r0
 80032cc:	460d      	mov	r5, r1
 80032ce:	4b2e      	ldr	r3, [pc, #184]	; (8003388 <virtual_main+0x250>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fd f938 	bl	8000548 <__aeabi_f2d>
 80032d8:	4602      	mov	r2, r0
 80032da:	460b      	mov	r3, r1
 80032dc:	492b      	ldr	r1, [pc, #172]	; (800338c <virtual_main+0x254>)
 80032de:	7809      	ldrb	r1, [r1, #0]
 80032e0:	4608      	mov	r0, r1
 80032e2:	492b      	ldr	r1, [pc, #172]	; (8003390 <virtual_main+0x258>)
 80032e4:	7809      	ldrb	r1, [r1, #0]
 80032e6:	9105      	str	r1, [sp, #20]
 80032e8:	9004      	str	r0, [sp, #16]
 80032ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80032ee:	e9cd 4500 	strd	r4, r5, [sp]
 80032f2:	4642      	mov	r2, r8
 80032f4:	464b      	mov	r3, r9
 80032f6:	4929      	ldr	r1, [pc, #164]	; (800339c <virtual_main+0x264>)
 80032f8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80032fa:	f007 fdbb 	bl	800ae74 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)data_to_send, strlen(data_to_send), HAL_MAX_DELAY);
 80032fe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003300:	f7fc ff66 	bl	80001d0 <strlen>
 8003304:	4603      	mov	r3, r0
 8003306:	b29a      	uxth	r2, r3
 8003308:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800330c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800330e:	4824      	ldr	r0, [pc, #144]	; (80033a0 <virtual_main+0x268>)
 8003310:	f006 f9ce 	bl	80096b0 <HAL_UART_Transmit>

				char datatt[32];
				sprintf(datatt, "Data Size: %i \n\r", max_size);
 8003314:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8003318:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800331c:	4921      	ldr	r1, [pc, #132]	; (80033a4 <virtual_main+0x26c>)
 800331e:	4618      	mov	r0, r3
 8003320:	f007 fda8 	bl	800ae74 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)datatt, strlen(datatt), HAL_MAX_DELAY);
 8003324:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003328:	4618      	mov	r0, r3
 800332a:	f7fc ff51 	bl	80001d0 <strlen>
 800332e:	4603      	mov	r3, r0
 8003330:	b29a      	uxth	r2, r3
 8003332:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003336:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800333a:	481b      	ldr	r0, [pc, #108]	; (80033a8 <virtual_main+0x270>)
 800333c:	f006 f9b8 	bl	80096b0 <HAL_UART_Transmit>

				dht11_data_ready = 0;
 8003340:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <virtual_main+0x274>)
 8003342:	2200      	movs	r2, #0
 8003344:	701a      	strb	r2, [r3, #0]
				send_data_time_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8003346:	4b04      	ldr	r3, [pc, #16]	; (8003358 <virtual_main+0x220>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	4a05      	ldr	r2, [pc, #20]	; (8003364 <virtual_main+0x22c>)
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	46b5      	mov	sp, r6
//			}
		}
		break;
 8003352:	e25d      	b.n	8003810 <virtual_main+0x6d8>
 8003354:	20000028 	.word	0x20000028
 8003358:	200008b4 	.word	0x200008b4
 800335c:	20000ac8 	.word	0x20000ac8
 8003360:	20000acc 	.word	0x20000acc
 8003364:	20000abc 	.word	0x20000abc
 8003368:	20000ac4 	.word	0x20000ac4
 800336c:	20000ac0 	.word	0x20000ac0
 8003370:	20000ad0 	.word	0x20000ad0
 8003374:	20000029 	.word	0x20000029
 8003378:	20000ab0 	.word	0x20000ab0
 800337c:	41d80000 	.word	0x41d80000
 8003380:	20000ab8 	.word	0x20000ab8
 8003384:	41400000 	.word	0x41400000
 8003388:	2000035c 	.word	0x2000035c
 800338c:	20000368 	.word	0x20000368
 8003390:	20000ad1 	.word	0x20000ad1
 8003394:	00989680 	.word	0x00989680
 8003398:	080108e8 	.word	0x080108e8
 800339c:	080108fc 	.word	0x080108fc
 80033a0:	200009a0 	.word	0x200009a0
 80033a4:	08010910 	.word	0x08010910
 80033a8:	20000a24 	.word	0x20000a24
 80033ac:	20000aa9 	.word	0x20000aa9

	case DHT11_PROCEDURE:
		if(DHT11_Start())
 80033b0:	f7fe f8b0 	bl	8001514 <DHT11_Start>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 822c 	beq.w	8003814 <virtual_main+0x6dc>
		{
			RHI = DHT11_Read(); // Relative humidity integral
 80033bc:	f7fe f828 	bl	8001410 <DHT11_Read>
 80033c0:	4603      	mov	r3, r0
 80033c2:	461a      	mov	r2, r3
 80033c4:	4bb5      	ldr	r3, [pc, #724]	; (800369c <virtual_main+0x564>)
 80033c6:	701a      	strb	r2, [r3, #0]
			RHD = DHT11_Read(); // Relative humidity decimal
 80033c8:	f7fe f822 	bl	8001410 <DHT11_Read>
 80033cc:	4603      	mov	r3, r0
 80033ce:	461a      	mov	r2, r3
 80033d0:	4bb3      	ldr	r3, [pc, #716]	; (80036a0 <virtual_main+0x568>)
 80033d2:	701a      	strb	r2, [r3, #0]
			TCI = DHT11_Read(); // Celsius integral
 80033d4:	f7fe f81c 	bl	8001410 <DHT11_Read>
 80033d8:	4603      	mov	r3, r0
 80033da:	461a      	mov	r2, r3
 80033dc:	4bb1      	ldr	r3, [pc, #708]	; (80036a4 <virtual_main+0x56c>)
 80033de:	701a      	strb	r2, [r3, #0]
			TCD = DHT11_Read(); // Celsius decimal
 80033e0:	f7fe f816 	bl	8001410 <DHT11_Read>
 80033e4:	4603      	mov	r3, r0
 80033e6:	461a      	mov	r2, r3
 80033e8:	4baf      	ldr	r3, [pc, #700]	; (80036a8 <virtual_main+0x570>)
 80033ea:	701a      	strb	r2, [r3, #0]
			SUM = DHT11_Read(); // Check sum
 80033ec:	f7fe f810 	bl	8001410 <DHT11_Read>
 80033f0:	4603      	mov	r3, r0
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	4bad      	ldr	r3, [pc, #692]	; (80036ac <virtual_main+0x574>)
 80033f6:	801a      	strh	r2, [r3, #0]
			if (RHI + RHD + TCI + TCD == SUM)
 80033f8:	4ba8      	ldr	r3, [pc, #672]	; (800369c <virtual_main+0x564>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	461a      	mov	r2, r3
 80033fe:	4ba8      	ldr	r3, [pc, #672]	; (80036a0 <virtual_main+0x568>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	4413      	add	r3, r2
 8003404:	4aa7      	ldr	r2, [pc, #668]	; (80036a4 <virtual_main+0x56c>)
 8003406:	7812      	ldrb	r2, [r2, #0]
 8003408:	4413      	add	r3, r2
 800340a:	4aa7      	ldr	r2, [pc, #668]	; (80036a8 <virtual_main+0x570>)
 800340c:	7812      	ldrb	r2, [r2, #0]
 800340e:	4413      	add	r3, r2
 8003410:	4aa6      	ldr	r2, [pc, #664]	; (80036ac <virtual_main+0x574>)
 8003412:	8812      	ldrh	r2, [r2, #0]
 8003414:	4293      	cmp	r3, r2
 8003416:	f040 81fd 	bne.w	8003814 <virtual_main+0x6dc>
			{
				// Can use RHI and TCI for any purposes if whole number only needed
				tCelsius = (float)TCI + (float)(TCD/10.0);
 800341a:	4ba2      	ldr	r3, [pc, #648]	; (80036a4 <virtual_main+0x56c>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	ee07 3a90 	vmov	s15, r3
 8003422:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8003426:	4ba0      	ldr	r3, [pc, #640]	; (80036a8 <virtual_main+0x570>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f7fd f87a 	bl	8000524 <__aeabi_i2d>
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	4b9e      	ldr	r3, [pc, #632]	; (80036b0 <virtual_main+0x578>)
 8003436:	f7fd fa09 	bl	800084c <__aeabi_ddiv>
 800343a:	4602      	mov	r2, r0
 800343c:	460b      	mov	r3, r1
 800343e:	4610      	mov	r0, r2
 8003440:	4619      	mov	r1, r3
 8003442:	f7fd fbd1 	bl	8000be8 <__aeabi_d2f>
 8003446:	ee07 0a90 	vmov	s15, r0
 800344a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800344e:	4b99      	ldr	r3, [pc, #612]	; (80036b4 <virtual_main+0x57c>)
 8003450:	edc3 7a00 	vstr	s15, [r3]
				tFahrenheit = tCelsius * 9/5 + 32;
 8003454:	4b97      	ldr	r3, [pc, #604]	; (80036b4 <virtual_main+0x57c>)
 8003456:	edd3 7a00 	vldr	s15, [r3]
 800345a:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800345e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003462:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8003466:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800346a:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80036b8 <virtual_main+0x580>
 800346e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003472:	4b92      	ldr	r3, [pc, #584]	; (80036bc <virtual_main+0x584>)
 8003474:	edc3 7a00 	vstr	s15, [r3]
				RH = (float)RHI + (float)(RHD/10.0);
 8003478:	4b88      	ldr	r3, [pc, #544]	; (800369c <virtual_main+0x564>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	ee07 3a90 	vmov	s15, r3
 8003480:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8003484:	4b86      	ldr	r3, [pc, #536]	; (80036a0 <virtual_main+0x568>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f7fd f84b 	bl	8000524 <__aeabi_i2d>
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	4b87      	ldr	r3, [pc, #540]	; (80036b0 <virtual_main+0x578>)
 8003494:	f7fd f9da 	bl	800084c <__aeabi_ddiv>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4610      	mov	r0, r2
 800349e:	4619      	mov	r1, r3
 80034a0:	f7fd fba2 	bl	8000be8 <__aeabi_d2f>
 80034a4:	ee07 0a90 	vmov	s15, r0
 80034a8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80034ac:	4b84      	ldr	r3, [pc, #528]	; (80036c0 <virtual_main+0x588>)
 80034ae:	edc3 7a00 	vstr	s15, [r3]

				state = HOME;
 80034b2:	4b84      	ldr	r3, [pc, #528]	; (80036c4 <virtual_main+0x58c>)
 80034b4:	2209      	movs	r2, #9
 80034b6:	701a      	strb	r2, [r3, #0]
				dht11_data_ready = 1;
 80034b8:	4b83      	ldr	r3, [pc, #524]	; (80036c8 <virtual_main+0x590>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	701a      	strb	r2, [r3, #0]

				char data4[32];
				sprintf(data4, "tCelsius: %f \n\r", tCelsius);
 80034be:	4b7d      	ldr	r3, [pc, #500]	; (80036b4 <virtual_main+0x57c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fd f840 	bl	8000548 <__aeabi_f2d>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	f107 000c 	add.w	r0, r7, #12
 80034d0:	497e      	ldr	r1, [pc, #504]	; (80036cc <virtual_main+0x594>)
 80034d2:	f007 fccf 	bl	800ae74 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)data4, strlen(data4), HAL_MAX_DELAY);
 80034d6:	f107 030c 	add.w	r3, r7, #12
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fc fe78 	bl	80001d0 <strlen>
 80034e0:	4603      	mov	r3, r0
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	f107 010c 	add.w	r1, r7, #12
 80034e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034ec:	4878      	ldr	r0, [pc, #480]	; (80036d0 <virtual_main+0x598>)
 80034ee:	f006 f8df 	bl	80096b0 <HAL_UART_Transmit>
				char data5[32];
				sprintf(data5, "RH: %f \n\r", RH);
 80034f2:	4b73      	ldr	r3, [pc, #460]	; (80036c0 <virtual_main+0x588>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fd f826 	bl	8000548 <__aeabi_f2d>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003504:	4973      	ldr	r1, [pc, #460]	; (80036d4 <virtual_main+0x59c>)
 8003506:	f007 fcb5 	bl	800ae74 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)data5, strlen(data5), HAL_MAX_DELAY);
 800350a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800350e:	4618      	mov	r0, r3
 8003510:	f7fc fe5e 	bl	80001d0 <strlen>
 8003514:	4603      	mov	r3, r0
 8003516:	b29a      	uxth	r2, r3
 8003518:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800351c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003520:	486b      	ldr	r0, [pc, #428]	; (80036d0 <virtual_main+0x598>)
 8003522:	f006 f8c5 	bl	80096b0 <HAL_UART_Transmit>

				// Can use tCelsius, tFahrenheit and RH for any purposes
			}
		}
		break;
 8003526:	e175      	b.n	8003814 <virtual_main+0x6dc>

	case WATER_LOAD_PROCEDURE:

				HAL_ADC_Start_IT(&hadc1);
 8003528:	486b      	ldr	r0, [pc, #428]	; (80036d8 <virtual_main+0x5a0>)
 800352a:	f000 ffc3 	bl	80044b4 <HAL_ADC_Start_IT>
				char datawlp[64];
				sprintf(datawlp, "WATER LOAD PROCEDURE - Water Level GT: %lui \n\r", water_level_gt);
 800352e:	4b6b      	ldr	r3, [pc, #428]	; (80036dc <virtual_main+0x5a4>)
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003536:	496a      	ldr	r1, [pc, #424]	; (80036e0 <virtual_main+0x5a8>)
 8003538:	4618      	mov	r0, r3
 800353a:	f007 fc9b 	bl	800ae74 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)datawlp, strlen(datawlp), HAL_MAX_DELAY);
 800353e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003542:	4618      	mov	r0, r3
 8003544:	f7fc fe44 	bl	80001d0 <strlen>
 8003548:	4603      	mov	r3, r0
 800354a:	b29a      	uxth	r2, r3
 800354c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003550:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003554:	485e      	ldr	r0, [pc, #376]	; (80036d0 <virtual_main+0x598>)
 8003556:	f006 f8ab 	bl	80096b0 <HAL_UART_Transmit>

				if (water_level_gt >= 180)
 800355a:	4b60      	ldr	r3, [pc, #384]	; (80036dc <virtual_main+0x5a4>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2bb3      	cmp	r3, #179	; 0xb3
 8003560:	d916      	bls.n	8003590 <virtual_main+0x458>
				{
					// STOP THE PUMP
					HAL_GPIO_WritePin(LOAD_WATER_PUMP_GPIO_Port, LOAD_WATER_PUMP_Pin, GPIO_PIN_RESET);
 8003562:	2200      	movs	r2, #0
 8003564:	2180      	movs	r1, #128	; 0x80
 8003566:	485f      	ldr	r0, [pc, #380]	; (80036e4 <virtual_main+0x5ac>)
 8003568:	f002 fef2 	bl	8006350 <HAL_GPIO_WritePin>

					// UPDATE THE VALUES
					is_water_ready = 0;
 800356c:	4b5e      	ldr	r3, [pc, #376]	; (80036e8 <virtual_main+0x5b0>)
 800356e:	2200      	movs	r2, #0
 8003570:	701a      	strb	r2, [r3, #0]
					counting_to_load = 0;
 8003572:	4b5e      	ldr	r3, [pc, #376]	; (80036ec <virtual_main+0x5b4>)
 8003574:	2200      	movs	r2, #0
 8003576:	701a      	strb	r2, [r3, #0]
					counting_to_unload = 1;
 8003578:	4b5d      	ldr	r3, [pc, #372]	; (80036f0 <virtual_main+0x5b8>)
 800357a:	2201      	movs	r2, #1
 800357c:	701a      	strb	r2, [r3, #0]
					water_proc_time_prev = __HAL_TIM_GET_COUNTER(&htim2);
 800357e:	4b5d      	ldr	r3, [pc, #372]	; (80036f4 <virtual_main+0x5bc>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	4a5c      	ldr	r2, [pc, #368]	; (80036f8 <virtual_main+0x5c0>)
 8003586:	6013      	str	r3, [r2, #0]
//					loading = 0;

					state = HOME;
 8003588:	4b4e      	ldr	r3, [pc, #312]	; (80036c4 <virtual_main+0x58c>)
 800358a:	2209      	movs	r2, #9
 800358c:	701a      	strb	r2, [r3, #0]
				else
				{
					HAL_GPIO_WritePin(LOAD_WATER_PUMP_GPIO_Port, LOAD_WATER_PUMP_Pin, GPIO_PIN_SET);
				}
//			}
			break;
 800358e:	e142      	b.n	8003816 <virtual_main+0x6de>
					HAL_GPIO_WritePin(LOAD_WATER_PUMP_GPIO_Port, LOAD_WATER_PUMP_Pin, GPIO_PIN_SET);
 8003590:	2201      	movs	r2, #1
 8003592:	2180      	movs	r1, #128	; 0x80
 8003594:	4853      	ldr	r0, [pc, #332]	; (80036e4 <virtual_main+0x5ac>)
 8003596:	f002 fedb 	bl	8006350 <HAL_GPIO_WritePin>
			break;
 800359a:	e13c      	b.n	8003816 <virtual_main+0x6de>

	case(WATER_UNLOAD_PROCEDURE):
			// NEW READ FROM THE WATER LEVEL GT SENSOR
			HAL_ADC_Start_IT(&hadc1);
 800359c:	484e      	ldr	r0, [pc, #312]	; (80036d8 <virtual_main+0x5a0>)
 800359e:	f000 ff89 	bl	80044b4 <HAL_ADC_Start_IT>

			char datawulp[64];
			sprintf(datawulp, "WATER UNLOAD PROCEDURE - Water Level GT: %lu \n\r", water_level_gt);
 80035a2:	4b4e      	ldr	r3, [pc, #312]	; (80036dc <virtual_main+0x5a4>)
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035aa:	4954      	ldr	r1, [pc, #336]	; (80036fc <virtual_main+0x5c4>)
 80035ac:	4618      	mov	r0, r3
 80035ae:	f007 fc61 	bl	800ae74 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)datawulp, strlen(datawulp), HAL_MAX_DELAY);
 80035b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fc fe0a 	bl	80001d0 <strlen>
 80035bc:	4603      	mov	r3, r0
 80035be:	b29a      	uxth	r2, r3
 80035c0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80035c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035c8:	4841      	ldr	r0, [pc, #260]	; (80036d0 <virtual_main+0x598>)
 80035ca:	f006 f871 	bl	80096b0 <HAL_UART_Transmit>

			if (water_level_gt < 100)
 80035ce:	4b43      	ldr	r3, [pc, #268]	; (80036dc <virtual_main+0x5a4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b63      	cmp	r3, #99	; 0x63
 80035d4:	d810      	bhi.n	80035f8 <virtual_main+0x4c0>
			{
				// STOP THE PUMP
				HAL_GPIO_WritePin(UNLOAD_WATER_PUMP_GPIO_Port, UNLOAD_WATER_PUMP_Pin, GPIO_PIN_RESET);
 80035d6:	2200      	movs	r2, #0
 80035d8:	2140      	movs	r1, #64	; 0x40
 80035da:	4842      	ldr	r0, [pc, #264]	; (80036e4 <virtual_main+0x5ac>)
 80035dc:	f002 feb8 	bl	8006350 <HAL_GPIO_WritePin>

				// UPDATE THE VALUES
				counting_to_load = 1;
 80035e0:	4b42      	ldr	r3, [pc, #264]	; (80036ec <virtual_main+0x5b4>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	701a      	strb	r2, [r3, #0]
				counting_to_unload = 0;
 80035e6:	4b42      	ldr	r3, [pc, #264]	; (80036f0 <virtual_main+0x5b8>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	701a      	strb	r2, [r3, #0]
				water_proc_time_prev = __HAL_TIM_GET_COUNTER(&htim2);
 80035ec:	4b41      	ldr	r3, [pc, #260]	; (80036f4 <virtual_main+0x5bc>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	4a41      	ldr	r2, [pc, #260]	; (80036f8 <virtual_main+0x5c0>)
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	e004      	b.n	8003602 <virtual_main+0x4ca>
			}
			else
			{
				HAL_GPIO_WritePin(UNLOAD_WATER_PUMP_GPIO_Port, UNLOAD_WATER_PUMP_Pin, GPIO_PIN_SET);
 80035f8:	2201      	movs	r2, #1
 80035fa:	2140      	movs	r1, #64	; 0x40
 80035fc:	4839      	ldr	r0, [pc, #228]	; (80036e4 <virtual_main+0x5ac>)
 80035fe:	f002 fea7 	bl	8006350 <HAL_GPIO_WritePin>
			}

			state = HOME;
 8003602:	4b30      	ldr	r3, [pc, #192]	; (80036c4 <virtual_main+0x58c>)
 8003604:	2209      	movs	r2, #9
 8003606:	701a      	strb	r2, [r3, #0]
			break;
 8003608:	e105      	b.n	8003816 <virtual_main+0x6de>

	case(ECPH_PROCEDURE):

			if (!ec_initialized)
 800360a:	4b3d      	ldr	r3, [pc, #244]	; (8003700 <virtual_main+0x5c8>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	f083 0301 	eor.w	r3, r3, #1
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <virtual_main+0x4e6>
			{
				ec_init();
 8003618:	f7fe f816 	bl	8001648 <ec_init>
 800361c:	e039      	b.n	8003692 <virtual_main+0x55a>
			}
			// CHECK FOR 5 SECONDS
			else
			{
//				ec_read(&hadc3);
				ph_read(&hadc3);
 800361e:	4839      	ldr	r0, [pc, #228]	; (8003704 <virtual_main+0x5cc>)
 8003620:	f7fe f846 	bl	80016b0 <ph_read>

				char data2[32];
				sprintf(data2, "EC: %f \n\r", EC);
 8003624:	4b38      	ldr	r3, [pc, #224]	; (8003708 <virtual_main+0x5d0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f7fc ff8d 	bl	8000548 <__aeabi_f2d>
 800362e:	4602      	mov	r2, r0
 8003630:	460b      	mov	r3, r1
 8003632:	f107 000c 	add.w	r0, r7, #12
 8003636:	4935      	ldr	r1, [pc, #212]	; (800370c <virtual_main+0x5d4>)
 8003638:	f007 fc1c 	bl	800ae74 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)data2, strlen(data2), HAL_MAX_DELAY);
 800363c:	f107 030c 	add.w	r3, r7, #12
 8003640:	4618      	mov	r0, r3
 8003642:	f7fc fdc5 	bl	80001d0 <strlen>
 8003646:	4603      	mov	r3, r0
 8003648:	b29a      	uxth	r2, r3
 800364a:	f107 010c 	add.w	r1, r7, #12
 800364e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003652:	481f      	ldr	r0, [pc, #124]	; (80036d0 <virtual_main+0x598>)
 8003654:	f006 f82c 	bl	80096b0 <HAL_UART_Transmit>

				char data1[32];
				sprintf(data1, "PH: %u \n\r", PH);
 8003658:	4b2d      	ldr	r3, [pc, #180]	; (8003710 <virtual_main+0x5d8>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003662:	492c      	ldr	r1, [pc, #176]	; (8003714 <virtual_main+0x5dc>)
 8003664:	4618      	mov	r0, r3
 8003666:	f007 fc05 	bl	800ae74 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)data1, strlen(data1), HAL_MAX_DELAY);
 800366a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800366e:	4618      	mov	r0, r3
 8003670:	f7fc fdae 	bl	80001d0 <strlen>
 8003674:	4603      	mov	r3, r0
 8003676:	b29a      	uxth	r2, r3
 8003678:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800367c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003680:	4813      	ldr	r0, [pc, #76]	; (80036d0 <virtual_main+0x598>)
 8003682:	f006 f815 	bl	80096b0 <HAL_UART_Transmit>

				ecph_read = 1;
 8003686:	4b24      	ldr	r3, [pc, #144]	; (8003718 <virtual_main+0x5e0>)
 8003688:	2201      	movs	r2, #1
 800368a:	701a      	strb	r2, [r3, #0]
				ec_initialized = 0;
 800368c:	4b1c      	ldr	r3, [pc, #112]	; (8003700 <virtual_main+0x5c8>)
 800368e:	2200      	movs	r2, #0
 8003690:	701a      	strb	r2, [r3, #0]
			}

			state = HOME;
 8003692:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <virtual_main+0x58c>)
 8003694:	2209      	movs	r2, #9
 8003696:	701a      	strb	r2, [r3, #0]
			break;
 8003698:	e0bd      	b.n	8003816 <virtual_main+0x6de>
 800369a:	bf00      	nop
 800369c:	20000aaa 	.word	0x20000aaa
 80036a0:	20000aab 	.word	0x20000aab
 80036a4:	20000aac 	.word	0x20000aac
 80036a8:	20000aad 	.word	0x20000aad
 80036ac:	20000aae 	.word	0x20000aae
 80036b0:	40240000 	.word	0x40240000
 80036b4:	20000ab0 	.word	0x20000ab0
 80036b8:	42000000 	.word	0x42000000
 80036bc:	20000ab4 	.word	0x20000ab4
 80036c0:	20000ab8 	.word	0x20000ab8
 80036c4:	20000028 	.word	0x20000028
 80036c8:	20000aa9 	.word	0x20000aa9
 80036cc:	08010924 	.word	0x08010924
 80036d0:	20000a24 	.word	0x20000a24
 80036d4:	08010934 	.word	0x08010934
 80036d8:	20000224 	.word	0x20000224
 80036dc:	20000024 	.word	0x20000024
 80036e0:	08010940 	.word	0x08010940
 80036e4:	48000400 	.word	0x48000400
 80036e8:	20000aa8 	.word	0x20000aa8
 80036ec:	20000ad0 	.word	0x20000ad0
 80036f0:	20000029 	.word	0x20000029
 80036f4:	200008b4 	.word	0x200008b4
 80036f8:	20000ac8 	.word	0x20000ac8
 80036fc:	08010970 	.word	0x08010970
 8003700:	2000036a 	.word	0x2000036a
 8003704:	200002ec 	.word	0x200002ec
 8003708:	2000035c 	.word	0x2000035c
 800370c:	080109a0 	.word	0x080109a0
 8003710:	20000368 	.word	0x20000368
 8003714:	080109ac 	.word	0x080109ac
 8003718:	20000ad2 	.word	0x20000ad2

	case (MIX_PROCEDURE):
			if (!nutrs_deployed)
 800371c:	4b41      	ldr	r3, [pc, #260]	; (8003824 <virtual_main+0x6ec>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	f083 0301 	eor.w	r3, r3, #1
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d024      	beq.n	8003774 <virtual_main+0x63c>
			{
				stepper_step_angle(360, 1, 10);
 800372a:	210a      	movs	r1, #10
 800372c:	2001      	movs	r0, #1
 800372e:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8003828 <virtual_main+0x6f0>
 8003732:	f7fe ff15 	bl	8002560 <stepper_step_angle>

				char data1[32];
				sprintf(data1, "NUTRS DEPLOYED \n\r");
 8003736:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800373a:	493c      	ldr	r1, [pc, #240]	; (800382c <virtual_main+0x6f4>)
 800373c:	4618      	mov	r0, r3
 800373e:	f007 fb99 	bl	800ae74 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)data1, strlen(data1), HAL_MAX_DELAY);
 8003742:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003746:	4618      	mov	r0, r3
 8003748:	f7fc fd42 	bl	80001d0 <strlen>
 800374c:	4603      	mov	r3, r0
 800374e:	b29a      	uxth	r2, r3
 8003750:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003754:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003758:	4835      	ldr	r0, [pc, #212]	; (8003830 <virtual_main+0x6f8>)
 800375a:	f005 ffa9 	bl	80096b0 <HAL_UART_Transmit>

				HAL_GPIO_WritePin(MIX_PUMP_GPIO_Port, MIX_PUMP_Pin, GPIO_PIN_SET);
 800375e:	2201      	movs	r2, #1
 8003760:	2104      	movs	r1, #4
 8003762:	4834      	ldr	r0, [pc, #208]	; (8003834 <virtual_main+0x6fc>)
 8003764:	f002 fdf4 	bl	8006350 <HAL_GPIO_WritePin>
				mix_time_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8003768:	4b33      	ldr	r3, [pc, #204]	; (8003838 <virtual_main+0x700>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	4a33      	ldr	r2, [pc, #204]	; (800383c <virtual_main+0x704>)
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	e02b      	b.n	80037cc <virtual_main+0x694>
			}
			else
			{
				if (__HAL_TIM_GET_COUNTER(&htim2) - mix_time_prev >= 7000000)
 8003774:	4b30      	ldr	r3, [pc, #192]	; (8003838 <virtual_main+0x700>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800377a:	4b30      	ldr	r3, [pc, #192]	; (800383c <virtual_main+0x704>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	4a2f      	ldr	r2, [pc, #188]	; (8003840 <virtual_main+0x708>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d322      	bcc.n	80037cc <virtual_main+0x694>
				{
					char data1[32];
					sprintf(data1, "MIXED \n\r");
 8003786:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800378a:	492e      	ldr	r1, [pc, #184]	; (8003844 <virtual_main+0x70c>)
 800378c:	4618      	mov	r0, r3
 800378e:	f007 fb71 	bl	800ae74 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)data1, strlen(data1), HAL_MAX_DELAY);
 8003792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003796:	4618      	mov	r0, r3
 8003798:	f7fc fd1a 	bl	80001d0 <strlen>
 800379c:	4603      	mov	r3, r0
 800379e:	b29a      	uxth	r2, r3
 80037a0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80037a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037a8:	4821      	ldr	r0, [pc, #132]	; (8003830 <virtual_main+0x6f8>)
 80037aa:	f005 ff81 	bl	80096b0 <HAL_UART_Transmit>

					HAL_GPIO_WritePin(MIX_PUMP_GPIO_Port, MIX_PUMP_Pin, GPIO_PIN_RESET);
 80037ae:	2200      	movs	r2, #0
 80037b0:	2104      	movs	r1, #4
 80037b2:	4820      	ldr	r0, [pc, #128]	; (8003834 <virtual_main+0x6fc>)
 80037b4:	f002 fdcc 	bl	8006350 <HAL_GPIO_WritePin>

					EC = 1.5;
 80037b8:	4b23      	ldr	r3, [pc, #140]	; (8003848 <virtual_main+0x710>)
 80037ba:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80037be:	601a      	str	r2, [r3, #0]

					nutrs_deployed = 0;
 80037c0:	4b18      	ldr	r3, [pc, #96]	; (8003824 <virtual_main+0x6ec>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	701a      	strb	r2, [r3, #0]
					ecph_read = 0;
 80037c6:	4b21      	ldr	r3, [pc, #132]	; (800384c <virtual_main+0x714>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	701a      	strb	r2, [r3, #0]
				}
			}
			state = HOME;
 80037cc:	4b20      	ldr	r3, [pc, #128]	; (8003850 <virtual_main+0x718>)
 80037ce:	2209      	movs	r2, #9
 80037d0:	701a      	strb	r2, [r3, #0]
			break;
 80037d2:	e020      	b.n	8003816 <virtual_main+0x6de>

	case(LIGHTS_PROCEDURE):
//			setLight(1);
						HAL_ADC_Start_IT(&hadc1);
 80037d4:	481f      	ldr	r0, [pc, #124]	; (8003854 <virtual_main+0x71c>)
 80037d6:	f000 fe6d 	bl	80044b4 <HAL_ADC_Start_IT>
						char datatest[64];
						sprintf(datatest, "WATER LOAD PROCEDURE - Water Level GT: %lu \n\r", water_level_gt);
 80037da:	4b1f      	ldr	r3, [pc, #124]	; (8003858 <virtual_main+0x720>)
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037e2:	491e      	ldr	r1, [pc, #120]	; (800385c <virtual_main+0x724>)
 80037e4:	4618      	mov	r0, r3
 80037e6:	f007 fb45 	bl	800ae74 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)datatest, strlen(datatest), HAL_MAX_DELAY);
 80037ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fc fcee 	bl	80001d0 <strlen>
 80037f4:	4603      	mov	r3, r0
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80037fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003800:	480b      	ldr	r0, [pc, #44]	; (8003830 <virtual_main+0x6f8>)
 8003802:	f005 ff55 	bl	80096b0 <HAL_UART_Transmit>
			break;
 8003806:	e006      	b.n	8003816 <virtual_main+0x6de>
//		// CHECK WATER STATUS
//		is_default_check = 1;
//		state = ECPH_PROCEDURE;

		// LIGHTS OFF
		setLight(0);
 8003808:	2000      	movs	r0, #0
 800380a:	f7fe fc6d 	bl	80020e8 <setLight>
		break;
 800380e:	e002      	b.n	8003816 <virtual_main+0x6de>
		break;
 8003810:	bf00      	nop
 8003812:	e000      	b.n	8003816 <virtual_main+0x6de>
		break;
 8003814:	bf00      	nop
	}
}
 8003816:	bf00      	nop
 8003818:	377c      	adds	r7, #124	; 0x7c
 800381a:	46bd      	mov	sp, r7
 800381c:	ecbd 8b02 	vpop	{d8}
 8003820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003824:	20000860 	.word	0x20000860
 8003828:	43b40000 	.word	0x43b40000
 800382c:	080109b8 	.word	0x080109b8
 8003830:	20000a24 	.word	0x20000a24
 8003834:	48000400 	.word	0x48000400
 8003838:	200008b4 	.word	0x200008b4
 800383c:	20000ac4 	.word	0x20000ac4
 8003840:	006acfc0 	.word	0x006acfc0
 8003844:	080109cc 	.word	0x080109cc
 8003848:	2000035c 	.word	0x2000035c
 800384c:	20000ad2 	.word	0x20000ad2
 8003850:	20000028 	.word	0x20000028
 8003854:	20000224 	.word	0x20000224
 8003858:	20000024 	.word	0x20000024
 800385c:	080109d8 	.word	0x080109d8

08003860 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003860:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003898 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003864:	f7ff f814 	bl	8002890 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003868:	480c      	ldr	r0, [pc, #48]	; (800389c <LoopForever+0x6>)
  ldr r1, =_edata
 800386a:	490d      	ldr	r1, [pc, #52]	; (80038a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800386c:	4a0d      	ldr	r2, [pc, #52]	; (80038a4 <LoopForever+0xe>)
  movs r3, #0
 800386e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003870:	e002      	b.n	8003878 <LoopCopyDataInit>

08003872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003876:	3304      	adds	r3, #4

08003878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800387a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800387c:	d3f9      	bcc.n	8003872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800387e:	4a0a      	ldr	r2, [pc, #40]	; (80038a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003880:	4c0a      	ldr	r4, [pc, #40]	; (80038ac <LoopForever+0x16>)
  movs r3, #0
 8003882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003884:	e001      	b.n	800388a <LoopFillZerobss>

08003886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003888:	3204      	adds	r2, #4

0800388a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800388a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800388c:	d3fb      	bcc.n	8003886 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800388e:	f006 fc11 	bl	800a0b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003892:	f7fe fcbb 	bl	800220c <main>

08003896 <LoopForever>:

LoopForever:
    b LoopForever
 8003896:	e7fe      	b.n	8003896 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003898:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800389c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038a0:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 80038a4:	08011110 	.word	0x08011110
  ldr r2, =_sbss
 80038a8:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80038ac:	20000ae8 	.word	0x20000ae8

080038b0 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80038b0:	e7fe      	b.n	80038b0 <CAN1_RX0_IRQHandler>
	...

080038b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038be:	4b0c      	ldr	r3, [pc, #48]	; (80038f0 <HAL_Init+0x3c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a0b      	ldr	r2, [pc, #44]	; (80038f0 <HAL_Init+0x3c>)
 80038c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038ca:	2003      	movs	r0, #3
 80038cc:	f002 f904 	bl	8005ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038d0:	2000      	movs	r0, #0
 80038d2:	f000 f80f 	bl	80038f4 <HAL_InitTick>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d002      	beq.n	80038e2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	71fb      	strb	r3, [r7, #7]
 80038e0:	e001      	b.n	80038e6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80038e2:	f7fe fe8f 	bl	8002604 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80038e6:	79fb      	ldrb	r3, [r7, #7]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40022000 	.word	0x40022000

080038f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80038fc:	2300      	movs	r3, #0
 80038fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003900:	4b17      	ldr	r3, [pc, #92]	; (8003960 <HAL_InitTick+0x6c>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d023      	beq.n	8003950 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003908:	4b16      	ldr	r3, [pc, #88]	; (8003964 <HAL_InitTick+0x70>)
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	4b14      	ldr	r3, [pc, #80]	; (8003960 <HAL_InitTick+0x6c>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	4619      	mov	r1, r3
 8003912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003916:	fbb3 f3f1 	udiv	r3, r3, r1
 800391a:	fbb2 f3f3 	udiv	r3, r2, r3
 800391e:	4618      	mov	r0, r3
 8003920:	f002 f90f 	bl	8005b42 <HAL_SYSTICK_Config>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10f      	bne.n	800394a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b0f      	cmp	r3, #15
 800392e:	d809      	bhi.n	8003944 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003930:	2200      	movs	r2, #0
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003938:	f002 f8d9 	bl	8005aee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800393c:	4a0a      	ldr	r2, [pc, #40]	; (8003968 <HAL_InitTick+0x74>)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	e007      	b.n	8003954 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	73fb      	strb	r3, [r7, #15]
 8003948:	e004      	b.n	8003954 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	73fb      	strb	r3, [r7, #15]
 800394e:	e001      	b.n	8003954 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003954:	7bfb      	ldrb	r3, [r7, #15]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	20000030 	.word	0x20000030
 8003964:	20000020 	.word	0x20000020
 8003968:	2000002c 	.word	0x2000002c

0800396c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003970:	4b06      	ldr	r3, [pc, #24]	; (800398c <HAL_IncTick+0x20>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	461a      	mov	r2, r3
 8003976:	4b06      	ldr	r3, [pc, #24]	; (8003990 <HAL_IncTick+0x24>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4413      	add	r3, r2
 800397c:	4a04      	ldr	r2, [pc, #16]	; (8003990 <HAL_IncTick+0x24>)
 800397e:	6013      	str	r3, [r2, #0]
}
 8003980:	bf00      	nop
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	20000030 	.word	0x20000030
 8003990:	20000ad4 	.word	0x20000ad4

08003994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  return uwTick;
 8003998:	4b03      	ldr	r3, [pc, #12]	; (80039a8 <HAL_GetTick+0x14>)
 800399a:	681b      	ldr	r3, [r3, #0]
}
 800399c:	4618      	mov	r0, r3
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	20000ad4 	.word	0x20000ad4

080039ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039b4:	f7ff ffee 	bl	8003994 <HAL_GetTick>
 80039b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039c4:	d005      	beq.n	80039d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80039c6:	4b0a      	ldr	r3, [pc, #40]	; (80039f0 <HAL_Delay+0x44>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4413      	add	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039d2:	bf00      	nop
 80039d4:	f7ff ffde 	bl	8003994 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d8f7      	bhi.n	80039d4 <HAL_Delay+0x28>
  {
  }
}
 80039e4:	bf00      	nop
 80039e6:	bf00      	nop
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20000030 	.word	0x20000030

080039f4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	609a      	str	r2, [r3, #8]
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	609a      	str	r2, [r3, #8]
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	3360      	adds	r3, #96	; 0x60
 8003a6e:	461a      	mov	r2, r3
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	4b08      	ldr	r3, [pc, #32]	; (8003aa0 <LL_ADC_SetOffset+0x44>)
 8003a7e:	4013      	ands	r3, r2
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003a94:	bf00      	nop
 8003a96:	371c      	adds	r7, #28
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	03fff000 	.word	0x03fff000

08003aa4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3360      	adds	r3, #96	; 0x60
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	3360      	adds	r3, #96	; 0x60
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	431a      	orrs	r2, r3
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003afa:	bf00      	nop
 8003afc:	371c      	adds	r7, #28
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e000      	b.n	8003b20 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	3330      	adds	r3, #48	; 0x30
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	0a1b      	lsrs	r3, r3, #8
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	f003 030c 	and.w	r3, r3, #12
 8003b48:	4413      	add	r3, r2
 8003b4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f003 031f 	and.w	r3, r3, #31
 8003b56:	211f      	movs	r1, #31
 8003b58:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	401a      	ands	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	0e9b      	lsrs	r3, r3, #26
 8003b64:	f003 011f 	and.w	r1, r3, #31
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f003 031f 	and.w	r3, r3, #31
 8003b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b72:	431a      	orrs	r2, r3
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003b78:	bf00      	nop
 8003b7a:	371c      	adds	r7, #28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b90:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e000      	b.n	8003b9e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b087      	sub	sp, #28
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	60f8      	str	r0, [r7, #12]
 8003bb2:	60b9      	str	r1, [r7, #8]
 8003bb4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	3314      	adds	r3, #20
 8003bba:	461a      	mov	r2, r3
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	0e5b      	lsrs	r3, r3, #25
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	f003 0304 	and.w	r3, r3, #4
 8003bc6:	4413      	add	r3, r2
 8003bc8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	0d1b      	lsrs	r3, r3, #20
 8003bd2:	f003 031f 	and.w	r3, r3, #31
 8003bd6:	2107      	movs	r1, #7
 8003bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	401a      	ands	r2, r3
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	0d1b      	lsrs	r3, r3, #20
 8003be4:	f003 031f 	and.w	r3, r3, #31
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	fa01 f303 	lsl.w	r3, r1, r3
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003bf4:	bf00      	nop
 8003bf6:	371c      	adds	r7, #28
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	401a      	ands	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f003 0318 	and.w	r3, r3, #24
 8003c22:	4908      	ldr	r1, [pc, #32]	; (8003c44 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003c24:	40d9      	lsrs	r1, r3
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	400b      	ands	r3, r1
 8003c2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003c36:	bf00      	nop
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	0007ffff 	.word	0x0007ffff

08003c48 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f003 031f 	and.w	r3, r3, #31
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003c90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6093      	str	r3, [r2, #8]
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cb8:	d101      	bne.n	8003cbe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003cdc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ce0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d08:	d101      	bne.n	8003d0e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e000      	b.n	8003d10 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d30:	f043 0201 	orr.w	r2, r3, #1
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d58:	f043 0202 	orr.w	r2, r3, #2
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d101      	bne.n	8003d84 <LL_ADC_IsEnabled+0x18>
 8003d80:	2301      	movs	r3, #1
 8003d82:	e000      	b.n	8003d86 <LL_ADC_IsEnabled+0x1a>
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d101      	bne.n	8003daa <LL_ADC_IsDisableOngoing+0x18>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <LL_ADC_IsDisableOngoing+0x1a>
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003dc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003dcc:	f043 0204 	orr.w	r2, r3, #4
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003df0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003df4:	f043 0210 	orr.w	r2, r3, #16
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d101      	bne.n	8003e20 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e000      	b.n	8003e22 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e3e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e42:	f043 0220 	orr.w	r2, r3, #32
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 0308 	and.w	r3, r3, #8
 8003e66:	2b08      	cmp	r3, #8
 8003e68:	d101      	bne.n	8003e6e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e000      	b.n	8003e70 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e7c:	b590      	push	{r4, r7, lr}
 8003e7e:	b089      	sub	sp, #36	; 0x24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e84:	2300      	movs	r3, #0
 8003e86:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e136      	b.n	8004104 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d109      	bne.n	8003eb8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7fd f9e5 	bl	8001274 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff fef1 	bl	8003ca4 <LL_ADC_IsDeepPowerDownEnabled>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d004      	beq.n	8003ed2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7ff fed7 	bl	8003c80 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7ff ff0c 	bl	8003cf4 <LL_ADC_IsInternalRegulatorEnabled>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d115      	bne.n	8003f0e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff fef0 	bl	8003ccc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003eec:	4b87      	ldr	r3, [pc, #540]	; (800410c <HAL_ADC_Init+0x290>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	099b      	lsrs	r3, r3, #6
 8003ef2:	4a87      	ldr	r2, [pc, #540]	; (8004110 <HAL_ADC_Init+0x294>)
 8003ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef8:	099b      	lsrs	r3, r3, #6
 8003efa:	3301      	adds	r3, #1
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f00:	e002      	b.n	8003f08 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	3b01      	subs	r3, #1
 8003f06:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1f9      	bne.n	8003f02 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff feee 	bl	8003cf4 <LL_ADC_IsInternalRegulatorEnabled>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10d      	bne.n	8003f3a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f22:	f043 0210 	orr.w	r2, r3, #16
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2e:	f043 0201 	orr.w	r2, r3, #1
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff ff62 	bl	8003e08 <LL_ADC_REG_IsConversionOngoing>
 8003f44:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f040 80cf 	bne.w	80040f2 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f040 80cb 	bne.w	80040f2 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f60:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f64:	f043 0202 	orr.w	r2, r3, #2
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7ff fefb 	bl	8003d6c <LL_ADC_IsEnabled>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d115      	bne.n	8003fa8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f7c:	4865      	ldr	r0, [pc, #404]	; (8004114 <HAL_ADC_Init+0x298>)
 8003f7e:	f7ff fef5 	bl	8003d6c <LL_ADC_IsEnabled>
 8003f82:	4604      	mov	r4, r0
 8003f84:	4864      	ldr	r0, [pc, #400]	; (8004118 <HAL_ADC_Init+0x29c>)
 8003f86:	f7ff fef1 	bl	8003d6c <LL_ADC_IsEnabled>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	431c      	orrs	r4, r3
 8003f8e:	4863      	ldr	r0, [pc, #396]	; (800411c <HAL_ADC_Init+0x2a0>)
 8003f90:	f7ff feec 	bl	8003d6c <LL_ADC_IsEnabled>
 8003f94:	4603      	mov	r3, r0
 8003f96:	4323      	orrs	r3, r4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d105      	bne.n	8003fa8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	485f      	ldr	r0, [pc, #380]	; (8004120 <HAL_ADC_Init+0x2a4>)
 8003fa4:	f7ff fd26 	bl	80039f4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	7e5b      	ldrb	r3, [r3, #25]
 8003fac:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003fb2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003fb8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003fbe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fc6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d106      	bne.n	8003fe4 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	045b      	lsls	r3, r3, #17
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d009      	beq.n	8004000 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68da      	ldr	r2, [r3, #12]
 8004006:	4b47      	ldr	r3, [pc, #284]	; (8004124 <HAL_ADC_Init+0x2a8>)
 8004008:	4013      	ands	r3, r2
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6812      	ldr	r2, [r2, #0]
 800400e:	69b9      	ldr	r1, [r7, #24]
 8004010:	430b      	orrs	r3, r1
 8004012:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff fef5 	bl	8003e08 <LL_ADC_REG_IsConversionOngoing>
 800401e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff ff16 	bl	8003e56 <LL_ADC_INJ_IsConversionOngoing>
 800402a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d13d      	bne.n	80040ae <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d13a      	bne.n	80040ae <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800403c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004044:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004046:	4313      	orrs	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004054:	f023 0302 	bic.w	r3, r3, #2
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	6812      	ldr	r2, [r2, #0]
 800405c:	69b9      	ldr	r1, [r7, #24]
 800405e:	430b      	orrs	r3, r1
 8004060:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004068:	2b01      	cmp	r3, #1
 800406a:	d118      	bne.n	800409e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004076:	f023 0304 	bic.w	r3, r3, #4
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004082:	4311      	orrs	r1, r2
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004088:	4311      	orrs	r1, r2
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800408e:	430a      	orrs	r2, r1
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0201 	orr.w	r2, r2, #1
 800409a:	611a      	str	r2, [r3, #16]
 800409c:	e007      	b.n	80040ae <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	691a      	ldr	r2, [r3, #16]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 0201 	bic.w	r2, r2, #1
 80040ac:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d10c      	bne.n	80040d0 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040bc:	f023 010f 	bic.w	r1, r3, #15
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	1e5a      	subs	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	631a      	str	r2, [r3, #48]	; 0x30
 80040ce:	e007      	b.n	80040e0 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 020f 	bic.w	r2, r2, #15
 80040de:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e4:	f023 0303 	bic.w	r3, r3, #3
 80040e8:	f043 0201 	orr.w	r2, r3, #1
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	655a      	str	r2, [r3, #84]	; 0x54
 80040f0:	e007      	b.n	8004102 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f6:	f043 0210 	orr.w	r2, r3, #16
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004102:	7ffb      	ldrb	r3, [r7, #31]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3724      	adds	r7, #36	; 0x24
 8004108:	46bd      	mov	sp, r7
 800410a:	bd90      	pop	{r4, r7, pc}
 800410c:	20000020 	.word	0x20000020
 8004110:	053e2d63 	.word	0x053e2d63
 8004114:	50040000 	.word	0x50040000
 8004118:	50040100 	.word	0x50040100
 800411c:	50040200 	.word	0x50040200
 8004120:	50040300 	.word	0x50040300
 8004124:	fff0c007 	.word	0xfff0c007

08004128 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004130:	4857      	ldr	r0, [pc, #348]	; (8004290 <HAL_ADC_Start+0x168>)
 8004132:	f7ff fd89 	bl	8003c48 <LL_ADC_GetMultimode>
 8004136:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff fe63 	bl	8003e08 <LL_ADC_REG_IsConversionOngoing>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	f040 809c 	bne.w	8004282 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004150:	2b01      	cmp	r3, #1
 8004152:	d101      	bne.n	8004158 <HAL_ADC_Start+0x30>
 8004154:	2302      	movs	r3, #2
 8004156:	e097      	b.n	8004288 <HAL_ADC_Start+0x160>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f001 f9fb 	bl	800555c <ADC_Enable>
 8004166:	4603      	mov	r3, r0
 8004168:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800416a:	7dfb      	ldrb	r3, [r7, #23]
 800416c:	2b00      	cmp	r3, #0
 800416e:	f040 8083 	bne.w	8004278 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004176:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800417a:	f023 0301 	bic.w	r3, r3, #1
 800417e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a42      	ldr	r2, [pc, #264]	; (8004294 <HAL_ADC_Start+0x16c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d002      	beq.n	8004196 <HAL_ADC_Start+0x6e>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	e000      	b.n	8004198 <HAL_ADC_Start+0x70>
 8004196:	4b40      	ldr	r3, [pc, #256]	; (8004298 <HAL_ADC_Start+0x170>)
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6812      	ldr	r2, [r2, #0]
 800419c:	4293      	cmp	r3, r2
 800419e:	d002      	beq.n	80041a6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d105      	bne.n	80041b2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041be:	d106      	bne.n	80041ce <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c4:	f023 0206 	bic.w	r2, r3, #6
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	659a      	str	r2, [r3, #88]	; 0x58
 80041cc:	e002      	b.n	80041d4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	221c      	movs	r2, #28
 80041da:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a2a      	ldr	r2, [pc, #168]	; (8004294 <HAL_ADC_Start+0x16c>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d002      	beq.n	80041f4 <HAL_ADC_Start+0xcc>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	e000      	b.n	80041f6 <HAL_ADC_Start+0xce>
 80041f4:	4b28      	ldr	r3, [pc, #160]	; (8004298 <HAL_ADC_Start+0x170>)
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6812      	ldr	r2, [r2, #0]
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d008      	beq.n	8004210 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	2b05      	cmp	r3, #5
 8004208:	d002      	beq.n	8004210 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	2b09      	cmp	r3, #9
 800420e:	d114      	bne.n	800423a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d007      	beq.n	800422e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004222:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004226:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff fdc0 	bl	8003db8 <LL_ADC_REG_StartConversion>
 8004238:	e025      	b.n	8004286 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a12      	ldr	r2, [pc, #72]	; (8004294 <HAL_ADC_Start+0x16c>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d002      	beq.n	8004256 <HAL_ADC_Start+0x12e>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	e000      	b.n	8004258 <HAL_ADC_Start+0x130>
 8004256:	4b10      	ldr	r3, [pc, #64]	; (8004298 <HAL_ADC_Start+0x170>)
 8004258:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00f      	beq.n	8004286 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800426e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	655a      	str	r2, [r3, #84]	; 0x54
 8004276:	e006      	b.n	8004286 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004280:	e001      	b.n	8004286 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004282:	2302      	movs	r3, #2
 8004284:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004286:	7dfb      	ldrb	r3, [r7, #23]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	50040300 	.word	0x50040300
 8004294:	50040100 	.word	0x50040100
 8004298:	50040000 	.word	0x50040000

0800429c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d101      	bne.n	80042b2 <HAL_ADC_Stop+0x16>
 80042ae:	2302      	movs	r3, #2
 80042b0:	e023      	b.n	80042fa <HAL_ADC_Stop+0x5e>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80042ba:	2103      	movs	r1, #3
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f001 f891 	bl	80053e4 <ADC_ConversionStop>
 80042c2:	4603      	mov	r3, r0
 80042c4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d111      	bne.n	80042f0 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f001 f9cb 	bl	8005668 <ADC_Disable>
 80042d2:	4603      	mov	r3, r0
 80042d4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80042d6:	7bfb      	ldrb	r3, [r7, #15]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d109      	bne.n	80042f0 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80042e4:	f023 0301 	bic.w	r3, r3, #1
 80042e8:	f043 0201 	orr.w	r2, r3, #1
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b088      	sub	sp, #32
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800430e:	4866      	ldr	r0, [pc, #408]	; (80044a8 <HAL_ADC_PollForConversion+0x1a4>)
 8004310:	f7ff fc9a 	bl	8003c48 <LL_ADC_GetMultimode>
 8004314:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	2b08      	cmp	r3, #8
 800431c:	d102      	bne.n	8004324 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800431e:	2308      	movs	r3, #8
 8004320:	61fb      	str	r3, [r7, #28]
 8004322:	e02a      	b.n	800437a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d005      	beq.n	8004336 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2b05      	cmp	r3, #5
 800432e:	d002      	beq.n	8004336 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	2b09      	cmp	r3, #9
 8004334:	d111      	bne.n	800435a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d007      	beq.n	8004354 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004348:	f043 0220 	orr.w	r2, r3, #32
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e0a4      	b.n	800449e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004354:	2304      	movs	r3, #4
 8004356:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8004358:	e00f      	b.n	800437a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800435a:	4853      	ldr	r0, [pc, #332]	; (80044a8 <HAL_ADC_PollForConversion+0x1a4>)
 800435c:	f7ff fc82 	bl	8003c64 <LL_ADC_GetMultiDMATransfer>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d007      	beq.n	8004376 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436a:	f043 0220 	orr.w	r2, r3, #32
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e093      	b.n	800449e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004376:	2304      	movs	r3, #4
 8004378:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800437a:	f7ff fb0b 	bl	8003994 <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004380:	e021      	b.n	80043c6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004388:	d01d      	beq.n	80043c6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800438a:	f7ff fb03 	bl	8003994 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d302      	bcc.n	80043a0 <HAL_ADC_PollForConversion+0x9c>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d112      	bne.n	80043c6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	4013      	ands	r3, r2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10b      	bne.n	80043c6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b2:	f043 0204 	orr.w	r2, r3, #4
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e06b      	b.n	800449e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	4013      	ands	r3, r2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0d6      	beq.n	8004382 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff fb8e 	bl	8003b06 <LL_ADC_REG_IsTriggerSourceSWStart>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d01c      	beq.n	800442a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	7e5b      	ldrb	r3, [r3, #25]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d118      	bne.n	800442a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0308 	and.w	r3, r3, #8
 8004402:	2b08      	cmp	r3, #8
 8004404:	d111      	bne.n	800442a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004416:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d105      	bne.n	800442a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004422:	f043 0201 	orr.w	r2, r3, #1
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a1f      	ldr	r2, [pc, #124]	; (80044ac <HAL_ADC_PollForConversion+0x1a8>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d002      	beq.n	800443a <HAL_ADC_PollForConversion+0x136>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	e000      	b.n	800443c <HAL_ADC_PollForConversion+0x138>
 800443a:	4b1d      	ldr	r3, [pc, #116]	; (80044b0 <HAL_ADC_PollForConversion+0x1ac>)
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6812      	ldr	r2, [r2, #0]
 8004440:	4293      	cmp	r3, r2
 8004442:	d008      	beq.n	8004456 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d005      	beq.n	8004456 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2b05      	cmp	r3, #5
 800444e:	d002      	beq.n	8004456 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	2b09      	cmp	r3, #9
 8004454:	d104      	bne.n	8004460 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	61bb      	str	r3, [r7, #24]
 800445e:	e00c      	b.n	800447a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a11      	ldr	r2, [pc, #68]	; (80044ac <HAL_ADC_PollForConversion+0x1a8>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d002      	beq.n	8004470 <HAL_ADC_PollForConversion+0x16c>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	e000      	b.n	8004472 <HAL_ADC_PollForConversion+0x16e>
 8004470:	4b0f      	ldr	r3, [pc, #60]	; (80044b0 <HAL_ADC_PollForConversion+0x1ac>)
 8004472:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	2b08      	cmp	r3, #8
 800447e:	d104      	bne.n	800448a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2208      	movs	r2, #8
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	e008      	b.n	800449c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d103      	bne.n	800449c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	220c      	movs	r2, #12
 800449a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3720      	adds	r7, #32
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	50040300 	.word	0x50040300
 80044ac:	50040100 	.word	0x50040100
 80044b0:	50040000 	.word	0x50040000

080044b4 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044bc:	4893      	ldr	r0, [pc, #588]	; (800470c <HAL_ADC_Start_IT+0x258>)
 80044be:	f7ff fbc3 	bl	8003c48 <LL_ADC_GetMultimode>
 80044c2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff fc9d 	bl	8003e08 <LL_ADC_REG_IsConversionOngoing>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f040 8111 	bne.w	80046f8 <HAL_ADC_Start_IT+0x244>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d101      	bne.n	80044e4 <HAL_ADC_Start_IT+0x30>
 80044e0:	2302      	movs	r3, #2
 80044e2:	e10e      	b.n	8004702 <HAL_ADC_Start_IT+0x24e>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f001 f835 	bl	800555c <ADC_Enable>
 80044f2:	4603      	mov	r3, r0
 80044f4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80044f6:	7dfb      	ldrb	r3, [r7, #23]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f040 80f8 	bne.w	80046ee <HAL_ADC_Start_IT+0x23a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004502:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004506:	f023 0301 	bic.w	r3, r3, #1
 800450a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a7e      	ldr	r2, [pc, #504]	; (8004710 <HAL_ADC_Start_IT+0x25c>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d002      	beq.n	8004522 <HAL_ADC_Start_IT+0x6e>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	e000      	b.n	8004524 <HAL_ADC_Start_IT+0x70>
 8004522:	4b7c      	ldr	r3, [pc, #496]	; (8004714 <HAL_ADC_Start_IT+0x260>)
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6812      	ldr	r2, [r2, #0]
 8004528:	4293      	cmp	r3, r2
 800452a:	d002      	beq.n	8004532 <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d105      	bne.n	800453e <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004536:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d006      	beq.n	8004558 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454e:	f023 0206 	bic.w	r2, r3, #6
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	659a      	str	r2, [r3, #88]	; 0x58
 8004556:	e002      	b.n	800455e <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	221c      	movs	r2, #28
 8004564:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 021c 	bic.w	r2, r2, #28
 800457c:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	2b08      	cmp	r3, #8
 8004584:	d108      	bne.n	8004598 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f042 0208 	orr.w	r2, r2, #8
 8004594:	605a      	str	r2, [r3, #4]
          break;
 8004596:	e008      	b.n	80045aa <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0204 	orr.w	r2, r2, #4
 80045a6:	605a      	str	r2, [r3, #4]
          break;
 80045a8:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d107      	bne.n	80045c2 <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f042 0210 	orr.w	r2, r2, #16
 80045c0:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a52      	ldr	r2, [pc, #328]	; (8004710 <HAL_ADC_Start_IT+0x25c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d002      	beq.n	80045d2 <HAL_ADC_Start_IT+0x11e>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	e000      	b.n	80045d4 <HAL_ADC_Start_IT+0x120>
 80045d2:	4b50      	ldr	r3, [pc, #320]	; (8004714 <HAL_ADC_Start_IT+0x260>)
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	6812      	ldr	r2, [r2, #0]
 80045d8:	4293      	cmp	r3, r2
 80045da:	d008      	beq.n	80045ee <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d005      	beq.n	80045ee <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	2b05      	cmp	r3, #5
 80045e6:	d002      	beq.n	80045ee <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	2b09      	cmp	r3, #9
 80045ec:	d13b      	bne.n	8004666 <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d02d      	beq.n	8004658 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004600:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004604:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	2b08      	cmp	r3, #8
 8004612:	d110      	bne.n	8004636 <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0220 	bic.w	r2, r2, #32
 8004622:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004632:	605a      	str	r2, [r3, #4]
              break;
 8004634:	e011      	b.n	800465a <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004644:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f042 0220 	orr.w	r2, r2, #32
 8004654:	605a      	str	r2, [r3, #4]
              break;
 8004656:	e000      	b.n	800465a <HAL_ADC_Start_IT+0x1a6>
          }
        }
 8004658:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4618      	mov	r0, r3
 8004660:	f7ff fbaa 	bl	8003db8 <LL_ADC_REG_StartConversion>
 8004664:	e04c      	b.n	8004700 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a26      	ldr	r2, [pc, #152]	; (8004710 <HAL_ADC_Start_IT+0x25c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d002      	beq.n	8004682 <HAL_ADC_Start_IT+0x1ce>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	e000      	b.n	8004684 <HAL_ADC_Start_IT+0x1d0>
 8004682:	4b24      	ldr	r3, [pc, #144]	; (8004714 <HAL_ADC_Start_IT+0x260>)
 8004684:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d035      	beq.n	80046fe <HAL_ADC_Start_IT+0x24a>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004696:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800469a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	2b08      	cmp	r3, #8
 80046a8:	d110      	bne.n	80046cc <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 0220 	bic.w	r2, r2, #32
 80046b8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046c8:	605a      	str	r2, [r3, #4]
              break;
 80046ca:	e019      	b.n	8004700 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046da:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0220 	orr.w	r2, r2, #32
 80046ea:	605a      	str	r2, [r3, #4]
              break;
 80046ec:	e008      	b.n	8004700 <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80046f6:	e003      	b.n	8004700 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80046f8:	2302      	movs	r3, #2
 80046fa:	75fb      	strb	r3, [r7, #23]
 80046fc:	e000      	b.n	8004700 <HAL_ADC_Start_IT+0x24c>
        }
 80046fe:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8004700:	7dfb      	ldrb	r3, [r7, #23]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3718      	adds	r7, #24
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	50040300 	.word	0x50040300
 8004710:	50040100 	.word	0x50040100
 8004714:	50040000 	.word	0x50040000

08004718 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004726:	2b01      	cmp	r3, #1
 8004728:	d101      	bne.n	800472e <HAL_ADC_Stop_IT+0x16>
 800472a:	2302      	movs	r3, #2
 800472c:	e02b      	b.n	8004786 <HAL_ADC_Stop_IT+0x6e>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004736:	2103      	movs	r1, #3
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 fe53 	bl	80053e4 <ADC_ConversionStop>
 800473e:	4603      	mov	r3, r0
 8004740:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004742:	7bfb      	ldrb	r3, [r7, #15]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d119      	bne.n	800477c <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 021c 	bic.w	r2, r2, #28
 8004756:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 ff85 	bl	8005668 <ADC_Disable>
 800475e:	4603      	mov	r3, r0
 8004760:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004762:	7bfb      	ldrb	r3, [r7, #15]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d109      	bne.n	800477c <HAL_ADC_Stop_IT+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800476c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004770:	f023 0301 	bic.w	r3, r3, #1
 8004774:	f043 0201 	orr.w	r2, r3, #1
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004784:	7bfb      	ldrb	r3, [r7, #15]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800479c:	4618      	mov	r0, r3
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08a      	sub	sp, #40	; 0x28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80047b0:	2300      	movs	r3, #0
 80047b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047c4:	4882      	ldr	r0, [pc, #520]	; (80049d0 <HAL_ADC_IRQHandler+0x228>)
 80047c6:	f7ff fa3f 	bl	8003c48 <LL_ADC_GetMultimode>
 80047ca:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d017      	beq.n	8004806 <HAL_ADC_IRQHandler+0x5e>
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d012      	beq.n	8004806 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e4:	f003 0310 	and.w	r3, r3, #16
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d105      	bne.n	80047f8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 ffe2 	bl	80057c2 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2202      	movs	r2, #2
 8004804:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	d004      	beq.n	800481a <HAL_ADC_IRQHandler+0x72>
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	f003 0304 	and.w	r3, r3, #4
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10a      	bne.n	8004830 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 8083 	beq.w	800492c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	f003 0308 	and.w	r3, r3, #8
 800482c:	2b00      	cmp	r3, #0
 800482e:	d07d      	beq.n	800492c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004834:	f003 0310 	and.w	r3, r3, #16
 8004838:	2b00      	cmp	r3, #0
 800483a:	d105      	bne.n	8004848 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004840:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4618      	mov	r0, r3
 800484e:	f7ff f95a 	bl	8003b06 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d062      	beq.n	800491e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a5d      	ldr	r2, [pc, #372]	; (80049d4 <HAL_ADC_IRQHandler+0x22c>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d002      	beq.n	8004868 <HAL_ADC_IRQHandler+0xc0>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	e000      	b.n	800486a <HAL_ADC_IRQHandler+0xc2>
 8004868:	4b5b      	ldr	r3, [pc, #364]	; (80049d8 <HAL_ADC_IRQHandler+0x230>)
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6812      	ldr	r2, [r2, #0]
 800486e:	4293      	cmp	r3, r2
 8004870:	d008      	beq.n	8004884 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d005      	beq.n	8004884 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	2b05      	cmp	r3, #5
 800487c:	d002      	beq.n	8004884 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	2b09      	cmp	r3, #9
 8004882:	d104      	bne.n	800488e <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	623b      	str	r3, [r7, #32]
 800488c:	e00c      	b.n	80048a8 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a50      	ldr	r2, [pc, #320]	; (80049d4 <HAL_ADC_IRQHandler+0x22c>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d002      	beq.n	800489e <HAL_ADC_IRQHandler+0xf6>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	e000      	b.n	80048a0 <HAL_ADC_IRQHandler+0xf8>
 800489e:	4b4e      	ldr	r3, [pc, #312]	; (80049d8 <HAL_ADC_IRQHandler+0x230>)
 80048a0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d135      	bne.n	800491e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0308 	and.w	r3, r3, #8
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d12e      	bne.n	800491e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff fa9f 	bl	8003e08 <LL_ADC_REG_IsConversionOngoing>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d11a      	bne.n	8004906 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 020c 	bic.w	r2, r2, #12
 80048de:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d112      	bne.n	800491e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fc:	f043 0201 	orr.w	r2, r3, #1
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	655a      	str	r2, [r3, #84]	; 0x54
 8004904:	e00b      	b.n	800491e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490a:	f043 0210 	orr.w	r2, r3, #16
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004916:	f043 0201 	orr.w	r2, r3, #1
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7fe fbde 	bl	80030e0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	220c      	movs	r2, #12
 800492a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	f003 0320 	and.w	r3, r3, #32
 8004932:	2b00      	cmp	r3, #0
 8004934:	d004      	beq.n	8004940 <HAL_ADC_IRQHandler+0x198>
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	f003 0320 	and.w	r3, r3, #32
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10b      	bne.n	8004958 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 809f 	beq.w	8004a8a <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 8099 	beq.w	8004a8a <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495c:	f003 0310 	and.w	r3, r3, #16
 8004960:	2b00      	cmp	r3, #0
 8004962:	d105      	bne.n	8004970 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004968:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff f905 	bl	8003b84 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800497a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4618      	mov	r0, r3
 8004982:	f7ff f8c0 	bl	8003b06 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004986:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a11      	ldr	r2, [pc, #68]	; (80049d4 <HAL_ADC_IRQHandler+0x22c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d002      	beq.n	8004998 <HAL_ADC_IRQHandler+0x1f0>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	e000      	b.n	800499a <HAL_ADC_IRQHandler+0x1f2>
 8004998:	4b0f      	ldr	r3, [pc, #60]	; (80049d8 <HAL_ADC_IRQHandler+0x230>)
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	6812      	ldr	r2, [r2, #0]
 800499e:	4293      	cmp	r3, r2
 80049a0:	d008      	beq.n	80049b4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d005      	beq.n	80049b4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	2b06      	cmp	r3, #6
 80049ac:	d002      	beq.n	80049b4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	2b07      	cmp	r3, #7
 80049b2:	d104      	bne.n	80049be <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	623b      	str	r3, [r7, #32]
 80049bc:	e013      	b.n	80049e6 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a04      	ldr	r2, [pc, #16]	; (80049d4 <HAL_ADC_IRQHandler+0x22c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d009      	beq.n	80049dc <HAL_ADC_IRQHandler+0x234>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	e007      	b.n	80049de <HAL_ADC_IRQHandler+0x236>
 80049ce:	bf00      	nop
 80049d0:	50040300 	.word	0x50040300
 80049d4:	50040100 	.word	0x50040100
 80049d8:	50040000 	.word	0x50040000
 80049dc:	4b7d      	ldr	r3, [pc, #500]	; (8004bd4 <HAL_ADC_IRQHandler+0x42c>)
 80049de:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d047      	beq.n	8004a7c <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80049ec:	6a3b      	ldr	r3, [r7, #32]
 80049ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d007      	beq.n	8004a06 <HAL_ADC_IRQHandler+0x25e>
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d03f      	beq.n	8004a7c <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d13a      	bne.n	8004a7c <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a10:	2b40      	cmp	r3, #64	; 0x40
 8004a12:	d133      	bne.n	8004a7c <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d12e      	bne.n	8004a7c <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7ff fa17 	bl	8003e56 <LL_ADC_INJ_IsConversionOngoing>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d11a      	bne.n	8004a64 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a3c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d112      	bne.n	8004a7c <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5a:	f043 0201 	orr.w	r2, r3, #1
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	655a      	str	r2, [r3, #84]	; 0x54
 8004a62:	e00b      	b.n	8004a7c <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a68:	f043 0210 	orr.w	r2, r3, #16
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a74:	f043 0201 	orr.w	r2, r3, #1
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 fe78 	bl	8005772 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2260      	movs	r2, #96	; 0x60
 8004a88:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d011      	beq.n	8004ab8 <HAL_ADC_IRQHandler+0x310>
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00c      	beq.n	8004ab8 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f896 	bl	8004bdc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2280      	movs	r2, #128	; 0x80
 8004ab6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d012      	beq.n	8004ae8 <HAL_ADC_IRQHandler+0x340>
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00d      	beq.n	8004ae8 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 fe5e 	bl	800579a <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ae6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d012      	beq.n	8004b18 <HAL_ADC_IRQHandler+0x370>
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00d      	beq.n	8004b18 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b00:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 fe50 	bl	80057ae <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b16:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	f003 0310 	and.w	r3, r3, #16
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d036      	beq.n	8004b90 <HAL_ADC_IRQHandler+0x3e8>
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	f003 0310 	and.w	r3, r3, #16
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d031      	beq.n	8004b90 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d102      	bne.n	8004b3a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8004b34:	2301      	movs	r3, #1
 8004b36:	627b      	str	r3, [r7, #36]	; 0x24
 8004b38:	e014      	b.n	8004b64 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d008      	beq.n	8004b52 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004b40:	4825      	ldr	r0, [pc, #148]	; (8004bd8 <HAL_ADC_IRQHandler+0x430>)
 8004b42:	f7ff f88f 	bl	8003c64 <LL_ADC_GetMultiDMATransfer>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00b      	beq.n	8004b64 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b50:	e008      	b.n	8004b64 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8004b60:	2301      	movs	r3, #1
 8004b62:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d10e      	bne.n	8004b88 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b7a:	f043 0202 	orr.w	r2, r3, #2
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f834 	bl	8004bf0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2210      	movs	r2, #16
 8004b8e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d018      	beq.n	8004bcc <HAL_ADC_IRQHandler+0x424>
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d013      	beq.n	8004bcc <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb4:	f043 0208 	orr.w	r2, r3, #8
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bc4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fddd 	bl	8005786 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004bcc:	bf00      	nop
 8004bce:	3728      	adds	r7, #40	; 0x28
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	50040000 	.word	0x50040000
 8004bd8:	50040300 	.word	0x50040300

08004bdc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b0b6      	sub	sp, #216	; 0xd8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004c14:	2300      	movs	r3, #0
 8004c16:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d101      	bne.n	8004c26 <HAL_ADC_ConfigChannel+0x22>
 8004c22:	2302      	movs	r3, #2
 8004c24:	e3c7      	b.n	80053b6 <HAL_ADC_ConfigChannel+0x7b2>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7ff f8e8 	bl	8003e08 <LL_ADC_REG_IsConversionOngoing>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f040 83a8 	bne.w	8005390 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	2b05      	cmp	r3, #5
 8004c46:	d824      	bhi.n	8004c92 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	3b02      	subs	r3, #2
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d81b      	bhi.n	8004c8a <HAL_ADC_ConfigChannel+0x86>
 8004c52:	a201      	add	r2, pc, #4	; (adr r2, 8004c58 <HAL_ADC_ConfigChannel+0x54>)
 8004c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c58:	08004c69 	.word	0x08004c69
 8004c5c:	08004c71 	.word	0x08004c71
 8004c60:	08004c79 	.word	0x08004c79
 8004c64:	08004c81 	.word	0x08004c81
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	220c      	movs	r2, #12
 8004c6c:	605a      	str	r2, [r3, #4]
          break;
 8004c6e:	e011      	b.n	8004c94 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	2212      	movs	r2, #18
 8004c74:	605a      	str	r2, [r3, #4]
          break;
 8004c76:	e00d      	b.n	8004c94 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	2218      	movs	r2, #24
 8004c7c:	605a      	str	r2, [r3, #4]
          break;
 8004c7e:	e009      	b.n	8004c94 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c86:	605a      	str	r2, [r3, #4]
          break;
 8004c88:	e004      	b.n	8004c94 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2206      	movs	r2, #6
 8004c8e:	605a      	str	r2, [r3, #4]
          break;
 8004c90:	e000      	b.n	8004c94 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004c92:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6818      	ldr	r0, [r3, #0]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	6859      	ldr	r1, [r3, #4]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	f7fe ff43 	bl	8003b2c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff f8ac 	bl	8003e08 <LL_ADC_REG_IsConversionOngoing>
 8004cb0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7ff f8cc 	bl	8003e56 <LL_ADC_INJ_IsConversionOngoing>
 8004cbe:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004cc2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f040 81a6 	bne.w	8005018 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ccc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f040 81a1 	bne.w	8005018 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6818      	ldr	r0, [r3, #0]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	6819      	ldr	r1, [r3, #0]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	f7fe ff61 	bl	8003baa <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	695a      	ldr	r2, [r3, #20]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	08db      	lsrs	r3, r3, #3
 8004cf4:	f003 0303 	and.w	r3, r3, #3
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	d00a      	beq.n	8004d20 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6818      	ldr	r0, [r3, #0]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	6919      	ldr	r1, [r3, #16]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004d1a:	f7fe fe9f 	bl	8003a5c <LL_ADC_SetOffset>
 8004d1e:	e17b      	b.n	8005018 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2100      	movs	r1, #0
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fe febc 	bl	8003aa4 <LL_ADC_GetOffsetChannel>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10a      	bne.n	8004d4c <HAL_ADC_ConfigChannel+0x148>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fe feb1 	bl	8003aa4 <LL_ADC_GetOffsetChannel>
 8004d42:	4603      	mov	r3, r0
 8004d44:	0e9b      	lsrs	r3, r3, #26
 8004d46:	f003 021f 	and.w	r2, r3, #31
 8004d4a:	e01e      	b.n	8004d8a <HAL_ADC_ConfigChannel+0x186>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2100      	movs	r1, #0
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fe fea6 	bl	8003aa4 <LL_ADC_GetOffsetChannel>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004d62:	fa93 f3a3 	rbit	r3, r3
 8004d66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004d6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004d72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8004d7a:	2320      	movs	r3, #32
 8004d7c:	e004      	b.n	8004d88 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8004d7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004d82:	fab3 f383 	clz	r3, r3
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d105      	bne.n	8004da2 <HAL_ADC_ConfigChannel+0x19e>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	0e9b      	lsrs	r3, r3, #26
 8004d9c:	f003 031f 	and.w	r3, r3, #31
 8004da0:	e018      	b.n	8004dd4 <HAL_ADC_ConfigChannel+0x1d0>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004daa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004dae:	fa93 f3a3 	rbit	r3, r3
 8004db2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004db6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004dbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8004dc6:	2320      	movs	r3, #32
 8004dc8:	e004      	b.n	8004dd4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8004dca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004dce:	fab3 f383 	clz	r3, r3
 8004dd2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d106      	bne.n	8004de6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	2100      	movs	r1, #0
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7fe fe75 	bl	8003ad0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2101      	movs	r1, #1
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7fe fe59 	bl	8003aa4 <LL_ADC_GetOffsetChannel>
 8004df2:	4603      	mov	r3, r0
 8004df4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10a      	bne.n	8004e12 <HAL_ADC_ConfigChannel+0x20e>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2101      	movs	r1, #1
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7fe fe4e 	bl	8003aa4 <LL_ADC_GetOffsetChannel>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	0e9b      	lsrs	r3, r3, #26
 8004e0c:	f003 021f 	and.w	r2, r3, #31
 8004e10:	e01e      	b.n	8004e50 <HAL_ADC_ConfigChannel+0x24c>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2101      	movs	r1, #1
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7fe fe43 	bl	8003aa4 <LL_ADC_GetOffsetChannel>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004e28:	fa93 f3a3 	rbit	r3, r3
 8004e2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004e30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004e38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004e40:	2320      	movs	r3, #32
 8004e42:	e004      	b.n	8004e4e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004e44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004e48:	fab3 f383 	clz	r3, r3
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d105      	bne.n	8004e68 <HAL_ADC_ConfigChannel+0x264>
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	0e9b      	lsrs	r3, r3, #26
 8004e62:	f003 031f 	and.w	r3, r3, #31
 8004e66:	e018      	b.n	8004e9a <HAL_ADC_ConfigChannel+0x296>
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e74:	fa93 f3a3 	rbit	r3, r3
 8004e78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004e7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004e84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004e8c:	2320      	movs	r3, #32
 8004e8e:	e004      	b.n	8004e9a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004e90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e94:	fab3 f383 	clz	r3, r3
 8004e98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d106      	bne.n	8004eac <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7fe fe12 	bl	8003ad0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2102      	movs	r1, #2
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fe fdf6 	bl	8003aa4 <LL_ADC_GetOffsetChannel>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10a      	bne.n	8004ed8 <HAL_ADC_ConfigChannel+0x2d4>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2102      	movs	r1, #2
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7fe fdeb 	bl	8003aa4 <LL_ADC_GetOffsetChannel>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	0e9b      	lsrs	r3, r3, #26
 8004ed2:	f003 021f 	and.w	r2, r3, #31
 8004ed6:	e01e      	b.n	8004f16 <HAL_ADC_ConfigChannel+0x312>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2102      	movs	r1, #2
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7fe fde0 	bl	8003aa4 <LL_ADC_GetOffsetChannel>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004eee:	fa93 f3a3 	rbit	r3, r3
 8004ef2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004ef6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004efa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004efe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8004f06:	2320      	movs	r3, #32
 8004f08:	e004      	b.n	8004f14 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004f0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f0e:	fab3 f383 	clz	r3, r3
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d105      	bne.n	8004f2e <HAL_ADC_ConfigChannel+0x32a>
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	0e9b      	lsrs	r3, r3, #26
 8004f28:	f003 031f 	and.w	r3, r3, #31
 8004f2c:	e016      	b.n	8004f5c <HAL_ADC_ConfigChannel+0x358>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f3a:	fa93 f3a3 	rbit	r3, r3
 8004f3e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004f40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004f46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8004f4e:	2320      	movs	r3, #32
 8004f50:	e004      	b.n	8004f5c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8004f52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f56:	fab3 f383 	clz	r3, r3
 8004f5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d106      	bne.n	8004f6e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2200      	movs	r2, #0
 8004f66:	2102      	movs	r1, #2
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7fe fdb1 	bl	8003ad0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2103      	movs	r1, #3
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7fe fd95 	bl	8003aa4 <LL_ADC_GetOffsetChannel>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10a      	bne.n	8004f9a <HAL_ADC_ConfigChannel+0x396>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2103      	movs	r1, #3
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fe fd8a 	bl	8003aa4 <LL_ADC_GetOffsetChannel>
 8004f90:	4603      	mov	r3, r0
 8004f92:	0e9b      	lsrs	r3, r3, #26
 8004f94:	f003 021f 	and.w	r2, r3, #31
 8004f98:	e017      	b.n	8004fca <HAL_ADC_ConfigChannel+0x3c6>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2103      	movs	r1, #3
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7fe fd7f 	bl	8003aa4 <LL_ADC_GetOffsetChannel>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004faa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fac:	fa93 f3a3 	rbit	r3, r3
 8004fb0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004fb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fb4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004fb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004fbc:	2320      	movs	r3, #32
 8004fbe:	e003      	b.n	8004fc8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004fc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fc2:	fab3 f383 	clz	r3, r3
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d105      	bne.n	8004fe2 <HAL_ADC_ConfigChannel+0x3de>
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	0e9b      	lsrs	r3, r3, #26
 8004fdc:	f003 031f 	and.w	r3, r3, #31
 8004fe0:	e011      	b.n	8005006 <HAL_ADC_ConfigChannel+0x402>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fea:	fa93 f3a3 	rbit	r3, r3
 8004fee:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004ff0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ff2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004ffa:	2320      	movs	r3, #32
 8004ffc:	e003      	b.n	8005006 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005000:	fab3 f383 	clz	r3, r3
 8005004:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005006:	429a      	cmp	r2, r3
 8005008:	d106      	bne.n	8005018 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2200      	movs	r2, #0
 8005010:	2103      	movs	r1, #3
 8005012:	4618      	mov	r0, r3
 8005014:	f7fe fd5c 	bl	8003ad0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4618      	mov	r0, r3
 800501e:	f7fe fea5 	bl	8003d6c <LL_ADC_IsEnabled>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	f040 813f 	bne.w	80052a8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6818      	ldr	r0, [r3, #0]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	6819      	ldr	r1, [r3, #0]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	461a      	mov	r2, r3
 8005038:	f7fe fde2 	bl	8003c00 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	4a8e      	ldr	r2, [pc, #568]	; (800527c <HAL_ADC_ConfigChannel+0x678>)
 8005042:	4293      	cmp	r3, r2
 8005044:	f040 8130 	bne.w	80052a8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10b      	bne.n	8005070 <HAL_ADC_ConfigChannel+0x46c>
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	0e9b      	lsrs	r3, r3, #26
 800505e:	3301      	adds	r3, #1
 8005060:	f003 031f 	and.w	r3, r3, #31
 8005064:	2b09      	cmp	r3, #9
 8005066:	bf94      	ite	ls
 8005068:	2301      	movls	r3, #1
 800506a:	2300      	movhi	r3, #0
 800506c:	b2db      	uxtb	r3, r3
 800506e:	e019      	b.n	80050a4 <HAL_ADC_ConfigChannel+0x4a0>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005076:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005078:	fa93 f3a3 	rbit	r3, r3
 800507c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800507e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005080:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005082:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8005088:	2320      	movs	r3, #32
 800508a:	e003      	b.n	8005094 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800508c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800508e:	fab3 f383 	clz	r3, r3
 8005092:	b2db      	uxtb	r3, r3
 8005094:	3301      	adds	r3, #1
 8005096:	f003 031f 	and.w	r3, r3, #31
 800509a:	2b09      	cmp	r3, #9
 800509c:	bf94      	ite	ls
 800509e:	2301      	movls	r3, #1
 80050a0:	2300      	movhi	r3, #0
 80050a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d079      	beq.n	800519c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d107      	bne.n	80050c4 <HAL_ADC_ConfigChannel+0x4c0>
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	0e9b      	lsrs	r3, r3, #26
 80050ba:	3301      	adds	r3, #1
 80050bc:	069b      	lsls	r3, r3, #26
 80050be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050c2:	e015      	b.n	80050f0 <HAL_ADC_ConfigChannel+0x4ec>
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050cc:	fa93 f3a3 	rbit	r3, r3
 80050d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80050d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80050d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80050dc:	2320      	movs	r3, #32
 80050de:	e003      	b.n	80050e8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80050e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050e2:	fab3 f383 	clz	r3, r3
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	3301      	adds	r3, #1
 80050ea:	069b      	lsls	r3, r3, #26
 80050ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d109      	bne.n	8005110 <HAL_ADC_ConfigChannel+0x50c>
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	0e9b      	lsrs	r3, r3, #26
 8005102:	3301      	adds	r3, #1
 8005104:	f003 031f 	and.w	r3, r3, #31
 8005108:	2101      	movs	r1, #1
 800510a:	fa01 f303 	lsl.w	r3, r1, r3
 800510e:	e017      	b.n	8005140 <HAL_ADC_ConfigChannel+0x53c>
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005118:	fa93 f3a3 	rbit	r3, r3
 800511c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800511e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005120:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8005128:	2320      	movs	r3, #32
 800512a:	e003      	b.n	8005134 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800512c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800512e:	fab3 f383 	clz	r3, r3
 8005132:	b2db      	uxtb	r3, r3
 8005134:	3301      	adds	r3, #1
 8005136:	f003 031f 	and.w	r3, r3, #31
 800513a:	2101      	movs	r1, #1
 800513c:	fa01 f303 	lsl.w	r3, r1, r3
 8005140:	ea42 0103 	orr.w	r1, r2, r3
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10a      	bne.n	8005166 <HAL_ADC_ConfigChannel+0x562>
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	0e9b      	lsrs	r3, r3, #26
 8005156:	3301      	adds	r3, #1
 8005158:	f003 021f 	and.w	r2, r3, #31
 800515c:	4613      	mov	r3, r2
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	4413      	add	r3, r2
 8005162:	051b      	lsls	r3, r3, #20
 8005164:	e018      	b.n	8005198 <HAL_ADC_ConfigChannel+0x594>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800516c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516e:	fa93 f3a3 	rbit	r3, r3
 8005172:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005176:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800517e:	2320      	movs	r3, #32
 8005180:	e003      	b.n	800518a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8005182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005184:	fab3 f383 	clz	r3, r3
 8005188:	b2db      	uxtb	r3, r3
 800518a:	3301      	adds	r3, #1
 800518c:	f003 021f 	and.w	r2, r3, #31
 8005190:	4613      	mov	r3, r2
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	4413      	add	r3, r2
 8005196:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005198:	430b      	orrs	r3, r1
 800519a:	e080      	b.n	800529e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d107      	bne.n	80051b8 <HAL_ADC_ConfigChannel+0x5b4>
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	0e9b      	lsrs	r3, r3, #26
 80051ae:	3301      	adds	r3, #1
 80051b0:	069b      	lsls	r3, r3, #26
 80051b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80051b6:	e015      	b.n	80051e4 <HAL_ADC_ConfigChannel+0x5e0>
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c0:	fa93 f3a3 	rbit	r3, r3
 80051c4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80051c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80051ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80051d0:	2320      	movs	r3, #32
 80051d2:	e003      	b.n	80051dc <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80051d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d6:	fab3 f383 	clz	r3, r3
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	3301      	adds	r3, #1
 80051de:	069b      	lsls	r3, r3, #26
 80051e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d109      	bne.n	8005204 <HAL_ADC_ConfigChannel+0x600>
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	0e9b      	lsrs	r3, r3, #26
 80051f6:	3301      	adds	r3, #1
 80051f8:	f003 031f 	and.w	r3, r3, #31
 80051fc:	2101      	movs	r1, #1
 80051fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005202:	e017      	b.n	8005234 <HAL_ADC_ConfigChannel+0x630>
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	fa93 f3a3 	rbit	r3, r3
 8005210:	61fb      	str	r3, [r7, #28]
  return result;
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	2b00      	cmp	r3, #0
 800521a:	d101      	bne.n	8005220 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800521c:	2320      	movs	r3, #32
 800521e:	e003      	b.n	8005228 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	fab3 f383 	clz	r3, r3
 8005226:	b2db      	uxtb	r3, r3
 8005228:	3301      	adds	r3, #1
 800522a:	f003 031f 	and.w	r3, r3, #31
 800522e:	2101      	movs	r1, #1
 8005230:	fa01 f303 	lsl.w	r3, r1, r3
 8005234:	ea42 0103 	orr.w	r1, r2, r3
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10d      	bne.n	8005260 <HAL_ADC_ConfigChannel+0x65c>
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	0e9b      	lsrs	r3, r3, #26
 800524a:	3301      	adds	r3, #1
 800524c:	f003 021f 	and.w	r2, r3, #31
 8005250:	4613      	mov	r3, r2
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	4413      	add	r3, r2
 8005256:	3b1e      	subs	r3, #30
 8005258:	051b      	lsls	r3, r3, #20
 800525a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800525e:	e01d      	b.n	800529c <HAL_ADC_ConfigChannel+0x698>
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	fa93 f3a3 	rbit	r3, r3
 800526c:	613b      	str	r3, [r7, #16]
  return result;
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d103      	bne.n	8005280 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8005278:	2320      	movs	r3, #32
 800527a:	e005      	b.n	8005288 <HAL_ADC_ConfigChannel+0x684>
 800527c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	fab3 f383 	clz	r3, r3
 8005286:	b2db      	uxtb	r3, r3
 8005288:	3301      	adds	r3, #1
 800528a:	f003 021f 	and.w	r2, r3, #31
 800528e:	4613      	mov	r3, r2
 8005290:	005b      	lsls	r3, r3, #1
 8005292:	4413      	add	r3, r2
 8005294:	3b1e      	subs	r3, #30
 8005296:	051b      	lsls	r3, r3, #20
 8005298:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800529c:	430b      	orrs	r3, r1
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	6892      	ldr	r2, [r2, #8]
 80052a2:	4619      	mov	r1, r3
 80052a4:	f7fe fc81 	bl	8003baa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	4b44      	ldr	r3, [pc, #272]	; (80053c0 <HAL_ADC_ConfigChannel+0x7bc>)
 80052ae:	4013      	ands	r3, r2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d07a      	beq.n	80053aa <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80052b4:	4843      	ldr	r0, [pc, #268]	; (80053c4 <HAL_ADC_ConfigChannel+0x7c0>)
 80052b6:	f7fe fbc3 	bl	8003a40 <LL_ADC_GetCommonPathInternalCh>
 80052ba:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a41      	ldr	r2, [pc, #260]	; (80053c8 <HAL_ADC_ConfigChannel+0x7c4>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d12c      	bne.n	8005322 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80052c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80052cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d126      	bne.n	8005322 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a3c      	ldr	r2, [pc, #240]	; (80053cc <HAL_ADC_ConfigChannel+0x7c8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d004      	beq.n	80052e8 <HAL_ADC_ConfigChannel+0x6e4>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a3b      	ldr	r2, [pc, #236]	; (80053d0 <HAL_ADC_ConfigChannel+0x7cc>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d15d      	bne.n	80053a4 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80052ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80052f0:	4619      	mov	r1, r3
 80052f2:	4834      	ldr	r0, [pc, #208]	; (80053c4 <HAL_ADC_ConfigChannel+0x7c0>)
 80052f4:	f7fe fb91 	bl	8003a1a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80052f8:	4b36      	ldr	r3, [pc, #216]	; (80053d4 <HAL_ADC_ConfigChannel+0x7d0>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	099b      	lsrs	r3, r3, #6
 80052fe:	4a36      	ldr	r2, [pc, #216]	; (80053d8 <HAL_ADC_ConfigChannel+0x7d4>)
 8005300:	fba2 2303 	umull	r2, r3, r2, r3
 8005304:	099b      	lsrs	r3, r3, #6
 8005306:	1c5a      	adds	r2, r3, #1
 8005308:	4613      	mov	r3, r2
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	4413      	add	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005312:	e002      	b.n	800531a <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	3b01      	subs	r3, #1
 8005318:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1f9      	bne.n	8005314 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005320:	e040      	b.n	80053a4 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a2d      	ldr	r2, [pc, #180]	; (80053dc <HAL_ADC_ConfigChannel+0x7d8>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d118      	bne.n	800535e <HAL_ADC_ConfigChannel+0x75a>
 800532c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005330:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d112      	bne.n	800535e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a23      	ldr	r2, [pc, #140]	; (80053cc <HAL_ADC_ConfigChannel+0x7c8>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d004      	beq.n	800534c <HAL_ADC_ConfigChannel+0x748>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a22      	ldr	r2, [pc, #136]	; (80053d0 <HAL_ADC_ConfigChannel+0x7cc>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d12d      	bne.n	80053a8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800534c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005350:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005354:	4619      	mov	r1, r3
 8005356:	481b      	ldr	r0, [pc, #108]	; (80053c4 <HAL_ADC_ConfigChannel+0x7c0>)
 8005358:	f7fe fb5f 	bl	8003a1a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800535c:	e024      	b.n	80053a8 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a1f      	ldr	r2, [pc, #124]	; (80053e0 <HAL_ADC_ConfigChannel+0x7dc>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d120      	bne.n	80053aa <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005368:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800536c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d11a      	bne.n	80053aa <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a14      	ldr	r2, [pc, #80]	; (80053cc <HAL_ADC_ConfigChannel+0x7c8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d115      	bne.n	80053aa <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800537e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005382:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005386:	4619      	mov	r1, r3
 8005388:	480e      	ldr	r0, [pc, #56]	; (80053c4 <HAL_ADC_ConfigChannel+0x7c0>)
 800538a:	f7fe fb46 	bl	8003a1a <LL_ADC_SetCommonPathInternalCh>
 800538e:	e00c      	b.n	80053aa <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005394:	f043 0220 	orr.w	r2, r3, #32
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80053a2:	e002      	b.n	80053aa <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80053a4:	bf00      	nop
 80053a6:	e000      	b.n	80053aa <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80053a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80053b2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	37d8      	adds	r7, #216	; 0xd8
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	80080000 	.word	0x80080000
 80053c4:	50040300 	.word	0x50040300
 80053c8:	c7520000 	.word	0xc7520000
 80053cc:	50040000 	.word	0x50040000
 80053d0:	50040200 	.word	0x50040200
 80053d4:	20000020 	.word	0x20000020
 80053d8:	053e2d63 	.word	0x053e2d63
 80053dc:	cb840000 	.word	0xcb840000
 80053e0:	80000001 	.word	0x80000001

080053e4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b088      	sub	sp, #32
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fe fd04 	bl	8003e08 <LL_ADC_REG_IsConversionOngoing>
 8005400:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4618      	mov	r0, r3
 8005408:	f7fe fd25 	bl	8003e56 <LL_ADC_INJ_IsConversionOngoing>
 800540c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d103      	bne.n	800541c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2b00      	cmp	r3, #0
 8005418:	f000 8098 	beq.w	800554c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d02a      	beq.n	8005480 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	7e5b      	ldrb	r3, [r3, #25]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d126      	bne.n	8005480 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	7e1b      	ldrb	r3, [r3, #24]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d122      	bne.n	8005480 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800543a:	2301      	movs	r3, #1
 800543c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800543e:	e014      	b.n	800546a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	4a45      	ldr	r2, [pc, #276]	; (8005558 <ADC_ConversionStop+0x174>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d90d      	bls.n	8005464 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800544c:	f043 0210 	orr.w	r2, r3, #16
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005458:	f043 0201 	orr.w	r2, r3, #1
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e074      	b.n	800554e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	3301      	adds	r3, #1
 8005468:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005474:	2b40      	cmp	r3, #64	; 0x40
 8005476:	d1e3      	bne.n	8005440 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2240      	movs	r2, #64	; 0x40
 800547e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	2b02      	cmp	r3, #2
 8005484:	d014      	beq.n	80054b0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4618      	mov	r0, r3
 800548c:	f7fe fcbc 	bl	8003e08 <LL_ADC_REG_IsConversionOngoing>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00c      	beq.n	80054b0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4618      	mov	r0, r3
 800549c:	f7fe fc79 	bl	8003d92 <LL_ADC_IsDisableOngoing>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d104      	bne.n	80054b0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7fe fc98 	bl	8003de0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d014      	beq.n	80054e0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7fe fccb 	bl	8003e56 <LL_ADC_INJ_IsConversionOngoing>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00c      	beq.n	80054e0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7fe fc61 	bl	8003d92 <LL_ADC_IsDisableOngoing>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d104      	bne.n	80054e0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4618      	mov	r0, r3
 80054dc:	f7fe fca7 	bl	8003e2e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d005      	beq.n	80054f2 <ADC_ConversionStop+0x10e>
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	2b03      	cmp	r3, #3
 80054ea:	d105      	bne.n	80054f8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80054ec:	230c      	movs	r3, #12
 80054ee:	617b      	str	r3, [r7, #20]
        break;
 80054f0:	e005      	b.n	80054fe <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80054f2:	2308      	movs	r3, #8
 80054f4:	617b      	str	r3, [r7, #20]
        break;
 80054f6:	e002      	b.n	80054fe <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80054f8:	2304      	movs	r3, #4
 80054fa:	617b      	str	r3, [r7, #20]
        break;
 80054fc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80054fe:	f7fe fa49 	bl	8003994 <HAL_GetTick>
 8005502:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005504:	e01b      	b.n	800553e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005506:	f7fe fa45 	bl	8003994 <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	2b05      	cmp	r3, #5
 8005512:	d914      	bls.n	800553e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689a      	ldr	r2, [r3, #8]
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	4013      	ands	r3, r2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00d      	beq.n	800553e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005526:	f043 0210 	orr.w	r2, r3, #16
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005532:	f043 0201 	orr.w	r2, r3, #1
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e007      	b.n	800554e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	4013      	ands	r3, r2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1dc      	bne.n	8005506 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3720      	adds	r7, #32
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	a33fffff 	.word	0xa33fffff

0800555c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005564:	2300      	movs	r3, #0
 8005566:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4618      	mov	r0, r3
 800556e:	f7fe fbfd 	bl	8003d6c <LL_ADC_IsEnabled>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d169      	bne.n	800564c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689a      	ldr	r2, [r3, #8]
 800557e:	4b36      	ldr	r3, [pc, #216]	; (8005658 <ADC_Enable+0xfc>)
 8005580:	4013      	ands	r3, r2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00d      	beq.n	80055a2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558a:	f043 0210 	orr.w	r2, r3, #16
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005596:	f043 0201 	orr.w	r2, r3, #1
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e055      	b.n	800564e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fe fbb8 	bl	8003d1c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80055ac:	482b      	ldr	r0, [pc, #172]	; (800565c <ADC_Enable+0x100>)
 80055ae:	f7fe fa47 	bl	8003a40 <LL_ADC_GetCommonPathInternalCh>
 80055b2:	4603      	mov	r3, r0
 80055b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d013      	beq.n	80055e4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80055bc:	4b28      	ldr	r3, [pc, #160]	; (8005660 <ADC_Enable+0x104>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	099b      	lsrs	r3, r3, #6
 80055c2:	4a28      	ldr	r2, [pc, #160]	; (8005664 <ADC_Enable+0x108>)
 80055c4:	fba2 2303 	umull	r2, r3, r2, r3
 80055c8:	099b      	lsrs	r3, r3, #6
 80055ca:	1c5a      	adds	r2, r3, #1
 80055cc:	4613      	mov	r3, r2
 80055ce:	005b      	lsls	r3, r3, #1
 80055d0:	4413      	add	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80055d6:	e002      	b.n	80055de <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	3b01      	subs	r3, #1
 80055dc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1f9      	bne.n	80055d8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80055e4:	f7fe f9d6 	bl	8003994 <HAL_GetTick>
 80055e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80055ea:	e028      	b.n	800563e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7fe fbbb 	bl	8003d6c <LL_ADC_IsEnabled>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d104      	bne.n	8005606 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4618      	mov	r0, r3
 8005602:	f7fe fb8b 	bl	8003d1c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005606:	f7fe f9c5 	bl	8003994 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d914      	bls.n	800563e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b01      	cmp	r3, #1
 8005620:	d00d      	beq.n	800563e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005626:	f043 0210 	orr.w	r2, r3, #16
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005632:	f043 0201 	orr.w	r2, r3, #1
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e007      	b.n	800564e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	2b01      	cmp	r3, #1
 800564a:	d1cf      	bne.n	80055ec <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	8000003f 	.word	0x8000003f
 800565c:	50040300 	.word	0x50040300
 8005660:	20000020 	.word	0x20000020
 8005664:	053e2d63 	.word	0x053e2d63

08005668 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4618      	mov	r0, r3
 8005676:	f7fe fb8c 	bl	8003d92 <LL_ADC_IsDisableOngoing>
 800567a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4618      	mov	r0, r3
 8005682:	f7fe fb73 	bl	8003d6c <LL_ADC_IsEnabled>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d047      	beq.n	800571c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d144      	bne.n	800571c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f003 030d 	and.w	r3, r3, #13
 800569c:	2b01      	cmp	r3, #1
 800569e:	d10c      	bne.n	80056ba <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7fe fb4d 	bl	8003d44 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2203      	movs	r2, #3
 80056b0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80056b2:	f7fe f96f 	bl	8003994 <HAL_GetTick>
 80056b6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80056b8:	e029      	b.n	800570e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056be:	f043 0210 	orr.w	r2, r3, #16
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ca:	f043 0201 	orr.w	r2, r3, #1
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e023      	b.n	800571e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80056d6:	f7fe f95d 	bl	8003994 <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d914      	bls.n	800570e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00d      	beq.n	800570e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f6:	f043 0210 	orr.w	r2, r3, #16
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005702:	f043 0201 	orr.w	r2, r3, #1
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e007      	b.n	800571e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f003 0301 	and.w	r3, r3, #1
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1dc      	bne.n	80056d6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <LL_ADC_IsEnabled>:
{
 8005726:	b480      	push	{r7}
 8005728:	b083      	sub	sp, #12
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b01      	cmp	r3, #1
 8005738:	d101      	bne.n	800573e <LL_ADC_IsEnabled+0x18>
 800573a:	2301      	movs	r3, #1
 800573c:	e000      	b.n	8005740 <LL_ADC_IsEnabled+0x1a>
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <LL_ADC_REG_IsConversionOngoing>:
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f003 0304 	and.w	r3, r3, #4
 800575c:	2b04      	cmp	r3, #4
 800575e:	d101      	bne.n	8005764 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005760:	2301      	movs	r3, #1
 8005762:	e000      	b.n	8005766 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800577a:	bf00      	nop
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005786:	b480      	push	{r7}
 8005788:	b083      	sub	sp, #12
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800578e:	bf00      	nop
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80057a2:	bf00      	nop
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b083      	sub	sp, #12
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80057ca:	bf00      	nop
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
	...

080057d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80057d8:	b590      	push	{r4, r7, lr}
 80057da:	b09f      	sub	sp, #124	; 0x7c
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80057e2:	2300      	movs	r3, #0
 80057e4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d101      	bne.n	80057f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80057f2:	2302      	movs	r3, #2
 80057f4:	e093      	b.n	800591e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80057fe:	2300      	movs	r3, #0
 8005800:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005802:	2300      	movs	r3, #0
 8005804:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a47      	ldr	r2, [pc, #284]	; (8005928 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d102      	bne.n	8005816 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005810:	4b46      	ldr	r3, [pc, #280]	; (800592c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005812:	60bb      	str	r3, [r7, #8]
 8005814:	e001      	b.n	800581a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005816:	2300      	movs	r3, #0
 8005818:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10b      	bne.n	8005838 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005824:	f043 0220 	orr.w	r2, r3, #32
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e072      	b.n	800591e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	4618      	mov	r0, r3
 800583c:	f7ff ff86 	bl	800574c <LL_ADC_REG_IsConversionOngoing>
 8005840:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4618      	mov	r0, r3
 8005848:	f7ff ff80 	bl	800574c <LL_ADC_REG_IsConversionOngoing>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d154      	bne.n	80058fc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005852:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005854:	2b00      	cmp	r3, #0
 8005856:	d151      	bne.n	80058fc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005858:	4b35      	ldr	r3, [pc, #212]	; (8005930 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800585a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d02c      	beq.n	80058be <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	6859      	ldr	r1, [r3, #4]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005876:	035b      	lsls	r3, r3, #13
 8005878:	430b      	orrs	r3, r1
 800587a:	431a      	orrs	r2, r3
 800587c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800587e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005880:	4829      	ldr	r0, [pc, #164]	; (8005928 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005882:	f7ff ff50 	bl	8005726 <LL_ADC_IsEnabled>
 8005886:	4604      	mov	r4, r0
 8005888:	4828      	ldr	r0, [pc, #160]	; (800592c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800588a:	f7ff ff4c 	bl	8005726 <LL_ADC_IsEnabled>
 800588e:	4603      	mov	r3, r0
 8005890:	431c      	orrs	r4, r3
 8005892:	4828      	ldr	r0, [pc, #160]	; (8005934 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005894:	f7ff ff47 	bl	8005726 <LL_ADC_IsEnabled>
 8005898:	4603      	mov	r3, r0
 800589a:	4323      	orrs	r3, r4
 800589c:	2b00      	cmp	r3, #0
 800589e:	d137      	bne.n	8005910 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80058a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80058a8:	f023 030f 	bic.w	r3, r3, #15
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	6811      	ldr	r1, [r2, #0]
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	6892      	ldr	r2, [r2, #8]
 80058b4:	430a      	orrs	r2, r1
 80058b6:	431a      	orrs	r2, r3
 80058b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ba:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80058bc:	e028      	b.n	8005910 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80058be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058c8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80058ca:	4817      	ldr	r0, [pc, #92]	; (8005928 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80058cc:	f7ff ff2b 	bl	8005726 <LL_ADC_IsEnabled>
 80058d0:	4604      	mov	r4, r0
 80058d2:	4816      	ldr	r0, [pc, #88]	; (800592c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80058d4:	f7ff ff27 	bl	8005726 <LL_ADC_IsEnabled>
 80058d8:	4603      	mov	r3, r0
 80058da:	431c      	orrs	r4, r3
 80058dc:	4815      	ldr	r0, [pc, #84]	; (8005934 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80058de:	f7ff ff22 	bl	8005726 <LL_ADC_IsEnabled>
 80058e2:	4603      	mov	r3, r0
 80058e4:	4323      	orrs	r3, r4
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d112      	bne.n	8005910 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80058ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80058f2:	f023 030f 	bic.w	r3, r3, #15
 80058f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80058f8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80058fa:	e009      	b.n	8005910 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005900:	f043 0220 	orr.w	r2, r3, #32
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800590e:	e000      	b.n	8005912 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005910:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800591a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800591e:	4618      	mov	r0, r3
 8005920:	377c      	adds	r7, #124	; 0x7c
 8005922:	46bd      	mov	sp, r7
 8005924:	bd90      	pop	{r4, r7, pc}
 8005926:	bf00      	nop
 8005928:	50040000 	.word	0x50040000
 800592c:	50040100 	.word	0x50040100
 8005930:	50040300 	.word	0x50040300
 8005934:	50040200 	.word	0x50040200

08005938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f003 0307 	and.w	r3, r3, #7
 8005946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005948:	4b0c      	ldr	r3, [pc, #48]	; (800597c <__NVIC_SetPriorityGrouping+0x44>)
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005954:	4013      	ands	r3, r2
 8005956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800596a:	4a04      	ldr	r2, [pc, #16]	; (800597c <__NVIC_SetPriorityGrouping+0x44>)
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	60d3      	str	r3, [r2, #12]
}
 8005970:	bf00      	nop
 8005972:	3714      	adds	r7, #20
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	e000ed00 	.word	0xe000ed00

08005980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005980:	b480      	push	{r7}
 8005982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005984:	4b04      	ldr	r3, [pc, #16]	; (8005998 <__NVIC_GetPriorityGrouping+0x18>)
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	0a1b      	lsrs	r3, r3, #8
 800598a:	f003 0307 	and.w	r3, r3, #7
}
 800598e:	4618      	mov	r0, r3
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	e000ed00 	.word	0xe000ed00

0800599c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	4603      	mov	r3, r0
 80059a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	db0b      	blt.n	80059c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059ae:	79fb      	ldrb	r3, [r7, #7]
 80059b0:	f003 021f 	and.w	r2, r3, #31
 80059b4:	4907      	ldr	r1, [pc, #28]	; (80059d4 <__NVIC_EnableIRQ+0x38>)
 80059b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059ba:	095b      	lsrs	r3, r3, #5
 80059bc:	2001      	movs	r0, #1
 80059be:	fa00 f202 	lsl.w	r2, r0, r2
 80059c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80059c6:	bf00      	nop
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	e000e100 	.word	0xe000e100

080059d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	4603      	mov	r3, r0
 80059e0:	6039      	str	r1, [r7, #0]
 80059e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	db0a      	blt.n	8005a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	490c      	ldr	r1, [pc, #48]	; (8005a24 <__NVIC_SetPriority+0x4c>)
 80059f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059f6:	0112      	lsls	r2, r2, #4
 80059f8:	b2d2      	uxtb	r2, r2
 80059fa:	440b      	add	r3, r1
 80059fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a00:	e00a      	b.n	8005a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	4908      	ldr	r1, [pc, #32]	; (8005a28 <__NVIC_SetPriority+0x50>)
 8005a08:	79fb      	ldrb	r3, [r7, #7]
 8005a0a:	f003 030f 	and.w	r3, r3, #15
 8005a0e:	3b04      	subs	r3, #4
 8005a10:	0112      	lsls	r2, r2, #4
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	440b      	add	r3, r1
 8005a16:	761a      	strb	r2, [r3, #24]
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	e000e100 	.word	0xe000e100
 8005a28:	e000ed00 	.word	0xe000ed00

08005a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b089      	sub	sp, #36	; 0x24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f003 0307 	and.w	r3, r3, #7
 8005a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	f1c3 0307 	rsb	r3, r3, #7
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	bf28      	it	cs
 8005a4a:	2304      	movcs	r3, #4
 8005a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	3304      	adds	r3, #4
 8005a52:	2b06      	cmp	r3, #6
 8005a54:	d902      	bls.n	8005a5c <NVIC_EncodePriority+0x30>
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	3b03      	subs	r3, #3
 8005a5a:	e000      	b.n	8005a5e <NVIC_EncodePriority+0x32>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6a:	43da      	mvns	r2, r3
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	401a      	ands	r2, r3
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a7e:	43d9      	mvns	r1, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a84:	4313      	orrs	r3, r2
         );
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3724      	adds	r7, #36	; 0x24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
	...

08005a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005aa4:	d301      	bcc.n	8005aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e00f      	b.n	8005aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005aaa:	4a0a      	ldr	r2, [pc, #40]	; (8005ad4 <SysTick_Config+0x40>)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ab2:	210f      	movs	r1, #15
 8005ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ab8:	f7ff ff8e 	bl	80059d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005abc:	4b05      	ldr	r3, [pc, #20]	; (8005ad4 <SysTick_Config+0x40>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005ac2:	4b04      	ldr	r3, [pc, #16]	; (8005ad4 <SysTick_Config+0x40>)
 8005ac4:	2207      	movs	r2, #7
 8005ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	e000e010 	.word	0xe000e010

08005ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f7ff ff29 	bl	8005938 <__NVIC_SetPriorityGrouping>
}
 8005ae6:	bf00      	nop
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b086      	sub	sp, #24
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	4603      	mov	r3, r0
 8005af6:	60b9      	str	r1, [r7, #8]
 8005af8:	607a      	str	r2, [r7, #4]
 8005afa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005afc:	2300      	movs	r3, #0
 8005afe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005b00:	f7ff ff3e 	bl	8005980 <__NVIC_GetPriorityGrouping>
 8005b04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	68b9      	ldr	r1, [r7, #8]
 8005b0a:	6978      	ldr	r0, [r7, #20]
 8005b0c:	f7ff ff8e 	bl	8005a2c <NVIC_EncodePriority>
 8005b10:	4602      	mov	r2, r0
 8005b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b16:	4611      	mov	r1, r2
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7ff ff5d 	bl	80059d8 <__NVIC_SetPriority>
}
 8005b1e:	bf00      	nop
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b082      	sub	sp, #8
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7ff ff31 	bl	800599c <__NVIC_EnableIRQ>
}
 8005b3a:	bf00      	nop
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b082      	sub	sp, #8
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7ff ffa2 	bl	8005a94 <SysTick_Config>
 8005b50:	4603      	mov	r3, r0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
	...

08005b5c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e098      	b.n	8005ca0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	461a      	mov	r2, r3
 8005b74:	4b4d      	ldr	r3, [pc, #308]	; (8005cac <HAL_DMA_Init+0x150>)
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d80f      	bhi.n	8005b9a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	4b4b      	ldr	r3, [pc, #300]	; (8005cb0 <HAL_DMA_Init+0x154>)
 8005b82:	4413      	add	r3, r2
 8005b84:	4a4b      	ldr	r2, [pc, #300]	; (8005cb4 <HAL_DMA_Init+0x158>)
 8005b86:	fba2 2303 	umull	r2, r3, r2, r3
 8005b8a:	091b      	lsrs	r3, r3, #4
 8005b8c:	009a      	lsls	r2, r3, #2
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a48      	ldr	r2, [pc, #288]	; (8005cb8 <HAL_DMA_Init+0x15c>)
 8005b96:	641a      	str	r2, [r3, #64]	; 0x40
 8005b98:	e00e      	b.n	8005bb8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	4b46      	ldr	r3, [pc, #280]	; (8005cbc <HAL_DMA_Init+0x160>)
 8005ba2:	4413      	add	r3, r2
 8005ba4:	4a43      	ldr	r2, [pc, #268]	; (8005cb4 <HAL_DMA_Init+0x158>)
 8005ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8005baa:	091b      	lsrs	r3, r3, #4
 8005bac:	009a      	lsls	r2, r3, #2
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a42      	ldr	r2, [pc, #264]	; (8005cc0 <HAL_DMA_Init+0x164>)
 8005bb6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005bdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005be8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bf4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c12:	d039      	beq.n	8005c88 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c18:	4a27      	ldr	r2, [pc, #156]	; (8005cb8 <HAL_DMA_Init+0x15c>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d11a      	bne.n	8005c54 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005c1e:	4b29      	ldr	r3, [pc, #164]	; (8005cc4 <HAL_DMA_Init+0x168>)
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c26:	f003 031c 	and.w	r3, r3, #28
 8005c2a:	210f      	movs	r1, #15
 8005c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c30:	43db      	mvns	r3, r3
 8005c32:	4924      	ldr	r1, [pc, #144]	; (8005cc4 <HAL_DMA_Init+0x168>)
 8005c34:	4013      	ands	r3, r2
 8005c36:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005c38:	4b22      	ldr	r3, [pc, #136]	; (8005cc4 <HAL_DMA_Init+0x168>)
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6859      	ldr	r1, [r3, #4]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c44:	f003 031c 	and.w	r3, r3, #28
 8005c48:	fa01 f303 	lsl.w	r3, r1, r3
 8005c4c:	491d      	ldr	r1, [pc, #116]	; (8005cc4 <HAL_DMA_Init+0x168>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	600b      	str	r3, [r1, #0]
 8005c52:	e019      	b.n	8005c88 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005c54:	4b1c      	ldr	r3, [pc, #112]	; (8005cc8 <HAL_DMA_Init+0x16c>)
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c5c:	f003 031c 	and.w	r3, r3, #28
 8005c60:	210f      	movs	r1, #15
 8005c62:	fa01 f303 	lsl.w	r3, r1, r3
 8005c66:	43db      	mvns	r3, r3
 8005c68:	4917      	ldr	r1, [pc, #92]	; (8005cc8 <HAL_DMA_Init+0x16c>)
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005c6e:	4b16      	ldr	r3, [pc, #88]	; (8005cc8 <HAL_DMA_Init+0x16c>)
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6859      	ldr	r1, [r3, #4]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c7a:	f003 031c 	and.w	r3, r3, #28
 8005c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c82:	4911      	ldr	r1, [pc, #68]	; (8005cc8 <HAL_DMA_Init+0x16c>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3714      	adds	r7, #20
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr
 8005cac:	40020407 	.word	0x40020407
 8005cb0:	bffdfff8 	.word	0xbffdfff8
 8005cb4:	cccccccd 	.word	0xcccccccd
 8005cb8:	40020000 	.word	0x40020000
 8005cbc:	bffdfbf8 	.word	0xbffdfbf8
 8005cc0:	40020400 	.word	0x40020400
 8005cc4:	400200a8 	.word	0x400200a8
 8005cc8:	400204a8 	.word	0x400204a8

08005ccc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
 8005cd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d101      	bne.n	8005cec <HAL_DMA_Start_IT+0x20>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	e04b      	b.n	8005d84 <HAL_DMA_Start_IT+0xb8>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d13a      	bne.n	8005d76 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0201 	bic.w	r2, r2, #1
 8005d1c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	68b9      	ldr	r1, [r7, #8]
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 f921 	bl	8005f6c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d008      	beq.n	8005d44 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f042 020e 	orr.w	r2, r2, #14
 8005d40:	601a      	str	r2, [r3, #0]
 8005d42:	e00f      	b.n	8005d64 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f022 0204 	bic.w	r2, r2, #4
 8005d52:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f042 020a 	orr.w	r2, r2, #10
 8005d62:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f042 0201 	orr.w	r2, r2, #1
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	e005      	b.n	8005d82 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005d7e:	2302      	movs	r3, #2
 8005d80:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3718      	adds	r7, #24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d94:	2300      	movs	r3, #0
 8005d96:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d005      	beq.n	8005db0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2204      	movs	r2, #4
 8005da8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	73fb      	strb	r3, [r7, #15]
 8005dae:	e029      	b.n	8005e04 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 020e 	bic.w	r2, r2, #14
 8005dbe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f022 0201 	bic.w	r2, r2, #1
 8005dce:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd4:	f003 021c 	and.w	r2, r3, #28
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ddc:	2101      	movs	r1, #1
 8005dde:	fa01 f202 	lsl.w	r2, r1, r2
 8005de2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d003      	beq.n	8005e04 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	4798      	blx	r3
    }
  }
  return status;
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b084      	sub	sp, #16
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2a:	f003 031c 	and.w	r3, r3, #28
 8005e2e:	2204      	movs	r2, #4
 8005e30:	409a      	lsls	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	4013      	ands	r3, r2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d026      	beq.n	8005e88 <HAL_DMA_IRQHandler+0x7a>
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	f003 0304 	and.w	r3, r3, #4
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d021      	beq.n	8005e88 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0320 	and.w	r3, r3, #32
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d107      	bne.n	8005e62 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 0204 	bic.w	r2, r2, #4
 8005e60:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e66:	f003 021c 	and.w	r2, r3, #28
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6e:	2104      	movs	r1, #4
 8005e70:	fa01 f202 	lsl.w	r2, r1, r2
 8005e74:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d071      	beq.n	8005f62 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005e86:	e06c      	b.n	8005f62 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8c:	f003 031c 	and.w	r3, r3, #28
 8005e90:	2202      	movs	r2, #2
 8005e92:	409a      	lsls	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4013      	ands	r3, r2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d02e      	beq.n	8005efa <HAL_DMA_IRQHandler+0xec>
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d029      	beq.n	8005efa <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0320 	and.w	r3, r3, #32
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10b      	bne.n	8005ecc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 020a 	bic.w	r2, r2, #10
 8005ec2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed0:	f003 021c 	and.w	r2, r3, #28
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed8:	2102      	movs	r1, #2
 8005eda:	fa01 f202 	lsl.w	r2, r1, r2
 8005ede:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d038      	beq.n	8005f62 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005ef8:	e033      	b.n	8005f62 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005efe:	f003 031c 	and.w	r3, r3, #28
 8005f02:	2208      	movs	r2, #8
 8005f04:	409a      	lsls	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	4013      	ands	r3, r2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d02a      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x156>
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	f003 0308 	and.w	r3, r3, #8
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d025      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 020e 	bic.w	r2, r2, #14
 8005f26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2c:	f003 021c 	and.w	r2, r3, #28
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f34:	2101      	movs	r1, #1
 8005f36:	fa01 f202 	lsl.w	r2, r1, r2
 8005f3a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d004      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005f62:	bf00      	nop
 8005f64:	bf00      	nop
}
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
 8005f78:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7e:	f003 021c 	and.w	r2, r3, #28
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f86:	2101      	movs	r1, #1
 8005f88:	fa01 f202 	lsl.w	r2, r1, r2
 8005f8c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	2b10      	cmp	r3, #16
 8005f9c:	d108      	bne.n	8005fb0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005fae:	e007      	b.n	8005fc0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	60da      	str	r2, [r3, #12]
}
 8005fc0:	bf00      	nop
 8005fc2:	3714      	adds	r7, #20
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b087      	sub	sp, #28
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005fda:	e17f      	b.n	80062dc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	2101      	movs	r1, #1
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fe8:	4013      	ands	r3, r2
 8005fea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f000 8171 	beq.w	80062d6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	f003 0303 	and.w	r3, r3, #3
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d005      	beq.n	800600c <HAL_GPIO_Init+0x40>
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f003 0303 	and.w	r3, r3, #3
 8006008:	2b02      	cmp	r3, #2
 800600a:	d130      	bne.n	800606e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	005b      	lsls	r3, r3, #1
 8006016:	2203      	movs	r2, #3
 8006018:	fa02 f303 	lsl.w	r3, r2, r3
 800601c:	43db      	mvns	r3, r3
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	4013      	ands	r3, r2
 8006022:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	68da      	ldr	r2, [r3, #12]
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	005b      	lsls	r3, r3, #1
 800602c:	fa02 f303 	lsl.w	r3, r2, r3
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	4313      	orrs	r3, r2
 8006034:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006042:	2201      	movs	r2, #1
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	fa02 f303 	lsl.w	r3, r2, r3
 800604a:	43db      	mvns	r3, r3
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	4013      	ands	r3, r2
 8006050:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	091b      	lsrs	r3, r3, #4
 8006058:	f003 0201 	and.w	r2, r3, #1
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	fa02 f303 	lsl.w	r3, r2, r3
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	4313      	orrs	r3, r2
 8006066:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f003 0303 	and.w	r3, r3, #3
 8006076:	2b03      	cmp	r3, #3
 8006078:	d118      	bne.n	80060ac <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006080:	2201      	movs	r2, #1
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	fa02 f303 	lsl.w	r3, r2, r3
 8006088:	43db      	mvns	r3, r3
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	4013      	ands	r3, r2
 800608e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	08db      	lsrs	r3, r3, #3
 8006096:	f003 0201 	and.w	r2, r3, #1
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	fa02 f303 	lsl.w	r3, r2, r3
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f003 0303 	and.w	r3, r3, #3
 80060b4:	2b03      	cmp	r3, #3
 80060b6:	d017      	beq.n	80060e8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	005b      	lsls	r3, r3, #1
 80060c2:	2203      	movs	r2, #3
 80060c4:	fa02 f303 	lsl.w	r3, r2, r3
 80060c8:	43db      	mvns	r3, r3
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	4013      	ands	r3, r2
 80060ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	689a      	ldr	r2, [r3, #8]
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	005b      	lsls	r3, r3, #1
 80060d8:	fa02 f303 	lsl.w	r3, r2, r3
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	4313      	orrs	r3, r2
 80060e0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f003 0303 	and.w	r3, r3, #3
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d123      	bne.n	800613c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	08da      	lsrs	r2, r3, #3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	3208      	adds	r2, #8
 80060fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006100:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f003 0307 	and.w	r3, r3, #7
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	220f      	movs	r2, #15
 800610c:	fa02 f303 	lsl.w	r3, r2, r3
 8006110:	43db      	mvns	r3, r3
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	4013      	ands	r3, r2
 8006116:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	691a      	ldr	r2, [r3, #16]
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f003 0307 	and.w	r3, r3, #7
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	fa02 f303 	lsl.w	r3, r2, r3
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	4313      	orrs	r3, r2
 800612c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	08da      	lsrs	r2, r3, #3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	3208      	adds	r2, #8
 8006136:	6939      	ldr	r1, [r7, #16]
 8006138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	2203      	movs	r2, #3
 8006148:	fa02 f303 	lsl.w	r3, r2, r3
 800614c:	43db      	mvns	r3, r3
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	4013      	ands	r3, r2
 8006152:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f003 0203 	and.w	r2, r3, #3
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	005b      	lsls	r3, r3, #1
 8006160:	fa02 f303 	lsl.w	r3, r2, r3
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	4313      	orrs	r3, r2
 8006168:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 80ac 	beq.w	80062d6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800617e:	4b5f      	ldr	r3, [pc, #380]	; (80062fc <HAL_GPIO_Init+0x330>)
 8006180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006182:	4a5e      	ldr	r2, [pc, #376]	; (80062fc <HAL_GPIO_Init+0x330>)
 8006184:	f043 0301 	orr.w	r3, r3, #1
 8006188:	6613      	str	r3, [r2, #96]	; 0x60
 800618a:	4b5c      	ldr	r3, [pc, #368]	; (80062fc <HAL_GPIO_Init+0x330>)
 800618c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	60bb      	str	r3, [r7, #8]
 8006194:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006196:	4a5a      	ldr	r2, [pc, #360]	; (8006300 <HAL_GPIO_Init+0x334>)
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	089b      	lsrs	r3, r3, #2
 800619c:	3302      	adds	r3, #2
 800619e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	f003 0303 	and.w	r3, r3, #3
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	220f      	movs	r2, #15
 80061ae:	fa02 f303 	lsl.w	r3, r2, r3
 80061b2:	43db      	mvns	r3, r3
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	4013      	ands	r3, r2
 80061b8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80061c0:	d025      	beq.n	800620e <HAL_GPIO_Init+0x242>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a4f      	ldr	r2, [pc, #316]	; (8006304 <HAL_GPIO_Init+0x338>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d01f      	beq.n	800620a <HAL_GPIO_Init+0x23e>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a4e      	ldr	r2, [pc, #312]	; (8006308 <HAL_GPIO_Init+0x33c>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d019      	beq.n	8006206 <HAL_GPIO_Init+0x23a>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a4d      	ldr	r2, [pc, #308]	; (800630c <HAL_GPIO_Init+0x340>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d013      	beq.n	8006202 <HAL_GPIO_Init+0x236>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a4c      	ldr	r2, [pc, #304]	; (8006310 <HAL_GPIO_Init+0x344>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d00d      	beq.n	80061fe <HAL_GPIO_Init+0x232>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a4b      	ldr	r2, [pc, #300]	; (8006314 <HAL_GPIO_Init+0x348>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d007      	beq.n	80061fa <HAL_GPIO_Init+0x22e>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a4a      	ldr	r2, [pc, #296]	; (8006318 <HAL_GPIO_Init+0x34c>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d101      	bne.n	80061f6 <HAL_GPIO_Init+0x22a>
 80061f2:	2306      	movs	r3, #6
 80061f4:	e00c      	b.n	8006210 <HAL_GPIO_Init+0x244>
 80061f6:	2307      	movs	r3, #7
 80061f8:	e00a      	b.n	8006210 <HAL_GPIO_Init+0x244>
 80061fa:	2305      	movs	r3, #5
 80061fc:	e008      	b.n	8006210 <HAL_GPIO_Init+0x244>
 80061fe:	2304      	movs	r3, #4
 8006200:	e006      	b.n	8006210 <HAL_GPIO_Init+0x244>
 8006202:	2303      	movs	r3, #3
 8006204:	e004      	b.n	8006210 <HAL_GPIO_Init+0x244>
 8006206:	2302      	movs	r3, #2
 8006208:	e002      	b.n	8006210 <HAL_GPIO_Init+0x244>
 800620a:	2301      	movs	r3, #1
 800620c:	e000      	b.n	8006210 <HAL_GPIO_Init+0x244>
 800620e:	2300      	movs	r3, #0
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	f002 0203 	and.w	r2, r2, #3
 8006216:	0092      	lsls	r2, r2, #2
 8006218:	4093      	lsls	r3, r2
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	4313      	orrs	r3, r2
 800621e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006220:	4937      	ldr	r1, [pc, #220]	; (8006300 <HAL_GPIO_Init+0x334>)
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	089b      	lsrs	r3, r3, #2
 8006226:	3302      	adds	r3, #2
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800622e:	4b3b      	ldr	r3, [pc, #236]	; (800631c <HAL_GPIO_Init+0x350>)
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	43db      	mvns	r3, r3
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	4013      	ands	r3, r2
 800623c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	4313      	orrs	r3, r2
 8006250:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006252:	4a32      	ldr	r2, [pc, #200]	; (800631c <HAL_GPIO_Init+0x350>)
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006258:	4b30      	ldr	r3, [pc, #192]	; (800631c <HAL_GPIO_Init+0x350>)
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	43db      	mvns	r3, r3
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	4013      	ands	r3, r2
 8006266:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d003      	beq.n	800627c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4313      	orrs	r3, r2
 800627a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800627c:	4a27      	ldr	r2, [pc, #156]	; (800631c <HAL_GPIO_Init+0x350>)
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006282:	4b26      	ldr	r3, [pc, #152]	; (800631c <HAL_GPIO_Init+0x350>)
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	43db      	mvns	r3, r3
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	4013      	ands	r3, r2
 8006290:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d003      	beq.n	80062a6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80062a6:	4a1d      	ldr	r2, [pc, #116]	; (800631c <HAL_GPIO_Init+0x350>)
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80062ac:	4b1b      	ldr	r3, [pc, #108]	; (800631c <HAL_GPIO_Init+0x350>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	43db      	mvns	r3, r3
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	4013      	ands	r3, r2
 80062ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d003      	beq.n	80062d0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80062d0:	4a12      	ldr	r2, [pc, #72]	; (800631c <HAL_GPIO_Init+0x350>)
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	3301      	adds	r3, #1
 80062da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	fa22 f303 	lsr.w	r3, r2, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f47f ae78 	bne.w	8005fdc <HAL_GPIO_Init+0x10>
  }
}
 80062ec:	bf00      	nop
 80062ee:	bf00      	nop
 80062f0:	371c      	adds	r7, #28
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	40021000 	.word	0x40021000
 8006300:	40010000 	.word	0x40010000
 8006304:	48000400 	.word	0x48000400
 8006308:	48000800 	.word	0x48000800
 800630c:	48000c00 	.word	0x48000c00
 8006310:	48001000 	.word	0x48001000
 8006314:	48001400 	.word	0x48001400
 8006318:	48001800 	.word	0x48001800
 800631c:	40010400 	.word	0x40010400

08006320 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	460b      	mov	r3, r1
 800632a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	691a      	ldr	r2, [r3, #16]
 8006330:	887b      	ldrh	r3, [r7, #2]
 8006332:	4013      	ands	r3, r2
 8006334:	2b00      	cmp	r3, #0
 8006336:	d002      	beq.n	800633e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006338:	2301      	movs	r3, #1
 800633a:	73fb      	strb	r3, [r7, #15]
 800633c:	e001      	b.n	8006342 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800633e:	2300      	movs	r3, #0
 8006340:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006342:	7bfb      	ldrb	r3, [r7, #15]
}
 8006344:	4618      	mov	r0, r3
 8006346:	3714      	adds	r7, #20
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	460b      	mov	r3, r1
 800635a:	807b      	strh	r3, [r7, #2]
 800635c:	4613      	mov	r3, r2
 800635e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006360:	787b      	ldrb	r3, [r7, #1]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006366:	887a      	ldrh	r2, [r7, #2]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800636c:	e002      	b.n	8006374 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800636e:	887a      	ldrh	r2, [r7, #2]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	4603      	mov	r3, r0
 8006388:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800638a:	4b08      	ldr	r3, [pc, #32]	; (80063ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800638c:	695a      	ldr	r2, [r3, #20]
 800638e:	88fb      	ldrh	r3, [r7, #6]
 8006390:	4013      	ands	r3, r2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d006      	beq.n	80063a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006396:	4a05      	ldr	r2, [pc, #20]	; (80063ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006398:	88fb      	ldrh	r3, [r7, #6]
 800639a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800639c:	88fb      	ldrh	r3, [r7, #6]
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fc fe90 	bl	80030c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80063a4:	bf00      	nop
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	40010400 	.word	0x40010400

080063b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80063b0:	b480      	push	{r7}
 80063b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80063b4:	4b04      	ldr	r3, [pc, #16]	; (80063c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80063bc:	4618      	mov	r0, r3
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	40007000 	.word	0x40007000

080063cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063da:	d130      	bne.n	800643e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80063dc:	4b23      	ldr	r3, [pc, #140]	; (800646c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80063e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063e8:	d038      	beq.n	800645c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80063ea:	4b20      	ldr	r3, [pc, #128]	; (800646c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80063f2:	4a1e      	ldr	r2, [pc, #120]	; (800646c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80063fa:	4b1d      	ldr	r3, [pc, #116]	; (8006470 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2232      	movs	r2, #50	; 0x32
 8006400:	fb02 f303 	mul.w	r3, r2, r3
 8006404:	4a1b      	ldr	r2, [pc, #108]	; (8006474 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006406:	fba2 2303 	umull	r2, r3, r2, r3
 800640a:	0c9b      	lsrs	r3, r3, #18
 800640c:	3301      	adds	r3, #1
 800640e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006410:	e002      	b.n	8006418 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	3b01      	subs	r3, #1
 8006416:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006418:	4b14      	ldr	r3, [pc, #80]	; (800646c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006424:	d102      	bne.n	800642c <HAL_PWREx_ControlVoltageScaling+0x60>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1f2      	bne.n	8006412 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800642c:	4b0f      	ldr	r3, [pc, #60]	; (800646c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006438:	d110      	bne.n	800645c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e00f      	b.n	800645e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800643e:	4b0b      	ldr	r3, [pc, #44]	; (800646c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800644a:	d007      	beq.n	800645c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800644c:	4b07      	ldr	r3, [pc, #28]	; (800646c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006454:	4a05      	ldr	r2, [pc, #20]	; (800646c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006456:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800645a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	40007000 	.word	0x40007000
 8006470:	20000020 	.word	0x20000020
 8006474:	431bde83 	.word	0x431bde83

08006478 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b088      	sub	sp, #32
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e3ca      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800648a:	4b97      	ldr	r3, [pc, #604]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f003 030c 	and.w	r3, r3, #12
 8006492:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006494:	4b94      	ldr	r3, [pc, #592]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	f003 0303 	and.w	r3, r3, #3
 800649c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0310 	and.w	r3, r3, #16
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 80e4 	beq.w	8006674 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d007      	beq.n	80064c2 <HAL_RCC_OscConfig+0x4a>
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	2b0c      	cmp	r3, #12
 80064b6:	f040 808b 	bne.w	80065d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	f040 8087 	bne.w	80065d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80064c2:	4b89      	ldr	r3, [pc, #548]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0302 	and.w	r3, r3, #2
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d005      	beq.n	80064da <HAL_RCC_OscConfig+0x62>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e3a2      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1a      	ldr	r2, [r3, #32]
 80064de:	4b82      	ldr	r3, [pc, #520]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0308 	and.w	r3, r3, #8
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d004      	beq.n	80064f4 <HAL_RCC_OscConfig+0x7c>
 80064ea:	4b7f      	ldr	r3, [pc, #508]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064f2:	e005      	b.n	8006500 <HAL_RCC_OscConfig+0x88>
 80064f4:	4b7c      	ldr	r3, [pc, #496]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 80064f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064fa:	091b      	lsrs	r3, r3, #4
 80064fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006500:	4293      	cmp	r3, r2
 8006502:	d223      	bcs.n	800654c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a1b      	ldr	r3, [r3, #32]
 8006508:	4618      	mov	r0, r3
 800650a:	f000 fd55 	bl	8006fb8 <RCC_SetFlashLatencyFromMSIRange>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e383      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006518:	4b73      	ldr	r3, [pc, #460]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a72      	ldr	r2, [pc, #456]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 800651e:	f043 0308 	orr.w	r3, r3, #8
 8006522:	6013      	str	r3, [r2, #0]
 8006524:	4b70      	ldr	r3, [pc, #448]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	496d      	ldr	r1, [pc, #436]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 8006532:	4313      	orrs	r3, r2
 8006534:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006536:	4b6c      	ldr	r3, [pc, #432]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	021b      	lsls	r3, r3, #8
 8006544:	4968      	ldr	r1, [pc, #416]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 8006546:	4313      	orrs	r3, r2
 8006548:	604b      	str	r3, [r1, #4]
 800654a:	e025      	b.n	8006598 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800654c:	4b66      	ldr	r3, [pc, #408]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a65      	ldr	r2, [pc, #404]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 8006552:	f043 0308 	orr.w	r3, r3, #8
 8006556:	6013      	str	r3, [r2, #0]
 8006558:	4b63      	ldr	r3, [pc, #396]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a1b      	ldr	r3, [r3, #32]
 8006564:	4960      	ldr	r1, [pc, #384]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 8006566:	4313      	orrs	r3, r2
 8006568:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800656a:	4b5f      	ldr	r3, [pc, #380]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	021b      	lsls	r3, r3, #8
 8006578:	495b      	ldr	r1, [pc, #364]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 800657a:	4313      	orrs	r3, r2
 800657c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d109      	bne.n	8006598 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a1b      	ldr	r3, [r3, #32]
 8006588:	4618      	mov	r0, r3
 800658a:	f000 fd15 	bl	8006fb8 <RCC_SetFlashLatencyFromMSIRange>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d001      	beq.n	8006598 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e343      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006598:	f000 fc4a 	bl	8006e30 <HAL_RCC_GetSysClockFreq>
 800659c:	4602      	mov	r2, r0
 800659e:	4b52      	ldr	r3, [pc, #328]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	091b      	lsrs	r3, r3, #4
 80065a4:	f003 030f 	and.w	r3, r3, #15
 80065a8:	4950      	ldr	r1, [pc, #320]	; (80066ec <HAL_RCC_OscConfig+0x274>)
 80065aa:	5ccb      	ldrb	r3, [r1, r3]
 80065ac:	f003 031f 	and.w	r3, r3, #31
 80065b0:	fa22 f303 	lsr.w	r3, r2, r3
 80065b4:	4a4e      	ldr	r2, [pc, #312]	; (80066f0 <HAL_RCC_OscConfig+0x278>)
 80065b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80065b8:	4b4e      	ldr	r3, [pc, #312]	; (80066f4 <HAL_RCC_OscConfig+0x27c>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4618      	mov	r0, r3
 80065be:	f7fd f999 	bl	80038f4 <HAL_InitTick>
 80065c2:	4603      	mov	r3, r0
 80065c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80065c6:	7bfb      	ldrb	r3, [r7, #15]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d052      	beq.n	8006672 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80065cc:	7bfb      	ldrb	r3, [r7, #15]
 80065ce:	e327      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d032      	beq.n	800663e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80065d8:	4b43      	ldr	r3, [pc, #268]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a42      	ldr	r2, [pc, #264]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 80065de:	f043 0301 	orr.w	r3, r3, #1
 80065e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80065e4:	f7fd f9d6 	bl	8003994 <HAL_GetTick>
 80065e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80065ea:	e008      	b.n	80065fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80065ec:	f7fd f9d2 	bl	8003994 <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d901      	bls.n	80065fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e310      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80065fe:	4b3a      	ldr	r3, [pc, #232]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	2b00      	cmp	r3, #0
 8006608:	d0f0      	beq.n	80065ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800660a:	4b37      	ldr	r3, [pc, #220]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a36      	ldr	r2, [pc, #216]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 8006610:	f043 0308 	orr.w	r3, r3, #8
 8006614:	6013      	str	r3, [r2, #0]
 8006616:	4b34      	ldr	r3, [pc, #208]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	4931      	ldr	r1, [pc, #196]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 8006624:	4313      	orrs	r3, r2
 8006626:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006628:	4b2f      	ldr	r3, [pc, #188]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	69db      	ldr	r3, [r3, #28]
 8006634:	021b      	lsls	r3, r3, #8
 8006636:	492c      	ldr	r1, [pc, #176]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 8006638:	4313      	orrs	r3, r2
 800663a:	604b      	str	r3, [r1, #4]
 800663c:	e01a      	b.n	8006674 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800663e:	4b2a      	ldr	r3, [pc, #168]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a29      	ldr	r2, [pc, #164]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 8006644:	f023 0301 	bic.w	r3, r3, #1
 8006648:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800664a:	f7fd f9a3 	bl	8003994 <HAL_GetTick>
 800664e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006650:	e008      	b.n	8006664 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006652:	f7fd f99f 	bl	8003994 <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	2b02      	cmp	r3, #2
 800665e:	d901      	bls.n	8006664 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e2dd      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006664:	4b20      	ldr	r3, [pc, #128]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0302 	and.w	r3, r3, #2
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1f0      	bne.n	8006652 <HAL_RCC_OscConfig+0x1da>
 8006670:	e000      	b.n	8006674 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006672:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	2b00      	cmp	r3, #0
 800667e:	d074      	beq.n	800676a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	2b08      	cmp	r3, #8
 8006684:	d005      	beq.n	8006692 <HAL_RCC_OscConfig+0x21a>
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	2b0c      	cmp	r3, #12
 800668a:	d10e      	bne.n	80066aa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	2b03      	cmp	r3, #3
 8006690:	d10b      	bne.n	80066aa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006692:	4b15      	ldr	r3, [pc, #84]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d064      	beq.n	8006768 <HAL_RCC_OscConfig+0x2f0>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d160      	bne.n	8006768 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e2ba      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066b2:	d106      	bne.n	80066c2 <HAL_RCC_OscConfig+0x24a>
 80066b4:	4b0c      	ldr	r3, [pc, #48]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a0b      	ldr	r2, [pc, #44]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 80066ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066be:	6013      	str	r3, [r2, #0]
 80066c0:	e026      	b.n	8006710 <HAL_RCC_OscConfig+0x298>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066ca:	d115      	bne.n	80066f8 <HAL_RCC_OscConfig+0x280>
 80066cc:	4b06      	ldr	r3, [pc, #24]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a05      	ldr	r2, [pc, #20]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 80066d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066d6:	6013      	str	r3, [r2, #0]
 80066d8:	4b03      	ldr	r3, [pc, #12]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a02      	ldr	r2, [pc, #8]	; (80066e8 <HAL_RCC_OscConfig+0x270>)
 80066de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066e2:	6013      	str	r3, [r2, #0]
 80066e4:	e014      	b.n	8006710 <HAL_RCC_OscConfig+0x298>
 80066e6:	bf00      	nop
 80066e8:	40021000 	.word	0x40021000
 80066ec:	08010a08 	.word	0x08010a08
 80066f0:	20000020 	.word	0x20000020
 80066f4:	2000002c 	.word	0x2000002c
 80066f8:	4ba0      	ldr	r3, [pc, #640]	; (800697c <HAL_RCC_OscConfig+0x504>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a9f      	ldr	r2, [pc, #636]	; (800697c <HAL_RCC_OscConfig+0x504>)
 80066fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006702:	6013      	str	r3, [r2, #0]
 8006704:	4b9d      	ldr	r3, [pc, #628]	; (800697c <HAL_RCC_OscConfig+0x504>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a9c      	ldr	r2, [pc, #624]	; (800697c <HAL_RCC_OscConfig+0x504>)
 800670a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800670e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d013      	beq.n	8006740 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006718:	f7fd f93c 	bl	8003994 <HAL_GetTick>
 800671c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800671e:	e008      	b.n	8006732 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006720:	f7fd f938 	bl	8003994 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	2b64      	cmp	r3, #100	; 0x64
 800672c:	d901      	bls.n	8006732 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e276      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006732:	4b92      	ldr	r3, [pc, #584]	; (800697c <HAL_RCC_OscConfig+0x504>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d0f0      	beq.n	8006720 <HAL_RCC_OscConfig+0x2a8>
 800673e:	e014      	b.n	800676a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006740:	f7fd f928 	bl	8003994 <HAL_GetTick>
 8006744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006746:	e008      	b.n	800675a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006748:	f7fd f924 	bl	8003994 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	2b64      	cmp	r3, #100	; 0x64
 8006754:	d901      	bls.n	800675a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e262      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800675a:	4b88      	ldr	r3, [pc, #544]	; (800697c <HAL_RCC_OscConfig+0x504>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1f0      	bne.n	8006748 <HAL_RCC_OscConfig+0x2d0>
 8006766:	e000      	b.n	800676a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d060      	beq.n	8006838 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	2b04      	cmp	r3, #4
 800677a:	d005      	beq.n	8006788 <HAL_RCC_OscConfig+0x310>
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	2b0c      	cmp	r3, #12
 8006780:	d119      	bne.n	80067b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	2b02      	cmp	r3, #2
 8006786:	d116      	bne.n	80067b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006788:	4b7c      	ldr	r3, [pc, #496]	; (800697c <HAL_RCC_OscConfig+0x504>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006790:	2b00      	cmp	r3, #0
 8006792:	d005      	beq.n	80067a0 <HAL_RCC_OscConfig+0x328>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d101      	bne.n	80067a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e23f      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067a0:	4b76      	ldr	r3, [pc, #472]	; (800697c <HAL_RCC_OscConfig+0x504>)
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	061b      	lsls	r3, r3, #24
 80067ae:	4973      	ldr	r1, [pc, #460]	; (800697c <HAL_RCC_OscConfig+0x504>)
 80067b0:	4313      	orrs	r3, r2
 80067b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067b4:	e040      	b.n	8006838 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d023      	beq.n	8006806 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067be:	4b6f      	ldr	r3, [pc, #444]	; (800697c <HAL_RCC_OscConfig+0x504>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a6e      	ldr	r2, [pc, #440]	; (800697c <HAL_RCC_OscConfig+0x504>)
 80067c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ca:	f7fd f8e3 	bl	8003994 <HAL_GetTick>
 80067ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067d0:	e008      	b.n	80067e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067d2:	f7fd f8df 	bl	8003994 <HAL_GetTick>
 80067d6:	4602      	mov	r2, r0
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d901      	bls.n	80067e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e21d      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067e4:	4b65      	ldr	r3, [pc, #404]	; (800697c <HAL_RCC_OscConfig+0x504>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d0f0      	beq.n	80067d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067f0:	4b62      	ldr	r3, [pc, #392]	; (800697c <HAL_RCC_OscConfig+0x504>)
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	061b      	lsls	r3, r3, #24
 80067fe:	495f      	ldr	r1, [pc, #380]	; (800697c <HAL_RCC_OscConfig+0x504>)
 8006800:	4313      	orrs	r3, r2
 8006802:	604b      	str	r3, [r1, #4]
 8006804:	e018      	b.n	8006838 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006806:	4b5d      	ldr	r3, [pc, #372]	; (800697c <HAL_RCC_OscConfig+0x504>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a5c      	ldr	r2, [pc, #368]	; (800697c <HAL_RCC_OscConfig+0x504>)
 800680c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006812:	f7fd f8bf 	bl	8003994 <HAL_GetTick>
 8006816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006818:	e008      	b.n	800682c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800681a:	f7fd f8bb 	bl	8003994 <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	2b02      	cmp	r3, #2
 8006826:	d901      	bls.n	800682c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e1f9      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800682c:	4b53      	ldr	r3, [pc, #332]	; (800697c <HAL_RCC_OscConfig+0x504>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1f0      	bne.n	800681a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0308 	and.w	r3, r3, #8
 8006840:	2b00      	cmp	r3, #0
 8006842:	d03c      	beq.n	80068be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d01c      	beq.n	8006886 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800684c:	4b4b      	ldr	r3, [pc, #300]	; (800697c <HAL_RCC_OscConfig+0x504>)
 800684e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006852:	4a4a      	ldr	r2, [pc, #296]	; (800697c <HAL_RCC_OscConfig+0x504>)
 8006854:	f043 0301 	orr.w	r3, r3, #1
 8006858:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800685c:	f7fd f89a 	bl	8003994 <HAL_GetTick>
 8006860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006862:	e008      	b.n	8006876 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006864:	f7fd f896 	bl	8003994 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	2b02      	cmp	r3, #2
 8006870:	d901      	bls.n	8006876 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e1d4      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006876:	4b41      	ldr	r3, [pc, #260]	; (800697c <HAL_RCC_OscConfig+0x504>)
 8006878:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b00      	cmp	r3, #0
 8006882:	d0ef      	beq.n	8006864 <HAL_RCC_OscConfig+0x3ec>
 8006884:	e01b      	b.n	80068be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006886:	4b3d      	ldr	r3, [pc, #244]	; (800697c <HAL_RCC_OscConfig+0x504>)
 8006888:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800688c:	4a3b      	ldr	r2, [pc, #236]	; (800697c <HAL_RCC_OscConfig+0x504>)
 800688e:	f023 0301 	bic.w	r3, r3, #1
 8006892:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006896:	f7fd f87d 	bl	8003994 <HAL_GetTick>
 800689a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800689c:	e008      	b.n	80068b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800689e:	f7fd f879 	bl	8003994 <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d901      	bls.n	80068b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e1b7      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80068b0:	4b32      	ldr	r3, [pc, #200]	; (800697c <HAL_RCC_OscConfig+0x504>)
 80068b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1ef      	bne.n	800689e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0304 	and.w	r3, r3, #4
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f000 80a6 	beq.w	8006a18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068cc:	2300      	movs	r3, #0
 80068ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80068d0:	4b2a      	ldr	r3, [pc, #168]	; (800697c <HAL_RCC_OscConfig+0x504>)
 80068d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10d      	bne.n	80068f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068dc:	4b27      	ldr	r3, [pc, #156]	; (800697c <HAL_RCC_OscConfig+0x504>)
 80068de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e0:	4a26      	ldr	r2, [pc, #152]	; (800697c <HAL_RCC_OscConfig+0x504>)
 80068e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068e6:	6593      	str	r3, [r2, #88]	; 0x58
 80068e8:	4b24      	ldr	r3, [pc, #144]	; (800697c <HAL_RCC_OscConfig+0x504>)
 80068ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068f0:	60bb      	str	r3, [r7, #8]
 80068f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068f4:	2301      	movs	r3, #1
 80068f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068f8:	4b21      	ldr	r3, [pc, #132]	; (8006980 <HAL_RCC_OscConfig+0x508>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006900:	2b00      	cmp	r3, #0
 8006902:	d118      	bne.n	8006936 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006904:	4b1e      	ldr	r3, [pc, #120]	; (8006980 <HAL_RCC_OscConfig+0x508>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a1d      	ldr	r2, [pc, #116]	; (8006980 <HAL_RCC_OscConfig+0x508>)
 800690a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800690e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006910:	f7fd f840 	bl	8003994 <HAL_GetTick>
 8006914:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006916:	e008      	b.n	800692a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006918:	f7fd f83c 	bl	8003994 <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	2b02      	cmp	r3, #2
 8006924:	d901      	bls.n	800692a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e17a      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800692a:	4b15      	ldr	r3, [pc, #84]	; (8006980 <HAL_RCC_OscConfig+0x508>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006932:	2b00      	cmp	r3, #0
 8006934:	d0f0      	beq.n	8006918 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d108      	bne.n	8006950 <HAL_RCC_OscConfig+0x4d8>
 800693e:	4b0f      	ldr	r3, [pc, #60]	; (800697c <HAL_RCC_OscConfig+0x504>)
 8006940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006944:	4a0d      	ldr	r2, [pc, #52]	; (800697c <HAL_RCC_OscConfig+0x504>)
 8006946:	f043 0301 	orr.w	r3, r3, #1
 800694a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800694e:	e029      	b.n	80069a4 <HAL_RCC_OscConfig+0x52c>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	2b05      	cmp	r3, #5
 8006956:	d115      	bne.n	8006984 <HAL_RCC_OscConfig+0x50c>
 8006958:	4b08      	ldr	r3, [pc, #32]	; (800697c <HAL_RCC_OscConfig+0x504>)
 800695a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800695e:	4a07      	ldr	r2, [pc, #28]	; (800697c <HAL_RCC_OscConfig+0x504>)
 8006960:	f043 0304 	orr.w	r3, r3, #4
 8006964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006968:	4b04      	ldr	r3, [pc, #16]	; (800697c <HAL_RCC_OscConfig+0x504>)
 800696a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800696e:	4a03      	ldr	r2, [pc, #12]	; (800697c <HAL_RCC_OscConfig+0x504>)
 8006970:	f043 0301 	orr.w	r3, r3, #1
 8006974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006978:	e014      	b.n	80069a4 <HAL_RCC_OscConfig+0x52c>
 800697a:	bf00      	nop
 800697c:	40021000 	.word	0x40021000
 8006980:	40007000 	.word	0x40007000
 8006984:	4b9c      	ldr	r3, [pc, #624]	; (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800698a:	4a9b      	ldr	r2, [pc, #620]	; (8006bf8 <HAL_RCC_OscConfig+0x780>)
 800698c:	f023 0301 	bic.w	r3, r3, #1
 8006990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006994:	4b98      	ldr	r3, [pc, #608]	; (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800699a:	4a97      	ldr	r2, [pc, #604]	; (8006bf8 <HAL_RCC_OscConfig+0x780>)
 800699c:	f023 0304 	bic.w	r3, r3, #4
 80069a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d016      	beq.n	80069da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069ac:	f7fc fff2 	bl	8003994 <HAL_GetTick>
 80069b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069b2:	e00a      	b.n	80069ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069b4:	f7fc ffee 	bl	8003994 <HAL_GetTick>
 80069b8:	4602      	mov	r2, r0
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	f241 3288 	movw	r2, #5000	; 0x1388
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d901      	bls.n	80069ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e12a      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069ca:	4b8b      	ldr	r3, [pc, #556]	; (8006bf8 <HAL_RCC_OscConfig+0x780>)
 80069cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069d0:	f003 0302 	and.w	r3, r3, #2
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d0ed      	beq.n	80069b4 <HAL_RCC_OscConfig+0x53c>
 80069d8:	e015      	b.n	8006a06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069da:	f7fc ffdb 	bl	8003994 <HAL_GetTick>
 80069de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069e0:	e00a      	b.n	80069f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069e2:	f7fc ffd7 	bl	8003994 <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d901      	bls.n	80069f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e113      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069f8:	4b7f      	ldr	r3, [pc, #508]	; (8006bf8 <HAL_RCC_OscConfig+0x780>)
 80069fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069fe:	f003 0302 	and.w	r3, r3, #2
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1ed      	bne.n	80069e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a06:	7ffb      	ldrb	r3, [r7, #31]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d105      	bne.n	8006a18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a0c:	4b7a      	ldr	r3, [pc, #488]	; (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a10:	4a79      	ldr	r2, [pc, #484]	; (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006a12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a16:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f000 80fe 	beq.w	8006c1e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	f040 80d0 	bne.w	8006bcc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006a2c:	4b72      	ldr	r3, [pc, #456]	; (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	f003 0203 	and.w	r2, r3, #3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d130      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d127      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d11f      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a6c:	2a07      	cmp	r2, #7
 8006a6e:	bf14      	ite	ne
 8006a70:	2201      	movne	r2, #1
 8006a72:	2200      	moveq	r2, #0
 8006a74:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d113      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a84:	085b      	lsrs	r3, r3, #1
 8006a86:	3b01      	subs	r3, #1
 8006a88:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d109      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a98:	085b      	lsrs	r3, r3, #1
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d06e      	beq.n	8006b80 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	2b0c      	cmp	r3, #12
 8006aa6:	d069      	beq.n	8006b7c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006aa8:	4b53      	ldr	r3, [pc, #332]	; (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d105      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006ab4:	4b50      	ldr	r3, [pc, #320]	; (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d001      	beq.n	8006ac4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e0ad      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006ac4:	4b4c      	ldr	r3, [pc, #304]	; (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a4b      	ldr	r2, [pc, #300]	; (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006aca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ace:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006ad0:	f7fc ff60 	bl	8003994 <HAL_GetTick>
 8006ad4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ad6:	e008      	b.n	8006aea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ad8:	f7fc ff5c 	bl	8003994 <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d901      	bls.n	8006aea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e09a      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006aea:	4b43      	ldr	r3, [pc, #268]	; (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1f0      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006af6:	4b40      	ldr	r3, [pc, #256]	; (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006af8:	68da      	ldr	r2, [r3, #12]
 8006afa:	4b40      	ldr	r3, [pc, #256]	; (8006bfc <HAL_RCC_OscConfig+0x784>)
 8006afc:	4013      	ands	r3, r2
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006b06:	3a01      	subs	r2, #1
 8006b08:	0112      	lsls	r2, r2, #4
 8006b0a:	4311      	orrs	r1, r2
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006b10:	0212      	lsls	r2, r2, #8
 8006b12:	4311      	orrs	r1, r2
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006b18:	0852      	lsrs	r2, r2, #1
 8006b1a:	3a01      	subs	r2, #1
 8006b1c:	0552      	lsls	r2, r2, #21
 8006b1e:	4311      	orrs	r1, r2
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006b24:	0852      	lsrs	r2, r2, #1
 8006b26:	3a01      	subs	r2, #1
 8006b28:	0652      	lsls	r2, r2, #25
 8006b2a:	4311      	orrs	r1, r2
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b30:	0912      	lsrs	r2, r2, #4
 8006b32:	0452      	lsls	r2, r2, #17
 8006b34:	430a      	orrs	r2, r1
 8006b36:	4930      	ldr	r1, [pc, #192]	; (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006b3c:	4b2e      	ldr	r3, [pc, #184]	; (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a2d      	ldr	r2, [pc, #180]	; (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006b42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b48:	4b2b      	ldr	r3, [pc, #172]	; (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	4a2a      	ldr	r2, [pc, #168]	; (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006b4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b54:	f7fc ff1e 	bl	8003994 <HAL_GetTick>
 8006b58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b5a:	e008      	b.n	8006b6e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b5c:	f7fc ff1a 	bl	8003994 <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d901      	bls.n	8006b6e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e058      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b6e:	4b22      	ldr	r3, [pc, #136]	; (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d0f0      	beq.n	8006b5c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006b7a:	e050      	b.n	8006c1e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e04f      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b80:	4b1d      	ldr	r3, [pc, #116]	; (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d148      	bne.n	8006c1e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006b8c:	4b1a      	ldr	r3, [pc, #104]	; (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a19      	ldr	r2, [pc, #100]	; (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006b92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b98:	4b17      	ldr	r3, [pc, #92]	; (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	4a16      	ldr	r2, [pc, #88]	; (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006b9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ba2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006ba4:	f7fc fef6 	bl	8003994 <HAL_GetTick>
 8006ba8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006baa:	e008      	b.n	8006bbe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bac:	f7fc fef2 	bl	8003994 <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d901      	bls.n	8006bbe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e030      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bbe:	4b0e      	ldr	r3, [pc, #56]	; (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d0f0      	beq.n	8006bac <HAL_RCC_OscConfig+0x734>
 8006bca:	e028      	b.n	8006c1e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	2b0c      	cmp	r3, #12
 8006bd0:	d023      	beq.n	8006c1a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bd2:	4b09      	ldr	r3, [pc, #36]	; (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a08      	ldr	r2, [pc, #32]	; (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006bd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bde:	f7fc fed9 	bl	8003994 <HAL_GetTick>
 8006be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006be4:	e00c      	b.n	8006c00 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006be6:	f7fc fed5 	bl	8003994 <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d905      	bls.n	8006c00 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e013      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
 8006bf8:	40021000 	.word	0x40021000
 8006bfc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c00:	4b09      	ldr	r3, [pc, #36]	; (8006c28 <HAL_RCC_OscConfig+0x7b0>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1ec      	bne.n	8006be6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006c0c:	4b06      	ldr	r3, [pc, #24]	; (8006c28 <HAL_RCC_OscConfig+0x7b0>)
 8006c0e:	68da      	ldr	r2, [r3, #12]
 8006c10:	4905      	ldr	r1, [pc, #20]	; (8006c28 <HAL_RCC_OscConfig+0x7b0>)
 8006c12:	4b06      	ldr	r3, [pc, #24]	; (8006c2c <HAL_RCC_OscConfig+0x7b4>)
 8006c14:	4013      	ands	r3, r2
 8006c16:	60cb      	str	r3, [r1, #12]
 8006c18:	e001      	b.n	8006c1e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e000      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3720      	adds	r7, #32
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	40021000 	.word	0x40021000
 8006c2c:	feeefffc 	.word	0xfeeefffc

08006c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e0e7      	b.n	8006e14 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c44:	4b75      	ldr	r3, [pc, #468]	; (8006e1c <HAL_RCC_ClockConfig+0x1ec>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0307 	and.w	r3, r3, #7
 8006c4c:	683a      	ldr	r2, [r7, #0]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d910      	bls.n	8006c74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c52:	4b72      	ldr	r3, [pc, #456]	; (8006e1c <HAL_RCC_ClockConfig+0x1ec>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f023 0207 	bic.w	r2, r3, #7
 8006c5a:	4970      	ldr	r1, [pc, #448]	; (8006e1c <HAL_RCC_ClockConfig+0x1ec>)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c62:	4b6e      	ldr	r3, [pc, #440]	; (8006e1c <HAL_RCC_ClockConfig+0x1ec>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 0307 	and.w	r3, r3, #7
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d001      	beq.n	8006c74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e0cf      	b.n	8006e14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0302 	and.w	r3, r3, #2
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d010      	beq.n	8006ca2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	689a      	ldr	r2, [r3, #8]
 8006c84:	4b66      	ldr	r3, [pc, #408]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d908      	bls.n	8006ca2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c90:	4b63      	ldr	r3, [pc, #396]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	4960      	ldr	r1, [pc, #384]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d04c      	beq.n	8006d48 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	d107      	bne.n	8006cc6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cb6:	4b5a      	ldr	r3, [pc, #360]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d121      	bne.n	8006d06 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e0a6      	b.n	8006e14 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d107      	bne.n	8006cde <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cce:	4b54      	ldr	r3, [pc, #336]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d115      	bne.n	8006d06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e09a      	b.n	8006e14 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d107      	bne.n	8006cf6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ce6:	4b4e      	ldr	r3, [pc, #312]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d109      	bne.n	8006d06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e08e      	b.n	8006e14 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006cf6:	4b4a      	ldr	r3, [pc, #296]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e086      	b.n	8006e14 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d06:	4b46      	ldr	r3, [pc, #280]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f023 0203 	bic.w	r2, r3, #3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	4943      	ldr	r1, [pc, #268]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006d14:	4313      	orrs	r3, r2
 8006d16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d18:	f7fc fe3c 	bl	8003994 <HAL_GetTick>
 8006d1c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d1e:	e00a      	b.n	8006d36 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d20:	f7fc fe38 	bl	8003994 <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d901      	bls.n	8006d36 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e06e      	b.n	8006e14 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d36:	4b3a      	ldr	r3, [pc, #232]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f003 020c 	and.w	r2, r3, #12
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d1eb      	bne.n	8006d20 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0302 	and.w	r3, r3, #2
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d010      	beq.n	8006d76 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	689a      	ldr	r2, [r3, #8]
 8006d58:	4b31      	ldr	r3, [pc, #196]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d208      	bcs.n	8006d76 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d64:	4b2e      	ldr	r3, [pc, #184]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	492b      	ldr	r1, [pc, #172]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d76:	4b29      	ldr	r3, [pc, #164]	; (8006e1c <HAL_RCC_ClockConfig+0x1ec>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0307 	and.w	r3, r3, #7
 8006d7e:	683a      	ldr	r2, [r7, #0]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d210      	bcs.n	8006da6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d84:	4b25      	ldr	r3, [pc, #148]	; (8006e1c <HAL_RCC_ClockConfig+0x1ec>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f023 0207 	bic.w	r2, r3, #7
 8006d8c:	4923      	ldr	r1, [pc, #140]	; (8006e1c <HAL_RCC_ClockConfig+0x1ec>)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d94:	4b21      	ldr	r3, [pc, #132]	; (8006e1c <HAL_RCC_ClockConfig+0x1ec>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0307 	and.w	r3, r3, #7
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d001      	beq.n	8006da6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e036      	b.n	8006e14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0304 	and.w	r3, r3, #4
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d008      	beq.n	8006dc4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006db2:	4b1b      	ldr	r3, [pc, #108]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	4918      	ldr	r1, [pc, #96]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0308 	and.w	r3, r3, #8
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d009      	beq.n	8006de4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006dd0:	4b13      	ldr	r3, [pc, #76]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	00db      	lsls	r3, r3, #3
 8006dde:	4910      	ldr	r1, [pc, #64]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006de0:	4313      	orrs	r3, r2
 8006de2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006de4:	f000 f824 	bl	8006e30 <HAL_RCC_GetSysClockFreq>
 8006de8:	4602      	mov	r2, r0
 8006dea:	4b0d      	ldr	r3, [pc, #52]	; (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	091b      	lsrs	r3, r3, #4
 8006df0:	f003 030f 	and.w	r3, r3, #15
 8006df4:	490b      	ldr	r1, [pc, #44]	; (8006e24 <HAL_RCC_ClockConfig+0x1f4>)
 8006df6:	5ccb      	ldrb	r3, [r1, r3]
 8006df8:	f003 031f 	and.w	r3, r3, #31
 8006dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8006e00:	4a09      	ldr	r2, [pc, #36]	; (8006e28 <HAL_RCC_ClockConfig+0x1f8>)
 8006e02:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006e04:	4b09      	ldr	r3, [pc, #36]	; (8006e2c <HAL_RCC_ClockConfig+0x1fc>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7fc fd73 	bl	80038f4 <HAL_InitTick>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	72fb      	strb	r3, [r7, #11]

  return status;
 8006e12:	7afb      	ldrb	r3, [r7, #11]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	40022000 	.word	0x40022000
 8006e20:	40021000 	.word	0x40021000
 8006e24:	08010a08 	.word	0x08010a08
 8006e28:	20000020 	.word	0x20000020
 8006e2c:	2000002c 	.word	0x2000002c

08006e30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b089      	sub	sp, #36	; 0x24
 8006e34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006e36:	2300      	movs	r3, #0
 8006e38:	61fb      	str	r3, [r7, #28]
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e3e:	4b3e      	ldr	r3, [pc, #248]	; (8006f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f003 030c 	and.w	r3, r3, #12
 8006e46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e48:	4b3b      	ldr	r3, [pc, #236]	; (8006f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	f003 0303 	and.w	r3, r3, #3
 8006e50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d005      	beq.n	8006e64 <HAL_RCC_GetSysClockFreq+0x34>
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	2b0c      	cmp	r3, #12
 8006e5c:	d121      	bne.n	8006ea2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d11e      	bne.n	8006ea2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006e64:	4b34      	ldr	r3, [pc, #208]	; (8006f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0308 	and.w	r3, r3, #8
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d107      	bne.n	8006e80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006e70:	4b31      	ldr	r3, [pc, #196]	; (8006f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e76:	0a1b      	lsrs	r3, r3, #8
 8006e78:	f003 030f 	and.w	r3, r3, #15
 8006e7c:	61fb      	str	r3, [r7, #28]
 8006e7e:	e005      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006e80:	4b2d      	ldr	r3, [pc, #180]	; (8006f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	091b      	lsrs	r3, r3, #4
 8006e86:	f003 030f 	and.w	r3, r3, #15
 8006e8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006e8c:	4a2b      	ldr	r2, [pc, #172]	; (8006f3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10d      	bne.n	8006eb8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ea0:	e00a      	b.n	8006eb8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	2b04      	cmp	r3, #4
 8006ea6:	d102      	bne.n	8006eae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006ea8:	4b25      	ldr	r3, [pc, #148]	; (8006f40 <HAL_RCC_GetSysClockFreq+0x110>)
 8006eaa:	61bb      	str	r3, [r7, #24]
 8006eac:	e004      	b.n	8006eb8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	2b08      	cmp	r3, #8
 8006eb2:	d101      	bne.n	8006eb8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006eb4:	4b23      	ldr	r3, [pc, #140]	; (8006f44 <HAL_RCC_GetSysClockFreq+0x114>)
 8006eb6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	2b0c      	cmp	r3, #12
 8006ebc:	d134      	bne.n	8006f28 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ebe:	4b1e      	ldr	r3, [pc, #120]	; (8006f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	f003 0303 	and.w	r3, r3, #3
 8006ec6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d003      	beq.n	8006ed6 <HAL_RCC_GetSysClockFreq+0xa6>
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	2b03      	cmp	r3, #3
 8006ed2:	d003      	beq.n	8006edc <HAL_RCC_GetSysClockFreq+0xac>
 8006ed4:	e005      	b.n	8006ee2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006ed6:	4b1a      	ldr	r3, [pc, #104]	; (8006f40 <HAL_RCC_GetSysClockFreq+0x110>)
 8006ed8:	617b      	str	r3, [r7, #20]
      break;
 8006eda:	e005      	b.n	8006ee8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006edc:	4b19      	ldr	r3, [pc, #100]	; (8006f44 <HAL_RCC_GetSysClockFreq+0x114>)
 8006ede:	617b      	str	r3, [r7, #20]
      break;
 8006ee0:	e002      	b.n	8006ee8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	617b      	str	r3, [r7, #20]
      break;
 8006ee6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ee8:	4b13      	ldr	r3, [pc, #76]	; (8006f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	091b      	lsrs	r3, r3, #4
 8006eee:	f003 0307 	and.w	r3, r3, #7
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006ef6:	4b10      	ldr	r3, [pc, #64]	; (8006f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	0a1b      	lsrs	r3, r3, #8
 8006efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	fb03 f202 	mul.w	r2, r3, r2
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f0c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f0e:	4b0a      	ldr	r3, [pc, #40]	; (8006f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	0e5b      	lsrs	r3, r3, #25
 8006f14:	f003 0303 	and.w	r3, r3, #3
 8006f18:	3301      	adds	r3, #1
 8006f1a:	005b      	lsls	r3, r3, #1
 8006f1c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006f1e:	697a      	ldr	r2, [r7, #20]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f26:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006f28:	69bb      	ldr	r3, [r7, #24]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3724      	adds	r7, #36	; 0x24
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	40021000 	.word	0x40021000
 8006f3c:	08010a20 	.word	0x08010a20
 8006f40:	00f42400 	.word	0x00f42400
 8006f44:	007a1200 	.word	0x007a1200

08006f48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f4c:	4b03      	ldr	r3, [pc, #12]	; (8006f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	20000020 	.word	0x20000020

08006f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006f64:	f7ff fff0 	bl	8006f48 <HAL_RCC_GetHCLKFreq>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	4b06      	ldr	r3, [pc, #24]	; (8006f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	0a1b      	lsrs	r3, r3, #8
 8006f70:	f003 0307 	and.w	r3, r3, #7
 8006f74:	4904      	ldr	r1, [pc, #16]	; (8006f88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f76:	5ccb      	ldrb	r3, [r1, r3]
 8006f78:	f003 031f 	and.w	r3, r3, #31
 8006f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	40021000 	.word	0x40021000
 8006f88:	08010a18 	.word	0x08010a18

08006f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006f90:	f7ff ffda 	bl	8006f48 <HAL_RCC_GetHCLKFreq>
 8006f94:	4602      	mov	r2, r0
 8006f96:	4b06      	ldr	r3, [pc, #24]	; (8006fb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	0adb      	lsrs	r3, r3, #11
 8006f9c:	f003 0307 	and.w	r3, r3, #7
 8006fa0:	4904      	ldr	r1, [pc, #16]	; (8006fb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006fa2:	5ccb      	ldrb	r3, [r1, r3]
 8006fa4:	f003 031f 	and.w	r3, r3, #31
 8006fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	40021000 	.word	0x40021000
 8006fb4:	08010a18 	.word	0x08010a18

08006fb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006fc4:	4b2a      	ldr	r3, [pc, #168]	; (8007070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d003      	beq.n	8006fd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006fd0:	f7ff f9ee 	bl	80063b0 <HAL_PWREx_GetVoltageRange>
 8006fd4:	6178      	str	r0, [r7, #20]
 8006fd6:	e014      	b.n	8007002 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006fd8:	4b25      	ldr	r3, [pc, #148]	; (8007070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fdc:	4a24      	ldr	r2, [pc, #144]	; (8007070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fe2:	6593      	str	r3, [r2, #88]	; 0x58
 8006fe4:	4b22      	ldr	r3, [pc, #136]	; (8007070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fec:	60fb      	str	r3, [r7, #12]
 8006fee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006ff0:	f7ff f9de 	bl	80063b0 <HAL_PWREx_GetVoltageRange>
 8006ff4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006ff6:	4b1e      	ldr	r3, [pc, #120]	; (8007070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ffa:	4a1d      	ldr	r2, [pc, #116]	; (8007070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ffc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007000:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007008:	d10b      	bne.n	8007022 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2b80      	cmp	r3, #128	; 0x80
 800700e:	d919      	bls.n	8007044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2ba0      	cmp	r3, #160	; 0xa0
 8007014:	d902      	bls.n	800701c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007016:	2302      	movs	r3, #2
 8007018:	613b      	str	r3, [r7, #16]
 800701a:	e013      	b.n	8007044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800701c:	2301      	movs	r3, #1
 800701e:	613b      	str	r3, [r7, #16]
 8007020:	e010      	b.n	8007044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b80      	cmp	r3, #128	; 0x80
 8007026:	d902      	bls.n	800702e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007028:	2303      	movs	r3, #3
 800702a:	613b      	str	r3, [r7, #16]
 800702c:	e00a      	b.n	8007044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2b80      	cmp	r3, #128	; 0x80
 8007032:	d102      	bne.n	800703a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007034:	2302      	movs	r3, #2
 8007036:	613b      	str	r3, [r7, #16]
 8007038:	e004      	b.n	8007044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2b70      	cmp	r3, #112	; 0x70
 800703e:	d101      	bne.n	8007044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007040:	2301      	movs	r3, #1
 8007042:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007044:	4b0b      	ldr	r3, [pc, #44]	; (8007074 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f023 0207 	bic.w	r2, r3, #7
 800704c:	4909      	ldr	r1, [pc, #36]	; (8007074 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	4313      	orrs	r3, r2
 8007052:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007054:	4b07      	ldr	r3, [pc, #28]	; (8007074 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0307 	and.w	r3, r3, #7
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	429a      	cmp	r2, r3
 8007060:	d001      	beq.n	8007066 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e000      	b.n	8007068 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	40021000 	.word	0x40021000
 8007074:	40022000 	.word	0x40022000

08007078 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b086      	sub	sp, #24
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007080:	2300      	movs	r3, #0
 8007082:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007084:	2300      	movs	r3, #0
 8007086:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007090:	2b00      	cmp	r3, #0
 8007092:	d041      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007098:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800709c:	d02a      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800709e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80070a2:	d824      	bhi.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80070a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070a8:	d008      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80070aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070ae:	d81e      	bhi.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00a      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80070b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070b8:	d010      	beq.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80070ba:	e018      	b.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80070bc:	4b86      	ldr	r3, [pc, #536]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	4a85      	ldr	r2, [pc, #532]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070c6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80070c8:	e015      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	3304      	adds	r3, #4
 80070ce:	2100      	movs	r1, #0
 80070d0:	4618      	mov	r0, r3
 80070d2:	f000 fabb 	bl	800764c <RCCEx_PLLSAI1_Config>
 80070d6:	4603      	mov	r3, r0
 80070d8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80070da:	e00c      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	3320      	adds	r3, #32
 80070e0:	2100      	movs	r1, #0
 80070e2:	4618      	mov	r0, r3
 80070e4:	f000 fba6 	bl	8007834 <RCCEx_PLLSAI2_Config>
 80070e8:	4603      	mov	r3, r0
 80070ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80070ec:	e003      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	74fb      	strb	r3, [r7, #19]
      break;
 80070f2:	e000      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80070f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070f6:	7cfb      	ldrb	r3, [r7, #19]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10b      	bne.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80070fc:	4b76      	ldr	r3, [pc, #472]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007102:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800710a:	4973      	ldr	r1, [pc, #460]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800710c:	4313      	orrs	r3, r2
 800710e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007112:	e001      	b.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007114:	7cfb      	ldrb	r3, [r7, #19]
 8007116:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d041      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007128:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800712c:	d02a      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800712e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007132:	d824      	bhi.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007134:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007138:	d008      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800713a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800713e:	d81e      	bhi.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00a      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007148:	d010      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800714a:	e018      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800714c:	4b62      	ldr	r3, [pc, #392]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	4a61      	ldr	r2, [pc, #388]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007156:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007158:	e015      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	3304      	adds	r3, #4
 800715e:	2100      	movs	r1, #0
 8007160:	4618      	mov	r0, r3
 8007162:	f000 fa73 	bl	800764c <RCCEx_PLLSAI1_Config>
 8007166:	4603      	mov	r3, r0
 8007168:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800716a:	e00c      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	3320      	adds	r3, #32
 8007170:	2100      	movs	r1, #0
 8007172:	4618      	mov	r0, r3
 8007174:	f000 fb5e 	bl	8007834 <RCCEx_PLLSAI2_Config>
 8007178:	4603      	mov	r3, r0
 800717a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800717c:	e003      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	74fb      	strb	r3, [r7, #19]
      break;
 8007182:	e000      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007184:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007186:	7cfb      	ldrb	r3, [r7, #19]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d10b      	bne.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800718c:	4b52      	ldr	r3, [pc, #328]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800718e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007192:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800719a:	494f      	ldr	r1, [pc, #316]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800719c:	4313      	orrs	r3, r2
 800719e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80071a2:	e001      	b.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071a4:	7cfb      	ldrb	r3, [r7, #19]
 80071a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 80a0 	beq.w	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071b6:	2300      	movs	r3, #0
 80071b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80071ba:	4b47      	ldr	r3, [pc, #284]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d101      	bne.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x152>
 80071c6:	2301      	movs	r3, #1
 80071c8:	e000      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80071ca:	2300      	movs	r3, #0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00d      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071d0:	4b41      	ldr	r3, [pc, #260]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071d4:	4a40      	ldr	r2, [pc, #256]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071da:	6593      	str	r3, [r2, #88]	; 0x58
 80071dc:	4b3e      	ldr	r3, [pc, #248]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071e4:	60bb      	str	r3, [r7, #8]
 80071e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071e8:	2301      	movs	r3, #1
 80071ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071ec:	4b3b      	ldr	r3, [pc, #236]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a3a      	ldr	r2, [pc, #232]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80071f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071f8:	f7fc fbcc 	bl	8003994 <HAL_GetTick>
 80071fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80071fe:	e009      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007200:	f7fc fbc8 	bl	8003994 <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	2b02      	cmp	r3, #2
 800720c:	d902      	bls.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	74fb      	strb	r3, [r7, #19]
        break;
 8007212:	e005      	b.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007214:	4b31      	ldr	r3, [pc, #196]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800721c:	2b00      	cmp	r3, #0
 800721e:	d0ef      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007220:	7cfb      	ldrb	r3, [r7, #19]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d15c      	bne.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007226:	4b2c      	ldr	r3, [pc, #176]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800722c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007230:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d01f      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	429a      	cmp	r2, r3
 8007242:	d019      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007244:	4b24      	ldr	r3, [pc, #144]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800724a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800724e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007250:	4b21      	ldr	r3, [pc, #132]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007256:	4a20      	ldr	r2, [pc, #128]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800725c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007260:	4b1d      	ldr	r3, [pc, #116]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007266:	4a1c      	ldr	r2, [pc, #112]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007268:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800726c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007270:	4a19      	ldr	r2, [pc, #100]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	2b00      	cmp	r3, #0
 8007280:	d016      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007282:	f7fc fb87 	bl	8003994 <HAL_GetTick>
 8007286:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007288:	e00b      	b.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800728a:	f7fc fb83 	bl	8003994 <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	f241 3288 	movw	r2, #5000	; 0x1388
 8007298:	4293      	cmp	r3, r2
 800729a:	d902      	bls.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	74fb      	strb	r3, [r7, #19]
            break;
 80072a0:	e006      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072a2:	4b0d      	ldr	r3, [pc, #52]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072a8:	f003 0302 	and.w	r3, r3, #2
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d0ec      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80072b0:	7cfb      	ldrb	r3, [r7, #19]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10c      	bne.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072b6:	4b08      	ldr	r3, [pc, #32]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072c6:	4904      	ldr	r1, [pc, #16]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80072ce:	e009      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80072d0:	7cfb      	ldrb	r3, [r7, #19]
 80072d2:	74bb      	strb	r3, [r7, #18]
 80072d4:	e006      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80072d6:	bf00      	nop
 80072d8:	40021000 	.word	0x40021000
 80072dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072e0:	7cfb      	ldrb	r3, [r7, #19]
 80072e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072e4:	7c7b      	ldrb	r3, [r7, #17]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d105      	bne.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072ea:	4b9e      	ldr	r3, [pc, #632]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ee:	4a9d      	ldr	r2, [pc, #628]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00a      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007302:	4b98      	ldr	r3, [pc, #608]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007308:	f023 0203 	bic.w	r2, r3, #3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007310:	4994      	ldr	r1, [pc, #592]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007312:	4313      	orrs	r3, r2
 8007314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 0302 	and.w	r3, r3, #2
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00a      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007324:	4b8f      	ldr	r3, [pc, #572]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800732a:	f023 020c 	bic.w	r2, r3, #12
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007332:	498c      	ldr	r1, [pc, #560]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007334:	4313      	orrs	r3, r2
 8007336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 0304 	and.w	r3, r3, #4
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00a      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007346:	4b87      	ldr	r3, [pc, #540]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800734c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007354:	4983      	ldr	r1, [pc, #524]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007356:	4313      	orrs	r3, r2
 8007358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0308 	and.w	r3, r3, #8
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00a      	beq.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007368:	4b7e      	ldr	r3, [pc, #504]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800736a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800736e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007376:	497b      	ldr	r1, [pc, #492]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007378:	4313      	orrs	r3, r2
 800737a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0310 	and.w	r3, r3, #16
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00a      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800738a:	4b76      	ldr	r3, [pc, #472]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800738c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007390:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007398:	4972      	ldr	r1, [pc, #456]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800739a:	4313      	orrs	r3, r2
 800739c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0320 	and.w	r3, r3, #32
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00a      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80073ac:	4b6d      	ldr	r3, [pc, #436]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073ba:	496a      	ldr	r1, [pc, #424]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073bc:	4313      	orrs	r3, r2
 80073be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00a      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80073ce:	4b65      	ldr	r3, [pc, #404]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073dc:	4961      	ldr	r1, [pc, #388]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073de:	4313      	orrs	r3, r2
 80073e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00a      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80073f0:	4b5c      	ldr	r3, [pc, #368]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073fe:	4959      	ldr	r1, [pc, #356]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007400:	4313      	orrs	r3, r2
 8007402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00a      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007412:	4b54      	ldr	r3, [pc, #336]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007418:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007420:	4950      	ldr	r1, [pc, #320]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007422:	4313      	orrs	r3, r2
 8007424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00a      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007434:	4b4b      	ldr	r3, [pc, #300]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800743a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007442:	4948      	ldr	r1, [pc, #288]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007444:	4313      	orrs	r3, r2
 8007446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00a      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007456:	4b43      	ldr	r3, [pc, #268]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800745c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007464:	493f      	ldr	r1, [pc, #252]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007466:	4313      	orrs	r3, r2
 8007468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007474:	2b00      	cmp	r3, #0
 8007476:	d028      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007478:	4b3a      	ldr	r3, [pc, #232]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800747a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800747e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007486:	4937      	ldr	r1, [pc, #220]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007488:	4313      	orrs	r3, r2
 800748a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007492:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007496:	d106      	bne.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007498:	4b32      	ldr	r3, [pc, #200]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	4a31      	ldr	r2, [pc, #196]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800749e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074a2:	60d3      	str	r3, [r2, #12]
 80074a4:	e011      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80074ae:	d10c      	bne.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	3304      	adds	r3, #4
 80074b4:	2101      	movs	r1, #1
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 f8c8 	bl	800764c <RCCEx_PLLSAI1_Config>
 80074bc:	4603      	mov	r3, r0
 80074be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80074c0:	7cfb      	ldrb	r3, [r7, #19]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80074c6:	7cfb      	ldrb	r3, [r7, #19]
 80074c8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d028      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80074d6:	4b23      	ldr	r3, [pc, #140]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074e4:	491f      	ldr	r1, [pc, #124]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074e6:	4313      	orrs	r3, r2
 80074e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074f4:	d106      	bne.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074f6:	4b1b      	ldr	r3, [pc, #108]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	4a1a      	ldr	r2, [pc, #104]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007500:	60d3      	str	r3, [r2, #12]
 8007502:	e011      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007508:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800750c:	d10c      	bne.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	3304      	adds	r3, #4
 8007512:	2101      	movs	r1, #1
 8007514:	4618      	mov	r0, r3
 8007516:	f000 f899 	bl	800764c <RCCEx_PLLSAI1_Config>
 800751a:	4603      	mov	r3, r0
 800751c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800751e:	7cfb      	ldrb	r3, [r7, #19]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d001      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007524:	7cfb      	ldrb	r3, [r7, #19]
 8007526:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d02b      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007534:	4b0b      	ldr	r3, [pc, #44]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800753a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007542:	4908      	ldr	r1, [pc, #32]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007544:	4313      	orrs	r3, r2
 8007546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800754e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007552:	d109      	bne.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007554:	4b03      	ldr	r3, [pc, #12]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	4a02      	ldr	r2, [pc, #8]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800755a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800755e:	60d3      	str	r3, [r2, #12]
 8007560:	e014      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007562:	bf00      	nop
 8007564:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800756c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007570:	d10c      	bne.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	3304      	adds	r3, #4
 8007576:	2101      	movs	r1, #1
 8007578:	4618      	mov	r0, r3
 800757a:	f000 f867 	bl	800764c <RCCEx_PLLSAI1_Config>
 800757e:	4603      	mov	r3, r0
 8007580:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007582:	7cfb      	ldrb	r3, [r7, #19]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d001      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007588:	7cfb      	ldrb	r3, [r7, #19]
 800758a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007594:	2b00      	cmp	r3, #0
 8007596:	d02f      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007598:	4b2b      	ldr	r3, [pc, #172]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800759a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800759e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075a6:	4928      	ldr	r1, [pc, #160]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80075a8:	4313      	orrs	r3, r2
 80075aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075b6:	d10d      	bne.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	3304      	adds	r3, #4
 80075bc:	2102      	movs	r1, #2
 80075be:	4618      	mov	r0, r3
 80075c0:	f000 f844 	bl	800764c <RCCEx_PLLSAI1_Config>
 80075c4:	4603      	mov	r3, r0
 80075c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80075c8:	7cfb      	ldrb	r3, [r7, #19]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d014      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80075ce:	7cfb      	ldrb	r3, [r7, #19]
 80075d0:	74bb      	strb	r3, [r7, #18]
 80075d2:	e011      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075dc:	d10c      	bne.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	3320      	adds	r3, #32
 80075e2:	2102      	movs	r1, #2
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 f925 	bl	8007834 <RCCEx_PLLSAI2_Config>
 80075ea:	4603      	mov	r3, r0
 80075ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80075ee:	7cfb      	ldrb	r3, [r7, #19]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d001      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80075f4:	7cfb      	ldrb	r3, [r7, #19]
 80075f6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00a      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007604:	4b10      	ldr	r3, [pc, #64]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800760a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007612:	490d      	ldr	r1, [pc, #52]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007614:	4313      	orrs	r3, r2
 8007616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00b      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007626:	4b08      	ldr	r3, [pc, #32]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800762c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007636:	4904      	ldr	r1, [pc, #16]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007638:	4313      	orrs	r3, r2
 800763a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800763e:	7cbb      	ldrb	r3, [r7, #18]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	40021000 	.word	0x40021000

0800764c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800765a:	4b75      	ldr	r3, [pc, #468]	; (8007830 <RCCEx_PLLSAI1_Config+0x1e4>)
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	f003 0303 	and.w	r3, r3, #3
 8007662:	2b00      	cmp	r3, #0
 8007664:	d018      	beq.n	8007698 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007666:	4b72      	ldr	r3, [pc, #456]	; (8007830 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	f003 0203 	and.w	r2, r3, #3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	429a      	cmp	r2, r3
 8007674:	d10d      	bne.n	8007692 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
       ||
 800767a:	2b00      	cmp	r3, #0
 800767c:	d009      	beq.n	8007692 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800767e:	4b6c      	ldr	r3, [pc, #432]	; (8007830 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	091b      	lsrs	r3, r3, #4
 8007684:	f003 0307 	and.w	r3, r3, #7
 8007688:	1c5a      	adds	r2, r3, #1
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	685b      	ldr	r3, [r3, #4]
       ||
 800768e:	429a      	cmp	r2, r3
 8007690:	d047      	beq.n	8007722 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	73fb      	strb	r3, [r7, #15]
 8007696:	e044      	b.n	8007722 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2b03      	cmp	r3, #3
 800769e:	d018      	beq.n	80076d2 <RCCEx_PLLSAI1_Config+0x86>
 80076a0:	2b03      	cmp	r3, #3
 80076a2:	d825      	bhi.n	80076f0 <RCCEx_PLLSAI1_Config+0xa4>
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d002      	beq.n	80076ae <RCCEx_PLLSAI1_Config+0x62>
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d009      	beq.n	80076c0 <RCCEx_PLLSAI1_Config+0x74>
 80076ac:	e020      	b.n	80076f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80076ae:	4b60      	ldr	r3, [pc, #384]	; (8007830 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 0302 	and.w	r3, r3, #2
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d11d      	bne.n	80076f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076be:	e01a      	b.n	80076f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80076c0:	4b5b      	ldr	r3, [pc, #364]	; (8007830 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d116      	bne.n	80076fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076d0:	e013      	b.n	80076fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80076d2:	4b57      	ldr	r3, [pc, #348]	; (8007830 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10f      	bne.n	80076fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80076de:	4b54      	ldr	r3, [pc, #336]	; (8007830 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d109      	bne.n	80076fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80076ee:	e006      	b.n	80076fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	73fb      	strb	r3, [r7, #15]
      break;
 80076f4:	e004      	b.n	8007700 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80076f6:	bf00      	nop
 80076f8:	e002      	b.n	8007700 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80076fa:	bf00      	nop
 80076fc:	e000      	b.n	8007700 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80076fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8007700:	7bfb      	ldrb	r3, [r7, #15]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10d      	bne.n	8007722 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007706:	4b4a      	ldr	r3, [pc, #296]	; (8007830 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6819      	ldr	r1, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	3b01      	subs	r3, #1
 8007718:	011b      	lsls	r3, r3, #4
 800771a:	430b      	orrs	r3, r1
 800771c:	4944      	ldr	r1, [pc, #272]	; (8007830 <RCCEx_PLLSAI1_Config+0x1e4>)
 800771e:	4313      	orrs	r3, r2
 8007720:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007722:	7bfb      	ldrb	r3, [r7, #15]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d17d      	bne.n	8007824 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007728:	4b41      	ldr	r3, [pc, #260]	; (8007830 <RCCEx_PLLSAI1_Config+0x1e4>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a40      	ldr	r2, [pc, #256]	; (8007830 <RCCEx_PLLSAI1_Config+0x1e4>)
 800772e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007732:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007734:	f7fc f92e 	bl	8003994 <HAL_GetTick>
 8007738:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800773a:	e009      	b.n	8007750 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800773c:	f7fc f92a 	bl	8003994 <HAL_GetTick>
 8007740:	4602      	mov	r2, r0
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	2b02      	cmp	r3, #2
 8007748:	d902      	bls.n	8007750 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	73fb      	strb	r3, [r7, #15]
        break;
 800774e:	e005      	b.n	800775c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007750:	4b37      	ldr	r3, [pc, #220]	; (8007830 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1ef      	bne.n	800773c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800775c:	7bfb      	ldrb	r3, [r7, #15]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d160      	bne.n	8007824 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d111      	bne.n	800778c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007768:	4b31      	ldr	r3, [pc, #196]	; (8007830 <RCCEx_PLLSAI1_Config+0x1e4>)
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	6892      	ldr	r2, [r2, #8]
 8007778:	0211      	lsls	r1, r2, #8
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	68d2      	ldr	r2, [r2, #12]
 800777e:	0912      	lsrs	r2, r2, #4
 8007780:	0452      	lsls	r2, r2, #17
 8007782:	430a      	orrs	r2, r1
 8007784:	492a      	ldr	r1, [pc, #168]	; (8007830 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007786:	4313      	orrs	r3, r2
 8007788:	610b      	str	r3, [r1, #16]
 800778a:	e027      	b.n	80077dc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	2b01      	cmp	r3, #1
 8007790:	d112      	bne.n	80077b8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007792:	4b27      	ldr	r3, [pc, #156]	; (8007830 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800779a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	6892      	ldr	r2, [r2, #8]
 80077a2:	0211      	lsls	r1, r2, #8
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	6912      	ldr	r2, [r2, #16]
 80077a8:	0852      	lsrs	r2, r2, #1
 80077aa:	3a01      	subs	r2, #1
 80077ac:	0552      	lsls	r2, r2, #21
 80077ae:	430a      	orrs	r2, r1
 80077b0:	491f      	ldr	r1, [pc, #124]	; (8007830 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077b2:	4313      	orrs	r3, r2
 80077b4:	610b      	str	r3, [r1, #16]
 80077b6:	e011      	b.n	80077dc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80077b8:	4b1d      	ldr	r3, [pc, #116]	; (8007830 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80077c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	6892      	ldr	r2, [r2, #8]
 80077c8:	0211      	lsls	r1, r2, #8
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	6952      	ldr	r2, [r2, #20]
 80077ce:	0852      	lsrs	r2, r2, #1
 80077d0:	3a01      	subs	r2, #1
 80077d2:	0652      	lsls	r2, r2, #25
 80077d4:	430a      	orrs	r2, r1
 80077d6:	4916      	ldr	r1, [pc, #88]	; (8007830 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80077dc:	4b14      	ldr	r3, [pc, #80]	; (8007830 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a13      	ldr	r2, [pc, #76]	; (8007830 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80077e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077e8:	f7fc f8d4 	bl	8003994 <HAL_GetTick>
 80077ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80077ee:	e009      	b.n	8007804 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80077f0:	f7fc f8d0 	bl	8003994 <HAL_GetTick>
 80077f4:	4602      	mov	r2, r0
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	d902      	bls.n	8007804 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	73fb      	strb	r3, [r7, #15]
          break;
 8007802:	e005      	b.n	8007810 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007804:	4b0a      	ldr	r3, [pc, #40]	; (8007830 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800780c:	2b00      	cmp	r3, #0
 800780e:	d0ef      	beq.n	80077f0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007810:	7bfb      	ldrb	r3, [r7, #15]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d106      	bne.n	8007824 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007816:	4b06      	ldr	r3, [pc, #24]	; (8007830 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007818:	691a      	ldr	r2, [r3, #16]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	4904      	ldr	r1, [pc, #16]	; (8007830 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007820:	4313      	orrs	r3, r2
 8007822:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007824:	7bfb      	ldrb	r3, [r7, #15]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	40021000 	.word	0x40021000

08007834 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800783e:	2300      	movs	r3, #0
 8007840:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007842:	4b6a      	ldr	r3, [pc, #424]	; (80079ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	f003 0303 	and.w	r3, r3, #3
 800784a:	2b00      	cmp	r3, #0
 800784c:	d018      	beq.n	8007880 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800784e:	4b67      	ldr	r3, [pc, #412]	; (80079ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	f003 0203 	and.w	r2, r3, #3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	429a      	cmp	r2, r3
 800785c:	d10d      	bne.n	800787a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
       ||
 8007862:	2b00      	cmp	r3, #0
 8007864:	d009      	beq.n	800787a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007866:	4b61      	ldr	r3, [pc, #388]	; (80079ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	091b      	lsrs	r3, r3, #4
 800786c:	f003 0307 	and.w	r3, r3, #7
 8007870:	1c5a      	adds	r2, r3, #1
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	685b      	ldr	r3, [r3, #4]
       ||
 8007876:	429a      	cmp	r2, r3
 8007878:	d047      	beq.n	800790a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	73fb      	strb	r3, [r7, #15]
 800787e:	e044      	b.n	800790a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2b03      	cmp	r3, #3
 8007886:	d018      	beq.n	80078ba <RCCEx_PLLSAI2_Config+0x86>
 8007888:	2b03      	cmp	r3, #3
 800788a:	d825      	bhi.n	80078d8 <RCCEx_PLLSAI2_Config+0xa4>
 800788c:	2b01      	cmp	r3, #1
 800788e:	d002      	beq.n	8007896 <RCCEx_PLLSAI2_Config+0x62>
 8007890:	2b02      	cmp	r3, #2
 8007892:	d009      	beq.n	80078a8 <RCCEx_PLLSAI2_Config+0x74>
 8007894:	e020      	b.n	80078d8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007896:	4b55      	ldr	r3, [pc, #340]	; (80079ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0302 	and.w	r3, r3, #2
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d11d      	bne.n	80078de <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078a6:	e01a      	b.n	80078de <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80078a8:	4b50      	ldr	r3, [pc, #320]	; (80079ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d116      	bne.n	80078e2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078b8:	e013      	b.n	80078e2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80078ba:	4b4c      	ldr	r3, [pc, #304]	; (80079ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d10f      	bne.n	80078e6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80078c6:	4b49      	ldr	r3, [pc, #292]	; (80079ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d109      	bne.n	80078e6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80078d6:	e006      	b.n	80078e6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	73fb      	strb	r3, [r7, #15]
      break;
 80078dc:	e004      	b.n	80078e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80078de:	bf00      	nop
 80078e0:	e002      	b.n	80078e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80078e2:	bf00      	nop
 80078e4:	e000      	b.n	80078e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80078e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d10d      	bne.n	800790a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80078ee:	4b3f      	ldr	r3, [pc, #252]	; (80079ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6819      	ldr	r1, [r3, #0]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	3b01      	subs	r3, #1
 8007900:	011b      	lsls	r3, r3, #4
 8007902:	430b      	orrs	r3, r1
 8007904:	4939      	ldr	r1, [pc, #228]	; (80079ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8007906:	4313      	orrs	r3, r2
 8007908:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800790a:	7bfb      	ldrb	r3, [r7, #15]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d167      	bne.n	80079e0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007910:	4b36      	ldr	r3, [pc, #216]	; (80079ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a35      	ldr	r2, [pc, #212]	; (80079ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8007916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800791a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800791c:	f7fc f83a 	bl	8003994 <HAL_GetTick>
 8007920:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007922:	e009      	b.n	8007938 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007924:	f7fc f836 	bl	8003994 <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	2b02      	cmp	r3, #2
 8007930:	d902      	bls.n	8007938 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	73fb      	strb	r3, [r7, #15]
        break;
 8007936:	e005      	b.n	8007944 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007938:	4b2c      	ldr	r3, [pc, #176]	; (80079ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1ef      	bne.n	8007924 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007944:	7bfb      	ldrb	r3, [r7, #15]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d14a      	bne.n	80079e0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d111      	bne.n	8007974 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007950:	4b26      	ldr	r3, [pc, #152]	; (80079ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8007952:	695b      	ldr	r3, [r3, #20]
 8007954:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	6892      	ldr	r2, [r2, #8]
 8007960:	0211      	lsls	r1, r2, #8
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	68d2      	ldr	r2, [r2, #12]
 8007966:	0912      	lsrs	r2, r2, #4
 8007968:	0452      	lsls	r2, r2, #17
 800796a:	430a      	orrs	r2, r1
 800796c:	491f      	ldr	r1, [pc, #124]	; (80079ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800796e:	4313      	orrs	r3, r2
 8007970:	614b      	str	r3, [r1, #20]
 8007972:	e011      	b.n	8007998 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007974:	4b1d      	ldr	r3, [pc, #116]	; (80079ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8007976:	695b      	ldr	r3, [r3, #20]
 8007978:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800797c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	6892      	ldr	r2, [r2, #8]
 8007984:	0211      	lsls	r1, r2, #8
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	6912      	ldr	r2, [r2, #16]
 800798a:	0852      	lsrs	r2, r2, #1
 800798c:	3a01      	subs	r2, #1
 800798e:	0652      	lsls	r2, r2, #25
 8007990:	430a      	orrs	r2, r1
 8007992:	4916      	ldr	r1, [pc, #88]	; (80079ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8007994:	4313      	orrs	r3, r2
 8007996:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007998:	4b14      	ldr	r3, [pc, #80]	; (80079ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a13      	ldr	r2, [pc, #76]	; (80079ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800799e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079a4:	f7fb fff6 	bl	8003994 <HAL_GetTick>
 80079a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80079aa:	e009      	b.n	80079c0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80079ac:	f7fb fff2 	bl	8003994 <HAL_GetTick>
 80079b0:	4602      	mov	r2, r0
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d902      	bls.n	80079c0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	73fb      	strb	r3, [r7, #15]
          break;
 80079be:	e005      	b.n	80079cc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80079c0:	4b0a      	ldr	r3, [pc, #40]	; (80079ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d0ef      	beq.n	80079ac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d106      	bne.n	80079e0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80079d2:	4b06      	ldr	r3, [pc, #24]	; (80079ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80079d4:	695a      	ldr	r2, [r3, #20]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	4904      	ldr	r1, [pc, #16]	; (80079ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80079dc:	4313      	orrs	r3, r2
 80079de:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80079e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	40021000 	.word	0x40021000

080079f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d101      	bne.n	8007a02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	e049      	b.n	8007a96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d106      	bne.n	8007a1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f7fb f8d6 	bl	8002bc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2202      	movs	r2, #2
 8007a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	3304      	adds	r3, #4
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	4610      	mov	r0, r2
 8007a30:	f001 f8ba 	bl	8008ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
	...

08007aa0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b085      	sub	sp, #20
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d001      	beq.n	8007ab8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e047      	b.n	8007b48 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2202      	movs	r2, #2
 8007abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a23      	ldr	r2, [pc, #140]	; (8007b54 <HAL_TIM_Base_Start+0xb4>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d01d      	beq.n	8007b06 <HAL_TIM_Base_Start+0x66>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ad2:	d018      	beq.n	8007b06 <HAL_TIM_Base_Start+0x66>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a1f      	ldr	r2, [pc, #124]	; (8007b58 <HAL_TIM_Base_Start+0xb8>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d013      	beq.n	8007b06 <HAL_TIM_Base_Start+0x66>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a1e      	ldr	r2, [pc, #120]	; (8007b5c <HAL_TIM_Base_Start+0xbc>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d00e      	beq.n	8007b06 <HAL_TIM_Base_Start+0x66>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a1c      	ldr	r2, [pc, #112]	; (8007b60 <HAL_TIM_Base_Start+0xc0>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d009      	beq.n	8007b06 <HAL_TIM_Base_Start+0x66>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a1b      	ldr	r2, [pc, #108]	; (8007b64 <HAL_TIM_Base_Start+0xc4>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d004      	beq.n	8007b06 <HAL_TIM_Base_Start+0x66>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a19      	ldr	r2, [pc, #100]	; (8007b68 <HAL_TIM_Base_Start+0xc8>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d115      	bne.n	8007b32 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	689a      	ldr	r2, [r3, #8]
 8007b0c:	4b17      	ldr	r3, [pc, #92]	; (8007b6c <HAL_TIM_Base_Start+0xcc>)
 8007b0e:	4013      	ands	r3, r2
 8007b10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2b06      	cmp	r3, #6
 8007b16:	d015      	beq.n	8007b44 <HAL_TIM_Base_Start+0xa4>
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b1e:	d011      	beq.n	8007b44 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f042 0201 	orr.w	r2, r2, #1
 8007b2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b30:	e008      	b.n	8007b44 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f042 0201 	orr.w	r2, r2, #1
 8007b40:	601a      	str	r2, [r3, #0]
 8007b42:	e000      	b.n	8007b46 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3714      	adds	r7, #20
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr
 8007b54:	40012c00 	.word	0x40012c00
 8007b58:	40000400 	.word	0x40000400
 8007b5c:	40000800 	.word	0x40000800
 8007b60:	40000c00 	.word	0x40000c00
 8007b64:	40013400 	.word	0x40013400
 8007b68:	40014000 	.word	0x40014000
 8007b6c:	00010007 	.word	0x00010007

08007b70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d101      	bne.n	8007b82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e049      	b.n	8007c16 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d106      	bne.n	8007b9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f7fb f874 	bl	8002c84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	3304      	adds	r3, #4
 8007bac:	4619      	mov	r1, r3
 8007bae:	4610      	mov	r0, r2
 8007bb0:	f000 fffa 	bl	8008ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
	...

08007c20 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	6839      	ldr	r1, [r7, #0]
 8007c32:	4618      	mov	r0, r3
 8007c34:	f001 fbc2 	bl	80093bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a3e      	ldr	r2, [pc, #248]	; (8007d38 <HAL_TIM_PWM_Stop+0x118>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d013      	beq.n	8007c6a <HAL_TIM_PWM_Stop+0x4a>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a3d      	ldr	r2, [pc, #244]	; (8007d3c <HAL_TIM_PWM_Stop+0x11c>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d00e      	beq.n	8007c6a <HAL_TIM_PWM_Stop+0x4a>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a3b      	ldr	r2, [pc, #236]	; (8007d40 <HAL_TIM_PWM_Stop+0x120>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d009      	beq.n	8007c6a <HAL_TIM_PWM_Stop+0x4a>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a3a      	ldr	r2, [pc, #232]	; (8007d44 <HAL_TIM_PWM_Stop+0x124>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d004      	beq.n	8007c6a <HAL_TIM_PWM_Stop+0x4a>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a38      	ldr	r2, [pc, #224]	; (8007d48 <HAL_TIM_PWM_Stop+0x128>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d101      	bne.n	8007c6e <HAL_TIM_PWM_Stop+0x4e>
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e000      	b.n	8007c70 <HAL_TIM_PWM_Stop+0x50>
 8007c6e:	2300      	movs	r3, #0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d017      	beq.n	8007ca4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6a1a      	ldr	r2, [r3, #32]
 8007c7a:	f241 1311 	movw	r3, #4369	; 0x1111
 8007c7e:	4013      	ands	r3, r2
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10f      	bne.n	8007ca4 <HAL_TIM_PWM_Stop+0x84>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	6a1a      	ldr	r2, [r3, #32]
 8007c8a:	f240 4344 	movw	r3, #1092	; 0x444
 8007c8e:	4013      	ands	r3, r2
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d107      	bne.n	8007ca4 <HAL_TIM_PWM_Stop+0x84>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ca2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	6a1a      	ldr	r2, [r3, #32]
 8007caa:	f241 1311 	movw	r3, #4369	; 0x1111
 8007cae:	4013      	ands	r3, r2
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10f      	bne.n	8007cd4 <HAL_TIM_PWM_Stop+0xb4>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6a1a      	ldr	r2, [r3, #32]
 8007cba:	f240 4344 	movw	r3, #1092	; 0x444
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d107      	bne.n	8007cd4 <HAL_TIM_PWM_Stop+0xb4>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f022 0201 	bic.w	r2, r2, #1
 8007cd2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d104      	bne.n	8007ce4 <HAL_TIM_PWM_Stop+0xc4>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ce2:	e023      	b.n	8007d2c <HAL_TIM_PWM_Stop+0x10c>
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	2b04      	cmp	r3, #4
 8007ce8:	d104      	bne.n	8007cf4 <HAL_TIM_PWM_Stop+0xd4>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2201      	movs	r2, #1
 8007cee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cf2:	e01b      	b.n	8007d2c <HAL_TIM_PWM_Stop+0x10c>
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	2b08      	cmp	r3, #8
 8007cf8:	d104      	bne.n	8007d04 <HAL_TIM_PWM_Stop+0xe4>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d02:	e013      	b.n	8007d2c <HAL_TIM_PWM_Stop+0x10c>
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	2b0c      	cmp	r3, #12
 8007d08:	d104      	bne.n	8007d14 <HAL_TIM_PWM_Stop+0xf4>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d12:	e00b      	b.n	8007d2c <HAL_TIM_PWM_Stop+0x10c>
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	2b10      	cmp	r3, #16
 8007d18:	d104      	bne.n	8007d24 <HAL_TIM_PWM_Stop+0x104>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d22:	e003      	b.n	8007d2c <HAL_TIM_PWM_Stop+0x10c>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3708      	adds	r7, #8
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	40012c00 	.word	0x40012c00
 8007d3c:	40013400 	.word	0x40013400
 8007d40:	40014000 	.word	0x40014000
 8007d44:	40014400 	.word	0x40014400
 8007d48:	40014800 	.word	0x40014800

08007d4c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d109      	bne.n	8007d74 <HAL_TIM_PWM_Start_IT+0x28>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	bf14      	ite	ne
 8007d6c:	2301      	movne	r3, #1
 8007d6e:	2300      	moveq	r3, #0
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	e03c      	b.n	8007dee <HAL_TIM_PWM_Start_IT+0xa2>
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	2b04      	cmp	r3, #4
 8007d78:	d109      	bne.n	8007d8e <HAL_TIM_PWM_Start_IT+0x42>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	bf14      	ite	ne
 8007d86:	2301      	movne	r3, #1
 8007d88:	2300      	moveq	r3, #0
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	e02f      	b.n	8007dee <HAL_TIM_PWM_Start_IT+0xa2>
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	2b08      	cmp	r3, #8
 8007d92:	d109      	bne.n	8007da8 <HAL_TIM_PWM_Start_IT+0x5c>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	bf14      	ite	ne
 8007da0:	2301      	movne	r3, #1
 8007da2:	2300      	moveq	r3, #0
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	e022      	b.n	8007dee <HAL_TIM_PWM_Start_IT+0xa2>
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	2b0c      	cmp	r3, #12
 8007dac:	d109      	bne.n	8007dc2 <HAL_TIM_PWM_Start_IT+0x76>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	bf14      	ite	ne
 8007dba:	2301      	movne	r3, #1
 8007dbc:	2300      	moveq	r3, #0
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	e015      	b.n	8007dee <HAL_TIM_PWM_Start_IT+0xa2>
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	2b10      	cmp	r3, #16
 8007dc6:	d109      	bne.n	8007ddc <HAL_TIM_PWM_Start_IT+0x90>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	bf14      	ite	ne
 8007dd4:	2301      	movne	r3, #1
 8007dd6:	2300      	moveq	r3, #0
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	e008      	b.n	8007dee <HAL_TIM_PWM_Start_IT+0xa2>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	bf14      	ite	ne
 8007de8:	2301      	movne	r3, #1
 8007dea:	2300      	moveq	r3, #0
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d001      	beq.n	8007df6 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e0e7      	b.n	8007fc6 <HAL_TIM_PWM_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d104      	bne.n	8007e06 <HAL_TIM_PWM_Start_IT+0xba>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2202      	movs	r2, #2
 8007e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e04:	e023      	b.n	8007e4e <HAL_TIM_PWM_Start_IT+0x102>
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	2b04      	cmp	r3, #4
 8007e0a:	d104      	bne.n	8007e16 <HAL_TIM_PWM_Start_IT+0xca>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2202      	movs	r2, #2
 8007e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e14:	e01b      	b.n	8007e4e <HAL_TIM_PWM_Start_IT+0x102>
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	2b08      	cmp	r3, #8
 8007e1a:	d104      	bne.n	8007e26 <HAL_TIM_PWM_Start_IT+0xda>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2202      	movs	r2, #2
 8007e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e24:	e013      	b.n	8007e4e <HAL_TIM_PWM_Start_IT+0x102>
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	2b0c      	cmp	r3, #12
 8007e2a:	d104      	bne.n	8007e36 <HAL_TIM_PWM_Start_IT+0xea>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2202      	movs	r2, #2
 8007e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e34:	e00b      	b.n	8007e4e <HAL_TIM_PWM_Start_IT+0x102>
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	2b10      	cmp	r3, #16
 8007e3a:	d104      	bne.n	8007e46 <HAL_TIM_PWM_Start_IT+0xfa>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2202      	movs	r2, #2
 8007e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e44:	e003      	b.n	8007e4e <HAL_TIM_PWM_Start_IT+0x102>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2202      	movs	r2, #2
 8007e4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	2b0c      	cmp	r3, #12
 8007e52:	d841      	bhi.n	8007ed8 <HAL_TIM_PWM_Start_IT+0x18c>
 8007e54:	a201      	add	r2, pc, #4	; (adr r2, 8007e5c <HAL_TIM_PWM_Start_IT+0x110>)
 8007e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e5a:	bf00      	nop
 8007e5c:	08007e91 	.word	0x08007e91
 8007e60:	08007ed9 	.word	0x08007ed9
 8007e64:	08007ed9 	.word	0x08007ed9
 8007e68:	08007ed9 	.word	0x08007ed9
 8007e6c:	08007ea3 	.word	0x08007ea3
 8007e70:	08007ed9 	.word	0x08007ed9
 8007e74:	08007ed9 	.word	0x08007ed9
 8007e78:	08007ed9 	.word	0x08007ed9
 8007e7c:	08007eb5 	.word	0x08007eb5
 8007e80:	08007ed9 	.word	0x08007ed9
 8007e84:	08007ed9 	.word	0x08007ed9
 8007e88:	08007ed9 	.word	0x08007ed9
 8007e8c:	08007ec7 	.word	0x08007ec7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68da      	ldr	r2, [r3, #12]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f042 0202 	orr.w	r2, r2, #2
 8007e9e:	60da      	str	r2, [r3, #12]
      break;
 8007ea0:	e01d      	b.n	8007ede <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	68da      	ldr	r2, [r3, #12]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f042 0204 	orr.w	r2, r2, #4
 8007eb0:	60da      	str	r2, [r3, #12]
      break;
 8007eb2:	e014      	b.n	8007ede <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	68da      	ldr	r2, [r3, #12]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f042 0208 	orr.w	r2, r2, #8
 8007ec2:	60da      	str	r2, [r3, #12]
      break;
 8007ec4:	e00b      	b.n	8007ede <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68da      	ldr	r2, [r3, #12]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f042 0210 	orr.w	r2, r2, #16
 8007ed4:	60da      	str	r2, [r3, #12]
      break;
 8007ed6:	e002      	b.n	8007ede <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	73fb      	strb	r3, [r7, #15]
      break;
 8007edc:	bf00      	nop
  }

  if (status == HAL_OK)
 8007ede:	7bfb      	ldrb	r3, [r7, #15]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d16f      	bne.n	8007fc4 <HAL_TIM_PWM_Start_IT+0x278>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	4618      	mov	r0, r3
 8007eee:	f001 fa65 	bl	80093bc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a36      	ldr	r2, [pc, #216]	; (8007fd0 <HAL_TIM_PWM_Start_IT+0x284>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d013      	beq.n	8007f24 <HAL_TIM_PWM_Start_IT+0x1d8>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a34      	ldr	r2, [pc, #208]	; (8007fd4 <HAL_TIM_PWM_Start_IT+0x288>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d00e      	beq.n	8007f24 <HAL_TIM_PWM_Start_IT+0x1d8>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a33      	ldr	r2, [pc, #204]	; (8007fd8 <HAL_TIM_PWM_Start_IT+0x28c>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d009      	beq.n	8007f24 <HAL_TIM_PWM_Start_IT+0x1d8>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a31      	ldr	r2, [pc, #196]	; (8007fdc <HAL_TIM_PWM_Start_IT+0x290>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d004      	beq.n	8007f24 <HAL_TIM_PWM_Start_IT+0x1d8>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a30      	ldr	r2, [pc, #192]	; (8007fe0 <HAL_TIM_PWM_Start_IT+0x294>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d101      	bne.n	8007f28 <HAL_TIM_PWM_Start_IT+0x1dc>
 8007f24:	2301      	movs	r3, #1
 8007f26:	e000      	b.n	8007f2a <HAL_TIM_PWM_Start_IT+0x1de>
 8007f28:	2300      	movs	r3, #0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d007      	beq.n	8007f3e <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a23      	ldr	r2, [pc, #140]	; (8007fd0 <HAL_TIM_PWM_Start_IT+0x284>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d01d      	beq.n	8007f84 <HAL_TIM_PWM_Start_IT+0x238>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f50:	d018      	beq.n	8007f84 <HAL_TIM_PWM_Start_IT+0x238>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a23      	ldr	r2, [pc, #140]	; (8007fe4 <HAL_TIM_PWM_Start_IT+0x298>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d013      	beq.n	8007f84 <HAL_TIM_PWM_Start_IT+0x238>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a21      	ldr	r2, [pc, #132]	; (8007fe8 <HAL_TIM_PWM_Start_IT+0x29c>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d00e      	beq.n	8007f84 <HAL_TIM_PWM_Start_IT+0x238>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a20      	ldr	r2, [pc, #128]	; (8007fec <HAL_TIM_PWM_Start_IT+0x2a0>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d009      	beq.n	8007f84 <HAL_TIM_PWM_Start_IT+0x238>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a17      	ldr	r2, [pc, #92]	; (8007fd4 <HAL_TIM_PWM_Start_IT+0x288>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d004      	beq.n	8007f84 <HAL_TIM_PWM_Start_IT+0x238>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a16      	ldr	r2, [pc, #88]	; (8007fd8 <HAL_TIM_PWM_Start_IT+0x28c>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d115      	bne.n	8007fb0 <HAL_TIM_PWM_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	689a      	ldr	r2, [r3, #8]
 8007f8a:	4b19      	ldr	r3, [pc, #100]	; (8007ff0 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	2b06      	cmp	r3, #6
 8007f94:	d015      	beq.n	8007fc2 <HAL_TIM_PWM_Start_IT+0x276>
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f9c:	d011      	beq.n	8007fc2 <HAL_TIM_PWM_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f042 0201 	orr.w	r2, r2, #1
 8007fac:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fae:	e008      	b.n	8007fc2 <HAL_TIM_PWM_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f042 0201 	orr.w	r2, r2, #1
 8007fbe:	601a      	str	r2, [r3, #0]
 8007fc0:	e000      	b.n	8007fc4 <HAL_TIM_PWM_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fc2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	40012c00 	.word	0x40012c00
 8007fd4:	40013400 	.word	0x40013400
 8007fd8:	40014000 	.word	0x40014000
 8007fdc:	40014400 	.word	0x40014400
 8007fe0:	40014800 	.word	0x40014800
 8007fe4:	40000400 	.word	0x40000400
 8007fe8:	40000800 	.word	0x40000800
 8007fec:	40000c00 	.word	0x40000c00
 8007ff0:	00010007 	.word	0x00010007

08007ff4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b086      	sub	sp, #24
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
 8008000:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008002:	2300      	movs	r3, #0
 8008004:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d109      	bne.n	8008020 <HAL_TIM_PWM_Start_DMA+0x2c>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008012:	b2db      	uxtb	r3, r3
 8008014:	2b02      	cmp	r3, #2
 8008016:	bf0c      	ite	eq
 8008018:	2301      	moveq	r3, #1
 800801a:	2300      	movne	r3, #0
 800801c:	b2db      	uxtb	r3, r3
 800801e:	e03c      	b.n	800809a <HAL_TIM_PWM_Start_DMA+0xa6>
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	2b04      	cmp	r3, #4
 8008024:	d109      	bne.n	800803a <HAL_TIM_PWM_Start_DMA+0x46>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800802c:	b2db      	uxtb	r3, r3
 800802e:	2b02      	cmp	r3, #2
 8008030:	bf0c      	ite	eq
 8008032:	2301      	moveq	r3, #1
 8008034:	2300      	movne	r3, #0
 8008036:	b2db      	uxtb	r3, r3
 8008038:	e02f      	b.n	800809a <HAL_TIM_PWM_Start_DMA+0xa6>
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	2b08      	cmp	r3, #8
 800803e:	d109      	bne.n	8008054 <HAL_TIM_PWM_Start_DMA+0x60>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008046:	b2db      	uxtb	r3, r3
 8008048:	2b02      	cmp	r3, #2
 800804a:	bf0c      	ite	eq
 800804c:	2301      	moveq	r3, #1
 800804e:	2300      	movne	r3, #0
 8008050:	b2db      	uxtb	r3, r3
 8008052:	e022      	b.n	800809a <HAL_TIM_PWM_Start_DMA+0xa6>
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	2b0c      	cmp	r3, #12
 8008058:	d109      	bne.n	800806e <HAL_TIM_PWM_Start_DMA+0x7a>
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008060:	b2db      	uxtb	r3, r3
 8008062:	2b02      	cmp	r3, #2
 8008064:	bf0c      	ite	eq
 8008066:	2301      	moveq	r3, #1
 8008068:	2300      	movne	r3, #0
 800806a:	b2db      	uxtb	r3, r3
 800806c:	e015      	b.n	800809a <HAL_TIM_PWM_Start_DMA+0xa6>
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	2b10      	cmp	r3, #16
 8008072:	d109      	bne.n	8008088 <HAL_TIM_PWM_Start_DMA+0x94>
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800807a:	b2db      	uxtb	r3, r3
 800807c:	2b02      	cmp	r3, #2
 800807e:	bf0c      	ite	eq
 8008080:	2301      	moveq	r3, #1
 8008082:	2300      	movne	r3, #0
 8008084:	b2db      	uxtb	r3, r3
 8008086:	e008      	b.n	800809a <HAL_TIM_PWM_Start_DMA+0xa6>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800808e:	b2db      	uxtb	r3, r3
 8008090:	2b02      	cmp	r3, #2
 8008092:	bf0c      	ite	eq
 8008094:	2301      	moveq	r3, #1
 8008096:	2300      	movne	r3, #0
 8008098:	b2db      	uxtb	r3, r3
 800809a:	2b00      	cmp	r3, #0
 800809c:	d001      	beq.n	80080a2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800809e:	2302      	movs	r3, #2
 80080a0:	e1ab      	b.n	80083fa <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d109      	bne.n	80080bc <HAL_TIM_PWM_Start_DMA+0xc8>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	bf0c      	ite	eq
 80080b4:	2301      	moveq	r3, #1
 80080b6:	2300      	movne	r3, #0
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	e03c      	b.n	8008136 <HAL_TIM_PWM_Start_DMA+0x142>
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	2b04      	cmp	r3, #4
 80080c0:	d109      	bne.n	80080d6 <HAL_TIM_PWM_Start_DMA+0xe2>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	bf0c      	ite	eq
 80080ce:	2301      	moveq	r3, #1
 80080d0:	2300      	movne	r3, #0
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	e02f      	b.n	8008136 <HAL_TIM_PWM_Start_DMA+0x142>
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	2b08      	cmp	r3, #8
 80080da:	d109      	bne.n	80080f0 <HAL_TIM_PWM_Start_DMA+0xfc>
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	bf0c      	ite	eq
 80080e8:	2301      	moveq	r3, #1
 80080ea:	2300      	movne	r3, #0
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	e022      	b.n	8008136 <HAL_TIM_PWM_Start_DMA+0x142>
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	2b0c      	cmp	r3, #12
 80080f4:	d109      	bne.n	800810a <HAL_TIM_PWM_Start_DMA+0x116>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	2b01      	cmp	r3, #1
 8008100:	bf0c      	ite	eq
 8008102:	2301      	moveq	r3, #1
 8008104:	2300      	movne	r3, #0
 8008106:	b2db      	uxtb	r3, r3
 8008108:	e015      	b.n	8008136 <HAL_TIM_PWM_Start_DMA+0x142>
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	2b10      	cmp	r3, #16
 800810e:	d109      	bne.n	8008124 <HAL_TIM_PWM_Start_DMA+0x130>
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008116:	b2db      	uxtb	r3, r3
 8008118:	2b01      	cmp	r3, #1
 800811a:	bf0c      	ite	eq
 800811c:	2301      	moveq	r3, #1
 800811e:	2300      	movne	r3, #0
 8008120:	b2db      	uxtb	r3, r3
 8008122:	e008      	b.n	8008136 <HAL_TIM_PWM_Start_DMA+0x142>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800812a:	b2db      	uxtb	r3, r3
 800812c:	2b01      	cmp	r3, #1
 800812e:	bf0c      	ite	eq
 8008130:	2301      	moveq	r3, #1
 8008132:	2300      	movne	r3, #0
 8008134:	b2db      	uxtb	r3, r3
 8008136:	2b00      	cmp	r3, #0
 8008138:	d034      	beq.n	80081a4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d002      	beq.n	8008146 <HAL_TIM_PWM_Start_DMA+0x152>
 8008140:	887b      	ldrh	r3, [r7, #2]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d101      	bne.n	800814a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e157      	b.n	80083fa <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d104      	bne.n	800815a <HAL_TIM_PWM_Start_DMA+0x166>
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2202      	movs	r2, #2
 8008154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008158:	e026      	b.n	80081a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	2b04      	cmp	r3, #4
 800815e:	d104      	bne.n	800816a <HAL_TIM_PWM_Start_DMA+0x176>
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2202      	movs	r2, #2
 8008164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008168:	e01e      	b.n	80081a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	2b08      	cmp	r3, #8
 800816e:	d104      	bne.n	800817a <HAL_TIM_PWM_Start_DMA+0x186>
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2202      	movs	r2, #2
 8008174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008178:	e016      	b.n	80081a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	2b0c      	cmp	r3, #12
 800817e:	d104      	bne.n	800818a <HAL_TIM_PWM_Start_DMA+0x196>
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2202      	movs	r2, #2
 8008184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008188:	e00e      	b.n	80081a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	2b10      	cmp	r3, #16
 800818e:	d104      	bne.n	800819a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2202      	movs	r2, #2
 8008194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008198:	e006      	b.n	80081a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2202      	movs	r2, #2
 800819e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081a2:	e001      	b.n	80081a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	e128      	b.n	80083fa <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	2b0c      	cmp	r3, #12
 80081ac:	f200 80ae 	bhi.w	800830c <HAL_TIM_PWM_Start_DMA+0x318>
 80081b0:	a201      	add	r2, pc, #4	; (adr r2, 80081b8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80081b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b6:	bf00      	nop
 80081b8:	080081ed 	.word	0x080081ed
 80081bc:	0800830d 	.word	0x0800830d
 80081c0:	0800830d 	.word	0x0800830d
 80081c4:	0800830d 	.word	0x0800830d
 80081c8:	08008235 	.word	0x08008235
 80081cc:	0800830d 	.word	0x0800830d
 80081d0:	0800830d 	.word	0x0800830d
 80081d4:	0800830d 	.word	0x0800830d
 80081d8:	0800827d 	.word	0x0800827d
 80081dc:	0800830d 	.word	0x0800830d
 80081e0:	0800830d 	.word	0x0800830d
 80081e4:	0800830d 	.word	0x0800830d
 80081e8:	080082c5 	.word	0x080082c5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f0:	4a84      	ldr	r2, [pc, #528]	; (8008404 <HAL_TIM_PWM_Start_DMA+0x410>)
 80081f2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f8:	4a83      	ldr	r2, [pc, #524]	; (8008408 <HAL_TIM_PWM_Start_DMA+0x414>)
 80081fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008200:	4a82      	ldr	r2, [pc, #520]	; (800840c <HAL_TIM_PWM_Start_DMA+0x418>)
 8008202:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008208:	6879      	ldr	r1, [r7, #4]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	3334      	adds	r3, #52	; 0x34
 8008210:	461a      	mov	r2, r3
 8008212:	887b      	ldrh	r3, [r7, #2]
 8008214:	f7fd fd5a 	bl	8005ccc <HAL_DMA_Start_IT>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d001      	beq.n	8008222 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e0eb      	b.n	80083fa <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	68da      	ldr	r2, [r3, #12]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008230:	60da      	str	r2, [r3, #12]
      break;
 8008232:	e06e      	b.n	8008312 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008238:	4a72      	ldr	r2, [pc, #456]	; (8008404 <HAL_TIM_PWM_Start_DMA+0x410>)
 800823a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008240:	4a71      	ldr	r2, [pc, #452]	; (8008408 <HAL_TIM_PWM_Start_DMA+0x414>)
 8008242:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008248:	4a70      	ldr	r2, [pc, #448]	; (800840c <HAL_TIM_PWM_Start_DMA+0x418>)
 800824a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008250:	6879      	ldr	r1, [r7, #4]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3338      	adds	r3, #56	; 0x38
 8008258:	461a      	mov	r2, r3
 800825a:	887b      	ldrh	r3, [r7, #2]
 800825c:	f7fd fd36 	bl	8005ccc <HAL_DMA_Start_IT>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d001      	beq.n	800826a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e0c7      	b.n	80083fa <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68da      	ldr	r2, [r3, #12]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008278:	60da      	str	r2, [r3, #12]
      break;
 800827a:	e04a      	b.n	8008312 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008280:	4a60      	ldr	r2, [pc, #384]	; (8008404 <HAL_TIM_PWM_Start_DMA+0x410>)
 8008282:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008288:	4a5f      	ldr	r2, [pc, #380]	; (8008408 <HAL_TIM_PWM_Start_DMA+0x414>)
 800828a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008290:	4a5e      	ldr	r2, [pc, #376]	; (800840c <HAL_TIM_PWM_Start_DMA+0x418>)
 8008292:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008298:	6879      	ldr	r1, [r7, #4]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	333c      	adds	r3, #60	; 0x3c
 80082a0:	461a      	mov	r2, r3
 80082a2:	887b      	ldrh	r3, [r7, #2]
 80082a4:	f7fd fd12 	bl	8005ccc <HAL_DMA_Start_IT>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e0a3      	b.n	80083fa <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68da      	ldr	r2, [r3, #12]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082c0:	60da      	str	r2, [r3, #12]
      break;
 80082c2:	e026      	b.n	8008312 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c8:	4a4e      	ldr	r2, [pc, #312]	; (8008404 <HAL_TIM_PWM_Start_DMA+0x410>)
 80082ca:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d0:	4a4d      	ldr	r2, [pc, #308]	; (8008408 <HAL_TIM_PWM_Start_DMA+0x414>)
 80082d2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d8:	4a4c      	ldr	r2, [pc, #304]	; (800840c <HAL_TIM_PWM_Start_DMA+0x418>)
 80082da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80082e0:	6879      	ldr	r1, [r7, #4]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	3340      	adds	r3, #64	; 0x40
 80082e8:	461a      	mov	r2, r3
 80082ea:	887b      	ldrh	r3, [r7, #2]
 80082ec:	f7fd fcee 	bl	8005ccc <HAL_DMA_Start_IT>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d001      	beq.n	80082fa <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e07f      	b.n	80083fa <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68da      	ldr	r2, [r3, #12]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008308:	60da      	str	r2, [r3, #12]
      break;
 800830a:	e002      	b.n	8008312 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	75fb      	strb	r3, [r7, #23]
      break;
 8008310:	bf00      	nop
  }

  if (status == HAL_OK)
 8008312:	7dfb      	ldrb	r3, [r7, #23]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d16f      	bne.n	80083f8 <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2201      	movs	r2, #1
 800831e:	68b9      	ldr	r1, [r7, #8]
 8008320:	4618      	mov	r0, r3
 8008322:	f001 f84b 	bl	80093bc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a39      	ldr	r2, [pc, #228]	; (8008410 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d013      	beq.n	8008358 <HAL_TIM_PWM_Start_DMA+0x364>
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a37      	ldr	r2, [pc, #220]	; (8008414 <HAL_TIM_PWM_Start_DMA+0x420>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d00e      	beq.n	8008358 <HAL_TIM_PWM_Start_DMA+0x364>
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a36      	ldr	r2, [pc, #216]	; (8008418 <HAL_TIM_PWM_Start_DMA+0x424>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d009      	beq.n	8008358 <HAL_TIM_PWM_Start_DMA+0x364>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a34      	ldr	r2, [pc, #208]	; (800841c <HAL_TIM_PWM_Start_DMA+0x428>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d004      	beq.n	8008358 <HAL_TIM_PWM_Start_DMA+0x364>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a33      	ldr	r2, [pc, #204]	; (8008420 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d101      	bne.n	800835c <HAL_TIM_PWM_Start_DMA+0x368>
 8008358:	2301      	movs	r3, #1
 800835a:	e000      	b.n	800835e <HAL_TIM_PWM_Start_DMA+0x36a>
 800835c:	2300      	movs	r3, #0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d007      	beq.n	8008372 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008370:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a26      	ldr	r2, [pc, #152]	; (8008410 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d01d      	beq.n	80083b8 <HAL_TIM_PWM_Start_DMA+0x3c4>
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008384:	d018      	beq.n	80083b8 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a26      	ldr	r2, [pc, #152]	; (8008424 <HAL_TIM_PWM_Start_DMA+0x430>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d013      	beq.n	80083b8 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a24      	ldr	r2, [pc, #144]	; (8008428 <HAL_TIM_PWM_Start_DMA+0x434>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d00e      	beq.n	80083b8 <HAL_TIM_PWM_Start_DMA+0x3c4>
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a23      	ldr	r2, [pc, #140]	; (800842c <HAL_TIM_PWM_Start_DMA+0x438>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d009      	beq.n	80083b8 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a1a      	ldr	r2, [pc, #104]	; (8008414 <HAL_TIM_PWM_Start_DMA+0x420>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d004      	beq.n	80083b8 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a19      	ldr	r2, [pc, #100]	; (8008418 <HAL_TIM_PWM_Start_DMA+0x424>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d115      	bne.n	80083e4 <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	689a      	ldr	r2, [r3, #8]
 80083be:	4b1c      	ldr	r3, [pc, #112]	; (8008430 <HAL_TIM_PWM_Start_DMA+0x43c>)
 80083c0:	4013      	ands	r3, r2
 80083c2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	2b06      	cmp	r3, #6
 80083c8:	d015      	beq.n	80083f6 <HAL_TIM_PWM_Start_DMA+0x402>
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083d0:	d011      	beq.n	80083f6 <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f042 0201 	orr.w	r2, r2, #1
 80083e0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083e2:	e008      	b.n	80083f6 <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f042 0201 	orr.w	r2, r2, #1
 80083f2:	601a      	str	r2, [r3, #0]
 80083f4:	e000      	b.n	80083f8 <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083f6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80083f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3718      	adds	r7, #24
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	08008a99 	.word	0x08008a99
 8008408:	08008b41 	.word	0x08008b41
 800840c:	08008a07 	.word	0x08008a07
 8008410:	40012c00 	.word	0x40012c00
 8008414:	40013400 	.word	0x40013400
 8008418:	40014000 	.word	0x40014000
 800841c:	40014400 	.word	0x40014400
 8008420:	40014800 	.word	0x40014800
 8008424:	40000400 	.word	0x40000400
 8008428:	40000800 	.word	0x40000800
 800842c:	40000c00 	.word	0x40000c00
 8008430:	00010007 	.word	0x00010007

08008434 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800843e:	2300      	movs	r3, #0
 8008440:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	2b0c      	cmp	r3, #12
 8008446:	d855      	bhi.n	80084f4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8008448:	a201      	add	r2, pc, #4	; (adr r2, 8008450 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800844a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800844e:	bf00      	nop
 8008450:	08008485 	.word	0x08008485
 8008454:	080084f5 	.word	0x080084f5
 8008458:	080084f5 	.word	0x080084f5
 800845c:	080084f5 	.word	0x080084f5
 8008460:	080084a1 	.word	0x080084a1
 8008464:	080084f5 	.word	0x080084f5
 8008468:	080084f5 	.word	0x080084f5
 800846c:	080084f5 	.word	0x080084f5
 8008470:	080084bd 	.word	0x080084bd
 8008474:	080084f5 	.word	0x080084f5
 8008478:	080084f5 	.word	0x080084f5
 800847c:	080084f5 	.word	0x080084f5
 8008480:	080084d9 	.word	0x080084d9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68da      	ldr	r2, [r3, #12]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008492:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008498:	4618      	mov	r0, r3
 800849a:	f7fd fc77 	bl	8005d8c <HAL_DMA_Abort_IT>
      break;
 800849e:	e02c      	b.n	80084fa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68da      	ldr	r2, [r3, #12]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084ae:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7fd fc69 	bl	8005d8c <HAL_DMA_Abort_IT>
      break;
 80084ba:	e01e      	b.n	80084fa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68da      	ldr	r2, [r3, #12]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80084ca:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7fd fc5b 	bl	8005d8c <HAL_DMA_Abort_IT>
      break;
 80084d6:	e010      	b.n	80084fa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68da      	ldr	r2, [r3, #12]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80084e6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7fd fc4d 	bl	8005d8c <HAL_DMA_Abort_IT>
      break;
 80084f2:	e002      	b.n	80084fa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	73fb      	strb	r3, [r7, #15]
      break;
 80084f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80084fa:	7bfb      	ldrb	r3, [r7, #15]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f040 8081 	bne.w	8008604 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2200      	movs	r2, #0
 8008508:	6839      	ldr	r1, [r7, #0]
 800850a:	4618      	mov	r0, r3
 800850c:	f000 ff56 	bl	80093bc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a3e      	ldr	r2, [pc, #248]	; (8008610 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d013      	beq.n	8008542 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a3d      	ldr	r2, [pc, #244]	; (8008614 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d00e      	beq.n	8008542 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a3b      	ldr	r2, [pc, #236]	; (8008618 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d009      	beq.n	8008542 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a3a      	ldr	r2, [pc, #232]	; (800861c <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d004      	beq.n	8008542 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a38      	ldr	r2, [pc, #224]	; (8008620 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d101      	bne.n	8008546 <HAL_TIM_PWM_Stop_DMA+0x112>
 8008542:	2301      	movs	r3, #1
 8008544:	e000      	b.n	8008548 <HAL_TIM_PWM_Stop_DMA+0x114>
 8008546:	2300      	movs	r3, #0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d017      	beq.n	800857c <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6a1a      	ldr	r2, [r3, #32]
 8008552:	f241 1311 	movw	r3, #4369	; 0x1111
 8008556:	4013      	ands	r3, r2
 8008558:	2b00      	cmp	r3, #0
 800855a:	d10f      	bne.n	800857c <HAL_TIM_PWM_Stop_DMA+0x148>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	6a1a      	ldr	r2, [r3, #32]
 8008562:	f240 4344 	movw	r3, #1092	; 0x444
 8008566:	4013      	ands	r3, r2
 8008568:	2b00      	cmp	r3, #0
 800856a:	d107      	bne.n	800857c <HAL_TIM_PWM_Stop_DMA+0x148>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800857a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	6a1a      	ldr	r2, [r3, #32]
 8008582:	f241 1311 	movw	r3, #4369	; 0x1111
 8008586:	4013      	ands	r3, r2
 8008588:	2b00      	cmp	r3, #0
 800858a:	d10f      	bne.n	80085ac <HAL_TIM_PWM_Stop_DMA+0x178>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6a1a      	ldr	r2, [r3, #32]
 8008592:	f240 4344 	movw	r3, #1092	; 0x444
 8008596:	4013      	ands	r3, r2
 8008598:	2b00      	cmp	r3, #0
 800859a:	d107      	bne.n	80085ac <HAL_TIM_PWM_Stop_DMA+0x178>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f022 0201 	bic.w	r2, r2, #1
 80085aa:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d104      	bne.n	80085bc <HAL_TIM_PWM_Stop_DMA+0x188>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085ba:	e023      	b.n	8008604 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	2b04      	cmp	r3, #4
 80085c0:	d104      	bne.n	80085cc <HAL_TIM_PWM_Stop_DMA+0x198>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2201      	movs	r2, #1
 80085c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085ca:	e01b      	b.n	8008604 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	2b08      	cmp	r3, #8
 80085d0:	d104      	bne.n	80085dc <HAL_TIM_PWM_Stop_DMA+0x1a8>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2201      	movs	r2, #1
 80085d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085da:	e013      	b.n	8008604 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	2b0c      	cmp	r3, #12
 80085e0:	d104      	bne.n	80085ec <HAL_TIM_PWM_Stop_DMA+0x1b8>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2201      	movs	r2, #1
 80085e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085ea:	e00b      	b.n	8008604 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	2b10      	cmp	r3, #16
 80085f0:	d104      	bne.n	80085fc <HAL_TIM_PWM_Stop_DMA+0x1c8>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085fa:	e003      	b.n	8008604 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8008604:	7bfb      	ldrb	r3, [r7, #15]
}
 8008606:	4618      	mov	r0, r3
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	40012c00 	.word	0x40012c00
 8008614:	40013400 	.word	0x40013400
 8008618:	40014000 	.word	0x40014000
 800861c:	40014400 	.word	0x40014400
 8008620:	40014800 	.word	0x40014800

08008624 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008630:	2300      	movs	r3, #0
 8008632:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800863a:	2b01      	cmp	r3, #1
 800863c:	d101      	bne.n	8008642 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800863e:	2302      	movs	r3, #2
 8008640:	e0ff      	b.n	8008842 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2201      	movs	r2, #1
 8008646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2b14      	cmp	r3, #20
 800864e:	f200 80f0 	bhi.w	8008832 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008652:	a201      	add	r2, pc, #4	; (adr r2, 8008658 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008658:	080086ad 	.word	0x080086ad
 800865c:	08008833 	.word	0x08008833
 8008660:	08008833 	.word	0x08008833
 8008664:	08008833 	.word	0x08008833
 8008668:	080086ed 	.word	0x080086ed
 800866c:	08008833 	.word	0x08008833
 8008670:	08008833 	.word	0x08008833
 8008674:	08008833 	.word	0x08008833
 8008678:	0800872f 	.word	0x0800872f
 800867c:	08008833 	.word	0x08008833
 8008680:	08008833 	.word	0x08008833
 8008684:	08008833 	.word	0x08008833
 8008688:	0800876f 	.word	0x0800876f
 800868c:	08008833 	.word	0x08008833
 8008690:	08008833 	.word	0x08008833
 8008694:	08008833 	.word	0x08008833
 8008698:	080087b1 	.word	0x080087b1
 800869c:	08008833 	.word	0x08008833
 80086a0:	08008833 	.word	0x08008833
 80086a4:	08008833 	.word	0x08008833
 80086a8:	080087f1 	.word	0x080087f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68b9      	ldr	r1, [r7, #8]
 80086b2:	4618      	mov	r0, r3
 80086b4:	f000 fb12 	bl	8008cdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	699a      	ldr	r2, [r3, #24]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f042 0208 	orr.w	r2, r2, #8
 80086c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	699a      	ldr	r2, [r3, #24]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f022 0204 	bic.w	r2, r2, #4
 80086d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6999      	ldr	r1, [r3, #24]
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	691a      	ldr	r2, [r3, #16]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	430a      	orrs	r2, r1
 80086e8:	619a      	str	r2, [r3, #24]
      break;
 80086ea:	e0a5      	b.n	8008838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68b9      	ldr	r1, [r7, #8]
 80086f2:	4618      	mov	r0, r3
 80086f4:	f000 fb82 	bl	8008dfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	699a      	ldr	r2, [r3, #24]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	699a      	ldr	r2, [r3, #24]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	6999      	ldr	r1, [r3, #24]
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	021a      	lsls	r2, r3, #8
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	430a      	orrs	r2, r1
 800872a:	619a      	str	r2, [r3, #24]
      break;
 800872c:	e084      	b.n	8008838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68b9      	ldr	r1, [r7, #8]
 8008734:	4618      	mov	r0, r3
 8008736:	f000 fbeb 	bl	8008f10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	69da      	ldr	r2, [r3, #28]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f042 0208 	orr.w	r2, r2, #8
 8008748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	69da      	ldr	r2, [r3, #28]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f022 0204 	bic.w	r2, r2, #4
 8008758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	69d9      	ldr	r1, [r3, #28]
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	691a      	ldr	r2, [r3, #16]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	430a      	orrs	r2, r1
 800876a:	61da      	str	r2, [r3, #28]
      break;
 800876c:	e064      	b.n	8008838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	68b9      	ldr	r1, [r7, #8]
 8008774:	4618      	mov	r0, r3
 8008776:	f000 fc53 	bl	8009020 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	69da      	ldr	r2, [r3, #28]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	69da      	ldr	r2, [r3, #28]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	69d9      	ldr	r1, [r3, #28]
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	021a      	lsls	r2, r3, #8
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	430a      	orrs	r2, r1
 80087ac:	61da      	str	r2, [r3, #28]
      break;
 80087ae:	e043      	b.n	8008838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	68b9      	ldr	r1, [r7, #8]
 80087b6:	4618      	mov	r0, r3
 80087b8:	f000 fc9c 	bl	80090f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f042 0208 	orr.w	r2, r2, #8
 80087ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f022 0204 	bic.w	r2, r2, #4
 80087da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	691a      	ldr	r2, [r3, #16]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	430a      	orrs	r2, r1
 80087ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80087ee:	e023      	b.n	8008838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68b9      	ldr	r1, [r7, #8]
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 fce0 	bl	80091bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800880a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800881a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	021a      	lsls	r2, r3, #8
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	430a      	orrs	r2, r1
 800882e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008830:	e002      	b.n	8008838 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	75fb      	strb	r3, [r7, #23]
      break;
 8008836:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2200      	movs	r2, #0
 800883c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008840:	7dfb      	ldrb	r3, [r7, #23]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3718      	adds	r7, #24
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop

0800884c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008856:	2300      	movs	r3, #0
 8008858:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008860:	2b01      	cmp	r3, #1
 8008862:	d101      	bne.n	8008868 <HAL_TIM_ConfigClockSource+0x1c>
 8008864:	2302      	movs	r3, #2
 8008866:	e0b6      	b.n	80089d6 <HAL_TIM_ConfigClockSource+0x18a>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2202      	movs	r2, #2
 8008874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008886:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800888a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008892:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	68ba      	ldr	r2, [r7, #8]
 800889a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088a4:	d03e      	beq.n	8008924 <HAL_TIM_ConfigClockSource+0xd8>
 80088a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088aa:	f200 8087 	bhi.w	80089bc <HAL_TIM_ConfigClockSource+0x170>
 80088ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088b2:	f000 8086 	beq.w	80089c2 <HAL_TIM_ConfigClockSource+0x176>
 80088b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088ba:	d87f      	bhi.n	80089bc <HAL_TIM_ConfigClockSource+0x170>
 80088bc:	2b70      	cmp	r3, #112	; 0x70
 80088be:	d01a      	beq.n	80088f6 <HAL_TIM_ConfigClockSource+0xaa>
 80088c0:	2b70      	cmp	r3, #112	; 0x70
 80088c2:	d87b      	bhi.n	80089bc <HAL_TIM_ConfigClockSource+0x170>
 80088c4:	2b60      	cmp	r3, #96	; 0x60
 80088c6:	d050      	beq.n	800896a <HAL_TIM_ConfigClockSource+0x11e>
 80088c8:	2b60      	cmp	r3, #96	; 0x60
 80088ca:	d877      	bhi.n	80089bc <HAL_TIM_ConfigClockSource+0x170>
 80088cc:	2b50      	cmp	r3, #80	; 0x50
 80088ce:	d03c      	beq.n	800894a <HAL_TIM_ConfigClockSource+0xfe>
 80088d0:	2b50      	cmp	r3, #80	; 0x50
 80088d2:	d873      	bhi.n	80089bc <HAL_TIM_ConfigClockSource+0x170>
 80088d4:	2b40      	cmp	r3, #64	; 0x40
 80088d6:	d058      	beq.n	800898a <HAL_TIM_ConfigClockSource+0x13e>
 80088d8:	2b40      	cmp	r3, #64	; 0x40
 80088da:	d86f      	bhi.n	80089bc <HAL_TIM_ConfigClockSource+0x170>
 80088dc:	2b30      	cmp	r3, #48	; 0x30
 80088de:	d064      	beq.n	80089aa <HAL_TIM_ConfigClockSource+0x15e>
 80088e0:	2b30      	cmp	r3, #48	; 0x30
 80088e2:	d86b      	bhi.n	80089bc <HAL_TIM_ConfigClockSource+0x170>
 80088e4:	2b20      	cmp	r3, #32
 80088e6:	d060      	beq.n	80089aa <HAL_TIM_ConfigClockSource+0x15e>
 80088e8:	2b20      	cmp	r3, #32
 80088ea:	d867      	bhi.n	80089bc <HAL_TIM_ConfigClockSource+0x170>
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d05c      	beq.n	80089aa <HAL_TIM_ConfigClockSource+0x15e>
 80088f0:	2b10      	cmp	r3, #16
 80088f2:	d05a      	beq.n	80089aa <HAL_TIM_ConfigClockSource+0x15e>
 80088f4:	e062      	b.n	80089bc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6818      	ldr	r0, [r3, #0]
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	6899      	ldr	r1, [r3, #8]
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	685a      	ldr	r2, [r3, #4]
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	f000 fd39 	bl	800937c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008918:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	609a      	str	r2, [r3, #8]
      break;
 8008922:	e04f      	b.n	80089c4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6818      	ldr	r0, [r3, #0]
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	6899      	ldr	r1, [r3, #8]
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	685a      	ldr	r2, [r3, #4]
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	f000 fd22 	bl	800937c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	689a      	ldr	r2, [r3, #8]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008946:	609a      	str	r2, [r3, #8]
      break;
 8008948:	e03c      	b.n	80089c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6818      	ldr	r0, [r3, #0]
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	6859      	ldr	r1, [r3, #4]
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	461a      	mov	r2, r3
 8008958:	f000 fc96 	bl	8009288 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2150      	movs	r1, #80	; 0x50
 8008962:	4618      	mov	r0, r3
 8008964:	f000 fcef 	bl	8009346 <TIM_ITRx_SetConfig>
      break;
 8008968:	e02c      	b.n	80089c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6818      	ldr	r0, [r3, #0]
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	6859      	ldr	r1, [r3, #4]
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	461a      	mov	r2, r3
 8008978:	f000 fcb5 	bl	80092e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2160      	movs	r1, #96	; 0x60
 8008982:	4618      	mov	r0, r3
 8008984:	f000 fcdf 	bl	8009346 <TIM_ITRx_SetConfig>
      break;
 8008988:	e01c      	b.n	80089c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6818      	ldr	r0, [r3, #0]
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	6859      	ldr	r1, [r3, #4]
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	461a      	mov	r2, r3
 8008998:	f000 fc76 	bl	8009288 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2140      	movs	r1, #64	; 0x40
 80089a2:	4618      	mov	r0, r3
 80089a4:	f000 fccf 	bl	8009346 <TIM_ITRx_SetConfig>
      break;
 80089a8:	e00c      	b.n	80089c4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4619      	mov	r1, r3
 80089b4:	4610      	mov	r0, r2
 80089b6:	f000 fcc6 	bl	8009346 <TIM_ITRx_SetConfig>
      break;
 80089ba:	e003      	b.n	80089c4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	73fb      	strb	r3, [r7, #15]
      break;
 80089c0:	e000      	b.n	80089c4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80089c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80089d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80089de:	b480      	push	{r7}
 80089e0:	b083      	sub	sp, #12
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80089e6:	bf00      	nop
 80089e8:	370c      	adds	r7, #12
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr

080089f2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80089f2:	b480      	push	{r7}
 80089f4:	b083      	sub	sp, #12
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80089fa:	bf00      	nop
 80089fc:	370c      	adds	r7, #12
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr

08008a06 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b084      	sub	sp, #16
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a12:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d107      	bne.n	8008a2e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2201      	movs	r2, #1
 8008a22:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a2c:	e02a      	b.n	8008a84 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d107      	bne.n	8008a48 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2202      	movs	r2, #2
 8008a3c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2201      	movs	r2, #1
 8008a42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a46:	e01d      	b.n	8008a84 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d107      	bne.n	8008a62 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2204      	movs	r2, #4
 8008a56:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a60:	e010      	b.n	8008a84 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d107      	bne.n	8008a7c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2208      	movs	r2, #8
 8008a70:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2201      	movs	r2, #1
 8008a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a7a:	e003      	b.n	8008a84 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008a84:	68f8      	ldr	r0, [r7, #12]
 8008a86:	f7ff ffb4 	bl	80089f2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	771a      	strb	r2, [r3, #28]
}
 8008a90:	bf00      	nop
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d10b      	bne.n	8008ac8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	69db      	ldr	r3, [r3, #28]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d136      	bne.n	8008b2c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ac6:	e031      	b.n	8008b2c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d10b      	bne.n	8008aea <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2202      	movs	r2, #2
 8008ad6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	69db      	ldr	r3, [r3, #28]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d125      	bne.n	8008b2c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ae8:	e020      	b.n	8008b2c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d10b      	bne.n	8008b0c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2204      	movs	r2, #4
 8008af8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	69db      	ldr	r3, [r3, #28]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d114      	bne.n	8008b2c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2201      	movs	r2, #1
 8008b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b0a:	e00f      	b.n	8008b2c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d10a      	bne.n	8008b2c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2208      	movs	r2, #8
 8008b1a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	69db      	ldr	r3, [r3, #28]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d103      	bne.n	8008b2c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2201      	movs	r2, #1
 8008b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f7f9 fac7 	bl	80020c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2200      	movs	r2, #0
 8008b36:	771a      	strb	r2, [r3, #28]
}
 8008b38:	bf00      	nop
 8008b3a:	3710      	adds	r7, #16
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b4c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d103      	bne.n	8008b60 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	771a      	strb	r2, [r3, #28]
 8008b5e:	e019      	b.n	8008b94 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d103      	bne.n	8008b72 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2202      	movs	r2, #2
 8008b6e:	771a      	strb	r2, [r3, #28]
 8008b70:	e010      	b.n	8008b94 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d103      	bne.n	8008b84 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2204      	movs	r2, #4
 8008b80:	771a      	strb	r2, [r3, #28]
 8008b82:	e007      	b.n	8008b94 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d102      	bne.n	8008b94 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2208      	movs	r2, #8
 8008b92:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008b94:	68f8      	ldr	r0, [r7, #12]
 8008b96:	f7ff ff22 	bl	80089de <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	771a      	strb	r2, [r3, #28]
}
 8008ba0:	bf00      	nop
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	4a40      	ldr	r2, [pc, #256]	; (8008cbc <TIM_Base_SetConfig+0x114>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d013      	beq.n	8008be8 <TIM_Base_SetConfig+0x40>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bc6:	d00f      	beq.n	8008be8 <TIM_Base_SetConfig+0x40>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a3d      	ldr	r2, [pc, #244]	; (8008cc0 <TIM_Base_SetConfig+0x118>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d00b      	beq.n	8008be8 <TIM_Base_SetConfig+0x40>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a3c      	ldr	r2, [pc, #240]	; (8008cc4 <TIM_Base_SetConfig+0x11c>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d007      	beq.n	8008be8 <TIM_Base_SetConfig+0x40>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a3b      	ldr	r2, [pc, #236]	; (8008cc8 <TIM_Base_SetConfig+0x120>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d003      	beq.n	8008be8 <TIM_Base_SetConfig+0x40>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a3a      	ldr	r2, [pc, #232]	; (8008ccc <TIM_Base_SetConfig+0x124>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d108      	bne.n	8008bfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	68fa      	ldr	r2, [r7, #12]
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a2f      	ldr	r2, [pc, #188]	; (8008cbc <TIM_Base_SetConfig+0x114>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d01f      	beq.n	8008c42 <TIM_Base_SetConfig+0x9a>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c08:	d01b      	beq.n	8008c42 <TIM_Base_SetConfig+0x9a>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4a2c      	ldr	r2, [pc, #176]	; (8008cc0 <TIM_Base_SetConfig+0x118>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d017      	beq.n	8008c42 <TIM_Base_SetConfig+0x9a>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4a2b      	ldr	r2, [pc, #172]	; (8008cc4 <TIM_Base_SetConfig+0x11c>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d013      	beq.n	8008c42 <TIM_Base_SetConfig+0x9a>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	4a2a      	ldr	r2, [pc, #168]	; (8008cc8 <TIM_Base_SetConfig+0x120>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d00f      	beq.n	8008c42 <TIM_Base_SetConfig+0x9a>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a29      	ldr	r2, [pc, #164]	; (8008ccc <TIM_Base_SetConfig+0x124>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d00b      	beq.n	8008c42 <TIM_Base_SetConfig+0x9a>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4a28      	ldr	r2, [pc, #160]	; (8008cd0 <TIM_Base_SetConfig+0x128>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d007      	beq.n	8008c42 <TIM_Base_SetConfig+0x9a>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a27      	ldr	r2, [pc, #156]	; (8008cd4 <TIM_Base_SetConfig+0x12c>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d003      	beq.n	8008c42 <TIM_Base_SetConfig+0x9a>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4a26      	ldr	r2, [pc, #152]	; (8008cd8 <TIM_Base_SetConfig+0x130>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d108      	bne.n	8008c54 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	68fa      	ldr	r2, [r7, #12]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	695b      	ldr	r3, [r3, #20]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	68fa      	ldr	r2, [r7, #12]
 8008c66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	689a      	ldr	r2, [r3, #8]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	4a10      	ldr	r2, [pc, #64]	; (8008cbc <TIM_Base_SetConfig+0x114>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d00f      	beq.n	8008ca0 <TIM_Base_SetConfig+0xf8>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4a12      	ldr	r2, [pc, #72]	; (8008ccc <TIM_Base_SetConfig+0x124>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d00b      	beq.n	8008ca0 <TIM_Base_SetConfig+0xf8>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4a11      	ldr	r2, [pc, #68]	; (8008cd0 <TIM_Base_SetConfig+0x128>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d007      	beq.n	8008ca0 <TIM_Base_SetConfig+0xf8>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4a10      	ldr	r2, [pc, #64]	; (8008cd4 <TIM_Base_SetConfig+0x12c>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d003      	beq.n	8008ca0 <TIM_Base_SetConfig+0xf8>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a0f      	ldr	r2, [pc, #60]	; (8008cd8 <TIM_Base_SetConfig+0x130>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d103      	bne.n	8008ca8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	691a      	ldr	r2, [r3, #16]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	615a      	str	r2, [r3, #20]
}
 8008cae:	bf00      	nop
 8008cb0:	3714      	adds	r7, #20
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	40012c00 	.word	0x40012c00
 8008cc0:	40000400 	.word	0x40000400
 8008cc4:	40000800 	.word	0x40000800
 8008cc8:	40000c00 	.word	0x40000c00
 8008ccc:	40013400 	.word	0x40013400
 8008cd0:	40014000 	.word	0x40014000
 8008cd4:	40014400 	.word	0x40014400
 8008cd8:	40014800 	.word	0x40014800

08008cdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b087      	sub	sp, #28
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a1b      	ldr	r3, [r3, #32]
 8008cea:	f023 0201 	bic.w	r2, r3, #1
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a1b      	ldr	r3, [r3, #32]
 8008cf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	699b      	ldr	r3, [r3, #24]
 8008d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f023 0303 	bic.w	r3, r3, #3
 8008d16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	f023 0302 	bic.w	r3, r3, #2
 8008d28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	697a      	ldr	r2, [r7, #20]
 8008d30:	4313      	orrs	r3, r2
 8008d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a2c      	ldr	r2, [pc, #176]	; (8008de8 <TIM_OC1_SetConfig+0x10c>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d00f      	beq.n	8008d5c <TIM_OC1_SetConfig+0x80>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4a2b      	ldr	r2, [pc, #172]	; (8008dec <TIM_OC1_SetConfig+0x110>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d00b      	beq.n	8008d5c <TIM_OC1_SetConfig+0x80>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a2a      	ldr	r2, [pc, #168]	; (8008df0 <TIM_OC1_SetConfig+0x114>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d007      	beq.n	8008d5c <TIM_OC1_SetConfig+0x80>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4a29      	ldr	r2, [pc, #164]	; (8008df4 <TIM_OC1_SetConfig+0x118>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d003      	beq.n	8008d5c <TIM_OC1_SetConfig+0x80>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a28      	ldr	r2, [pc, #160]	; (8008df8 <TIM_OC1_SetConfig+0x11c>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d10c      	bne.n	8008d76 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	f023 0308 	bic.w	r3, r3, #8
 8008d62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	697a      	ldr	r2, [r7, #20]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	f023 0304 	bic.w	r3, r3, #4
 8008d74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a1b      	ldr	r2, [pc, #108]	; (8008de8 <TIM_OC1_SetConfig+0x10c>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d00f      	beq.n	8008d9e <TIM_OC1_SetConfig+0xc2>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a1a      	ldr	r2, [pc, #104]	; (8008dec <TIM_OC1_SetConfig+0x110>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d00b      	beq.n	8008d9e <TIM_OC1_SetConfig+0xc2>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4a19      	ldr	r2, [pc, #100]	; (8008df0 <TIM_OC1_SetConfig+0x114>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d007      	beq.n	8008d9e <TIM_OC1_SetConfig+0xc2>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4a18      	ldr	r2, [pc, #96]	; (8008df4 <TIM_OC1_SetConfig+0x118>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d003      	beq.n	8008d9e <TIM_OC1_SetConfig+0xc2>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4a17      	ldr	r2, [pc, #92]	; (8008df8 <TIM_OC1_SetConfig+0x11c>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d111      	bne.n	8008dc2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008da4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008dac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	695b      	ldr	r3, [r3, #20]
 8008db2:	693a      	ldr	r2, [r7, #16]
 8008db4:	4313      	orrs	r3, r2
 8008db6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	693a      	ldr	r2, [r7, #16]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	693a      	ldr	r2, [r7, #16]
 8008dc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	685a      	ldr	r2, [r3, #4]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	697a      	ldr	r2, [r7, #20]
 8008dda:	621a      	str	r2, [r3, #32]
}
 8008ddc:	bf00      	nop
 8008dde:	371c      	adds	r7, #28
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr
 8008de8:	40012c00 	.word	0x40012c00
 8008dec:	40013400 	.word	0x40013400
 8008df0:	40014000 	.word	0x40014000
 8008df4:	40014400 	.word	0x40014400
 8008df8:	40014800 	.word	0x40014800

08008dfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b087      	sub	sp, #28
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6a1b      	ldr	r3, [r3, #32]
 8008e0a:	f023 0210 	bic.w	r2, r3, #16
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a1b      	ldr	r3, [r3, #32]
 8008e16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	699b      	ldr	r3, [r3, #24]
 8008e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	021b      	lsls	r3, r3, #8
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	4313      	orrs	r3, r2
 8008e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	f023 0320 	bic.w	r3, r3, #32
 8008e4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	011b      	lsls	r3, r3, #4
 8008e52:	697a      	ldr	r2, [r7, #20]
 8008e54:	4313      	orrs	r3, r2
 8008e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a28      	ldr	r2, [pc, #160]	; (8008efc <TIM_OC2_SetConfig+0x100>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d003      	beq.n	8008e68 <TIM_OC2_SetConfig+0x6c>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a27      	ldr	r2, [pc, #156]	; (8008f00 <TIM_OC2_SetConfig+0x104>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d10d      	bne.n	8008e84 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	011b      	lsls	r3, r3, #4
 8008e76:	697a      	ldr	r2, [r7, #20]
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4a1d      	ldr	r2, [pc, #116]	; (8008efc <TIM_OC2_SetConfig+0x100>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d00f      	beq.n	8008eac <TIM_OC2_SetConfig+0xb0>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a1c      	ldr	r2, [pc, #112]	; (8008f00 <TIM_OC2_SetConfig+0x104>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d00b      	beq.n	8008eac <TIM_OC2_SetConfig+0xb0>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4a1b      	ldr	r2, [pc, #108]	; (8008f04 <TIM_OC2_SetConfig+0x108>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d007      	beq.n	8008eac <TIM_OC2_SetConfig+0xb0>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4a1a      	ldr	r2, [pc, #104]	; (8008f08 <TIM_OC2_SetConfig+0x10c>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d003      	beq.n	8008eac <TIM_OC2_SetConfig+0xb0>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	4a19      	ldr	r2, [pc, #100]	; (8008f0c <TIM_OC2_SetConfig+0x110>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d113      	bne.n	8008ed4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008eb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008eba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	695b      	ldr	r3, [r3, #20]
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	693a      	ldr	r2, [r7, #16]
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	699b      	ldr	r3, [r3, #24]
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	693a      	ldr	r2, [r7, #16]
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	693a      	ldr	r2, [r7, #16]
 8008ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	685a      	ldr	r2, [r3, #4]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	697a      	ldr	r2, [r7, #20]
 8008eec:	621a      	str	r2, [r3, #32]
}
 8008eee:	bf00      	nop
 8008ef0:	371c      	adds	r7, #28
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	40012c00 	.word	0x40012c00
 8008f00:	40013400 	.word	0x40013400
 8008f04:	40014000 	.word	0x40014000
 8008f08:	40014400 	.word	0x40014400
 8008f0c:	40014800 	.word	0x40014800

08008f10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b087      	sub	sp, #28
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a1b      	ldr	r3, [r3, #32]
 8008f1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a1b      	ldr	r3, [r3, #32]
 8008f2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	69db      	ldr	r3, [r3, #28]
 8008f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f023 0303 	bic.w	r3, r3, #3
 8008f4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	021b      	lsls	r3, r3, #8
 8008f64:	697a      	ldr	r2, [r7, #20]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a27      	ldr	r2, [pc, #156]	; (800900c <TIM_OC3_SetConfig+0xfc>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d003      	beq.n	8008f7a <TIM_OC3_SetConfig+0x6a>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a26      	ldr	r2, [pc, #152]	; (8009010 <TIM_OC3_SetConfig+0x100>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d10d      	bne.n	8008f96 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	021b      	lsls	r3, r3, #8
 8008f88:	697a      	ldr	r2, [r7, #20]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	4a1c      	ldr	r2, [pc, #112]	; (800900c <TIM_OC3_SetConfig+0xfc>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d00f      	beq.n	8008fbe <TIM_OC3_SetConfig+0xae>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4a1b      	ldr	r2, [pc, #108]	; (8009010 <TIM_OC3_SetConfig+0x100>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d00b      	beq.n	8008fbe <TIM_OC3_SetConfig+0xae>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4a1a      	ldr	r2, [pc, #104]	; (8009014 <TIM_OC3_SetConfig+0x104>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d007      	beq.n	8008fbe <TIM_OC3_SetConfig+0xae>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4a19      	ldr	r2, [pc, #100]	; (8009018 <TIM_OC3_SetConfig+0x108>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d003      	beq.n	8008fbe <TIM_OC3_SetConfig+0xae>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a18      	ldr	r2, [pc, #96]	; (800901c <TIM_OC3_SetConfig+0x10c>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d113      	bne.n	8008fe6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	695b      	ldr	r3, [r3, #20]
 8008fd2:	011b      	lsls	r3, r3, #4
 8008fd4:	693a      	ldr	r2, [r7, #16]
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	699b      	ldr	r3, [r3, #24]
 8008fde:	011b      	lsls	r3, r3, #4
 8008fe0:	693a      	ldr	r2, [r7, #16]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	693a      	ldr	r2, [r7, #16]
 8008fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	685a      	ldr	r2, [r3, #4]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	697a      	ldr	r2, [r7, #20]
 8008ffe:	621a      	str	r2, [r3, #32]
}
 8009000:	bf00      	nop
 8009002:	371c      	adds	r7, #28
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr
 800900c:	40012c00 	.word	0x40012c00
 8009010:	40013400 	.word	0x40013400
 8009014:	40014000 	.word	0x40014000
 8009018:	40014400 	.word	0x40014400
 800901c:	40014800 	.word	0x40014800

08009020 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009020:	b480      	push	{r7}
 8009022:	b087      	sub	sp, #28
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a1b      	ldr	r3, [r3, #32]
 800902e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6a1b      	ldr	r3, [r3, #32]
 800903a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	69db      	ldr	r3, [r3, #28]
 8009046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800904e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800905a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	021b      	lsls	r3, r3, #8
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	4313      	orrs	r3, r2
 8009066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800906e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	031b      	lsls	r3, r3, #12
 8009076:	693a      	ldr	r2, [r7, #16]
 8009078:	4313      	orrs	r3, r2
 800907a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a18      	ldr	r2, [pc, #96]	; (80090e0 <TIM_OC4_SetConfig+0xc0>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d00f      	beq.n	80090a4 <TIM_OC4_SetConfig+0x84>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a17      	ldr	r2, [pc, #92]	; (80090e4 <TIM_OC4_SetConfig+0xc4>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d00b      	beq.n	80090a4 <TIM_OC4_SetConfig+0x84>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4a16      	ldr	r2, [pc, #88]	; (80090e8 <TIM_OC4_SetConfig+0xc8>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d007      	beq.n	80090a4 <TIM_OC4_SetConfig+0x84>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	4a15      	ldr	r2, [pc, #84]	; (80090ec <TIM_OC4_SetConfig+0xcc>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d003      	beq.n	80090a4 <TIM_OC4_SetConfig+0x84>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4a14      	ldr	r2, [pc, #80]	; (80090f0 <TIM_OC4_SetConfig+0xd0>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d109      	bne.n	80090b8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	695b      	ldr	r3, [r3, #20]
 80090b0:	019b      	lsls	r3, r3, #6
 80090b2:	697a      	ldr	r2, [r7, #20]
 80090b4:	4313      	orrs	r3, r2
 80090b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	697a      	ldr	r2, [r7, #20]
 80090bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	685a      	ldr	r2, [r3, #4]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	693a      	ldr	r2, [r7, #16]
 80090d0:	621a      	str	r2, [r3, #32]
}
 80090d2:	bf00      	nop
 80090d4:	371c      	adds	r7, #28
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr
 80090de:	bf00      	nop
 80090e0:	40012c00 	.word	0x40012c00
 80090e4:	40013400 	.word	0x40013400
 80090e8:	40014000 	.word	0x40014000
 80090ec:	40014400 	.word	0x40014400
 80090f0:	40014800 	.word	0x40014800

080090f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b087      	sub	sp, #28
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6a1b      	ldr	r3, [r3, #32]
 8009102:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6a1b      	ldr	r3, [r3, #32]
 800910e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800911a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	68fa      	ldr	r2, [r7, #12]
 800912e:	4313      	orrs	r3, r2
 8009130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009138:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	041b      	lsls	r3, r3, #16
 8009140:	693a      	ldr	r2, [r7, #16]
 8009142:	4313      	orrs	r3, r2
 8009144:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4a17      	ldr	r2, [pc, #92]	; (80091a8 <TIM_OC5_SetConfig+0xb4>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d00f      	beq.n	800916e <TIM_OC5_SetConfig+0x7a>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a16      	ldr	r2, [pc, #88]	; (80091ac <TIM_OC5_SetConfig+0xb8>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d00b      	beq.n	800916e <TIM_OC5_SetConfig+0x7a>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4a15      	ldr	r2, [pc, #84]	; (80091b0 <TIM_OC5_SetConfig+0xbc>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d007      	beq.n	800916e <TIM_OC5_SetConfig+0x7a>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4a14      	ldr	r2, [pc, #80]	; (80091b4 <TIM_OC5_SetConfig+0xc0>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d003      	beq.n	800916e <TIM_OC5_SetConfig+0x7a>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	4a13      	ldr	r2, [pc, #76]	; (80091b8 <TIM_OC5_SetConfig+0xc4>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d109      	bne.n	8009182 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009174:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	695b      	ldr	r3, [r3, #20]
 800917a:	021b      	lsls	r3, r3, #8
 800917c:	697a      	ldr	r2, [r7, #20]
 800917e:	4313      	orrs	r3, r2
 8009180:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	697a      	ldr	r2, [r7, #20]
 8009186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	685a      	ldr	r2, [r3, #4]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	693a      	ldr	r2, [r7, #16]
 800919a:	621a      	str	r2, [r3, #32]
}
 800919c:	bf00      	nop
 800919e:	371c      	adds	r7, #28
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr
 80091a8:	40012c00 	.word	0x40012c00
 80091ac:	40013400 	.word	0x40013400
 80091b0:	40014000 	.word	0x40014000
 80091b4:	40014400 	.word	0x40014400
 80091b8:	40014800 	.word	0x40014800

080091bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80091bc:	b480      	push	{r7}
 80091be:	b087      	sub	sp, #28
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a1b      	ldr	r3, [r3, #32]
 80091ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a1b      	ldr	r3, [r3, #32]
 80091d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	021b      	lsls	r3, r3, #8
 80091f6:	68fa      	ldr	r2, [r7, #12]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009202:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	051b      	lsls	r3, r3, #20
 800920a:	693a      	ldr	r2, [r7, #16]
 800920c:	4313      	orrs	r3, r2
 800920e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4a18      	ldr	r2, [pc, #96]	; (8009274 <TIM_OC6_SetConfig+0xb8>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d00f      	beq.n	8009238 <TIM_OC6_SetConfig+0x7c>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a17      	ldr	r2, [pc, #92]	; (8009278 <TIM_OC6_SetConfig+0xbc>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d00b      	beq.n	8009238 <TIM_OC6_SetConfig+0x7c>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4a16      	ldr	r2, [pc, #88]	; (800927c <TIM_OC6_SetConfig+0xc0>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d007      	beq.n	8009238 <TIM_OC6_SetConfig+0x7c>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	4a15      	ldr	r2, [pc, #84]	; (8009280 <TIM_OC6_SetConfig+0xc4>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d003      	beq.n	8009238 <TIM_OC6_SetConfig+0x7c>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4a14      	ldr	r2, [pc, #80]	; (8009284 <TIM_OC6_SetConfig+0xc8>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d109      	bne.n	800924c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800923e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	695b      	ldr	r3, [r3, #20]
 8009244:	029b      	lsls	r3, r3, #10
 8009246:	697a      	ldr	r2, [r7, #20]
 8009248:	4313      	orrs	r3, r2
 800924a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	697a      	ldr	r2, [r7, #20]
 8009250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	68fa      	ldr	r2, [r7, #12]
 8009256:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	685a      	ldr	r2, [r3, #4]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	693a      	ldr	r2, [r7, #16]
 8009264:	621a      	str	r2, [r3, #32]
}
 8009266:	bf00      	nop
 8009268:	371c      	adds	r7, #28
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop
 8009274:	40012c00 	.word	0x40012c00
 8009278:	40013400 	.word	0x40013400
 800927c:	40014000 	.word	0x40014000
 8009280:	40014400 	.word	0x40014400
 8009284:	40014800 	.word	0x40014800

08009288 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009288:	b480      	push	{r7}
 800928a:	b087      	sub	sp, #28
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6a1b      	ldr	r3, [r3, #32]
 8009298:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6a1b      	ldr	r3, [r3, #32]
 800929e:	f023 0201 	bic.w	r2, r3, #1
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	699b      	ldr	r3, [r3, #24]
 80092aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80092b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	011b      	lsls	r3, r3, #4
 80092b8:	693a      	ldr	r2, [r7, #16]
 80092ba:	4313      	orrs	r3, r2
 80092bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	f023 030a 	bic.w	r3, r3, #10
 80092c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80092c6:	697a      	ldr	r2, [r7, #20]
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	4313      	orrs	r3, r2
 80092cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	693a      	ldr	r2, [r7, #16]
 80092d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	621a      	str	r2, [r3, #32]
}
 80092da:	bf00      	nop
 80092dc:	371c      	adds	r7, #28
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr

080092e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092e6:	b480      	push	{r7}
 80092e8:	b087      	sub	sp, #28
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	60f8      	str	r0, [r7, #12]
 80092ee:	60b9      	str	r1, [r7, #8]
 80092f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6a1b      	ldr	r3, [r3, #32]
 80092f6:	f023 0210 	bic.w	r2, r3, #16
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	699b      	ldr	r3, [r3, #24]
 8009302:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6a1b      	ldr	r3, [r3, #32]
 8009308:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009310:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	031b      	lsls	r3, r3, #12
 8009316:	697a      	ldr	r2, [r7, #20]
 8009318:	4313      	orrs	r3, r2
 800931a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009322:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	011b      	lsls	r3, r3, #4
 8009328:	693a      	ldr	r2, [r7, #16]
 800932a:	4313      	orrs	r3, r2
 800932c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	697a      	ldr	r2, [r7, #20]
 8009332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	693a      	ldr	r2, [r7, #16]
 8009338:	621a      	str	r2, [r3, #32]
}
 800933a:	bf00      	nop
 800933c:	371c      	adds	r7, #28
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr

08009346 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009346:	b480      	push	{r7}
 8009348:	b085      	sub	sp, #20
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
 800934e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800935c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	4313      	orrs	r3, r2
 8009364:	f043 0307 	orr.w	r3, r3, #7
 8009368:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	609a      	str	r2, [r3, #8]
}
 8009370:	bf00      	nop
 8009372:	3714      	adds	r7, #20
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800937c:	b480      	push	{r7}
 800937e:	b087      	sub	sp, #28
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	607a      	str	r2, [r7, #4]
 8009388:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009396:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	021a      	lsls	r2, r3, #8
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	431a      	orrs	r2, r3
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	4313      	orrs	r3, r2
 80093a4:	697a      	ldr	r2, [r7, #20]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	697a      	ldr	r2, [r7, #20]
 80093ae:	609a      	str	r2, [r3, #8]
}
 80093b0:	bf00      	nop
 80093b2:	371c      	adds	r7, #28
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80093bc:	b480      	push	{r7}
 80093be:	b087      	sub	sp, #28
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	f003 031f 	and.w	r3, r3, #31
 80093ce:	2201      	movs	r2, #1
 80093d0:	fa02 f303 	lsl.w	r3, r2, r3
 80093d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6a1a      	ldr	r2, [r3, #32]
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	43db      	mvns	r3, r3
 80093de:	401a      	ands	r2, r3
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6a1a      	ldr	r2, [r3, #32]
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	f003 031f 	and.w	r3, r3, #31
 80093ee:	6879      	ldr	r1, [r7, #4]
 80093f0:	fa01 f303 	lsl.w	r3, r1, r3
 80093f4:	431a      	orrs	r2, r3
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	621a      	str	r2, [r3, #32]
}
 80093fa:	bf00      	nop
 80093fc:	371c      	adds	r7, #28
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr
	...

08009408 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009418:	2b01      	cmp	r3, #1
 800941a:	d101      	bne.n	8009420 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800941c:	2302      	movs	r3, #2
 800941e:	e068      	b.n	80094f2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2201      	movs	r2, #1
 8009424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2202      	movs	r2, #2
 800942c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a2e      	ldr	r2, [pc, #184]	; (8009500 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d004      	beq.n	8009454 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a2d      	ldr	r2, [pc, #180]	; (8009504 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d108      	bne.n	8009466 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800945a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	68fa      	ldr	r2, [r7, #12]
 8009462:	4313      	orrs	r3, r2
 8009464:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800946c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	4313      	orrs	r3, r2
 8009476:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a1e      	ldr	r2, [pc, #120]	; (8009500 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d01d      	beq.n	80094c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009492:	d018      	beq.n	80094c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a1b      	ldr	r2, [pc, #108]	; (8009508 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d013      	beq.n	80094c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a1a      	ldr	r2, [pc, #104]	; (800950c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d00e      	beq.n	80094c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a18      	ldr	r2, [pc, #96]	; (8009510 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d009      	beq.n	80094c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a13      	ldr	r2, [pc, #76]	; (8009504 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d004      	beq.n	80094c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a14      	ldr	r2, [pc, #80]	; (8009514 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d10c      	bne.n	80094e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	68ba      	ldr	r2, [r7, #8]
 80094d4:	4313      	orrs	r3, r2
 80094d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	68ba      	ldr	r2, [r7, #8]
 80094de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3714      	adds	r7, #20
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr
 80094fe:	bf00      	nop
 8009500:	40012c00 	.word	0x40012c00
 8009504:	40013400 	.word	0x40013400
 8009508:	40000400 	.word	0x40000400
 800950c:	40000800 	.word	0x40000800
 8009510:	40000c00 	.word	0x40000c00
 8009514:	40014000 	.word	0x40014000

08009518 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009518:	b480      	push	{r7}
 800951a:	b085      	sub	sp, #20
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009522:	2300      	movs	r3, #0
 8009524:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800952c:	2b01      	cmp	r3, #1
 800952e:	d101      	bne.n	8009534 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009530:	2302      	movs	r3, #2
 8009532:	e065      	b.n	8009600 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	4313      	orrs	r3, r2
 8009548:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	4313      	orrs	r3, r2
 8009556:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	4313      	orrs	r3, r2
 8009564:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4313      	orrs	r3, r2
 8009572:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	691b      	ldr	r3, [r3, #16]
 800957e:	4313      	orrs	r3, r2
 8009580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	695b      	ldr	r3, [r3, #20]
 800958c:	4313      	orrs	r3, r2
 800958e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800959a:	4313      	orrs	r3, r2
 800959c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	699b      	ldr	r3, [r3, #24]
 80095a8:	041b      	lsls	r3, r3, #16
 80095aa:	4313      	orrs	r3, r2
 80095ac:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a16      	ldr	r2, [pc, #88]	; (800960c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d004      	beq.n	80095c2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a14      	ldr	r2, [pc, #80]	; (8009610 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d115      	bne.n	80095ee <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095cc:	051b      	lsls	r3, r3, #20
 80095ce:	4313      	orrs	r3, r2
 80095d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	69db      	ldr	r3, [r3, #28]
 80095dc:	4313      	orrs	r3, r2
 80095de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	6a1b      	ldr	r3, [r3, #32]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	68fa      	ldr	r2, [r7, #12]
 80095f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095fe:	2300      	movs	r3, #0
}
 8009600:	4618      	mov	r0, r3
 8009602:	3714      	adds	r7, #20
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr
 800960c:	40012c00 	.word	0x40012c00
 8009610:	40013400 	.word	0x40013400

08009614 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d101      	bne.n	8009626 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	e040      	b.n	80096a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800962a:	2b00      	cmp	r3, #0
 800962c:	d106      	bne.n	800963c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f7f9 fc88 	bl	8002f4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2224      	movs	r2, #36	; 0x24
 8009640:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f022 0201 	bic.w	r2, r2, #1
 8009650:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f8c0 	bl	80097d8 <UART_SetConfig>
 8009658:	4603      	mov	r3, r0
 800965a:	2b01      	cmp	r3, #1
 800965c:	d101      	bne.n	8009662 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800965e:	2301      	movs	r3, #1
 8009660:	e022      	b.n	80096a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009666:	2b00      	cmp	r3, #0
 8009668:	d002      	beq.n	8009670 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 fb6c 	bl	8009d48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	685a      	ldr	r2, [r3, #4]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800967e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	689a      	ldr	r2, [r3, #8]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800968e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f042 0201 	orr.w	r2, r2, #1
 800969e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 fbf3 	bl	8009e8c <UART_CheckIdleState>
 80096a6:	4603      	mov	r3, r0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3708      	adds	r7, #8
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b08a      	sub	sp, #40	; 0x28
 80096b4:	af02      	add	r7, sp, #8
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	603b      	str	r3, [r7, #0]
 80096bc:	4613      	mov	r3, r2
 80096be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096c4:	2b20      	cmp	r3, #32
 80096c6:	f040 8082 	bne.w	80097ce <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d002      	beq.n	80096d6 <HAL_UART_Transmit+0x26>
 80096d0:	88fb      	ldrh	r3, [r7, #6]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d101      	bne.n	80096da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	e07a      	b.n	80097d0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d101      	bne.n	80096e8 <HAL_UART_Transmit+0x38>
 80096e4:	2302      	movs	r3, #2
 80096e6:	e073      	b.n	80097d0 <HAL_UART_Transmit+0x120>
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2201      	movs	r2, #1
 80096ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2200      	movs	r2, #0
 80096f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2221      	movs	r2, #33	; 0x21
 80096fc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80096fe:	f7fa f949 	bl	8003994 <HAL_GetTick>
 8009702:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	88fa      	ldrh	r2, [r7, #6]
 8009708:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	88fa      	ldrh	r2, [r7, #6]
 8009710:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800971c:	d108      	bne.n	8009730 <HAL_UART_Transmit+0x80>
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	691b      	ldr	r3, [r3, #16]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d104      	bne.n	8009730 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009726:	2300      	movs	r3, #0
 8009728:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	61bb      	str	r3, [r7, #24]
 800972e:	e003      	b.n	8009738 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009734:	2300      	movs	r3, #0
 8009736:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2200      	movs	r2, #0
 800973c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009740:	e02d      	b.n	800979e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	9300      	str	r3, [sp, #0]
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	2200      	movs	r2, #0
 800974a:	2180      	movs	r1, #128	; 0x80
 800974c:	68f8      	ldr	r0, [r7, #12]
 800974e:	f000 fbe6 	bl	8009f1e <UART_WaitOnFlagUntilTimeout>
 8009752:	4603      	mov	r3, r0
 8009754:	2b00      	cmp	r3, #0
 8009756:	d001      	beq.n	800975c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009758:	2303      	movs	r3, #3
 800975a:	e039      	b.n	80097d0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d10b      	bne.n	800977a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009762:	69bb      	ldr	r3, [r7, #24]
 8009764:	881a      	ldrh	r2, [r3, #0]
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800976e:	b292      	uxth	r2, r2
 8009770:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009772:	69bb      	ldr	r3, [r7, #24]
 8009774:	3302      	adds	r3, #2
 8009776:	61bb      	str	r3, [r7, #24]
 8009778:	e008      	b.n	800978c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800977a:	69fb      	ldr	r3, [r7, #28]
 800977c:	781a      	ldrb	r2, [r3, #0]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	b292      	uxth	r2, r2
 8009784:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	3301      	adds	r3, #1
 800978a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009792:	b29b      	uxth	r3, r3
 8009794:	3b01      	subs	r3, #1
 8009796:	b29a      	uxth	r2, r3
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d1cb      	bne.n	8009742 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	2200      	movs	r2, #0
 80097b2:	2140      	movs	r1, #64	; 0x40
 80097b4:	68f8      	ldr	r0, [r7, #12]
 80097b6:	f000 fbb2 	bl	8009f1e <UART_WaitOnFlagUntilTimeout>
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d001      	beq.n	80097c4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80097c0:	2303      	movs	r3, #3
 80097c2:	e005      	b.n	80097d0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2220      	movs	r2, #32
 80097c8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80097ca:	2300      	movs	r3, #0
 80097cc:	e000      	b.n	80097d0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80097ce:	2302      	movs	r3, #2
  }
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3720      	adds	r7, #32
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097dc:	b08a      	sub	sp, #40	; 0x28
 80097de:	af00      	add	r7, sp, #0
 80097e0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80097e2:	2300      	movs	r3, #0
 80097e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	689a      	ldr	r2, [r3, #8]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	691b      	ldr	r3, [r3, #16]
 80097f0:	431a      	orrs	r2, r3
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	695b      	ldr	r3, [r3, #20]
 80097f6:	431a      	orrs	r2, r3
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	69db      	ldr	r3, [r3, #28]
 80097fc:	4313      	orrs	r3, r2
 80097fe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	4ba4      	ldr	r3, [pc, #656]	; (8009a98 <UART_SetConfig+0x2c0>)
 8009808:	4013      	ands	r3, r2
 800980a:	68fa      	ldr	r2, [r7, #12]
 800980c:	6812      	ldr	r2, [r2, #0]
 800980e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009810:	430b      	orrs	r3, r1
 8009812:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	68da      	ldr	r2, [r3, #12]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	430a      	orrs	r2, r1
 8009828:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	699b      	ldr	r3, [r3, #24]
 800982e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a99      	ldr	r2, [pc, #612]	; (8009a9c <UART_SetConfig+0x2c4>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d004      	beq.n	8009844 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6a1b      	ldr	r3, [r3, #32]
 800983e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009840:	4313      	orrs	r3, r2
 8009842:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009854:	430a      	orrs	r2, r1
 8009856:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a90      	ldr	r2, [pc, #576]	; (8009aa0 <UART_SetConfig+0x2c8>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d126      	bne.n	80098b0 <UART_SetConfig+0xd8>
 8009862:	4b90      	ldr	r3, [pc, #576]	; (8009aa4 <UART_SetConfig+0x2cc>)
 8009864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009868:	f003 0303 	and.w	r3, r3, #3
 800986c:	2b03      	cmp	r3, #3
 800986e:	d81b      	bhi.n	80098a8 <UART_SetConfig+0xd0>
 8009870:	a201      	add	r2, pc, #4	; (adr r2, 8009878 <UART_SetConfig+0xa0>)
 8009872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009876:	bf00      	nop
 8009878:	08009889 	.word	0x08009889
 800987c:	08009899 	.word	0x08009899
 8009880:	08009891 	.word	0x08009891
 8009884:	080098a1 	.word	0x080098a1
 8009888:	2301      	movs	r3, #1
 800988a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800988e:	e116      	b.n	8009abe <UART_SetConfig+0x2e6>
 8009890:	2302      	movs	r3, #2
 8009892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009896:	e112      	b.n	8009abe <UART_SetConfig+0x2e6>
 8009898:	2304      	movs	r3, #4
 800989a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800989e:	e10e      	b.n	8009abe <UART_SetConfig+0x2e6>
 80098a0:	2308      	movs	r3, #8
 80098a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098a6:	e10a      	b.n	8009abe <UART_SetConfig+0x2e6>
 80098a8:	2310      	movs	r3, #16
 80098aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098ae:	e106      	b.n	8009abe <UART_SetConfig+0x2e6>
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a7c      	ldr	r2, [pc, #496]	; (8009aa8 <UART_SetConfig+0x2d0>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d138      	bne.n	800992c <UART_SetConfig+0x154>
 80098ba:	4b7a      	ldr	r3, [pc, #488]	; (8009aa4 <UART_SetConfig+0x2cc>)
 80098bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098c0:	f003 030c 	and.w	r3, r3, #12
 80098c4:	2b0c      	cmp	r3, #12
 80098c6:	d82d      	bhi.n	8009924 <UART_SetConfig+0x14c>
 80098c8:	a201      	add	r2, pc, #4	; (adr r2, 80098d0 <UART_SetConfig+0xf8>)
 80098ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ce:	bf00      	nop
 80098d0:	08009905 	.word	0x08009905
 80098d4:	08009925 	.word	0x08009925
 80098d8:	08009925 	.word	0x08009925
 80098dc:	08009925 	.word	0x08009925
 80098e0:	08009915 	.word	0x08009915
 80098e4:	08009925 	.word	0x08009925
 80098e8:	08009925 	.word	0x08009925
 80098ec:	08009925 	.word	0x08009925
 80098f0:	0800990d 	.word	0x0800990d
 80098f4:	08009925 	.word	0x08009925
 80098f8:	08009925 	.word	0x08009925
 80098fc:	08009925 	.word	0x08009925
 8009900:	0800991d 	.word	0x0800991d
 8009904:	2300      	movs	r3, #0
 8009906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800990a:	e0d8      	b.n	8009abe <UART_SetConfig+0x2e6>
 800990c:	2302      	movs	r3, #2
 800990e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009912:	e0d4      	b.n	8009abe <UART_SetConfig+0x2e6>
 8009914:	2304      	movs	r3, #4
 8009916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800991a:	e0d0      	b.n	8009abe <UART_SetConfig+0x2e6>
 800991c:	2308      	movs	r3, #8
 800991e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009922:	e0cc      	b.n	8009abe <UART_SetConfig+0x2e6>
 8009924:	2310      	movs	r3, #16
 8009926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800992a:	e0c8      	b.n	8009abe <UART_SetConfig+0x2e6>
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a5e      	ldr	r2, [pc, #376]	; (8009aac <UART_SetConfig+0x2d4>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d125      	bne.n	8009982 <UART_SetConfig+0x1aa>
 8009936:	4b5b      	ldr	r3, [pc, #364]	; (8009aa4 <UART_SetConfig+0x2cc>)
 8009938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800993c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009940:	2b30      	cmp	r3, #48	; 0x30
 8009942:	d016      	beq.n	8009972 <UART_SetConfig+0x19a>
 8009944:	2b30      	cmp	r3, #48	; 0x30
 8009946:	d818      	bhi.n	800997a <UART_SetConfig+0x1a2>
 8009948:	2b20      	cmp	r3, #32
 800994a:	d00a      	beq.n	8009962 <UART_SetConfig+0x18a>
 800994c:	2b20      	cmp	r3, #32
 800994e:	d814      	bhi.n	800997a <UART_SetConfig+0x1a2>
 8009950:	2b00      	cmp	r3, #0
 8009952:	d002      	beq.n	800995a <UART_SetConfig+0x182>
 8009954:	2b10      	cmp	r3, #16
 8009956:	d008      	beq.n	800996a <UART_SetConfig+0x192>
 8009958:	e00f      	b.n	800997a <UART_SetConfig+0x1a2>
 800995a:	2300      	movs	r3, #0
 800995c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009960:	e0ad      	b.n	8009abe <UART_SetConfig+0x2e6>
 8009962:	2302      	movs	r3, #2
 8009964:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009968:	e0a9      	b.n	8009abe <UART_SetConfig+0x2e6>
 800996a:	2304      	movs	r3, #4
 800996c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009970:	e0a5      	b.n	8009abe <UART_SetConfig+0x2e6>
 8009972:	2308      	movs	r3, #8
 8009974:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009978:	e0a1      	b.n	8009abe <UART_SetConfig+0x2e6>
 800997a:	2310      	movs	r3, #16
 800997c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009980:	e09d      	b.n	8009abe <UART_SetConfig+0x2e6>
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a4a      	ldr	r2, [pc, #296]	; (8009ab0 <UART_SetConfig+0x2d8>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d125      	bne.n	80099d8 <UART_SetConfig+0x200>
 800998c:	4b45      	ldr	r3, [pc, #276]	; (8009aa4 <UART_SetConfig+0x2cc>)
 800998e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009992:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009996:	2bc0      	cmp	r3, #192	; 0xc0
 8009998:	d016      	beq.n	80099c8 <UART_SetConfig+0x1f0>
 800999a:	2bc0      	cmp	r3, #192	; 0xc0
 800999c:	d818      	bhi.n	80099d0 <UART_SetConfig+0x1f8>
 800999e:	2b80      	cmp	r3, #128	; 0x80
 80099a0:	d00a      	beq.n	80099b8 <UART_SetConfig+0x1e0>
 80099a2:	2b80      	cmp	r3, #128	; 0x80
 80099a4:	d814      	bhi.n	80099d0 <UART_SetConfig+0x1f8>
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d002      	beq.n	80099b0 <UART_SetConfig+0x1d8>
 80099aa:	2b40      	cmp	r3, #64	; 0x40
 80099ac:	d008      	beq.n	80099c0 <UART_SetConfig+0x1e8>
 80099ae:	e00f      	b.n	80099d0 <UART_SetConfig+0x1f8>
 80099b0:	2300      	movs	r3, #0
 80099b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099b6:	e082      	b.n	8009abe <UART_SetConfig+0x2e6>
 80099b8:	2302      	movs	r3, #2
 80099ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099be:	e07e      	b.n	8009abe <UART_SetConfig+0x2e6>
 80099c0:	2304      	movs	r3, #4
 80099c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099c6:	e07a      	b.n	8009abe <UART_SetConfig+0x2e6>
 80099c8:	2308      	movs	r3, #8
 80099ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099ce:	e076      	b.n	8009abe <UART_SetConfig+0x2e6>
 80099d0:	2310      	movs	r3, #16
 80099d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099d6:	e072      	b.n	8009abe <UART_SetConfig+0x2e6>
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a35      	ldr	r2, [pc, #212]	; (8009ab4 <UART_SetConfig+0x2dc>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d12a      	bne.n	8009a38 <UART_SetConfig+0x260>
 80099e2:	4b30      	ldr	r3, [pc, #192]	; (8009aa4 <UART_SetConfig+0x2cc>)
 80099e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099f0:	d01a      	beq.n	8009a28 <UART_SetConfig+0x250>
 80099f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099f6:	d81b      	bhi.n	8009a30 <UART_SetConfig+0x258>
 80099f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099fc:	d00c      	beq.n	8009a18 <UART_SetConfig+0x240>
 80099fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a02:	d815      	bhi.n	8009a30 <UART_SetConfig+0x258>
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d003      	beq.n	8009a10 <UART_SetConfig+0x238>
 8009a08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a0c:	d008      	beq.n	8009a20 <UART_SetConfig+0x248>
 8009a0e:	e00f      	b.n	8009a30 <UART_SetConfig+0x258>
 8009a10:	2300      	movs	r3, #0
 8009a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a16:	e052      	b.n	8009abe <UART_SetConfig+0x2e6>
 8009a18:	2302      	movs	r3, #2
 8009a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a1e:	e04e      	b.n	8009abe <UART_SetConfig+0x2e6>
 8009a20:	2304      	movs	r3, #4
 8009a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a26:	e04a      	b.n	8009abe <UART_SetConfig+0x2e6>
 8009a28:	2308      	movs	r3, #8
 8009a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a2e:	e046      	b.n	8009abe <UART_SetConfig+0x2e6>
 8009a30:	2310      	movs	r3, #16
 8009a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a36:	e042      	b.n	8009abe <UART_SetConfig+0x2e6>
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a17      	ldr	r2, [pc, #92]	; (8009a9c <UART_SetConfig+0x2c4>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d13a      	bne.n	8009ab8 <UART_SetConfig+0x2e0>
 8009a42:	4b18      	ldr	r3, [pc, #96]	; (8009aa4 <UART_SetConfig+0x2cc>)
 8009a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009a4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a50:	d01a      	beq.n	8009a88 <UART_SetConfig+0x2b0>
 8009a52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a56:	d81b      	bhi.n	8009a90 <UART_SetConfig+0x2b8>
 8009a58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a5c:	d00c      	beq.n	8009a78 <UART_SetConfig+0x2a0>
 8009a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a62:	d815      	bhi.n	8009a90 <UART_SetConfig+0x2b8>
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d003      	beq.n	8009a70 <UART_SetConfig+0x298>
 8009a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a6c:	d008      	beq.n	8009a80 <UART_SetConfig+0x2a8>
 8009a6e:	e00f      	b.n	8009a90 <UART_SetConfig+0x2b8>
 8009a70:	2300      	movs	r3, #0
 8009a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a76:	e022      	b.n	8009abe <UART_SetConfig+0x2e6>
 8009a78:	2302      	movs	r3, #2
 8009a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a7e:	e01e      	b.n	8009abe <UART_SetConfig+0x2e6>
 8009a80:	2304      	movs	r3, #4
 8009a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a86:	e01a      	b.n	8009abe <UART_SetConfig+0x2e6>
 8009a88:	2308      	movs	r3, #8
 8009a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a8e:	e016      	b.n	8009abe <UART_SetConfig+0x2e6>
 8009a90:	2310      	movs	r3, #16
 8009a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a96:	e012      	b.n	8009abe <UART_SetConfig+0x2e6>
 8009a98:	efff69f3 	.word	0xefff69f3
 8009a9c:	40008000 	.word	0x40008000
 8009aa0:	40013800 	.word	0x40013800
 8009aa4:	40021000 	.word	0x40021000
 8009aa8:	40004400 	.word	0x40004400
 8009aac:	40004800 	.word	0x40004800
 8009ab0:	40004c00 	.word	0x40004c00
 8009ab4:	40005000 	.word	0x40005000
 8009ab8:	2310      	movs	r3, #16
 8009aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a9f      	ldr	r2, [pc, #636]	; (8009d40 <UART_SetConfig+0x568>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d17a      	bne.n	8009bbe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009ac8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009acc:	2b08      	cmp	r3, #8
 8009ace:	d824      	bhi.n	8009b1a <UART_SetConfig+0x342>
 8009ad0:	a201      	add	r2, pc, #4	; (adr r2, 8009ad8 <UART_SetConfig+0x300>)
 8009ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad6:	bf00      	nop
 8009ad8:	08009afd 	.word	0x08009afd
 8009adc:	08009b1b 	.word	0x08009b1b
 8009ae0:	08009b05 	.word	0x08009b05
 8009ae4:	08009b1b 	.word	0x08009b1b
 8009ae8:	08009b0b 	.word	0x08009b0b
 8009aec:	08009b1b 	.word	0x08009b1b
 8009af0:	08009b1b 	.word	0x08009b1b
 8009af4:	08009b1b 	.word	0x08009b1b
 8009af8:	08009b13 	.word	0x08009b13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009afc:	f7fd fa30 	bl	8006f60 <HAL_RCC_GetPCLK1Freq>
 8009b00:	61f8      	str	r0, [r7, #28]
        break;
 8009b02:	e010      	b.n	8009b26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b04:	4b8f      	ldr	r3, [pc, #572]	; (8009d44 <UART_SetConfig+0x56c>)
 8009b06:	61fb      	str	r3, [r7, #28]
        break;
 8009b08:	e00d      	b.n	8009b26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b0a:	f7fd f991 	bl	8006e30 <HAL_RCC_GetSysClockFreq>
 8009b0e:	61f8      	str	r0, [r7, #28]
        break;
 8009b10:	e009      	b.n	8009b26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b16:	61fb      	str	r3, [r7, #28]
        break;
 8009b18:	e005      	b.n	8009b26 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009b24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	f000 80fb 	beq.w	8009d24 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	685a      	ldr	r2, [r3, #4]
 8009b32:	4613      	mov	r3, r2
 8009b34:	005b      	lsls	r3, r3, #1
 8009b36:	4413      	add	r3, r2
 8009b38:	69fa      	ldr	r2, [r7, #28]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d305      	bcc.n	8009b4a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009b44:	69fa      	ldr	r2, [r7, #28]
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d903      	bls.n	8009b52 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009b50:	e0e8      	b.n	8009d24 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	2200      	movs	r2, #0
 8009b56:	461c      	mov	r4, r3
 8009b58:	4615      	mov	r5, r2
 8009b5a:	f04f 0200 	mov.w	r2, #0
 8009b5e:	f04f 0300 	mov.w	r3, #0
 8009b62:	022b      	lsls	r3, r5, #8
 8009b64:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009b68:	0222      	lsls	r2, r4, #8
 8009b6a:	68f9      	ldr	r1, [r7, #12]
 8009b6c:	6849      	ldr	r1, [r1, #4]
 8009b6e:	0849      	lsrs	r1, r1, #1
 8009b70:	2000      	movs	r0, #0
 8009b72:	4688      	mov	r8, r1
 8009b74:	4681      	mov	r9, r0
 8009b76:	eb12 0a08 	adds.w	sl, r2, r8
 8009b7a:	eb43 0b09 	adc.w	fp, r3, r9
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	603b      	str	r3, [r7, #0]
 8009b86:	607a      	str	r2, [r7, #4]
 8009b88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b8c:	4650      	mov	r0, sl
 8009b8e:	4659      	mov	r1, fp
 8009b90:	f7f7 f87a 	bl	8000c88 <__aeabi_uldivmod>
 8009b94:	4602      	mov	r2, r0
 8009b96:	460b      	mov	r3, r1
 8009b98:	4613      	mov	r3, r2
 8009b9a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b9c:	69bb      	ldr	r3, [r7, #24]
 8009b9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ba2:	d308      	bcc.n	8009bb6 <UART_SetConfig+0x3de>
 8009ba4:	69bb      	ldr	r3, [r7, #24]
 8009ba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009baa:	d204      	bcs.n	8009bb6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	69ba      	ldr	r2, [r7, #24]
 8009bb2:	60da      	str	r2, [r3, #12]
 8009bb4:	e0b6      	b.n	8009d24 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009bbc:	e0b2      	b.n	8009d24 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	69db      	ldr	r3, [r3, #28]
 8009bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bc6:	d15e      	bne.n	8009c86 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8009bc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009bcc:	2b08      	cmp	r3, #8
 8009bce:	d828      	bhi.n	8009c22 <UART_SetConfig+0x44a>
 8009bd0:	a201      	add	r2, pc, #4	; (adr r2, 8009bd8 <UART_SetConfig+0x400>)
 8009bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd6:	bf00      	nop
 8009bd8:	08009bfd 	.word	0x08009bfd
 8009bdc:	08009c05 	.word	0x08009c05
 8009be0:	08009c0d 	.word	0x08009c0d
 8009be4:	08009c23 	.word	0x08009c23
 8009be8:	08009c13 	.word	0x08009c13
 8009bec:	08009c23 	.word	0x08009c23
 8009bf0:	08009c23 	.word	0x08009c23
 8009bf4:	08009c23 	.word	0x08009c23
 8009bf8:	08009c1b 	.word	0x08009c1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bfc:	f7fd f9b0 	bl	8006f60 <HAL_RCC_GetPCLK1Freq>
 8009c00:	61f8      	str	r0, [r7, #28]
        break;
 8009c02:	e014      	b.n	8009c2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c04:	f7fd f9c2 	bl	8006f8c <HAL_RCC_GetPCLK2Freq>
 8009c08:	61f8      	str	r0, [r7, #28]
        break;
 8009c0a:	e010      	b.n	8009c2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c0c:	4b4d      	ldr	r3, [pc, #308]	; (8009d44 <UART_SetConfig+0x56c>)
 8009c0e:	61fb      	str	r3, [r7, #28]
        break;
 8009c10:	e00d      	b.n	8009c2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c12:	f7fd f90d 	bl	8006e30 <HAL_RCC_GetSysClockFreq>
 8009c16:	61f8      	str	r0, [r7, #28]
        break;
 8009c18:	e009      	b.n	8009c2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c1e:	61fb      	str	r3, [r7, #28]
        break;
 8009c20:	e005      	b.n	8009c2e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8009c22:	2300      	movs	r3, #0
 8009c24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009c26:	2301      	movs	r3, #1
 8009c28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009c2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c2e:	69fb      	ldr	r3, [r7, #28]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d077      	beq.n	8009d24 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	005a      	lsls	r2, r3, #1
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	085b      	lsrs	r3, r3, #1
 8009c3e:	441a      	add	r2, r3
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c48:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c4a:	69bb      	ldr	r3, [r7, #24]
 8009c4c:	2b0f      	cmp	r3, #15
 8009c4e:	d916      	bls.n	8009c7e <UART_SetConfig+0x4a6>
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c56:	d212      	bcs.n	8009c7e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	f023 030f 	bic.w	r3, r3, #15
 8009c60:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c62:	69bb      	ldr	r3, [r7, #24]
 8009c64:	085b      	lsrs	r3, r3, #1
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	f003 0307 	and.w	r3, r3, #7
 8009c6c:	b29a      	uxth	r2, r3
 8009c6e:	8afb      	ldrh	r3, [r7, #22]
 8009c70:	4313      	orrs	r3, r2
 8009c72:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	8afa      	ldrh	r2, [r7, #22]
 8009c7a:	60da      	str	r2, [r3, #12]
 8009c7c:	e052      	b.n	8009d24 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009c84:	e04e      	b.n	8009d24 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c8a:	2b08      	cmp	r3, #8
 8009c8c:	d827      	bhi.n	8009cde <UART_SetConfig+0x506>
 8009c8e:	a201      	add	r2, pc, #4	; (adr r2, 8009c94 <UART_SetConfig+0x4bc>)
 8009c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c94:	08009cb9 	.word	0x08009cb9
 8009c98:	08009cc1 	.word	0x08009cc1
 8009c9c:	08009cc9 	.word	0x08009cc9
 8009ca0:	08009cdf 	.word	0x08009cdf
 8009ca4:	08009ccf 	.word	0x08009ccf
 8009ca8:	08009cdf 	.word	0x08009cdf
 8009cac:	08009cdf 	.word	0x08009cdf
 8009cb0:	08009cdf 	.word	0x08009cdf
 8009cb4:	08009cd7 	.word	0x08009cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cb8:	f7fd f952 	bl	8006f60 <HAL_RCC_GetPCLK1Freq>
 8009cbc:	61f8      	str	r0, [r7, #28]
        break;
 8009cbe:	e014      	b.n	8009cea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cc0:	f7fd f964 	bl	8006f8c <HAL_RCC_GetPCLK2Freq>
 8009cc4:	61f8      	str	r0, [r7, #28]
        break;
 8009cc6:	e010      	b.n	8009cea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009cc8:	4b1e      	ldr	r3, [pc, #120]	; (8009d44 <UART_SetConfig+0x56c>)
 8009cca:	61fb      	str	r3, [r7, #28]
        break;
 8009ccc:	e00d      	b.n	8009cea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009cce:	f7fd f8af 	bl	8006e30 <HAL_RCC_GetSysClockFreq>
 8009cd2:	61f8      	str	r0, [r7, #28]
        break;
 8009cd4:	e009      	b.n	8009cea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cda:	61fb      	str	r3, [r7, #28]
        break;
 8009cdc:	e005      	b.n	8009cea <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009ce8:	bf00      	nop
    }

    if (pclk != 0U)
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d019      	beq.n	8009d24 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	085a      	lsrs	r2, r3, #1
 8009cf6:	69fb      	ldr	r3, [r7, #28]
 8009cf8:	441a      	add	r2, r3
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d02:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d04:	69bb      	ldr	r3, [r7, #24]
 8009d06:	2b0f      	cmp	r3, #15
 8009d08:	d909      	bls.n	8009d1e <UART_SetConfig+0x546>
 8009d0a:	69bb      	ldr	r3, [r7, #24]
 8009d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d10:	d205      	bcs.n	8009d1e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d12:	69bb      	ldr	r3, [r7, #24]
 8009d14:	b29a      	uxth	r2, r3
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	60da      	str	r2, [r3, #12]
 8009d1c:	e002      	b.n	8009d24 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2200      	movs	r2, #0
 8009d28:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009d30:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3728      	adds	r7, #40	; 0x28
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d3e:	bf00      	nop
 8009d40:	40008000 	.word	0x40008000
 8009d44:	00f42400 	.word	0x00f42400

08009d48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d54:	f003 0301 	and.w	r3, r3, #1
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d00a      	beq.n	8009d72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	430a      	orrs	r2, r1
 8009d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d76:	f003 0302 	and.w	r3, r3, #2
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00a      	beq.n	8009d94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	430a      	orrs	r2, r1
 8009d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d98:	f003 0304 	and.w	r3, r3, #4
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00a      	beq.n	8009db6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	430a      	orrs	r2, r1
 8009db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dba:	f003 0308 	and.w	r3, r3, #8
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00a      	beq.n	8009dd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	430a      	orrs	r2, r1
 8009dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ddc:	f003 0310 	and.w	r3, r3, #16
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d00a      	beq.n	8009dfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	430a      	orrs	r2, r1
 8009df8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfe:	f003 0320 	and.w	r3, r3, #32
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00a      	beq.n	8009e1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	430a      	orrs	r2, r1
 8009e1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d01a      	beq.n	8009e5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	430a      	orrs	r2, r1
 8009e3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e46:	d10a      	bne.n	8009e5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	430a      	orrs	r2, r1
 8009e5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00a      	beq.n	8009e80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	430a      	orrs	r2, r1
 8009e7e:	605a      	str	r2, [r3, #4]
  }
}
 8009e80:	bf00      	nop
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b086      	sub	sp, #24
 8009e90:	af02      	add	r7, sp, #8
 8009e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e9c:	f7f9 fd7a 	bl	8003994 <HAL_GetTick>
 8009ea0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f003 0308 	and.w	r3, r3, #8
 8009eac:	2b08      	cmp	r3, #8
 8009eae:	d10e      	bne.n	8009ece <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009eb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009eb4:	9300      	str	r3, [sp, #0]
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 f82d 	bl	8009f1e <UART_WaitOnFlagUntilTimeout>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d001      	beq.n	8009ece <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009eca:	2303      	movs	r3, #3
 8009ecc:	e023      	b.n	8009f16 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f003 0304 	and.w	r3, r3, #4
 8009ed8:	2b04      	cmp	r3, #4
 8009eda:	d10e      	bne.n	8009efa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009edc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ee0:	9300      	str	r3, [sp, #0]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 f817 	bl	8009f1e <UART_WaitOnFlagUntilTimeout>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d001      	beq.n	8009efa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	e00d      	b.n	8009f16 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2220      	movs	r2, #32
 8009efe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2220      	movs	r2, #32
 8009f04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009f14:	2300      	movs	r3, #0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3710      	adds	r7, #16
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b09c      	sub	sp, #112	; 0x70
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	60f8      	str	r0, [r7, #12]
 8009f26:	60b9      	str	r1, [r7, #8]
 8009f28:	603b      	str	r3, [r7, #0]
 8009f2a:	4613      	mov	r3, r2
 8009f2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f2e:	e0a5      	b.n	800a07c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f36:	f000 80a1 	beq.w	800a07c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f3a:	f7f9 fd2b 	bl	8003994 <HAL_GetTick>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	1ad3      	subs	r3, r2, r3
 8009f44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d302      	bcc.n	8009f50 <UART_WaitOnFlagUntilTimeout+0x32>
 8009f4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d13e      	bne.n	8009fce <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f58:	e853 3f00 	ldrex	r3, [r3]
 8009f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009f64:	667b      	str	r3, [r7, #100]	; 0x64
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f70:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009f76:	e841 2300 	strex	r3, r2, [r1]
 8009f7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d1e6      	bne.n	8009f50 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	3308      	adds	r3, #8
 8009f88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f8c:	e853 3f00 	ldrex	r3, [r3]
 8009f90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f94:	f023 0301 	bic.w	r3, r3, #1
 8009f98:	663b      	str	r3, [r7, #96]	; 0x60
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	3308      	adds	r3, #8
 8009fa0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009fa2:	64ba      	str	r2, [r7, #72]	; 0x48
 8009fa4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009fa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009faa:	e841 2300 	strex	r3, r2, [r1]
 8009fae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1e5      	bne.n	8009f82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2220      	movs	r2, #32
 8009fba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2220      	movs	r2, #32
 8009fc0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009fca:	2303      	movs	r3, #3
 8009fcc:	e067      	b.n	800a09e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f003 0304 	and.w	r3, r3, #4
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d04f      	beq.n	800a07c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	69db      	ldr	r3, [r3, #28]
 8009fe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fe6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fea:	d147      	bne.n	800a07c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ff4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffe:	e853 3f00 	ldrex	r3, [r3]
 800a002:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a006:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a00a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	461a      	mov	r2, r3
 800a012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a014:	637b      	str	r3, [r7, #52]	; 0x34
 800a016:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a018:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a01a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a01c:	e841 2300 	strex	r3, r2, [r1]
 800a020:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a024:	2b00      	cmp	r3, #0
 800a026:	d1e6      	bne.n	8009ff6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	3308      	adds	r3, #8
 800a02e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	e853 3f00 	ldrex	r3, [r3]
 800a036:	613b      	str	r3, [r7, #16]
   return(result);
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	f023 0301 	bic.w	r3, r3, #1
 800a03e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	3308      	adds	r3, #8
 800a046:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a048:	623a      	str	r2, [r7, #32]
 800a04a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04c:	69f9      	ldr	r1, [r7, #28]
 800a04e:	6a3a      	ldr	r2, [r7, #32]
 800a050:	e841 2300 	strex	r3, r2, [r1]
 800a054:	61bb      	str	r3, [r7, #24]
   return(result);
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d1e5      	bne.n	800a028 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2220      	movs	r2, #32
 800a060:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2220      	movs	r2, #32
 800a066:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2220      	movs	r2, #32
 800a06c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2200      	movs	r2, #0
 800a074:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a078:	2303      	movs	r3, #3
 800a07a:	e010      	b.n	800a09e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	69da      	ldr	r2, [r3, #28]
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	4013      	ands	r3, r2
 800a086:	68ba      	ldr	r2, [r7, #8]
 800a088:	429a      	cmp	r2, r3
 800a08a:	bf0c      	ite	eq
 800a08c:	2301      	moveq	r3, #1
 800a08e:	2300      	movne	r3, #0
 800a090:	b2db      	uxtb	r3, r3
 800a092:	461a      	mov	r2, r3
 800a094:	79fb      	ldrb	r3, [r7, #7]
 800a096:	429a      	cmp	r2, r3
 800a098:	f43f af4a 	beq.w	8009f30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a09c:	2300      	movs	r3, #0
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3770      	adds	r7, #112	; 0x70
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
	...

0800a0a8 <__errno>:
 800a0a8:	4b01      	ldr	r3, [pc, #4]	; (800a0b0 <__errno+0x8>)
 800a0aa:	6818      	ldr	r0, [r3, #0]
 800a0ac:	4770      	bx	lr
 800a0ae:	bf00      	nop
 800a0b0:	20000034 	.word	0x20000034

0800a0b4 <__libc_init_array>:
 800a0b4:	b570      	push	{r4, r5, r6, lr}
 800a0b6:	4d0d      	ldr	r5, [pc, #52]	; (800a0ec <__libc_init_array+0x38>)
 800a0b8:	4c0d      	ldr	r4, [pc, #52]	; (800a0f0 <__libc_init_array+0x3c>)
 800a0ba:	1b64      	subs	r4, r4, r5
 800a0bc:	10a4      	asrs	r4, r4, #2
 800a0be:	2600      	movs	r6, #0
 800a0c0:	42a6      	cmp	r6, r4
 800a0c2:	d109      	bne.n	800a0d8 <__libc_init_array+0x24>
 800a0c4:	4d0b      	ldr	r5, [pc, #44]	; (800a0f4 <__libc_init_array+0x40>)
 800a0c6:	4c0c      	ldr	r4, [pc, #48]	; (800a0f8 <__libc_init_array+0x44>)
 800a0c8:	f006 fc00 	bl	80108cc <_init>
 800a0cc:	1b64      	subs	r4, r4, r5
 800a0ce:	10a4      	asrs	r4, r4, #2
 800a0d0:	2600      	movs	r6, #0
 800a0d2:	42a6      	cmp	r6, r4
 800a0d4:	d105      	bne.n	800a0e2 <__libc_init_array+0x2e>
 800a0d6:	bd70      	pop	{r4, r5, r6, pc}
 800a0d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0dc:	4798      	blx	r3
 800a0de:	3601      	adds	r6, #1
 800a0e0:	e7ee      	b.n	800a0c0 <__libc_init_array+0xc>
 800a0e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0e6:	4798      	blx	r3
 800a0e8:	3601      	adds	r6, #1
 800a0ea:	e7f2      	b.n	800a0d2 <__libc_init_array+0x1e>
 800a0ec:	08011108 	.word	0x08011108
 800a0f0:	08011108 	.word	0x08011108
 800a0f4:	08011108 	.word	0x08011108
 800a0f8:	0801110c 	.word	0x0801110c

0800a0fc <memset>:
 800a0fc:	4402      	add	r2, r0
 800a0fe:	4603      	mov	r3, r0
 800a100:	4293      	cmp	r3, r2
 800a102:	d100      	bne.n	800a106 <memset+0xa>
 800a104:	4770      	bx	lr
 800a106:	f803 1b01 	strb.w	r1, [r3], #1
 800a10a:	e7f9      	b.n	800a100 <memset+0x4>

0800a10c <__cvt>:
 800a10c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a110:	ec55 4b10 	vmov	r4, r5, d0
 800a114:	2d00      	cmp	r5, #0
 800a116:	460e      	mov	r6, r1
 800a118:	4619      	mov	r1, r3
 800a11a:	462b      	mov	r3, r5
 800a11c:	bfbb      	ittet	lt
 800a11e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a122:	461d      	movlt	r5, r3
 800a124:	2300      	movge	r3, #0
 800a126:	232d      	movlt	r3, #45	; 0x2d
 800a128:	700b      	strb	r3, [r1, #0]
 800a12a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a12c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a130:	4691      	mov	r9, r2
 800a132:	f023 0820 	bic.w	r8, r3, #32
 800a136:	bfbc      	itt	lt
 800a138:	4622      	movlt	r2, r4
 800a13a:	4614      	movlt	r4, r2
 800a13c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a140:	d005      	beq.n	800a14e <__cvt+0x42>
 800a142:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a146:	d100      	bne.n	800a14a <__cvt+0x3e>
 800a148:	3601      	adds	r6, #1
 800a14a:	2102      	movs	r1, #2
 800a14c:	e000      	b.n	800a150 <__cvt+0x44>
 800a14e:	2103      	movs	r1, #3
 800a150:	ab03      	add	r3, sp, #12
 800a152:	9301      	str	r3, [sp, #4]
 800a154:	ab02      	add	r3, sp, #8
 800a156:	9300      	str	r3, [sp, #0]
 800a158:	ec45 4b10 	vmov	d0, r4, r5
 800a15c:	4653      	mov	r3, sl
 800a15e:	4632      	mov	r2, r6
 800a160:	f001 fde2 	bl	800bd28 <_dtoa_r>
 800a164:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a168:	4607      	mov	r7, r0
 800a16a:	d102      	bne.n	800a172 <__cvt+0x66>
 800a16c:	f019 0f01 	tst.w	r9, #1
 800a170:	d022      	beq.n	800a1b8 <__cvt+0xac>
 800a172:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a176:	eb07 0906 	add.w	r9, r7, r6
 800a17a:	d110      	bne.n	800a19e <__cvt+0x92>
 800a17c:	783b      	ldrb	r3, [r7, #0]
 800a17e:	2b30      	cmp	r3, #48	; 0x30
 800a180:	d10a      	bne.n	800a198 <__cvt+0x8c>
 800a182:	2200      	movs	r2, #0
 800a184:	2300      	movs	r3, #0
 800a186:	4620      	mov	r0, r4
 800a188:	4629      	mov	r1, r5
 800a18a:	f7f6 fc9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a18e:	b918      	cbnz	r0, 800a198 <__cvt+0x8c>
 800a190:	f1c6 0601 	rsb	r6, r6, #1
 800a194:	f8ca 6000 	str.w	r6, [sl]
 800a198:	f8da 3000 	ldr.w	r3, [sl]
 800a19c:	4499      	add	r9, r3
 800a19e:	2200      	movs	r2, #0
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	4629      	mov	r1, r5
 800a1a6:	f7f6 fc8f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1aa:	b108      	cbz	r0, 800a1b0 <__cvt+0xa4>
 800a1ac:	f8cd 900c 	str.w	r9, [sp, #12]
 800a1b0:	2230      	movs	r2, #48	; 0x30
 800a1b2:	9b03      	ldr	r3, [sp, #12]
 800a1b4:	454b      	cmp	r3, r9
 800a1b6:	d307      	bcc.n	800a1c8 <__cvt+0xbc>
 800a1b8:	9b03      	ldr	r3, [sp, #12]
 800a1ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a1bc:	1bdb      	subs	r3, r3, r7
 800a1be:	4638      	mov	r0, r7
 800a1c0:	6013      	str	r3, [r2, #0]
 800a1c2:	b004      	add	sp, #16
 800a1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1c8:	1c59      	adds	r1, r3, #1
 800a1ca:	9103      	str	r1, [sp, #12]
 800a1cc:	701a      	strb	r2, [r3, #0]
 800a1ce:	e7f0      	b.n	800a1b2 <__cvt+0xa6>

0800a1d0 <__exponent>:
 800a1d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2900      	cmp	r1, #0
 800a1d6:	bfb8      	it	lt
 800a1d8:	4249      	neglt	r1, r1
 800a1da:	f803 2b02 	strb.w	r2, [r3], #2
 800a1de:	bfb4      	ite	lt
 800a1e0:	222d      	movlt	r2, #45	; 0x2d
 800a1e2:	222b      	movge	r2, #43	; 0x2b
 800a1e4:	2909      	cmp	r1, #9
 800a1e6:	7042      	strb	r2, [r0, #1]
 800a1e8:	dd2a      	ble.n	800a240 <__exponent+0x70>
 800a1ea:	f10d 0407 	add.w	r4, sp, #7
 800a1ee:	46a4      	mov	ip, r4
 800a1f0:	270a      	movs	r7, #10
 800a1f2:	46a6      	mov	lr, r4
 800a1f4:	460a      	mov	r2, r1
 800a1f6:	fb91 f6f7 	sdiv	r6, r1, r7
 800a1fa:	fb07 1516 	mls	r5, r7, r6, r1
 800a1fe:	3530      	adds	r5, #48	; 0x30
 800a200:	2a63      	cmp	r2, #99	; 0x63
 800a202:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a206:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a20a:	4631      	mov	r1, r6
 800a20c:	dcf1      	bgt.n	800a1f2 <__exponent+0x22>
 800a20e:	3130      	adds	r1, #48	; 0x30
 800a210:	f1ae 0502 	sub.w	r5, lr, #2
 800a214:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a218:	1c44      	adds	r4, r0, #1
 800a21a:	4629      	mov	r1, r5
 800a21c:	4561      	cmp	r1, ip
 800a21e:	d30a      	bcc.n	800a236 <__exponent+0x66>
 800a220:	f10d 0209 	add.w	r2, sp, #9
 800a224:	eba2 020e 	sub.w	r2, r2, lr
 800a228:	4565      	cmp	r5, ip
 800a22a:	bf88      	it	hi
 800a22c:	2200      	movhi	r2, #0
 800a22e:	4413      	add	r3, r2
 800a230:	1a18      	subs	r0, r3, r0
 800a232:	b003      	add	sp, #12
 800a234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a236:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a23a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a23e:	e7ed      	b.n	800a21c <__exponent+0x4c>
 800a240:	2330      	movs	r3, #48	; 0x30
 800a242:	3130      	adds	r1, #48	; 0x30
 800a244:	7083      	strb	r3, [r0, #2]
 800a246:	70c1      	strb	r1, [r0, #3]
 800a248:	1d03      	adds	r3, r0, #4
 800a24a:	e7f1      	b.n	800a230 <__exponent+0x60>

0800a24c <_printf_float>:
 800a24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a250:	ed2d 8b02 	vpush	{d8}
 800a254:	b08d      	sub	sp, #52	; 0x34
 800a256:	460c      	mov	r4, r1
 800a258:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a25c:	4616      	mov	r6, r2
 800a25e:	461f      	mov	r7, r3
 800a260:	4605      	mov	r5, r0
 800a262:	f002 febf 	bl	800cfe4 <_localeconv_r>
 800a266:	f8d0 a000 	ldr.w	sl, [r0]
 800a26a:	4650      	mov	r0, sl
 800a26c:	f7f5 ffb0 	bl	80001d0 <strlen>
 800a270:	2300      	movs	r3, #0
 800a272:	930a      	str	r3, [sp, #40]	; 0x28
 800a274:	6823      	ldr	r3, [r4, #0]
 800a276:	9305      	str	r3, [sp, #20]
 800a278:	f8d8 3000 	ldr.w	r3, [r8]
 800a27c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a280:	3307      	adds	r3, #7
 800a282:	f023 0307 	bic.w	r3, r3, #7
 800a286:	f103 0208 	add.w	r2, r3, #8
 800a28a:	f8c8 2000 	str.w	r2, [r8]
 800a28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a292:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a296:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a29a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a29e:	9307      	str	r3, [sp, #28]
 800a2a0:	f8cd 8018 	str.w	r8, [sp, #24]
 800a2a4:	ee08 0a10 	vmov	s16, r0
 800a2a8:	4b9f      	ldr	r3, [pc, #636]	; (800a528 <_printf_float+0x2dc>)
 800a2aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a2b2:	f7f6 fc3b 	bl	8000b2c <__aeabi_dcmpun>
 800a2b6:	bb88      	cbnz	r0, 800a31c <_printf_float+0xd0>
 800a2b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2bc:	4b9a      	ldr	r3, [pc, #616]	; (800a528 <_printf_float+0x2dc>)
 800a2be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a2c2:	f7f6 fc15 	bl	8000af0 <__aeabi_dcmple>
 800a2c6:	bb48      	cbnz	r0, 800a31c <_printf_float+0xd0>
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	4640      	mov	r0, r8
 800a2ce:	4649      	mov	r1, r9
 800a2d0:	f7f6 fc04 	bl	8000adc <__aeabi_dcmplt>
 800a2d4:	b110      	cbz	r0, 800a2dc <_printf_float+0x90>
 800a2d6:	232d      	movs	r3, #45	; 0x2d
 800a2d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2dc:	4b93      	ldr	r3, [pc, #588]	; (800a52c <_printf_float+0x2e0>)
 800a2de:	4894      	ldr	r0, [pc, #592]	; (800a530 <_printf_float+0x2e4>)
 800a2e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a2e4:	bf94      	ite	ls
 800a2e6:	4698      	movls	r8, r3
 800a2e8:	4680      	movhi	r8, r0
 800a2ea:	2303      	movs	r3, #3
 800a2ec:	6123      	str	r3, [r4, #16]
 800a2ee:	9b05      	ldr	r3, [sp, #20]
 800a2f0:	f023 0204 	bic.w	r2, r3, #4
 800a2f4:	6022      	str	r2, [r4, #0]
 800a2f6:	f04f 0900 	mov.w	r9, #0
 800a2fa:	9700      	str	r7, [sp, #0]
 800a2fc:	4633      	mov	r3, r6
 800a2fe:	aa0b      	add	r2, sp, #44	; 0x2c
 800a300:	4621      	mov	r1, r4
 800a302:	4628      	mov	r0, r5
 800a304:	f000 f9d8 	bl	800a6b8 <_printf_common>
 800a308:	3001      	adds	r0, #1
 800a30a:	f040 8090 	bne.w	800a42e <_printf_float+0x1e2>
 800a30e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a312:	b00d      	add	sp, #52	; 0x34
 800a314:	ecbd 8b02 	vpop	{d8}
 800a318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a31c:	4642      	mov	r2, r8
 800a31e:	464b      	mov	r3, r9
 800a320:	4640      	mov	r0, r8
 800a322:	4649      	mov	r1, r9
 800a324:	f7f6 fc02 	bl	8000b2c <__aeabi_dcmpun>
 800a328:	b140      	cbz	r0, 800a33c <_printf_float+0xf0>
 800a32a:	464b      	mov	r3, r9
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	bfbc      	itt	lt
 800a330:	232d      	movlt	r3, #45	; 0x2d
 800a332:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a336:	487f      	ldr	r0, [pc, #508]	; (800a534 <_printf_float+0x2e8>)
 800a338:	4b7f      	ldr	r3, [pc, #508]	; (800a538 <_printf_float+0x2ec>)
 800a33a:	e7d1      	b.n	800a2e0 <_printf_float+0x94>
 800a33c:	6863      	ldr	r3, [r4, #4]
 800a33e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a342:	9206      	str	r2, [sp, #24]
 800a344:	1c5a      	adds	r2, r3, #1
 800a346:	d13f      	bne.n	800a3c8 <_printf_float+0x17c>
 800a348:	2306      	movs	r3, #6
 800a34a:	6063      	str	r3, [r4, #4]
 800a34c:	9b05      	ldr	r3, [sp, #20]
 800a34e:	6861      	ldr	r1, [r4, #4]
 800a350:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a354:	2300      	movs	r3, #0
 800a356:	9303      	str	r3, [sp, #12]
 800a358:	ab0a      	add	r3, sp, #40	; 0x28
 800a35a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a35e:	ab09      	add	r3, sp, #36	; 0x24
 800a360:	ec49 8b10 	vmov	d0, r8, r9
 800a364:	9300      	str	r3, [sp, #0]
 800a366:	6022      	str	r2, [r4, #0]
 800a368:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a36c:	4628      	mov	r0, r5
 800a36e:	f7ff fecd 	bl	800a10c <__cvt>
 800a372:	9b06      	ldr	r3, [sp, #24]
 800a374:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a376:	2b47      	cmp	r3, #71	; 0x47
 800a378:	4680      	mov	r8, r0
 800a37a:	d108      	bne.n	800a38e <_printf_float+0x142>
 800a37c:	1cc8      	adds	r0, r1, #3
 800a37e:	db02      	blt.n	800a386 <_printf_float+0x13a>
 800a380:	6863      	ldr	r3, [r4, #4]
 800a382:	4299      	cmp	r1, r3
 800a384:	dd41      	ble.n	800a40a <_printf_float+0x1be>
 800a386:	f1ab 0b02 	sub.w	fp, fp, #2
 800a38a:	fa5f fb8b 	uxtb.w	fp, fp
 800a38e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a392:	d820      	bhi.n	800a3d6 <_printf_float+0x18a>
 800a394:	3901      	subs	r1, #1
 800a396:	465a      	mov	r2, fp
 800a398:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a39c:	9109      	str	r1, [sp, #36]	; 0x24
 800a39e:	f7ff ff17 	bl	800a1d0 <__exponent>
 800a3a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3a4:	1813      	adds	r3, r2, r0
 800a3a6:	2a01      	cmp	r2, #1
 800a3a8:	4681      	mov	r9, r0
 800a3aa:	6123      	str	r3, [r4, #16]
 800a3ac:	dc02      	bgt.n	800a3b4 <_printf_float+0x168>
 800a3ae:	6822      	ldr	r2, [r4, #0]
 800a3b0:	07d2      	lsls	r2, r2, #31
 800a3b2:	d501      	bpl.n	800a3b8 <_printf_float+0x16c>
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	6123      	str	r3, [r4, #16]
 800a3b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d09c      	beq.n	800a2fa <_printf_float+0xae>
 800a3c0:	232d      	movs	r3, #45	; 0x2d
 800a3c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3c6:	e798      	b.n	800a2fa <_printf_float+0xae>
 800a3c8:	9a06      	ldr	r2, [sp, #24]
 800a3ca:	2a47      	cmp	r2, #71	; 0x47
 800a3cc:	d1be      	bne.n	800a34c <_printf_float+0x100>
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d1bc      	bne.n	800a34c <_printf_float+0x100>
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	e7b9      	b.n	800a34a <_printf_float+0xfe>
 800a3d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a3da:	d118      	bne.n	800a40e <_printf_float+0x1c2>
 800a3dc:	2900      	cmp	r1, #0
 800a3de:	6863      	ldr	r3, [r4, #4]
 800a3e0:	dd0b      	ble.n	800a3fa <_printf_float+0x1ae>
 800a3e2:	6121      	str	r1, [r4, #16]
 800a3e4:	b913      	cbnz	r3, 800a3ec <_printf_float+0x1a0>
 800a3e6:	6822      	ldr	r2, [r4, #0]
 800a3e8:	07d0      	lsls	r0, r2, #31
 800a3ea:	d502      	bpl.n	800a3f2 <_printf_float+0x1a6>
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	440b      	add	r3, r1
 800a3f0:	6123      	str	r3, [r4, #16]
 800a3f2:	65a1      	str	r1, [r4, #88]	; 0x58
 800a3f4:	f04f 0900 	mov.w	r9, #0
 800a3f8:	e7de      	b.n	800a3b8 <_printf_float+0x16c>
 800a3fa:	b913      	cbnz	r3, 800a402 <_printf_float+0x1b6>
 800a3fc:	6822      	ldr	r2, [r4, #0]
 800a3fe:	07d2      	lsls	r2, r2, #31
 800a400:	d501      	bpl.n	800a406 <_printf_float+0x1ba>
 800a402:	3302      	adds	r3, #2
 800a404:	e7f4      	b.n	800a3f0 <_printf_float+0x1a4>
 800a406:	2301      	movs	r3, #1
 800a408:	e7f2      	b.n	800a3f0 <_printf_float+0x1a4>
 800a40a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a40e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a410:	4299      	cmp	r1, r3
 800a412:	db05      	blt.n	800a420 <_printf_float+0x1d4>
 800a414:	6823      	ldr	r3, [r4, #0]
 800a416:	6121      	str	r1, [r4, #16]
 800a418:	07d8      	lsls	r0, r3, #31
 800a41a:	d5ea      	bpl.n	800a3f2 <_printf_float+0x1a6>
 800a41c:	1c4b      	adds	r3, r1, #1
 800a41e:	e7e7      	b.n	800a3f0 <_printf_float+0x1a4>
 800a420:	2900      	cmp	r1, #0
 800a422:	bfd4      	ite	le
 800a424:	f1c1 0202 	rsble	r2, r1, #2
 800a428:	2201      	movgt	r2, #1
 800a42a:	4413      	add	r3, r2
 800a42c:	e7e0      	b.n	800a3f0 <_printf_float+0x1a4>
 800a42e:	6823      	ldr	r3, [r4, #0]
 800a430:	055a      	lsls	r2, r3, #21
 800a432:	d407      	bmi.n	800a444 <_printf_float+0x1f8>
 800a434:	6923      	ldr	r3, [r4, #16]
 800a436:	4642      	mov	r2, r8
 800a438:	4631      	mov	r1, r6
 800a43a:	4628      	mov	r0, r5
 800a43c:	47b8      	blx	r7
 800a43e:	3001      	adds	r0, #1
 800a440:	d12c      	bne.n	800a49c <_printf_float+0x250>
 800a442:	e764      	b.n	800a30e <_printf_float+0xc2>
 800a444:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a448:	f240 80e0 	bls.w	800a60c <_printf_float+0x3c0>
 800a44c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a450:	2200      	movs	r2, #0
 800a452:	2300      	movs	r3, #0
 800a454:	f7f6 fb38 	bl	8000ac8 <__aeabi_dcmpeq>
 800a458:	2800      	cmp	r0, #0
 800a45a:	d034      	beq.n	800a4c6 <_printf_float+0x27a>
 800a45c:	4a37      	ldr	r2, [pc, #220]	; (800a53c <_printf_float+0x2f0>)
 800a45e:	2301      	movs	r3, #1
 800a460:	4631      	mov	r1, r6
 800a462:	4628      	mov	r0, r5
 800a464:	47b8      	blx	r7
 800a466:	3001      	adds	r0, #1
 800a468:	f43f af51 	beq.w	800a30e <_printf_float+0xc2>
 800a46c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a470:	429a      	cmp	r2, r3
 800a472:	db02      	blt.n	800a47a <_printf_float+0x22e>
 800a474:	6823      	ldr	r3, [r4, #0]
 800a476:	07d8      	lsls	r0, r3, #31
 800a478:	d510      	bpl.n	800a49c <_printf_float+0x250>
 800a47a:	ee18 3a10 	vmov	r3, s16
 800a47e:	4652      	mov	r2, sl
 800a480:	4631      	mov	r1, r6
 800a482:	4628      	mov	r0, r5
 800a484:	47b8      	blx	r7
 800a486:	3001      	adds	r0, #1
 800a488:	f43f af41 	beq.w	800a30e <_printf_float+0xc2>
 800a48c:	f04f 0800 	mov.w	r8, #0
 800a490:	f104 091a 	add.w	r9, r4, #26
 800a494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a496:	3b01      	subs	r3, #1
 800a498:	4543      	cmp	r3, r8
 800a49a:	dc09      	bgt.n	800a4b0 <_printf_float+0x264>
 800a49c:	6823      	ldr	r3, [r4, #0]
 800a49e:	079b      	lsls	r3, r3, #30
 800a4a0:	f100 8105 	bmi.w	800a6ae <_printf_float+0x462>
 800a4a4:	68e0      	ldr	r0, [r4, #12]
 800a4a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4a8:	4298      	cmp	r0, r3
 800a4aa:	bfb8      	it	lt
 800a4ac:	4618      	movlt	r0, r3
 800a4ae:	e730      	b.n	800a312 <_printf_float+0xc6>
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	464a      	mov	r2, r9
 800a4b4:	4631      	mov	r1, r6
 800a4b6:	4628      	mov	r0, r5
 800a4b8:	47b8      	blx	r7
 800a4ba:	3001      	adds	r0, #1
 800a4bc:	f43f af27 	beq.w	800a30e <_printf_float+0xc2>
 800a4c0:	f108 0801 	add.w	r8, r8, #1
 800a4c4:	e7e6      	b.n	800a494 <_printf_float+0x248>
 800a4c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	dc39      	bgt.n	800a540 <_printf_float+0x2f4>
 800a4cc:	4a1b      	ldr	r2, [pc, #108]	; (800a53c <_printf_float+0x2f0>)
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	4631      	mov	r1, r6
 800a4d2:	4628      	mov	r0, r5
 800a4d4:	47b8      	blx	r7
 800a4d6:	3001      	adds	r0, #1
 800a4d8:	f43f af19 	beq.w	800a30e <_printf_float+0xc2>
 800a4dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	d102      	bne.n	800a4ea <_printf_float+0x29e>
 800a4e4:	6823      	ldr	r3, [r4, #0]
 800a4e6:	07d9      	lsls	r1, r3, #31
 800a4e8:	d5d8      	bpl.n	800a49c <_printf_float+0x250>
 800a4ea:	ee18 3a10 	vmov	r3, s16
 800a4ee:	4652      	mov	r2, sl
 800a4f0:	4631      	mov	r1, r6
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	47b8      	blx	r7
 800a4f6:	3001      	adds	r0, #1
 800a4f8:	f43f af09 	beq.w	800a30e <_printf_float+0xc2>
 800a4fc:	f04f 0900 	mov.w	r9, #0
 800a500:	f104 0a1a 	add.w	sl, r4, #26
 800a504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a506:	425b      	negs	r3, r3
 800a508:	454b      	cmp	r3, r9
 800a50a:	dc01      	bgt.n	800a510 <_printf_float+0x2c4>
 800a50c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a50e:	e792      	b.n	800a436 <_printf_float+0x1ea>
 800a510:	2301      	movs	r3, #1
 800a512:	4652      	mov	r2, sl
 800a514:	4631      	mov	r1, r6
 800a516:	4628      	mov	r0, r5
 800a518:	47b8      	blx	r7
 800a51a:	3001      	adds	r0, #1
 800a51c:	f43f aef7 	beq.w	800a30e <_printf_float+0xc2>
 800a520:	f109 0901 	add.w	r9, r9, #1
 800a524:	e7ee      	b.n	800a504 <_printf_float+0x2b8>
 800a526:	bf00      	nop
 800a528:	7fefffff 	.word	0x7fefffff
 800a52c:	08010a54 	.word	0x08010a54
 800a530:	08010a58 	.word	0x08010a58
 800a534:	08010a60 	.word	0x08010a60
 800a538:	08010a5c 	.word	0x08010a5c
 800a53c:	08010a64 	.word	0x08010a64
 800a540:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a542:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a544:	429a      	cmp	r2, r3
 800a546:	bfa8      	it	ge
 800a548:	461a      	movge	r2, r3
 800a54a:	2a00      	cmp	r2, #0
 800a54c:	4691      	mov	r9, r2
 800a54e:	dc37      	bgt.n	800a5c0 <_printf_float+0x374>
 800a550:	f04f 0b00 	mov.w	fp, #0
 800a554:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a558:	f104 021a 	add.w	r2, r4, #26
 800a55c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a55e:	9305      	str	r3, [sp, #20]
 800a560:	eba3 0309 	sub.w	r3, r3, r9
 800a564:	455b      	cmp	r3, fp
 800a566:	dc33      	bgt.n	800a5d0 <_printf_float+0x384>
 800a568:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a56c:	429a      	cmp	r2, r3
 800a56e:	db3b      	blt.n	800a5e8 <_printf_float+0x39c>
 800a570:	6823      	ldr	r3, [r4, #0]
 800a572:	07da      	lsls	r2, r3, #31
 800a574:	d438      	bmi.n	800a5e8 <_printf_float+0x39c>
 800a576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a578:	9a05      	ldr	r2, [sp, #20]
 800a57a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a57c:	1a9a      	subs	r2, r3, r2
 800a57e:	eba3 0901 	sub.w	r9, r3, r1
 800a582:	4591      	cmp	r9, r2
 800a584:	bfa8      	it	ge
 800a586:	4691      	movge	r9, r2
 800a588:	f1b9 0f00 	cmp.w	r9, #0
 800a58c:	dc35      	bgt.n	800a5fa <_printf_float+0x3ae>
 800a58e:	f04f 0800 	mov.w	r8, #0
 800a592:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a596:	f104 0a1a 	add.w	sl, r4, #26
 800a59a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a59e:	1a9b      	subs	r3, r3, r2
 800a5a0:	eba3 0309 	sub.w	r3, r3, r9
 800a5a4:	4543      	cmp	r3, r8
 800a5a6:	f77f af79 	ble.w	800a49c <_printf_float+0x250>
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	4652      	mov	r2, sl
 800a5ae:	4631      	mov	r1, r6
 800a5b0:	4628      	mov	r0, r5
 800a5b2:	47b8      	blx	r7
 800a5b4:	3001      	adds	r0, #1
 800a5b6:	f43f aeaa 	beq.w	800a30e <_printf_float+0xc2>
 800a5ba:	f108 0801 	add.w	r8, r8, #1
 800a5be:	e7ec      	b.n	800a59a <_printf_float+0x34e>
 800a5c0:	4613      	mov	r3, r2
 800a5c2:	4631      	mov	r1, r6
 800a5c4:	4642      	mov	r2, r8
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	47b8      	blx	r7
 800a5ca:	3001      	adds	r0, #1
 800a5cc:	d1c0      	bne.n	800a550 <_printf_float+0x304>
 800a5ce:	e69e      	b.n	800a30e <_printf_float+0xc2>
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	4631      	mov	r1, r6
 800a5d4:	4628      	mov	r0, r5
 800a5d6:	9205      	str	r2, [sp, #20]
 800a5d8:	47b8      	blx	r7
 800a5da:	3001      	adds	r0, #1
 800a5dc:	f43f ae97 	beq.w	800a30e <_printf_float+0xc2>
 800a5e0:	9a05      	ldr	r2, [sp, #20]
 800a5e2:	f10b 0b01 	add.w	fp, fp, #1
 800a5e6:	e7b9      	b.n	800a55c <_printf_float+0x310>
 800a5e8:	ee18 3a10 	vmov	r3, s16
 800a5ec:	4652      	mov	r2, sl
 800a5ee:	4631      	mov	r1, r6
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	47b8      	blx	r7
 800a5f4:	3001      	adds	r0, #1
 800a5f6:	d1be      	bne.n	800a576 <_printf_float+0x32a>
 800a5f8:	e689      	b.n	800a30e <_printf_float+0xc2>
 800a5fa:	9a05      	ldr	r2, [sp, #20]
 800a5fc:	464b      	mov	r3, r9
 800a5fe:	4442      	add	r2, r8
 800a600:	4631      	mov	r1, r6
 800a602:	4628      	mov	r0, r5
 800a604:	47b8      	blx	r7
 800a606:	3001      	adds	r0, #1
 800a608:	d1c1      	bne.n	800a58e <_printf_float+0x342>
 800a60a:	e680      	b.n	800a30e <_printf_float+0xc2>
 800a60c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a60e:	2a01      	cmp	r2, #1
 800a610:	dc01      	bgt.n	800a616 <_printf_float+0x3ca>
 800a612:	07db      	lsls	r3, r3, #31
 800a614:	d538      	bpl.n	800a688 <_printf_float+0x43c>
 800a616:	2301      	movs	r3, #1
 800a618:	4642      	mov	r2, r8
 800a61a:	4631      	mov	r1, r6
 800a61c:	4628      	mov	r0, r5
 800a61e:	47b8      	blx	r7
 800a620:	3001      	adds	r0, #1
 800a622:	f43f ae74 	beq.w	800a30e <_printf_float+0xc2>
 800a626:	ee18 3a10 	vmov	r3, s16
 800a62a:	4652      	mov	r2, sl
 800a62c:	4631      	mov	r1, r6
 800a62e:	4628      	mov	r0, r5
 800a630:	47b8      	blx	r7
 800a632:	3001      	adds	r0, #1
 800a634:	f43f ae6b 	beq.w	800a30e <_printf_float+0xc2>
 800a638:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a63c:	2200      	movs	r2, #0
 800a63e:	2300      	movs	r3, #0
 800a640:	f7f6 fa42 	bl	8000ac8 <__aeabi_dcmpeq>
 800a644:	b9d8      	cbnz	r0, 800a67e <_printf_float+0x432>
 800a646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a648:	f108 0201 	add.w	r2, r8, #1
 800a64c:	3b01      	subs	r3, #1
 800a64e:	4631      	mov	r1, r6
 800a650:	4628      	mov	r0, r5
 800a652:	47b8      	blx	r7
 800a654:	3001      	adds	r0, #1
 800a656:	d10e      	bne.n	800a676 <_printf_float+0x42a>
 800a658:	e659      	b.n	800a30e <_printf_float+0xc2>
 800a65a:	2301      	movs	r3, #1
 800a65c:	4652      	mov	r2, sl
 800a65e:	4631      	mov	r1, r6
 800a660:	4628      	mov	r0, r5
 800a662:	47b8      	blx	r7
 800a664:	3001      	adds	r0, #1
 800a666:	f43f ae52 	beq.w	800a30e <_printf_float+0xc2>
 800a66a:	f108 0801 	add.w	r8, r8, #1
 800a66e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a670:	3b01      	subs	r3, #1
 800a672:	4543      	cmp	r3, r8
 800a674:	dcf1      	bgt.n	800a65a <_printf_float+0x40e>
 800a676:	464b      	mov	r3, r9
 800a678:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a67c:	e6dc      	b.n	800a438 <_printf_float+0x1ec>
 800a67e:	f04f 0800 	mov.w	r8, #0
 800a682:	f104 0a1a 	add.w	sl, r4, #26
 800a686:	e7f2      	b.n	800a66e <_printf_float+0x422>
 800a688:	2301      	movs	r3, #1
 800a68a:	4642      	mov	r2, r8
 800a68c:	e7df      	b.n	800a64e <_printf_float+0x402>
 800a68e:	2301      	movs	r3, #1
 800a690:	464a      	mov	r2, r9
 800a692:	4631      	mov	r1, r6
 800a694:	4628      	mov	r0, r5
 800a696:	47b8      	blx	r7
 800a698:	3001      	adds	r0, #1
 800a69a:	f43f ae38 	beq.w	800a30e <_printf_float+0xc2>
 800a69e:	f108 0801 	add.w	r8, r8, #1
 800a6a2:	68e3      	ldr	r3, [r4, #12]
 800a6a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a6a6:	1a5b      	subs	r3, r3, r1
 800a6a8:	4543      	cmp	r3, r8
 800a6aa:	dcf0      	bgt.n	800a68e <_printf_float+0x442>
 800a6ac:	e6fa      	b.n	800a4a4 <_printf_float+0x258>
 800a6ae:	f04f 0800 	mov.w	r8, #0
 800a6b2:	f104 0919 	add.w	r9, r4, #25
 800a6b6:	e7f4      	b.n	800a6a2 <_printf_float+0x456>

0800a6b8 <_printf_common>:
 800a6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6bc:	4616      	mov	r6, r2
 800a6be:	4699      	mov	r9, r3
 800a6c0:	688a      	ldr	r2, [r1, #8]
 800a6c2:	690b      	ldr	r3, [r1, #16]
 800a6c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	bfb8      	it	lt
 800a6cc:	4613      	movlt	r3, r2
 800a6ce:	6033      	str	r3, [r6, #0]
 800a6d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a6d4:	4607      	mov	r7, r0
 800a6d6:	460c      	mov	r4, r1
 800a6d8:	b10a      	cbz	r2, 800a6de <_printf_common+0x26>
 800a6da:	3301      	adds	r3, #1
 800a6dc:	6033      	str	r3, [r6, #0]
 800a6de:	6823      	ldr	r3, [r4, #0]
 800a6e0:	0699      	lsls	r1, r3, #26
 800a6e2:	bf42      	ittt	mi
 800a6e4:	6833      	ldrmi	r3, [r6, #0]
 800a6e6:	3302      	addmi	r3, #2
 800a6e8:	6033      	strmi	r3, [r6, #0]
 800a6ea:	6825      	ldr	r5, [r4, #0]
 800a6ec:	f015 0506 	ands.w	r5, r5, #6
 800a6f0:	d106      	bne.n	800a700 <_printf_common+0x48>
 800a6f2:	f104 0a19 	add.w	sl, r4, #25
 800a6f6:	68e3      	ldr	r3, [r4, #12]
 800a6f8:	6832      	ldr	r2, [r6, #0]
 800a6fa:	1a9b      	subs	r3, r3, r2
 800a6fc:	42ab      	cmp	r3, r5
 800a6fe:	dc26      	bgt.n	800a74e <_printf_common+0x96>
 800a700:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a704:	1e13      	subs	r3, r2, #0
 800a706:	6822      	ldr	r2, [r4, #0]
 800a708:	bf18      	it	ne
 800a70a:	2301      	movne	r3, #1
 800a70c:	0692      	lsls	r2, r2, #26
 800a70e:	d42b      	bmi.n	800a768 <_printf_common+0xb0>
 800a710:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a714:	4649      	mov	r1, r9
 800a716:	4638      	mov	r0, r7
 800a718:	47c0      	blx	r8
 800a71a:	3001      	adds	r0, #1
 800a71c:	d01e      	beq.n	800a75c <_printf_common+0xa4>
 800a71e:	6823      	ldr	r3, [r4, #0]
 800a720:	68e5      	ldr	r5, [r4, #12]
 800a722:	6832      	ldr	r2, [r6, #0]
 800a724:	f003 0306 	and.w	r3, r3, #6
 800a728:	2b04      	cmp	r3, #4
 800a72a:	bf08      	it	eq
 800a72c:	1aad      	subeq	r5, r5, r2
 800a72e:	68a3      	ldr	r3, [r4, #8]
 800a730:	6922      	ldr	r2, [r4, #16]
 800a732:	bf0c      	ite	eq
 800a734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a738:	2500      	movne	r5, #0
 800a73a:	4293      	cmp	r3, r2
 800a73c:	bfc4      	itt	gt
 800a73e:	1a9b      	subgt	r3, r3, r2
 800a740:	18ed      	addgt	r5, r5, r3
 800a742:	2600      	movs	r6, #0
 800a744:	341a      	adds	r4, #26
 800a746:	42b5      	cmp	r5, r6
 800a748:	d11a      	bne.n	800a780 <_printf_common+0xc8>
 800a74a:	2000      	movs	r0, #0
 800a74c:	e008      	b.n	800a760 <_printf_common+0xa8>
 800a74e:	2301      	movs	r3, #1
 800a750:	4652      	mov	r2, sl
 800a752:	4649      	mov	r1, r9
 800a754:	4638      	mov	r0, r7
 800a756:	47c0      	blx	r8
 800a758:	3001      	adds	r0, #1
 800a75a:	d103      	bne.n	800a764 <_printf_common+0xac>
 800a75c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a764:	3501      	adds	r5, #1
 800a766:	e7c6      	b.n	800a6f6 <_printf_common+0x3e>
 800a768:	18e1      	adds	r1, r4, r3
 800a76a:	1c5a      	adds	r2, r3, #1
 800a76c:	2030      	movs	r0, #48	; 0x30
 800a76e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a772:	4422      	add	r2, r4
 800a774:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a778:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a77c:	3302      	adds	r3, #2
 800a77e:	e7c7      	b.n	800a710 <_printf_common+0x58>
 800a780:	2301      	movs	r3, #1
 800a782:	4622      	mov	r2, r4
 800a784:	4649      	mov	r1, r9
 800a786:	4638      	mov	r0, r7
 800a788:	47c0      	blx	r8
 800a78a:	3001      	adds	r0, #1
 800a78c:	d0e6      	beq.n	800a75c <_printf_common+0xa4>
 800a78e:	3601      	adds	r6, #1
 800a790:	e7d9      	b.n	800a746 <_printf_common+0x8e>
	...

0800a794 <_printf_i>:
 800a794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a798:	7e0f      	ldrb	r7, [r1, #24]
 800a79a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a79c:	2f78      	cmp	r7, #120	; 0x78
 800a79e:	4691      	mov	r9, r2
 800a7a0:	4680      	mov	r8, r0
 800a7a2:	460c      	mov	r4, r1
 800a7a4:	469a      	mov	sl, r3
 800a7a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a7aa:	d807      	bhi.n	800a7bc <_printf_i+0x28>
 800a7ac:	2f62      	cmp	r7, #98	; 0x62
 800a7ae:	d80a      	bhi.n	800a7c6 <_printf_i+0x32>
 800a7b0:	2f00      	cmp	r7, #0
 800a7b2:	f000 80d8 	beq.w	800a966 <_printf_i+0x1d2>
 800a7b6:	2f58      	cmp	r7, #88	; 0x58
 800a7b8:	f000 80a3 	beq.w	800a902 <_printf_i+0x16e>
 800a7bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a7c4:	e03a      	b.n	800a83c <_printf_i+0xa8>
 800a7c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a7ca:	2b15      	cmp	r3, #21
 800a7cc:	d8f6      	bhi.n	800a7bc <_printf_i+0x28>
 800a7ce:	a101      	add	r1, pc, #4	; (adr r1, 800a7d4 <_printf_i+0x40>)
 800a7d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7d4:	0800a82d 	.word	0x0800a82d
 800a7d8:	0800a841 	.word	0x0800a841
 800a7dc:	0800a7bd 	.word	0x0800a7bd
 800a7e0:	0800a7bd 	.word	0x0800a7bd
 800a7e4:	0800a7bd 	.word	0x0800a7bd
 800a7e8:	0800a7bd 	.word	0x0800a7bd
 800a7ec:	0800a841 	.word	0x0800a841
 800a7f0:	0800a7bd 	.word	0x0800a7bd
 800a7f4:	0800a7bd 	.word	0x0800a7bd
 800a7f8:	0800a7bd 	.word	0x0800a7bd
 800a7fc:	0800a7bd 	.word	0x0800a7bd
 800a800:	0800a94d 	.word	0x0800a94d
 800a804:	0800a871 	.word	0x0800a871
 800a808:	0800a92f 	.word	0x0800a92f
 800a80c:	0800a7bd 	.word	0x0800a7bd
 800a810:	0800a7bd 	.word	0x0800a7bd
 800a814:	0800a96f 	.word	0x0800a96f
 800a818:	0800a7bd 	.word	0x0800a7bd
 800a81c:	0800a871 	.word	0x0800a871
 800a820:	0800a7bd 	.word	0x0800a7bd
 800a824:	0800a7bd 	.word	0x0800a7bd
 800a828:	0800a937 	.word	0x0800a937
 800a82c:	682b      	ldr	r3, [r5, #0]
 800a82e:	1d1a      	adds	r2, r3, #4
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	602a      	str	r2, [r5, #0]
 800a834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a838:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a83c:	2301      	movs	r3, #1
 800a83e:	e0a3      	b.n	800a988 <_printf_i+0x1f4>
 800a840:	6820      	ldr	r0, [r4, #0]
 800a842:	6829      	ldr	r1, [r5, #0]
 800a844:	0606      	lsls	r6, r0, #24
 800a846:	f101 0304 	add.w	r3, r1, #4
 800a84a:	d50a      	bpl.n	800a862 <_printf_i+0xce>
 800a84c:	680e      	ldr	r6, [r1, #0]
 800a84e:	602b      	str	r3, [r5, #0]
 800a850:	2e00      	cmp	r6, #0
 800a852:	da03      	bge.n	800a85c <_printf_i+0xc8>
 800a854:	232d      	movs	r3, #45	; 0x2d
 800a856:	4276      	negs	r6, r6
 800a858:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a85c:	485e      	ldr	r0, [pc, #376]	; (800a9d8 <_printf_i+0x244>)
 800a85e:	230a      	movs	r3, #10
 800a860:	e019      	b.n	800a896 <_printf_i+0x102>
 800a862:	680e      	ldr	r6, [r1, #0]
 800a864:	602b      	str	r3, [r5, #0]
 800a866:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a86a:	bf18      	it	ne
 800a86c:	b236      	sxthne	r6, r6
 800a86e:	e7ef      	b.n	800a850 <_printf_i+0xbc>
 800a870:	682b      	ldr	r3, [r5, #0]
 800a872:	6820      	ldr	r0, [r4, #0]
 800a874:	1d19      	adds	r1, r3, #4
 800a876:	6029      	str	r1, [r5, #0]
 800a878:	0601      	lsls	r1, r0, #24
 800a87a:	d501      	bpl.n	800a880 <_printf_i+0xec>
 800a87c:	681e      	ldr	r6, [r3, #0]
 800a87e:	e002      	b.n	800a886 <_printf_i+0xf2>
 800a880:	0646      	lsls	r6, r0, #25
 800a882:	d5fb      	bpl.n	800a87c <_printf_i+0xe8>
 800a884:	881e      	ldrh	r6, [r3, #0]
 800a886:	4854      	ldr	r0, [pc, #336]	; (800a9d8 <_printf_i+0x244>)
 800a888:	2f6f      	cmp	r7, #111	; 0x6f
 800a88a:	bf0c      	ite	eq
 800a88c:	2308      	moveq	r3, #8
 800a88e:	230a      	movne	r3, #10
 800a890:	2100      	movs	r1, #0
 800a892:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a896:	6865      	ldr	r5, [r4, #4]
 800a898:	60a5      	str	r5, [r4, #8]
 800a89a:	2d00      	cmp	r5, #0
 800a89c:	bfa2      	ittt	ge
 800a89e:	6821      	ldrge	r1, [r4, #0]
 800a8a0:	f021 0104 	bicge.w	r1, r1, #4
 800a8a4:	6021      	strge	r1, [r4, #0]
 800a8a6:	b90e      	cbnz	r6, 800a8ac <_printf_i+0x118>
 800a8a8:	2d00      	cmp	r5, #0
 800a8aa:	d04d      	beq.n	800a948 <_printf_i+0x1b4>
 800a8ac:	4615      	mov	r5, r2
 800a8ae:	fbb6 f1f3 	udiv	r1, r6, r3
 800a8b2:	fb03 6711 	mls	r7, r3, r1, r6
 800a8b6:	5dc7      	ldrb	r7, [r0, r7]
 800a8b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a8bc:	4637      	mov	r7, r6
 800a8be:	42bb      	cmp	r3, r7
 800a8c0:	460e      	mov	r6, r1
 800a8c2:	d9f4      	bls.n	800a8ae <_printf_i+0x11a>
 800a8c4:	2b08      	cmp	r3, #8
 800a8c6:	d10b      	bne.n	800a8e0 <_printf_i+0x14c>
 800a8c8:	6823      	ldr	r3, [r4, #0]
 800a8ca:	07de      	lsls	r6, r3, #31
 800a8cc:	d508      	bpl.n	800a8e0 <_printf_i+0x14c>
 800a8ce:	6923      	ldr	r3, [r4, #16]
 800a8d0:	6861      	ldr	r1, [r4, #4]
 800a8d2:	4299      	cmp	r1, r3
 800a8d4:	bfde      	ittt	le
 800a8d6:	2330      	movle	r3, #48	; 0x30
 800a8d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a8dc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a8e0:	1b52      	subs	r2, r2, r5
 800a8e2:	6122      	str	r2, [r4, #16]
 800a8e4:	f8cd a000 	str.w	sl, [sp]
 800a8e8:	464b      	mov	r3, r9
 800a8ea:	aa03      	add	r2, sp, #12
 800a8ec:	4621      	mov	r1, r4
 800a8ee:	4640      	mov	r0, r8
 800a8f0:	f7ff fee2 	bl	800a6b8 <_printf_common>
 800a8f4:	3001      	adds	r0, #1
 800a8f6:	d14c      	bne.n	800a992 <_printf_i+0x1fe>
 800a8f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8fc:	b004      	add	sp, #16
 800a8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a902:	4835      	ldr	r0, [pc, #212]	; (800a9d8 <_printf_i+0x244>)
 800a904:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a908:	6829      	ldr	r1, [r5, #0]
 800a90a:	6823      	ldr	r3, [r4, #0]
 800a90c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a910:	6029      	str	r1, [r5, #0]
 800a912:	061d      	lsls	r5, r3, #24
 800a914:	d514      	bpl.n	800a940 <_printf_i+0x1ac>
 800a916:	07df      	lsls	r7, r3, #31
 800a918:	bf44      	itt	mi
 800a91a:	f043 0320 	orrmi.w	r3, r3, #32
 800a91e:	6023      	strmi	r3, [r4, #0]
 800a920:	b91e      	cbnz	r6, 800a92a <_printf_i+0x196>
 800a922:	6823      	ldr	r3, [r4, #0]
 800a924:	f023 0320 	bic.w	r3, r3, #32
 800a928:	6023      	str	r3, [r4, #0]
 800a92a:	2310      	movs	r3, #16
 800a92c:	e7b0      	b.n	800a890 <_printf_i+0xfc>
 800a92e:	6823      	ldr	r3, [r4, #0]
 800a930:	f043 0320 	orr.w	r3, r3, #32
 800a934:	6023      	str	r3, [r4, #0]
 800a936:	2378      	movs	r3, #120	; 0x78
 800a938:	4828      	ldr	r0, [pc, #160]	; (800a9dc <_printf_i+0x248>)
 800a93a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a93e:	e7e3      	b.n	800a908 <_printf_i+0x174>
 800a940:	0659      	lsls	r1, r3, #25
 800a942:	bf48      	it	mi
 800a944:	b2b6      	uxthmi	r6, r6
 800a946:	e7e6      	b.n	800a916 <_printf_i+0x182>
 800a948:	4615      	mov	r5, r2
 800a94a:	e7bb      	b.n	800a8c4 <_printf_i+0x130>
 800a94c:	682b      	ldr	r3, [r5, #0]
 800a94e:	6826      	ldr	r6, [r4, #0]
 800a950:	6961      	ldr	r1, [r4, #20]
 800a952:	1d18      	adds	r0, r3, #4
 800a954:	6028      	str	r0, [r5, #0]
 800a956:	0635      	lsls	r5, r6, #24
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	d501      	bpl.n	800a960 <_printf_i+0x1cc>
 800a95c:	6019      	str	r1, [r3, #0]
 800a95e:	e002      	b.n	800a966 <_printf_i+0x1d2>
 800a960:	0670      	lsls	r0, r6, #25
 800a962:	d5fb      	bpl.n	800a95c <_printf_i+0x1c8>
 800a964:	8019      	strh	r1, [r3, #0]
 800a966:	2300      	movs	r3, #0
 800a968:	6123      	str	r3, [r4, #16]
 800a96a:	4615      	mov	r5, r2
 800a96c:	e7ba      	b.n	800a8e4 <_printf_i+0x150>
 800a96e:	682b      	ldr	r3, [r5, #0]
 800a970:	1d1a      	adds	r2, r3, #4
 800a972:	602a      	str	r2, [r5, #0]
 800a974:	681d      	ldr	r5, [r3, #0]
 800a976:	6862      	ldr	r2, [r4, #4]
 800a978:	2100      	movs	r1, #0
 800a97a:	4628      	mov	r0, r5
 800a97c:	f7f5 fc30 	bl	80001e0 <memchr>
 800a980:	b108      	cbz	r0, 800a986 <_printf_i+0x1f2>
 800a982:	1b40      	subs	r0, r0, r5
 800a984:	6060      	str	r0, [r4, #4]
 800a986:	6863      	ldr	r3, [r4, #4]
 800a988:	6123      	str	r3, [r4, #16]
 800a98a:	2300      	movs	r3, #0
 800a98c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a990:	e7a8      	b.n	800a8e4 <_printf_i+0x150>
 800a992:	6923      	ldr	r3, [r4, #16]
 800a994:	462a      	mov	r2, r5
 800a996:	4649      	mov	r1, r9
 800a998:	4640      	mov	r0, r8
 800a99a:	47d0      	blx	sl
 800a99c:	3001      	adds	r0, #1
 800a99e:	d0ab      	beq.n	800a8f8 <_printf_i+0x164>
 800a9a0:	6823      	ldr	r3, [r4, #0]
 800a9a2:	079b      	lsls	r3, r3, #30
 800a9a4:	d413      	bmi.n	800a9ce <_printf_i+0x23a>
 800a9a6:	68e0      	ldr	r0, [r4, #12]
 800a9a8:	9b03      	ldr	r3, [sp, #12]
 800a9aa:	4298      	cmp	r0, r3
 800a9ac:	bfb8      	it	lt
 800a9ae:	4618      	movlt	r0, r3
 800a9b0:	e7a4      	b.n	800a8fc <_printf_i+0x168>
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	4632      	mov	r2, r6
 800a9b6:	4649      	mov	r1, r9
 800a9b8:	4640      	mov	r0, r8
 800a9ba:	47d0      	blx	sl
 800a9bc:	3001      	adds	r0, #1
 800a9be:	d09b      	beq.n	800a8f8 <_printf_i+0x164>
 800a9c0:	3501      	adds	r5, #1
 800a9c2:	68e3      	ldr	r3, [r4, #12]
 800a9c4:	9903      	ldr	r1, [sp, #12]
 800a9c6:	1a5b      	subs	r3, r3, r1
 800a9c8:	42ab      	cmp	r3, r5
 800a9ca:	dcf2      	bgt.n	800a9b2 <_printf_i+0x21e>
 800a9cc:	e7eb      	b.n	800a9a6 <_printf_i+0x212>
 800a9ce:	2500      	movs	r5, #0
 800a9d0:	f104 0619 	add.w	r6, r4, #25
 800a9d4:	e7f5      	b.n	800a9c2 <_printf_i+0x22e>
 800a9d6:	bf00      	nop
 800a9d8:	08010a66 	.word	0x08010a66
 800a9dc:	08010a77 	.word	0x08010a77

0800a9e0 <_scanf_float>:
 800a9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e4:	b087      	sub	sp, #28
 800a9e6:	4617      	mov	r7, r2
 800a9e8:	9303      	str	r3, [sp, #12]
 800a9ea:	688b      	ldr	r3, [r1, #8]
 800a9ec:	1e5a      	subs	r2, r3, #1
 800a9ee:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a9f2:	bf83      	ittte	hi
 800a9f4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a9f8:	195b      	addhi	r3, r3, r5
 800a9fa:	9302      	strhi	r3, [sp, #8]
 800a9fc:	2300      	movls	r3, #0
 800a9fe:	bf86      	itte	hi
 800aa00:	f240 135d 	movwhi	r3, #349	; 0x15d
 800aa04:	608b      	strhi	r3, [r1, #8]
 800aa06:	9302      	strls	r3, [sp, #8]
 800aa08:	680b      	ldr	r3, [r1, #0]
 800aa0a:	468b      	mov	fp, r1
 800aa0c:	2500      	movs	r5, #0
 800aa0e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800aa12:	f84b 3b1c 	str.w	r3, [fp], #28
 800aa16:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800aa1a:	4680      	mov	r8, r0
 800aa1c:	460c      	mov	r4, r1
 800aa1e:	465e      	mov	r6, fp
 800aa20:	46aa      	mov	sl, r5
 800aa22:	46a9      	mov	r9, r5
 800aa24:	9501      	str	r5, [sp, #4]
 800aa26:	68a2      	ldr	r2, [r4, #8]
 800aa28:	b152      	cbz	r2, 800aa40 <_scanf_float+0x60>
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	2b4e      	cmp	r3, #78	; 0x4e
 800aa30:	d864      	bhi.n	800aafc <_scanf_float+0x11c>
 800aa32:	2b40      	cmp	r3, #64	; 0x40
 800aa34:	d83c      	bhi.n	800aab0 <_scanf_float+0xd0>
 800aa36:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800aa3a:	b2c8      	uxtb	r0, r1
 800aa3c:	280e      	cmp	r0, #14
 800aa3e:	d93a      	bls.n	800aab6 <_scanf_float+0xd6>
 800aa40:	f1b9 0f00 	cmp.w	r9, #0
 800aa44:	d003      	beq.n	800aa4e <_scanf_float+0x6e>
 800aa46:	6823      	ldr	r3, [r4, #0]
 800aa48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa4c:	6023      	str	r3, [r4, #0]
 800aa4e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800aa52:	f1ba 0f01 	cmp.w	sl, #1
 800aa56:	f200 8113 	bhi.w	800ac80 <_scanf_float+0x2a0>
 800aa5a:	455e      	cmp	r6, fp
 800aa5c:	f200 8105 	bhi.w	800ac6a <_scanf_float+0x28a>
 800aa60:	2501      	movs	r5, #1
 800aa62:	4628      	mov	r0, r5
 800aa64:	b007      	add	sp, #28
 800aa66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa6a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800aa6e:	2a0d      	cmp	r2, #13
 800aa70:	d8e6      	bhi.n	800aa40 <_scanf_float+0x60>
 800aa72:	a101      	add	r1, pc, #4	; (adr r1, 800aa78 <_scanf_float+0x98>)
 800aa74:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800aa78:	0800abb7 	.word	0x0800abb7
 800aa7c:	0800aa41 	.word	0x0800aa41
 800aa80:	0800aa41 	.word	0x0800aa41
 800aa84:	0800aa41 	.word	0x0800aa41
 800aa88:	0800ac17 	.word	0x0800ac17
 800aa8c:	0800abef 	.word	0x0800abef
 800aa90:	0800aa41 	.word	0x0800aa41
 800aa94:	0800aa41 	.word	0x0800aa41
 800aa98:	0800abc5 	.word	0x0800abc5
 800aa9c:	0800aa41 	.word	0x0800aa41
 800aaa0:	0800aa41 	.word	0x0800aa41
 800aaa4:	0800aa41 	.word	0x0800aa41
 800aaa8:	0800aa41 	.word	0x0800aa41
 800aaac:	0800ab7d 	.word	0x0800ab7d
 800aab0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800aab4:	e7db      	b.n	800aa6e <_scanf_float+0x8e>
 800aab6:	290e      	cmp	r1, #14
 800aab8:	d8c2      	bhi.n	800aa40 <_scanf_float+0x60>
 800aaba:	a001      	add	r0, pc, #4	; (adr r0, 800aac0 <_scanf_float+0xe0>)
 800aabc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800aac0:	0800ab6f 	.word	0x0800ab6f
 800aac4:	0800aa41 	.word	0x0800aa41
 800aac8:	0800ab6f 	.word	0x0800ab6f
 800aacc:	0800ac03 	.word	0x0800ac03
 800aad0:	0800aa41 	.word	0x0800aa41
 800aad4:	0800ab1d 	.word	0x0800ab1d
 800aad8:	0800ab59 	.word	0x0800ab59
 800aadc:	0800ab59 	.word	0x0800ab59
 800aae0:	0800ab59 	.word	0x0800ab59
 800aae4:	0800ab59 	.word	0x0800ab59
 800aae8:	0800ab59 	.word	0x0800ab59
 800aaec:	0800ab59 	.word	0x0800ab59
 800aaf0:	0800ab59 	.word	0x0800ab59
 800aaf4:	0800ab59 	.word	0x0800ab59
 800aaf8:	0800ab59 	.word	0x0800ab59
 800aafc:	2b6e      	cmp	r3, #110	; 0x6e
 800aafe:	d809      	bhi.n	800ab14 <_scanf_float+0x134>
 800ab00:	2b60      	cmp	r3, #96	; 0x60
 800ab02:	d8b2      	bhi.n	800aa6a <_scanf_float+0x8a>
 800ab04:	2b54      	cmp	r3, #84	; 0x54
 800ab06:	d077      	beq.n	800abf8 <_scanf_float+0x218>
 800ab08:	2b59      	cmp	r3, #89	; 0x59
 800ab0a:	d199      	bne.n	800aa40 <_scanf_float+0x60>
 800ab0c:	2d07      	cmp	r5, #7
 800ab0e:	d197      	bne.n	800aa40 <_scanf_float+0x60>
 800ab10:	2508      	movs	r5, #8
 800ab12:	e029      	b.n	800ab68 <_scanf_float+0x188>
 800ab14:	2b74      	cmp	r3, #116	; 0x74
 800ab16:	d06f      	beq.n	800abf8 <_scanf_float+0x218>
 800ab18:	2b79      	cmp	r3, #121	; 0x79
 800ab1a:	e7f6      	b.n	800ab0a <_scanf_float+0x12a>
 800ab1c:	6821      	ldr	r1, [r4, #0]
 800ab1e:	05c8      	lsls	r0, r1, #23
 800ab20:	d51a      	bpl.n	800ab58 <_scanf_float+0x178>
 800ab22:	9b02      	ldr	r3, [sp, #8]
 800ab24:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ab28:	6021      	str	r1, [r4, #0]
 800ab2a:	f109 0901 	add.w	r9, r9, #1
 800ab2e:	b11b      	cbz	r3, 800ab38 <_scanf_float+0x158>
 800ab30:	3b01      	subs	r3, #1
 800ab32:	3201      	adds	r2, #1
 800ab34:	9302      	str	r3, [sp, #8]
 800ab36:	60a2      	str	r2, [r4, #8]
 800ab38:	68a3      	ldr	r3, [r4, #8]
 800ab3a:	3b01      	subs	r3, #1
 800ab3c:	60a3      	str	r3, [r4, #8]
 800ab3e:	6923      	ldr	r3, [r4, #16]
 800ab40:	3301      	adds	r3, #1
 800ab42:	6123      	str	r3, [r4, #16]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	3b01      	subs	r3, #1
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	607b      	str	r3, [r7, #4]
 800ab4c:	f340 8084 	ble.w	800ac58 <_scanf_float+0x278>
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	3301      	adds	r3, #1
 800ab54:	603b      	str	r3, [r7, #0]
 800ab56:	e766      	b.n	800aa26 <_scanf_float+0x46>
 800ab58:	eb1a 0f05 	cmn.w	sl, r5
 800ab5c:	f47f af70 	bne.w	800aa40 <_scanf_float+0x60>
 800ab60:	6822      	ldr	r2, [r4, #0]
 800ab62:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ab66:	6022      	str	r2, [r4, #0]
 800ab68:	f806 3b01 	strb.w	r3, [r6], #1
 800ab6c:	e7e4      	b.n	800ab38 <_scanf_float+0x158>
 800ab6e:	6822      	ldr	r2, [r4, #0]
 800ab70:	0610      	lsls	r0, r2, #24
 800ab72:	f57f af65 	bpl.w	800aa40 <_scanf_float+0x60>
 800ab76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab7a:	e7f4      	b.n	800ab66 <_scanf_float+0x186>
 800ab7c:	f1ba 0f00 	cmp.w	sl, #0
 800ab80:	d10e      	bne.n	800aba0 <_scanf_float+0x1c0>
 800ab82:	f1b9 0f00 	cmp.w	r9, #0
 800ab86:	d10e      	bne.n	800aba6 <_scanf_float+0x1c6>
 800ab88:	6822      	ldr	r2, [r4, #0]
 800ab8a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ab8e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ab92:	d108      	bne.n	800aba6 <_scanf_float+0x1c6>
 800ab94:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ab98:	6022      	str	r2, [r4, #0]
 800ab9a:	f04f 0a01 	mov.w	sl, #1
 800ab9e:	e7e3      	b.n	800ab68 <_scanf_float+0x188>
 800aba0:	f1ba 0f02 	cmp.w	sl, #2
 800aba4:	d055      	beq.n	800ac52 <_scanf_float+0x272>
 800aba6:	2d01      	cmp	r5, #1
 800aba8:	d002      	beq.n	800abb0 <_scanf_float+0x1d0>
 800abaa:	2d04      	cmp	r5, #4
 800abac:	f47f af48 	bne.w	800aa40 <_scanf_float+0x60>
 800abb0:	3501      	adds	r5, #1
 800abb2:	b2ed      	uxtb	r5, r5
 800abb4:	e7d8      	b.n	800ab68 <_scanf_float+0x188>
 800abb6:	f1ba 0f01 	cmp.w	sl, #1
 800abba:	f47f af41 	bne.w	800aa40 <_scanf_float+0x60>
 800abbe:	f04f 0a02 	mov.w	sl, #2
 800abc2:	e7d1      	b.n	800ab68 <_scanf_float+0x188>
 800abc4:	b97d      	cbnz	r5, 800abe6 <_scanf_float+0x206>
 800abc6:	f1b9 0f00 	cmp.w	r9, #0
 800abca:	f47f af3c 	bne.w	800aa46 <_scanf_float+0x66>
 800abce:	6822      	ldr	r2, [r4, #0]
 800abd0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800abd4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800abd8:	f47f af39 	bne.w	800aa4e <_scanf_float+0x6e>
 800abdc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800abe0:	6022      	str	r2, [r4, #0]
 800abe2:	2501      	movs	r5, #1
 800abe4:	e7c0      	b.n	800ab68 <_scanf_float+0x188>
 800abe6:	2d03      	cmp	r5, #3
 800abe8:	d0e2      	beq.n	800abb0 <_scanf_float+0x1d0>
 800abea:	2d05      	cmp	r5, #5
 800abec:	e7de      	b.n	800abac <_scanf_float+0x1cc>
 800abee:	2d02      	cmp	r5, #2
 800abf0:	f47f af26 	bne.w	800aa40 <_scanf_float+0x60>
 800abf4:	2503      	movs	r5, #3
 800abf6:	e7b7      	b.n	800ab68 <_scanf_float+0x188>
 800abf8:	2d06      	cmp	r5, #6
 800abfa:	f47f af21 	bne.w	800aa40 <_scanf_float+0x60>
 800abfe:	2507      	movs	r5, #7
 800ac00:	e7b2      	b.n	800ab68 <_scanf_float+0x188>
 800ac02:	6822      	ldr	r2, [r4, #0]
 800ac04:	0591      	lsls	r1, r2, #22
 800ac06:	f57f af1b 	bpl.w	800aa40 <_scanf_float+0x60>
 800ac0a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ac0e:	6022      	str	r2, [r4, #0]
 800ac10:	f8cd 9004 	str.w	r9, [sp, #4]
 800ac14:	e7a8      	b.n	800ab68 <_scanf_float+0x188>
 800ac16:	6822      	ldr	r2, [r4, #0]
 800ac18:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ac1c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ac20:	d006      	beq.n	800ac30 <_scanf_float+0x250>
 800ac22:	0550      	lsls	r0, r2, #21
 800ac24:	f57f af0c 	bpl.w	800aa40 <_scanf_float+0x60>
 800ac28:	f1b9 0f00 	cmp.w	r9, #0
 800ac2c:	f43f af0f 	beq.w	800aa4e <_scanf_float+0x6e>
 800ac30:	0591      	lsls	r1, r2, #22
 800ac32:	bf58      	it	pl
 800ac34:	9901      	ldrpl	r1, [sp, #4]
 800ac36:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ac3a:	bf58      	it	pl
 800ac3c:	eba9 0101 	subpl.w	r1, r9, r1
 800ac40:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ac44:	bf58      	it	pl
 800ac46:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ac4a:	6022      	str	r2, [r4, #0]
 800ac4c:	f04f 0900 	mov.w	r9, #0
 800ac50:	e78a      	b.n	800ab68 <_scanf_float+0x188>
 800ac52:	f04f 0a03 	mov.w	sl, #3
 800ac56:	e787      	b.n	800ab68 <_scanf_float+0x188>
 800ac58:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ac5c:	4639      	mov	r1, r7
 800ac5e:	4640      	mov	r0, r8
 800ac60:	4798      	blx	r3
 800ac62:	2800      	cmp	r0, #0
 800ac64:	f43f aedf 	beq.w	800aa26 <_scanf_float+0x46>
 800ac68:	e6ea      	b.n	800aa40 <_scanf_float+0x60>
 800ac6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ac72:	463a      	mov	r2, r7
 800ac74:	4640      	mov	r0, r8
 800ac76:	4798      	blx	r3
 800ac78:	6923      	ldr	r3, [r4, #16]
 800ac7a:	3b01      	subs	r3, #1
 800ac7c:	6123      	str	r3, [r4, #16]
 800ac7e:	e6ec      	b.n	800aa5a <_scanf_float+0x7a>
 800ac80:	1e6b      	subs	r3, r5, #1
 800ac82:	2b06      	cmp	r3, #6
 800ac84:	d825      	bhi.n	800acd2 <_scanf_float+0x2f2>
 800ac86:	2d02      	cmp	r5, #2
 800ac88:	d836      	bhi.n	800acf8 <_scanf_float+0x318>
 800ac8a:	455e      	cmp	r6, fp
 800ac8c:	f67f aee8 	bls.w	800aa60 <_scanf_float+0x80>
 800ac90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac94:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ac98:	463a      	mov	r2, r7
 800ac9a:	4640      	mov	r0, r8
 800ac9c:	4798      	blx	r3
 800ac9e:	6923      	ldr	r3, [r4, #16]
 800aca0:	3b01      	subs	r3, #1
 800aca2:	6123      	str	r3, [r4, #16]
 800aca4:	e7f1      	b.n	800ac8a <_scanf_float+0x2aa>
 800aca6:	9802      	ldr	r0, [sp, #8]
 800aca8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800acac:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800acb0:	9002      	str	r0, [sp, #8]
 800acb2:	463a      	mov	r2, r7
 800acb4:	4640      	mov	r0, r8
 800acb6:	4798      	blx	r3
 800acb8:	6923      	ldr	r3, [r4, #16]
 800acba:	3b01      	subs	r3, #1
 800acbc:	6123      	str	r3, [r4, #16]
 800acbe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800acc2:	fa5f fa8a 	uxtb.w	sl, sl
 800acc6:	f1ba 0f02 	cmp.w	sl, #2
 800acca:	d1ec      	bne.n	800aca6 <_scanf_float+0x2c6>
 800accc:	3d03      	subs	r5, #3
 800acce:	b2ed      	uxtb	r5, r5
 800acd0:	1b76      	subs	r6, r6, r5
 800acd2:	6823      	ldr	r3, [r4, #0]
 800acd4:	05da      	lsls	r2, r3, #23
 800acd6:	d52f      	bpl.n	800ad38 <_scanf_float+0x358>
 800acd8:	055b      	lsls	r3, r3, #21
 800acda:	d510      	bpl.n	800acfe <_scanf_float+0x31e>
 800acdc:	455e      	cmp	r6, fp
 800acde:	f67f aebf 	bls.w	800aa60 <_scanf_float+0x80>
 800ace2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ace6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800acea:	463a      	mov	r2, r7
 800acec:	4640      	mov	r0, r8
 800acee:	4798      	blx	r3
 800acf0:	6923      	ldr	r3, [r4, #16]
 800acf2:	3b01      	subs	r3, #1
 800acf4:	6123      	str	r3, [r4, #16]
 800acf6:	e7f1      	b.n	800acdc <_scanf_float+0x2fc>
 800acf8:	46aa      	mov	sl, r5
 800acfa:	9602      	str	r6, [sp, #8]
 800acfc:	e7df      	b.n	800acbe <_scanf_float+0x2de>
 800acfe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ad02:	6923      	ldr	r3, [r4, #16]
 800ad04:	2965      	cmp	r1, #101	; 0x65
 800ad06:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ad0a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800ad0e:	6123      	str	r3, [r4, #16]
 800ad10:	d00c      	beq.n	800ad2c <_scanf_float+0x34c>
 800ad12:	2945      	cmp	r1, #69	; 0x45
 800ad14:	d00a      	beq.n	800ad2c <_scanf_float+0x34c>
 800ad16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad1a:	463a      	mov	r2, r7
 800ad1c:	4640      	mov	r0, r8
 800ad1e:	4798      	blx	r3
 800ad20:	6923      	ldr	r3, [r4, #16]
 800ad22:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ad26:	3b01      	subs	r3, #1
 800ad28:	1eb5      	subs	r5, r6, #2
 800ad2a:	6123      	str	r3, [r4, #16]
 800ad2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad30:	463a      	mov	r2, r7
 800ad32:	4640      	mov	r0, r8
 800ad34:	4798      	blx	r3
 800ad36:	462e      	mov	r6, r5
 800ad38:	6825      	ldr	r5, [r4, #0]
 800ad3a:	f015 0510 	ands.w	r5, r5, #16
 800ad3e:	d159      	bne.n	800adf4 <_scanf_float+0x414>
 800ad40:	7035      	strb	r5, [r6, #0]
 800ad42:	6823      	ldr	r3, [r4, #0]
 800ad44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ad48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad4c:	d11b      	bne.n	800ad86 <_scanf_float+0x3a6>
 800ad4e:	9b01      	ldr	r3, [sp, #4]
 800ad50:	454b      	cmp	r3, r9
 800ad52:	eba3 0209 	sub.w	r2, r3, r9
 800ad56:	d123      	bne.n	800ada0 <_scanf_float+0x3c0>
 800ad58:	2200      	movs	r2, #0
 800ad5a:	4659      	mov	r1, fp
 800ad5c:	4640      	mov	r0, r8
 800ad5e:	f000 fecd 	bl	800bafc <_strtod_r>
 800ad62:	6822      	ldr	r2, [r4, #0]
 800ad64:	9b03      	ldr	r3, [sp, #12]
 800ad66:	f012 0f02 	tst.w	r2, #2
 800ad6a:	ec57 6b10 	vmov	r6, r7, d0
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	d021      	beq.n	800adb6 <_scanf_float+0x3d6>
 800ad72:	9903      	ldr	r1, [sp, #12]
 800ad74:	1d1a      	adds	r2, r3, #4
 800ad76:	600a      	str	r2, [r1, #0]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	e9c3 6700 	strd	r6, r7, [r3]
 800ad7e:	68e3      	ldr	r3, [r4, #12]
 800ad80:	3301      	adds	r3, #1
 800ad82:	60e3      	str	r3, [r4, #12]
 800ad84:	e66d      	b.n	800aa62 <_scanf_float+0x82>
 800ad86:	9b04      	ldr	r3, [sp, #16]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d0e5      	beq.n	800ad58 <_scanf_float+0x378>
 800ad8c:	9905      	ldr	r1, [sp, #20]
 800ad8e:	230a      	movs	r3, #10
 800ad90:	462a      	mov	r2, r5
 800ad92:	3101      	adds	r1, #1
 800ad94:	4640      	mov	r0, r8
 800ad96:	f000 ff39 	bl	800bc0c <_strtol_r>
 800ad9a:	9b04      	ldr	r3, [sp, #16]
 800ad9c:	9e05      	ldr	r6, [sp, #20]
 800ad9e:	1ac2      	subs	r2, r0, r3
 800ada0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ada4:	429e      	cmp	r6, r3
 800ada6:	bf28      	it	cs
 800ada8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800adac:	4912      	ldr	r1, [pc, #72]	; (800adf8 <_scanf_float+0x418>)
 800adae:	4630      	mov	r0, r6
 800adb0:	f000 f860 	bl	800ae74 <siprintf>
 800adb4:	e7d0      	b.n	800ad58 <_scanf_float+0x378>
 800adb6:	9903      	ldr	r1, [sp, #12]
 800adb8:	f012 0f04 	tst.w	r2, #4
 800adbc:	f103 0204 	add.w	r2, r3, #4
 800adc0:	600a      	str	r2, [r1, #0]
 800adc2:	d1d9      	bne.n	800ad78 <_scanf_float+0x398>
 800adc4:	f8d3 8000 	ldr.w	r8, [r3]
 800adc8:	ee10 2a10 	vmov	r2, s0
 800adcc:	ee10 0a10 	vmov	r0, s0
 800add0:	463b      	mov	r3, r7
 800add2:	4639      	mov	r1, r7
 800add4:	f7f5 feaa 	bl	8000b2c <__aeabi_dcmpun>
 800add8:	b128      	cbz	r0, 800ade6 <_scanf_float+0x406>
 800adda:	4808      	ldr	r0, [pc, #32]	; (800adfc <_scanf_float+0x41c>)
 800addc:	f000 f810 	bl	800ae00 <nanf>
 800ade0:	ed88 0a00 	vstr	s0, [r8]
 800ade4:	e7cb      	b.n	800ad7e <_scanf_float+0x39e>
 800ade6:	4630      	mov	r0, r6
 800ade8:	4639      	mov	r1, r7
 800adea:	f7f5 fefd 	bl	8000be8 <__aeabi_d2f>
 800adee:	f8c8 0000 	str.w	r0, [r8]
 800adf2:	e7c4      	b.n	800ad7e <_scanf_float+0x39e>
 800adf4:	2500      	movs	r5, #0
 800adf6:	e634      	b.n	800aa62 <_scanf_float+0x82>
 800adf8:	08010a88 	.word	0x08010a88
 800adfc:	08010e90 	.word	0x08010e90

0800ae00 <nanf>:
 800ae00:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ae08 <nanf+0x8>
 800ae04:	4770      	bx	lr
 800ae06:	bf00      	nop
 800ae08:	7fc00000 	.word	0x7fc00000

0800ae0c <sniprintf>:
 800ae0c:	b40c      	push	{r2, r3}
 800ae0e:	b530      	push	{r4, r5, lr}
 800ae10:	4b17      	ldr	r3, [pc, #92]	; (800ae70 <sniprintf+0x64>)
 800ae12:	1e0c      	subs	r4, r1, #0
 800ae14:	681d      	ldr	r5, [r3, #0]
 800ae16:	b09d      	sub	sp, #116	; 0x74
 800ae18:	da08      	bge.n	800ae2c <sniprintf+0x20>
 800ae1a:	238b      	movs	r3, #139	; 0x8b
 800ae1c:	602b      	str	r3, [r5, #0]
 800ae1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae22:	b01d      	add	sp, #116	; 0x74
 800ae24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae28:	b002      	add	sp, #8
 800ae2a:	4770      	bx	lr
 800ae2c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ae30:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ae34:	bf14      	ite	ne
 800ae36:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800ae3a:	4623      	moveq	r3, r4
 800ae3c:	9304      	str	r3, [sp, #16]
 800ae3e:	9307      	str	r3, [sp, #28]
 800ae40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae44:	9002      	str	r0, [sp, #8]
 800ae46:	9006      	str	r0, [sp, #24]
 800ae48:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ae4c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ae4e:	ab21      	add	r3, sp, #132	; 0x84
 800ae50:	a902      	add	r1, sp, #8
 800ae52:	4628      	mov	r0, r5
 800ae54:	9301      	str	r3, [sp, #4]
 800ae56:	f002 ff05 	bl	800dc64 <_svfiprintf_r>
 800ae5a:	1c43      	adds	r3, r0, #1
 800ae5c:	bfbc      	itt	lt
 800ae5e:	238b      	movlt	r3, #139	; 0x8b
 800ae60:	602b      	strlt	r3, [r5, #0]
 800ae62:	2c00      	cmp	r4, #0
 800ae64:	d0dd      	beq.n	800ae22 <sniprintf+0x16>
 800ae66:	9b02      	ldr	r3, [sp, #8]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	701a      	strb	r2, [r3, #0]
 800ae6c:	e7d9      	b.n	800ae22 <sniprintf+0x16>
 800ae6e:	bf00      	nop
 800ae70:	20000034 	.word	0x20000034

0800ae74 <siprintf>:
 800ae74:	b40e      	push	{r1, r2, r3}
 800ae76:	b500      	push	{lr}
 800ae78:	b09c      	sub	sp, #112	; 0x70
 800ae7a:	ab1d      	add	r3, sp, #116	; 0x74
 800ae7c:	9002      	str	r0, [sp, #8]
 800ae7e:	9006      	str	r0, [sp, #24]
 800ae80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae84:	4809      	ldr	r0, [pc, #36]	; (800aeac <siprintf+0x38>)
 800ae86:	9107      	str	r1, [sp, #28]
 800ae88:	9104      	str	r1, [sp, #16]
 800ae8a:	4909      	ldr	r1, [pc, #36]	; (800aeb0 <siprintf+0x3c>)
 800ae8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae90:	9105      	str	r1, [sp, #20]
 800ae92:	6800      	ldr	r0, [r0, #0]
 800ae94:	9301      	str	r3, [sp, #4]
 800ae96:	a902      	add	r1, sp, #8
 800ae98:	f002 fee4 	bl	800dc64 <_svfiprintf_r>
 800ae9c:	9b02      	ldr	r3, [sp, #8]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	701a      	strb	r2, [r3, #0]
 800aea2:	b01c      	add	sp, #112	; 0x70
 800aea4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aea8:	b003      	add	sp, #12
 800aeaa:	4770      	bx	lr
 800aeac:	20000034 	.word	0x20000034
 800aeb0:	ffff0208 	.word	0xffff0208

0800aeb4 <sulp>:
 800aeb4:	b570      	push	{r4, r5, r6, lr}
 800aeb6:	4604      	mov	r4, r0
 800aeb8:	460d      	mov	r5, r1
 800aeba:	ec45 4b10 	vmov	d0, r4, r5
 800aebe:	4616      	mov	r6, r2
 800aec0:	f002 fc2e 	bl	800d720 <__ulp>
 800aec4:	ec51 0b10 	vmov	r0, r1, d0
 800aec8:	b17e      	cbz	r6, 800aeea <sulp+0x36>
 800aeca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aece:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	dd09      	ble.n	800aeea <sulp+0x36>
 800aed6:	051b      	lsls	r3, r3, #20
 800aed8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800aedc:	2400      	movs	r4, #0
 800aede:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800aee2:	4622      	mov	r2, r4
 800aee4:	462b      	mov	r3, r5
 800aee6:	f7f5 fb87 	bl	80005f8 <__aeabi_dmul>
 800aeea:	bd70      	pop	{r4, r5, r6, pc}
 800aeec:	0000      	movs	r0, r0
	...

0800aef0 <_strtod_l>:
 800aef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aef4:	ed2d 8b02 	vpush	{d8}
 800aef8:	b09d      	sub	sp, #116	; 0x74
 800aefa:	461f      	mov	r7, r3
 800aefc:	2300      	movs	r3, #0
 800aefe:	9318      	str	r3, [sp, #96]	; 0x60
 800af00:	4ba2      	ldr	r3, [pc, #648]	; (800b18c <_strtod_l+0x29c>)
 800af02:	9213      	str	r2, [sp, #76]	; 0x4c
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	9305      	str	r3, [sp, #20]
 800af08:	4604      	mov	r4, r0
 800af0a:	4618      	mov	r0, r3
 800af0c:	4688      	mov	r8, r1
 800af0e:	f7f5 f95f 	bl	80001d0 <strlen>
 800af12:	f04f 0a00 	mov.w	sl, #0
 800af16:	4605      	mov	r5, r0
 800af18:	f04f 0b00 	mov.w	fp, #0
 800af1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800af20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af22:	781a      	ldrb	r2, [r3, #0]
 800af24:	2a2b      	cmp	r2, #43	; 0x2b
 800af26:	d04e      	beq.n	800afc6 <_strtod_l+0xd6>
 800af28:	d83b      	bhi.n	800afa2 <_strtod_l+0xb2>
 800af2a:	2a0d      	cmp	r2, #13
 800af2c:	d834      	bhi.n	800af98 <_strtod_l+0xa8>
 800af2e:	2a08      	cmp	r2, #8
 800af30:	d834      	bhi.n	800af9c <_strtod_l+0xac>
 800af32:	2a00      	cmp	r2, #0
 800af34:	d03e      	beq.n	800afb4 <_strtod_l+0xc4>
 800af36:	2300      	movs	r3, #0
 800af38:	930a      	str	r3, [sp, #40]	; 0x28
 800af3a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800af3c:	7833      	ldrb	r3, [r6, #0]
 800af3e:	2b30      	cmp	r3, #48	; 0x30
 800af40:	f040 80b0 	bne.w	800b0a4 <_strtod_l+0x1b4>
 800af44:	7873      	ldrb	r3, [r6, #1]
 800af46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800af4a:	2b58      	cmp	r3, #88	; 0x58
 800af4c:	d168      	bne.n	800b020 <_strtod_l+0x130>
 800af4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af50:	9301      	str	r3, [sp, #4]
 800af52:	ab18      	add	r3, sp, #96	; 0x60
 800af54:	9702      	str	r7, [sp, #8]
 800af56:	9300      	str	r3, [sp, #0]
 800af58:	4a8d      	ldr	r2, [pc, #564]	; (800b190 <_strtod_l+0x2a0>)
 800af5a:	ab19      	add	r3, sp, #100	; 0x64
 800af5c:	a917      	add	r1, sp, #92	; 0x5c
 800af5e:	4620      	mov	r0, r4
 800af60:	f001 fd38 	bl	800c9d4 <__gethex>
 800af64:	f010 0707 	ands.w	r7, r0, #7
 800af68:	4605      	mov	r5, r0
 800af6a:	d005      	beq.n	800af78 <_strtod_l+0x88>
 800af6c:	2f06      	cmp	r7, #6
 800af6e:	d12c      	bne.n	800afca <_strtod_l+0xda>
 800af70:	3601      	adds	r6, #1
 800af72:	2300      	movs	r3, #0
 800af74:	9617      	str	r6, [sp, #92]	; 0x5c
 800af76:	930a      	str	r3, [sp, #40]	; 0x28
 800af78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	f040 8590 	bne.w	800baa0 <_strtod_l+0xbb0>
 800af80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af82:	b1eb      	cbz	r3, 800afc0 <_strtod_l+0xd0>
 800af84:	4652      	mov	r2, sl
 800af86:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800af8a:	ec43 2b10 	vmov	d0, r2, r3
 800af8e:	b01d      	add	sp, #116	; 0x74
 800af90:	ecbd 8b02 	vpop	{d8}
 800af94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af98:	2a20      	cmp	r2, #32
 800af9a:	d1cc      	bne.n	800af36 <_strtod_l+0x46>
 800af9c:	3301      	adds	r3, #1
 800af9e:	9317      	str	r3, [sp, #92]	; 0x5c
 800afa0:	e7be      	b.n	800af20 <_strtod_l+0x30>
 800afa2:	2a2d      	cmp	r2, #45	; 0x2d
 800afa4:	d1c7      	bne.n	800af36 <_strtod_l+0x46>
 800afa6:	2201      	movs	r2, #1
 800afa8:	920a      	str	r2, [sp, #40]	; 0x28
 800afaa:	1c5a      	adds	r2, r3, #1
 800afac:	9217      	str	r2, [sp, #92]	; 0x5c
 800afae:	785b      	ldrb	r3, [r3, #1]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d1c2      	bne.n	800af3a <_strtod_l+0x4a>
 800afb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800afb6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800afba:	2b00      	cmp	r3, #0
 800afbc:	f040 856e 	bne.w	800ba9c <_strtod_l+0xbac>
 800afc0:	4652      	mov	r2, sl
 800afc2:	465b      	mov	r3, fp
 800afc4:	e7e1      	b.n	800af8a <_strtod_l+0x9a>
 800afc6:	2200      	movs	r2, #0
 800afc8:	e7ee      	b.n	800afa8 <_strtod_l+0xb8>
 800afca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800afcc:	b13a      	cbz	r2, 800afde <_strtod_l+0xee>
 800afce:	2135      	movs	r1, #53	; 0x35
 800afd0:	a81a      	add	r0, sp, #104	; 0x68
 800afd2:	f002 fcb0 	bl	800d936 <__copybits>
 800afd6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800afd8:	4620      	mov	r0, r4
 800afda:	f002 f86f 	bl	800d0bc <_Bfree>
 800afde:	3f01      	subs	r7, #1
 800afe0:	2f04      	cmp	r7, #4
 800afe2:	d806      	bhi.n	800aff2 <_strtod_l+0x102>
 800afe4:	e8df f007 	tbb	[pc, r7]
 800afe8:	1714030a 	.word	0x1714030a
 800afec:	0a          	.byte	0x0a
 800afed:	00          	.byte	0x00
 800afee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800aff2:	0728      	lsls	r0, r5, #28
 800aff4:	d5c0      	bpl.n	800af78 <_strtod_l+0x88>
 800aff6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800affa:	e7bd      	b.n	800af78 <_strtod_l+0x88>
 800affc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b000:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b002:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b006:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b00a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b00e:	e7f0      	b.n	800aff2 <_strtod_l+0x102>
 800b010:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b194 <_strtod_l+0x2a4>
 800b014:	e7ed      	b.n	800aff2 <_strtod_l+0x102>
 800b016:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b01a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b01e:	e7e8      	b.n	800aff2 <_strtod_l+0x102>
 800b020:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b022:	1c5a      	adds	r2, r3, #1
 800b024:	9217      	str	r2, [sp, #92]	; 0x5c
 800b026:	785b      	ldrb	r3, [r3, #1]
 800b028:	2b30      	cmp	r3, #48	; 0x30
 800b02a:	d0f9      	beq.n	800b020 <_strtod_l+0x130>
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d0a3      	beq.n	800af78 <_strtod_l+0x88>
 800b030:	2301      	movs	r3, #1
 800b032:	f04f 0900 	mov.w	r9, #0
 800b036:	9304      	str	r3, [sp, #16]
 800b038:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b03a:	9308      	str	r3, [sp, #32]
 800b03c:	f8cd 901c 	str.w	r9, [sp, #28]
 800b040:	464f      	mov	r7, r9
 800b042:	220a      	movs	r2, #10
 800b044:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b046:	7806      	ldrb	r6, [r0, #0]
 800b048:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b04c:	b2d9      	uxtb	r1, r3
 800b04e:	2909      	cmp	r1, #9
 800b050:	d92a      	bls.n	800b0a8 <_strtod_l+0x1b8>
 800b052:	9905      	ldr	r1, [sp, #20]
 800b054:	462a      	mov	r2, r5
 800b056:	f002 ff1f 	bl	800de98 <strncmp>
 800b05a:	b398      	cbz	r0, 800b0c4 <_strtod_l+0x1d4>
 800b05c:	2000      	movs	r0, #0
 800b05e:	4632      	mov	r2, r6
 800b060:	463d      	mov	r5, r7
 800b062:	9005      	str	r0, [sp, #20]
 800b064:	4603      	mov	r3, r0
 800b066:	2a65      	cmp	r2, #101	; 0x65
 800b068:	d001      	beq.n	800b06e <_strtod_l+0x17e>
 800b06a:	2a45      	cmp	r2, #69	; 0x45
 800b06c:	d118      	bne.n	800b0a0 <_strtod_l+0x1b0>
 800b06e:	b91d      	cbnz	r5, 800b078 <_strtod_l+0x188>
 800b070:	9a04      	ldr	r2, [sp, #16]
 800b072:	4302      	orrs	r2, r0
 800b074:	d09e      	beq.n	800afb4 <_strtod_l+0xc4>
 800b076:	2500      	movs	r5, #0
 800b078:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b07c:	f108 0201 	add.w	r2, r8, #1
 800b080:	9217      	str	r2, [sp, #92]	; 0x5c
 800b082:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b086:	2a2b      	cmp	r2, #43	; 0x2b
 800b088:	d075      	beq.n	800b176 <_strtod_l+0x286>
 800b08a:	2a2d      	cmp	r2, #45	; 0x2d
 800b08c:	d07b      	beq.n	800b186 <_strtod_l+0x296>
 800b08e:	f04f 0c00 	mov.w	ip, #0
 800b092:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b096:	2909      	cmp	r1, #9
 800b098:	f240 8082 	bls.w	800b1a0 <_strtod_l+0x2b0>
 800b09c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b0a0:	2600      	movs	r6, #0
 800b0a2:	e09d      	b.n	800b1e0 <_strtod_l+0x2f0>
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	e7c4      	b.n	800b032 <_strtod_l+0x142>
 800b0a8:	2f08      	cmp	r7, #8
 800b0aa:	bfd8      	it	le
 800b0ac:	9907      	ldrle	r1, [sp, #28]
 800b0ae:	f100 0001 	add.w	r0, r0, #1
 800b0b2:	bfda      	itte	le
 800b0b4:	fb02 3301 	mlale	r3, r2, r1, r3
 800b0b8:	9307      	strle	r3, [sp, #28]
 800b0ba:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b0be:	3701      	adds	r7, #1
 800b0c0:	9017      	str	r0, [sp, #92]	; 0x5c
 800b0c2:	e7bf      	b.n	800b044 <_strtod_l+0x154>
 800b0c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b0c6:	195a      	adds	r2, r3, r5
 800b0c8:	9217      	str	r2, [sp, #92]	; 0x5c
 800b0ca:	5d5a      	ldrb	r2, [r3, r5]
 800b0cc:	2f00      	cmp	r7, #0
 800b0ce:	d037      	beq.n	800b140 <_strtod_l+0x250>
 800b0d0:	9005      	str	r0, [sp, #20]
 800b0d2:	463d      	mov	r5, r7
 800b0d4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b0d8:	2b09      	cmp	r3, #9
 800b0da:	d912      	bls.n	800b102 <_strtod_l+0x212>
 800b0dc:	2301      	movs	r3, #1
 800b0de:	e7c2      	b.n	800b066 <_strtod_l+0x176>
 800b0e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b0e2:	1c5a      	adds	r2, r3, #1
 800b0e4:	9217      	str	r2, [sp, #92]	; 0x5c
 800b0e6:	785a      	ldrb	r2, [r3, #1]
 800b0e8:	3001      	adds	r0, #1
 800b0ea:	2a30      	cmp	r2, #48	; 0x30
 800b0ec:	d0f8      	beq.n	800b0e0 <_strtod_l+0x1f0>
 800b0ee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b0f2:	2b08      	cmp	r3, #8
 800b0f4:	f200 84d9 	bhi.w	800baaa <_strtod_l+0xbba>
 800b0f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b0fa:	9005      	str	r0, [sp, #20]
 800b0fc:	2000      	movs	r0, #0
 800b0fe:	9308      	str	r3, [sp, #32]
 800b100:	4605      	mov	r5, r0
 800b102:	3a30      	subs	r2, #48	; 0x30
 800b104:	f100 0301 	add.w	r3, r0, #1
 800b108:	d014      	beq.n	800b134 <_strtod_l+0x244>
 800b10a:	9905      	ldr	r1, [sp, #20]
 800b10c:	4419      	add	r1, r3
 800b10e:	9105      	str	r1, [sp, #20]
 800b110:	462b      	mov	r3, r5
 800b112:	eb00 0e05 	add.w	lr, r0, r5
 800b116:	210a      	movs	r1, #10
 800b118:	4573      	cmp	r3, lr
 800b11a:	d113      	bne.n	800b144 <_strtod_l+0x254>
 800b11c:	182b      	adds	r3, r5, r0
 800b11e:	2b08      	cmp	r3, #8
 800b120:	f105 0501 	add.w	r5, r5, #1
 800b124:	4405      	add	r5, r0
 800b126:	dc1c      	bgt.n	800b162 <_strtod_l+0x272>
 800b128:	9907      	ldr	r1, [sp, #28]
 800b12a:	230a      	movs	r3, #10
 800b12c:	fb03 2301 	mla	r3, r3, r1, r2
 800b130:	9307      	str	r3, [sp, #28]
 800b132:	2300      	movs	r3, #0
 800b134:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b136:	1c51      	adds	r1, r2, #1
 800b138:	9117      	str	r1, [sp, #92]	; 0x5c
 800b13a:	7852      	ldrb	r2, [r2, #1]
 800b13c:	4618      	mov	r0, r3
 800b13e:	e7c9      	b.n	800b0d4 <_strtod_l+0x1e4>
 800b140:	4638      	mov	r0, r7
 800b142:	e7d2      	b.n	800b0ea <_strtod_l+0x1fa>
 800b144:	2b08      	cmp	r3, #8
 800b146:	dc04      	bgt.n	800b152 <_strtod_l+0x262>
 800b148:	9e07      	ldr	r6, [sp, #28]
 800b14a:	434e      	muls	r6, r1
 800b14c:	9607      	str	r6, [sp, #28]
 800b14e:	3301      	adds	r3, #1
 800b150:	e7e2      	b.n	800b118 <_strtod_l+0x228>
 800b152:	f103 0c01 	add.w	ip, r3, #1
 800b156:	f1bc 0f10 	cmp.w	ip, #16
 800b15a:	bfd8      	it	le
 800b15c:	fb01 f909 	mulle.w	r9, r1, r9
 800b160:	e7f5      	b.n	800b14e <_strtod_l+0x25e>
 800b162:	2d10      	cmp	r5, #16
 800b164:	bfdc      	itt	le
 800b166:	230a      	movle	r3, #10
 800b168:	fb03 2909 	mlale	r9, r3, r9, r2
 800b16c:	e7e1      	b.n	800b132 <_strtod_l+0x242>
 800b16e:	2300      	movs	r3, #0
 800b170:	9305      	str	r3, [sp, #20]
 800b172:	2301      	movs	r3, #1
 800b174:	e77c      	b.n	800b070 <_strtod_l+0x180>
 800b176:	f04f 0c00 	mov.w	ip, #0
 800b17a:	f108 0202 	add.w	r2, r8, #2
 800b17e:	9217      	str	r2, [sp, #92]	; 0x5c
 800b180:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b184:	e785      	b.n	800b092 <_strtod_l+0x1a2>
 800b186:	f04f 0c01 	mov.w	ip, #1
 800b18a:	e7f6      	b.n	800b17a <_strtod_l+0x28a>
 800b18c:	08010cd8 	.word	0x08010cd8
 800b190:	08010a90 	.word	0x08010a90
 800b194:	7ff00000 	.word	0x7ff00000
 800b198:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b19a:	1c51      	adds	r1, r2, #1
 800b19c:	9117      	str	r1, [sp, #92]	; 0x5c
 800b19e:	7852      	ldrb	r2, [r2, #1]
 800b1a0:	2a30      	cmp	r2, #48	; 0x30
 800b1a2:	d0f9      	beq.n	800b198 <_strtod_l+0x2a8>
 800b1a4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b1a8:	2908      	cmp	r1, #8
 800b1aa:	f63f af79 	bhi.w	800b0a0 <_strtod_l+0x1b0>
 800b1ae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b1b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b1b4:	9206      	str	r2, [sp, #24]
 800b1b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b1b8:	1c51      	adds	r1, r2, #1
 800b1ba:	9117      	str	r1, [sp, #92]	; 0x5c
 800b1bc:	7852      	ldrb	r2, [r2, #1]
 800b1be:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b1c2:	2e09      	cmp	r6, #9
 800b1c4:	d937      	bls.n	800b236 <_strtod_l+0x346>
 800b1c6:	9e06      	ldr	r6, [sp, #24]
 800b1c8:	1b89      	subs	r1, r1, r6
 800b1ca:	2908      	cmp	r1, #8
 800b1cc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b1d0:	dc02      	bgt.n	800b1d8 <_strtod_l+0x2e8>
 800b1d2:	4576      	cmp	r6, lr
 800b1d4:	bfa8      	it	ge
 800b1d6:	4676      	movge	r6, lr
 800b1d8:	f1bc 0f00 	cmp.w	ip, #0
 800b1dc:	d000      	beq.n	800b1e0 <_strtod_l+0x2f0>
 800b1de:	4276      	negs	r6, r6
 800b1e0:	2d00      	cmp	r5, #0
 800b1e2:	d14d      	bne.n	800b280 <_strtod_l+0x390>
 800b1e4:	9904      	ldr	r1, [sp, #16]
 800b1e6:	4301      	orrs	r1, r0
 800b1e8:	f47f aec6 	bne.w	800af78 <_strtod_l+0x88>
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	f47f aee1 	bne.w	800afb4 <_strtod_l+0xc4>
 800b1f2:	2a69      	cmp	r2, #105	; 0x69
 800b1f4:	d027      	beq.n	800b246 <_strtod_l+0x356>
 800b1f6:	dc24      	bgt.n	800b242 <_strtod_l+0x352>
 800b1f8:	2a49      	cmp	r2, #73	; 0x49
 800b1fa:	d024      	beq.n	800b246 <_strtod_l+0x356>
 800b1fc:	2a4e      	cmp	r2, #78	; 0x4e
 800b1fe:	f47f aed9 	bne.w	800afb4 <_strtod_l+0xc4>
 800b202:	499f      	ldr	r1, [pc, #636]	; (800b480 <_strtod_l+0x590>)
 800b204:	a817      	add	r0, sp, #92	; 0x5c
 800b206:	f001 fe3d 	bl	800ce84 <__match>
 800b20a:	2800      	cmp	r0, #0
 800b20c:	f43f aed2 	beq.w	800afb4 <_strtod_l+0xc4>
 800b210:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	2b28      	cmp	r3, #40	; 0x28
 800b216:	d12d      	bne.n	800b274 <_strtod_l+0x384>
 800b218:	499a      	ldr	r1, [pc, #616]	; (800b484 <_strtod_l+0x594>)
 800b21a:	aa1a      	add	r2, sp, #104	; 0x68
 800b21c:	a817      	add	r0, sp, #92	; 0x5c
 800b21e:	f001 fe45 	bl	800ceac <__hexnan>
 800b222:	2805      	cmp	r0, #5
 800b224:	d126      	bne.n	800b274 <_strtod_l+0x384>
 800b226:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b228:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b22c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b230:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b234:	e6a0      	b.n	800af78 <_strtod_l+0x88>
 800b236:	210a      	movs	r1, #10
 800b238:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b23c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b240:	e7b9      	b.n	800b1b6 <_strtod_l+0x2c6>
 800b242:	2a6e      	cmp	r2, #110	; 0x6e
 800b244:	e7db      	b.n	800b1fe <_strtod_l+0x30e>
 800b246:	4990      	ldr	r1, [pc, #576]	; (800b488 <_strtod_l+0x598>)
 800b248:	a817      	add	r0, sp, #92	; 0x5c
 800b24a:	f001 fe1b 	bl	800ce84 <__match>
 800b24e:	2800      	cmp	r0, #0
 800b250:	f43f aeb0 	beq.w	800afb4 <_strtod_l+0xc4>
 800b254:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b256:	498d      	ldr	r1, [pc, #564]	; (800b48c <_strtod_l+0x59c>)
 800b258:	3b01      	subs	r3, #1
 800b25a:	a817      	add	r0, sp, #92	; 0x5c
 800b25c:	9317      	str	r3, [sp, #92]	; 0x5c
 800b25e:	f001 fe11 	bl	800ce84 <__match>
 800b262:	b910      	cbnz	r0, 800b26a <_strtod_l+0x37a>
 800b264:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b266:	3301      	adds	r3, #1
 800b268:	9317      	str	r3, [sp, #92]	; 0x5c
 800b26a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b49c <_strtod_l+0x5ac>
 800b26e:	f04f 0a00 	mov.w	sl, #0
 800b272:	e681      	b.n	800af78 <_strtod_l+0x88>
 800b274:	4886      	ldr	r0, [pc, #536]	; (800b490 <_strtod_l+0x5a0>)
 800b276:	f002 fdf7 	bl	800de68 <nan>
 800b27a:	ec5b ab10 	vmov	sl, fp, d0
 800b27e:	e67b      	b.n	800af78 <_strtod_l+0x88>
 800b280:	9b05      	ldr	r3, [sp, #20]
 800b282:	9807      	ldr	r0, [sp, #28]
 800b284:	1af3      	subs	r3, r6, r3
 800b286:	2f00      	cmp	r7, #0
 800b288:	bf08      	it	eq
 800b28a:	462f      	moveq	r7, r5
 800b28c:	2d10      	cmp	r5, #16
 800b28e:	9306      	str	r3, [sp, #24]
 800b290:	46a8      	mov	r8, r5
 800b292:	bfa8      	it	ge
 800b294:	f04f 0810 	movge.w	r8, #16
 800b298:	f7f5 f934 	bl	8000504 <__aeabi_ui2d>
 800b29c:	2d09      	cmp	r5, #9
 800b29e:	4682      	mov	sl, r0
 800b2a0:	468b      	mov	fp, r1
 800b2a2:	dd13      	ble.n	800b2cc <_strtod_l+0x3dc>
 800b2a4:	4b7b      	ldr	r3, [pc, #492]	; (800b494 <_strtod_l+0x5a4>)
 800b2a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b2aa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b2ae:	f7f5 f9a3 	bl	80005f8 <__aeabi_dmul>
 800b2b2:	4682      	mov	sl, r0
 800b2b4:	4648      	mov	r0, r9
 800b2b6:	468b      	mov	fp, r1
 800b2b8:	f7f5 f924 	bl	8000504 <__aeabi_ui2d>
 800b2bc:	4602      	mov	r2, r0
 800b2be:	460b      	mov	r3, r1
 800b2c0:	4650      	mov	r0, sl
 800b2c2:	4659      	mov	r1, fp
 800b2c4:	f7f4 ffe2 	bl	800028c <__adddf3>
 800b2c8:	4682      	mov	sl, r0
 800b2ca:	468b      	mov	fp, r1
 800b2cc:	2d0f      	cmp	r5, #15
 800b2ce:	dc38      	bgt.n	800b342 <_strtod_l+0x452>
 800b2d0:	9b06      	ldr	r3, [sp, #24]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	f43f ae50 	beq.w	800af78 <_strtod_l+0x88>
 800b2d8:	dd24      	ble.n	800b324 <_strtod_l+0x434>
 800b2da:	2b16      	cmp	r3, #22
 800b2dc:	dc0b      	bgt.n	800b2f6 <_strtod_l+0x406>
 800b2de:	496d      	ldr	r1, [pc, #436]	; (800b494 <_strtod_l+0x5a4>)
 800b2e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b2e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2e8:	4652      	mov	r2, sl
 800b2ea:	465b      	mov	r3, fp
 800b2ec:	f7f5 f984 	bl	80005f8 <__aeabi_dmul>
 800b2f0:	4682      	mov	sl, r0
 800b2f2:	468b      	mov	fp, r1
 800b2f4:	e640      	b.n	800af78 <_strtod_l+0x88>
 800b2f6:	9a06      	ldr	r2, [sp, #24]
 800b2f8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	db20      	blt.n	800b342 <_strtod_l+0x452>
 800b300:	4c64      	ldr	r4, [pc, #400]	; (800b494 <_strtod_l+0x5a4>)
 800b302:	f1c5 050f 	rsb	r5, r5, #15
 800b306:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b30a:	4652      	mov	r2, sl
 800b30c:	465b      	mov	r3, fp
 800b30e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b312:	f7f5 f971 	bl	80005f8 <__aeabi_dmul>
 800b316:	9b06      	ldr	r3, [sp, #24]
 800b318:	1b5d      	subs	r5, r3, r5
 800b31a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b31e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b322:	e7e3      	b.n	800b2ec <_strtod_l+0x3fc>
 800b324:	9b06      	ldr	r3, [sp, #24]
 800b326:	3316      	adds	r3, #22
 800b328:	db0b      	blt.n	800b342 <_strtod_l+0x452>
 800b32a:	9b05      	ldr	r3, [sp, #20]
 800b32c:	1b9e      	subs	r6, r3, r6
 800b32e:	4b59      	ldr	r3, [pc, #356]	; (800b494 <_strtod_l+0x5a4>)
 800b330:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b334:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b338:	4650      	mov	r0, sl
 800b33a:	4659      	mov	r1, fp
 800b33c:	f7f5 fa86 	bl	800084c <__aeabi_ddiv>
 800b340:	e7d6      	b.n	800b2f0 <_strtod_l+0x400>
 800b342:	9b06      	ldr	r3, [sp, #24]
 800b344:	eba5 0808 	sub.w	r8, r5, r8
 800b348:	4498      	add	r8, r3
 800b34a:	f1b8 0f00 	cmp.w	r8, #0
 800b34e:	dd74      	ble.n	800b43a <_strtod_l+0x54a>
 800b350:	f018 030f 	ands.w	r3, r8, #15
 800b354:	d00a      	beq.n	800b36c <_strtod_l+0x47c>
 800b356:	494f      	ldr	r1, [pc, #316]	; (800b494 <_strtod_l+0x5a4>)
 800b358:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b35c:	4652      	mov	r2, sl
 800b35e:	465b      	mov	r3, fp
 800b360:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b364:	f7f5 f948 	bl	80005f8 <__aeabi_dmul>
 800b368:	4682      	mov	sl, r0
 800b36a:	468b      	mov	fp, r1
 800b36c:	f038 080f 	bics.w	r8, r8, #15
 800b370:	d04f      	beq.n	800b412 <_strtod_l+0x522>
 800b372:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b376:	dd22      	ble.n	800b3be <_strtod_l+0x4ce>
 800b378:	2500      	movs	r5, #0
 800b37a:	462e      	mov	r6, r5
 800b37c:	9507      	str	r5, [sp, #28]
 800b37e:	9505      	str	r5, [sp, #20]
 800b380:	2322      	movs	r3, #34	; 0x22
 800b382:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b49c <_strtod_l+0x5ac>
 800b386:	6023      	str	r3, [r4, #0]
 800b388:	f04f 0a00 	mov.w	sl, #0
 800b38c:	9b07      	ldr	r3, [sp, #28]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	f43f adf2 	beq.w	800af78 <_strtod_l+0x88>
 800b394:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b396:	4620      	mov	r0, r4
 800b398:	f001 fe90 	bl	800d0bc <_Bfree>
 800b39c:	9905      	ldr	r1, [sp, #20]
 800b39e:	4620      	mov	r0, r4
 800b3a0:	f001 fe8c 	bl	800d0bc <_Bfree>
 800b3a4:	4631      	mov	r1, r6
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	f001 fe88 	bl	800d0bc <_Bfree>
 800b3ac:	9907      	ldr	r1, [sp, #28]
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f001 fe84 	bl	800d0bc <_Bfree>
 800b3b4:	4629      	mov	r1, r5
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	f001 fe80 	bl	800d0bc <_Bfree>
 800b3bc:	e5dc      	b.n	800af78 <_strtod_l+0x88>
 800b3be:	4b36      	ldr	r3, [pc, #216]	; (800b498 <_strtod_l+0x5a8>)
 800b3c0:	9304      	str	r3, [sp, #16]
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b3c8:	4650      	mov	r0, sl
 800b3ca:	4659      	mov	r1, fp
 800b3cc:	4699      	mov	r9, r3
 800b3ce:	f1b8 0f01 	cmp.w	r8, #1
 800b3d2:	dc21      	bgt.n	800b418 <_strtod_l+0x528>
 800b3d4:	b10b      	cbz	r3, 800b3da <_strtod_l+0x4ea>
 800b3d6:	4682      	mov	sl, r0
 800b3d8:	468b      	mov	fp, r1
 800b3da:	4b2f      	ldr	r3, [pc, #188]	; (800b498 <_strtod_l+0x5a8>)
 800b3dc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b3e0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b3e4:	4652      	mov	r2, sl
 800b3e6:	465b      	mov	r3, fp
 800b3e8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b3ec:	f7f5 f904 	bl	80005f8 <__aeabi_dmul>
 800b3f0:	4b2a      	ldr	r3, [pc, #168]	; (800b49c <_strtod_l+0x5ac>)
 800b3f2:	460a      	mov	r2, r1
 800b3f4:	400b      	ands	r3, r1
 800b3f6:	492a      	ldr	r1, [pc, #168]	; (800b4a0 <_strtod_l+0x5b0>)
 800b3f8:	428b      	cmp	r3, r1
 800b3fa:	4682      	mov	sl, r0
 800b3fc:	d8bc      	bhi.n	800b378 <_strtod_l+0x488>
 800b3fe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b402:	428b      	cmp	r3, r1
 800b404:	bf86      	itte	hi
 800b406:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b4a4 <_strtod_l+0x5b4>
 800b40a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800b40e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b412:	2300      	movs	r3, #0
 800b414:	9304      	str	r3, [sp, #16]
 800b416:	e084      	b.n	800b522 <_strtod_l+0x632>
 800b418:	f018 0f01 	tst.w	r8, #1
 800b41c:	d005      	beq.n	800b42a <_strtod_l+0x53a>
 800b41e:	9b04      	ldr	r3, [sp, #16]
 800b420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b424:	f7f5 f8e8 	bl	80005f8 <__aeabi_dmul>
 800b428:	2301      	movs	r3, #1
 800b42a:	9a04      	ldr	r2, [sp, #16]
 800b42c:	3208      	adds	r2, #8
 800b42e:	f109 0901 	add.w	r9, r9, #1
 800b432:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b436:	9204      	str	r2, [sp, #16]
 800b438:	e7c9      	b.n	800b3ce <_strtod_l+0x4de>
 800b43a:	d0ea      	beq.n	800b412 <_strtod_l+0x522>
 800b43c:	f1c8 0800 	rsb	r8, r8, #0
 800b440:	f018 020f 	ands.w	r2, r8, #15
 800b444:	d00a      	beq.n	800b45c <_strtod_l+0x56c>
 800b446:	4b13      	ldr	r3, [pc, #76]	; (800b494 <_strtod_l+0x5a4>)
 800b448:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b44c:	4650      	mov	r0, sl
 800b44e:	4659      	mov	r1, fp
 800b450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b454:	f7f5 f9fa 	bl	800084c <__aeabi_ddiv>
 800b458:	4682      	mov	sl, r0
 800b45a:	468b      	mov	fp, r1
 800b45c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b460:	d0d7      	beq.n	800b412 <_strtod_l+0x522>
 800b462:	f1b8 0f1f 	cmp.w	r8, #31
 800b466:	dd1f      	ble.n	800b4a8 <_strtod_l+0x5b8>
 800b468:	2500      	movs	r5, #0
 800b46a:	462e      	mov	r6, r5
 800b46c:	9507      	str	r5, [sp, #28]
 800b46e:	9505      	str	r5, [sp, #20]
 800b470:	2322      	movs	r3, #34	; 0x22
 800b472:	f04f 0a00 	mov.w	sl, #0
 800b476:	f04f 0b00 	mov.w	fp, #0
 800b47a:	6023      	str	r3, [r4, #0]
 800b47c:	e786      	b.n	800b38c <_strtod_l+0x49c>
 800b47e:	bf00      	nop
 800b480:	08010a61 	.word	0x08010a61
 800b484:	08010aa4 	.word	0x08010aa4
 800b488:	08010a59 	.word	0x08010a59
 800b48c:	08010be4 	.word	0x08010be4
 800b490:	08010e90 	.word	0x08010e90
 800b494:	08010d70 	.word	0x08010d70
 800b498:	08010d48 	.word	0x08010d48
 800b49c:	7ff00000 	.word	0x7ff00000
 800b4a0:	7ca00000 	.word	0x7ca00000
 800b4a4:	7fefffff 	.word	0x7fefffff
 800b4a8:	f018 0310 	ands.w	r3, r8, #16
 800b4ac:	bf18      	it	ne
 800b4ae:	236a      	movne	r3, #106	; 0x6a
 800b4b0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b860 <_strtod_l+0x970>
 800b4b4:	9304      	str	r3, [sp, #16]
 800b4b6:	4650      	mov	r0, sl
 800b4b8:	4659      	mov	r1, fp
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	f018 0f01 	tst.w	r8, #1
 800b4c0:	d004      	beq.n	800b4cc <_strtod_l+0x5dc>
 800b4c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b4c6:	f7f5 f897 	bl	80005f8 <__aeabi_dmul>
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b4d0:	f109 0908 	add.w	r9, r9, #8
 800b4d4:	d1f2      	bne.n	800b4bc <_strtod_l+0x5cc>
 800b4d6:	b10b      	cbz	r3, 800b4dc <_strtod_l+0x5ec>
 800b4d8:	4682      	mov	sl, r0
 800b4da:	468b      	mov	fp, r1
 800b4dc:	9b04      	ldr	r3, [sp, #16]
 800b4de:	b1c3      	cbz	r3, 800b512 <_strtod_l+0x622>
 800b4e0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b4e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	4659      	mov	r1, fp
 800b4ec:	dd11      	ble.n	800b512 <_strtod_l+0x622>
 800b4ee:	2b1f      	cmp	r3, #31
 800b4f0:	f340 8124 	ble.w	800b73c <_strtod_l+0x84c>
 800b4f4:	2b34      	cmp	r3, #52	; 0x34
 800b4f6:	bfde      	ittt	le
 800b4f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b4fc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800b500:	fa03 f202 	lslle.w	r2, r3, r2
 800b504:	f04f 0a00 	mov.w	sl, #0
 800b508:	bfcc      	ite	gt
 800b50a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b50e:	ea02 0b01 	andle.w	fp, r2, r1
 800b512:	2200      	movs	r2, #0
 800b514:	2300      	movs	r3, #0
 800b516:	4650      	mov	r0, sl
 800b518:	4659      	mov	r1, fp
 800b51a:	f7f5 fad5 	bl	8000ac8 <__aeabi_dcmpeq>
 800b51e:	2800      	cmp	r0, #0
 800b520:	d1a2      	bne.n	800b468 <_strtod_l+0x578>
 800b522:	9b07      	ldr	r3, [sp, #28]
 800b524:	9300      	str	r3, [sp, #0]
 800b526:	9908      	ldr	r1, [sp, #32]
 800b528:	462b      	mov	r3, r5
 800b52a:	463a      	mov	r2, r7
 800b52c:	4620      	mov	r0, r4
 800b52e:	f001 fe2d 	bl	800d18c <__s2b>
 800b532:	9007      	str	r0, [sp, #28]
 800b534:	2800      	cmp	r0, #0
 800b536:	f43f af1f 	beq.w	800b378 <_strtod_l+0x488>
 800b53a:	9b05      	ldr	r3, [sp, #20]
 800b53c:	1b9e      	subs	r6, r3, r6
 800b53e:	9b06      	ldr	r3, [sp, #24]
 800b540:	2b00      	cmp	r3, #0
 800b542:	bfb4      	ite	lt
 800b544:	4633      	movlt	r3, r6
 800b546:	2300      	movge	r3, #0
 800b548:	930c      	str	r3, [sp, #48]	; 0x30
 800b54a:	9b06      	ldr	r3, [sp, #24]
 800b54c:	2500      	movs	r5, #0
 800b54e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b552:	9312      	str	r3, [sp, #72]	; 0x48
 800b554:	462e      	mov	r6, r5
 800b556:	9b07      	ldr	r3, [sp, #28]
 800b558:	4620      	mov	r0, r4
 800b55a:	6859      	ldr	r1, [r3, #4]
 800b55c:	f001 fd6e 	bl	800d03c <_Balloc>
 800b560:	9005      	str	r0, [sp, #20]
 800b562:	2800      	cmp	r0, #0
 800b564:	f43f af0c 	beq.w	800b380 <_strtod_l+0x490>
 800b568:	9b07      	ldr	r3, [sp, #28]
 800b56a:	691a      	ldr	r2, [r3, #16]
 800b56c:	3202      	adds	r2, #2
 800b56e:	f103 010c 	add.w	r1, r3, #12
 800b572:	0092      	lsls	r2, r2, #2
 800b574:	300c      	adds	r0, #12
 800b576:	f001 fd53 	bl	800d020 <memcpy>
 800b57a:	ec4b ab10 	vmov	d0, sl, fp
 800b57e:	aa1a      	add	r2, sp, #104	; 0x68
 800b580:	a919      	add	r1, sp, #100	; 0x64
 800b582:	4620      	mov	r0, r4
 800b584:	f002 f948 	bl	800d818 <__d2b>
 800b588:	ec4b ab18 	vmov	d8, sl, fp
 800b58c:	9018      	str	r0, [sp, #96]	; 0x60
 800b58e:	2800      	cmp	r0, #0
 800b590:	f43f aef6 	beq.w	800b380 <_strtod_l+0x490>
 800b594:	2101      	movs	r1, #1
 800b596:	4620      	mov	r0, r4
 800b598:	f001 fe92 	bl	800d2c0 <__i2b>
 800b59c:	4606      	mov	r6, r0
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	f43f aeee 	beq.w	800b380 <_strtod_l+0x490>
 800b5a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b5a6:	9904      	ldr	r1, [sp, #16]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	bfab      	itete	ge
 800b5ac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b5ae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b5b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b5b2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b5b6:	bfac      	ite	ge
 800b5b8:	eb03 0902 	addge.w	r9, r3, r2
 800b5bc:	1ad7      	sublt	r7, r2, r3
 800b5be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b5c0:	eba3 0801 	sub.w	r8, r3, r1
 800b5c4:	4490      	add	r8, r2
 800b5c6:	4ba1      	ldr	r3, [pc, #644]	; (800b84c <_strtod_l+0x95c>)
 800b5c8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b5cc:	4598      	cmp	r8, r3
 800b5ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b5d2:	f280 80c7 	bge.w	800b764 <_strtod_l+0x874>
 800b5d6:	eba3 0308 	sub.w	r3, r3, r8
 800b5da:	2b1f      	cmp	r3, #31
 800b5dc:	eba2 0203 	sub.w	r2, r2, r3
 800b5e0:	f04f 0101 	mov.w	r1, #1
 800b5e4:	f300 80b1 	bgt.w	800b74a <_strtod_l+0x85a>
 800b5e8:	fa01 f303 	lsl.w	r3, r1, r3
 800b5ec:	930d      	str	r3, [sp, #52]	; 0x34
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	9308      	str	r3, [sp, #32]
 800b5f2:	eb09 0802 	add.w	r8, r9, r2
 800b5f6:	9b04      	ldr	r3, [sp, #16]
 800b5f8:	45c1      	cmp	r9, r8
 800b5fa:	4417      	add	r7, r2
 800b5fc:	441f      	add	r7, r3
 800b5fe:	464b      	mov	r3, r9
 800b600:	bfa8      	it	ge
 800b602:	4643      	movge	r3, r8
 800b604:	42bb      	cmp	r3, r7
 800b606:	bfa8      	it	ge
 800b608:	463b      	movge	r3, r7
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	bfc2      	ittt	gt
 800b60e:	eba8 0803 	subgt.w	r8, r8, r3
 800b612:	1aff      	subgt	r7, r7, r3
 800b614:	eba9 0903 	subgt.w	r9, r9, r3
 800b618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	dd17      	ble.n	800b64e <_strtod_l+0x75e>
 800b61e:	4631      	mov	r1, r6
 800b620:	461a      	mov	r2, r3
 800b622:	4620      	mov	r0, r4
 800b624:	f001 ff0c 	bl	800d440 <__pow5mult>
 800b628:	4606      	mov	r6, r0
 800b62a:	2800      	cmp	r0, #0
 800b62c:	f43f aea8 	beq.w	800b380 <_strtod_l+0x490>
 800b630:	4601      	mov	r1, r0
 800b632:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b634:	4620      	mov	r0, r4
 800b636:	f001 fe59 	bl	800d2ec <__multiply>
 800b63a:	900b      	str	r0, [sp, #44]	; 0x2c
 800b63c:	2800      	cmp	r0, #0
 800b63e:	f43f ae9f 	beq.w	800b380 <_strtod_l+0x490>
 800b642:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b644:	4620      	mov	r0, r4
 800b646:	f001 fd39 	bl	800d0bc <_Bfree>
 800b64a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b64c:	9318      	str	r3, [sp, #96]	; 0x60
 800b64e:	f1b8 0f00 	cmp.w	r8, #0
 800b652:	f300 808c 	bgt.w	800b76e <_strtod_l+0x87e>
 800b656:	9b06      	ldr	r3, [sp, #24]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	dd08      	ble.n	800b66e <_strtod_l+0x77e>
 800b65c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b65e:	9905      	ldr	r1, [sp, #20]
 800b660:	4620      	mov	r0, r4
 800b662:	f001 feed 	bl	800d440 <__pow5mult>
 800b666:	9005      	str	r0, [sp, #20]
 800b668:	2800      	cmp	r0, #0
 800b66a:	f43f ae89 	beq.w	800b380 <_strtod_l+0x490>
 800b66e:	2f00      	cmp	r7, #0
 800b670:	dd08      	ble.n	800b684 <_strtod_l+0x794>
 800b672:	9905      	ldr	r1, [sp, #20]
 800b674:	463a      	mov	r2, r7
 800b676:	4620      	mov	r0, r4
 800b678:	f001 ff3c 	bl	800d4f4 <__lshift>
 800b67c:	9005      	str	r0, [sp, #20]
 800b67e:	2800      	cmp	r0, #0
 800b680:	f43f ae7e 	beq.w	800b380 <_strtod_l+0x490>
 800b684:	f1b9 0f00 	cmp.w	r9, #0
 800b688:	dd08      	ble.n	800b69c <_strtod_l+0x7ac>
 800b68a:	4631      	mov	r1, r6
 800b68c:	464a      	mov	r2, r9
 800b68e:	4620      	mov	r0, r4
 800b690:	f001 ff30 	bl	800d4f4 <__lshift>
 800b694:	4606      	mov	r6, r0
 800b696:	2800      	cmp	r0, #0
 800b698:	f43f ae72 	beq.w	800b380 <_strtod_l+0x490>
 800b69c:	9a05      	ldr	r2, [sp, #20]
 800b69e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	f001 ffb3 	bl	800d60c <__mdiff>
 800b6a6:	4605      	mov	r5, r0
 800b6a8:	2800      	cmp	r0, #0
 800b6aa:	f43f ae69 	beq.w	800b380 <_strtod_l+0x490>
 800b6ae:	68c3      	ldr	r3, [r0, #12]
 800b6b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	60c3      	str	r3, [r0, #12]
 800b6b6:	4631      	mov	r1, r6
 800b6b8:	f001 ff8c 	bl	800d5d4 <__mcmp>
 800b6bc:	2800      	cmp	r0, #0
 800b6be:	da60      	bge.n	800b782 <_strtod_l+0x892>
 800b6c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6c2:	ea53 030a 	orrs.w	r3, r3, sl
 800b6c6:	f040 8082 	bne.w	800b7ce <_strtod_l+0x8de>
 800b6ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d17d      	bne.n	800b7ce <_strtod_l+0x8de>
 800b6d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b6d6:	0d1b      	lsrs	r3, r3, #20
 800b6d8:	051b      	lsls	r3, r3, #20
 800b6da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b6de:	d976      	bls.n	800b7ce <_strtod_l+0x8de>
 800b6e0:	696b      	ldr	r3, [r5, #20]
 800b6e2:	b913      	cbnz	r3, 800b6ea <_strtod_l+0x7fa>
 800b6e4:	692b      	ldr	r3, [r5, #16]
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	dd71      	ble.n	800b7ce <_strtod_l+0x8de>
 800b6ea:	4629      	mov	r1, r5
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	f001 ff00 	bl	800d4f4 <__lshift>
 800b6f4:	4631      	mov	r1, r6
 800b6f6:	4605      	mov	r5, r0
 800b6f8:	f001 ff6c 	bl	800d5d4 <__mcmp>
 800b6fc:	2800      	cmp	r0, #0
 800b6fe:	dd66      	ble.n	800b7ce <_strtod_l+0x8de>
 800b700:	9904      	ldr	r1, [sp, #16]
 800b702:	4a53      	ldr	r2, [pc, #332]	; (800b850 <_strtod_l+0x960>)
 800b704:	465b      	mov	r3, fp
 800b706:	2900      	cmp	r1, #0
 800b708:	f000 8081 	beq.w	800b80e <_strtod_l+0x91e>
 800b70c:	ea02 010b 	and.w	r1, r2, fp
 800b710:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b714:	dc7b      	bgt.n	800b80e <_strtod_l+0x91e>
 800b716:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b71a:	f77f aea9 	ble.w	800b470 <_strtod_l+0x580>
 800b71e:	4b4d      	ldr	r3, [pc, #308]	; (800b854 <_strtod_l+0x964>)
 800b720:	4650      	mov	r0, sl
 800b722:	4659      	mov	r1, fp
 800b724:	2200      	movs	r2, #0
 800b726:	f7f4 ff67 	bl	80005f8 <__aeabi_dmul>
 800b72a:	460b      	mov	r3, r1
 800b72c:	4303      	orrs	r3, r0
 800b72e:	bf08      	it	eq
 800b730:	2322      	moveq	r3, #34	; 0x22
 800b732:	4682      	mov	sl, r0
 800b734:	468b      	mov	fp, r1
 800b736:	bf08      	it	eq
 800b738:	6023      	streq	r3, [r4, #0]
 800b73a:	e62b      	b.n	800b394 <_strtod_l+0x4a4>
 800b73c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b740:	fa02 f303 	lsl.w	r3, r2, r3
 800b744:	ea03 0a0a 	and.w	sl, r3, sl
 800b748:	e6e3      	b.n	800b512 <_strtod_l+0x622>
 800b74a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b74e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b752:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b756:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b75a:	fa01 f308 	lsl.w	r3, r1, r8
 800b75e:	9308      	str	r3, [sp, #32]
 800b760:	910d      	str	r1, [sp, #52]	; 0x34
 800b762:	e746      	b.n	800b5f2 <_strtod_l+0x702>
 800b764:	2300      	movs	r3, #0
 800b766:	9308      	str	r3, [sp, #32]
 800b768:	2301      	movs	r3, #1
 800b76a:	930d      	str	r3, [sp, #52]	; 0x34
 800b76c:	e741      	b.n	800b5f2 <_strtod_l+0x702>
 800b76e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b770:	4642      	mov	r2, r8
 800b772:	4620      	mov	r0, r4
 800b774:	f001 febe 	bl	800d4f4 <__lshift>
 800b778:	9018      	str	r0, [sp, #96]	; 0x60
 800b77a:	2800      	cmp	r0, #0
 800b77c:	f47f af6b 	bne.w	800b656 <_strtod_l+0x766>
 800b780:	e5fe      	b.n	800b380 <_strtod_l+0x490>
 800b782:	465f      	mov	r7, fp
 800b784:	d16e      	bne.n	800b864 <_strtod_l+0x974>
 800b786:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b788:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b78c:	b342      	cbz	r2, 800b7e0 <_strtod_l+0x8f0>
 800b78e:	4a32      	ldr	r2, [pc, #200]	; (800b858 <_strtod_l+0x968>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d128      	bne.n	800b7e6 <_strtod_l+0x8f6>
 800b794:	9b04      	ldr	r3, [sp, #16]
 800b796:	4651      	mov	r1, sl
 800b798:	b1eb      	cbz	r3, 800b7d6 <_strtod_l+0x8e6>
 800b79a:	4b2d      	ldr	r3, [pc, #180]	; (800b850 <_strtod_l+0x960>)
 800b79c:	403b      	ands	r3, r7
 800b79e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b7a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b7a6:	d819      	bhi.n	800b7dc <_strtod_l+0x8ec>
 800b7a8:	0d1b      	lsrs	r3, r3, #20
 800b7aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b7ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b7b2:	4299      	cmp	r1, r3
 800b7b4:	d117      	bne.n	800b7e6 <_strtod_l+0x8f6>
 800b7b6:	4b29      	ldr	r3, [pc, #164]	; (800b85c <_strtod_l+0x96c>)
 800b7b8:	429f      	cmp	r7, r3
 800b7ba:	d102      	bne.n	800b7c2 <_strtod_l+0x8d2>
 800b7bc:	3101      	adds	r1, #1
 800b7be:	f43f addf 	beq.w	800b380 <_strtod_l+0x490>
 800b7c2:	4b23      	ldr	r3, [pc, #140]	; (800b850 <_strtod_l+0x960>)
 800b7c4:	403b      	ands	r3, r7
 800b7c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b7ca:	f04f 0a00 	mov.w	sl, #0
 800b7ce:	9b04      	ldr	r3, [sp, #16]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d1a4      	bne.n	800b71e <_strtod_l+0x82e>
 800b7d4:	e5de      	b.n	800b394 <_strtod_l+0x4a4>
 800b7d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b7da:	e7ea      	b.n	800b7b2 <_strtod_l+0x8c2>
 800b7dc:	4613      	mov	r3, r2
 800b7de:	e7e8      	b.n	800b7b2 <_strtod_l+0x8c2>
 800b7e0:	ea53 030a 	orrs.w	r3, r3, sl
 800b7e4:	d08c      	beq.n	800b700 <_strtod_l+0x810>
 800b7e6:	9b08      	ldr	r3, [sp, #32]
 800b7e8:	b1db      	cbz	r3, 800b822 <_strtod_l+0x932>
 800b7ea:	423b      	tst	r3, r7
 800b7ec:	d0ef      	beq.n	800b7ce <_strtod_l+0x8de>
 800b7ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7f0:	9a04      	ldr	r2, [sp, #16]
 800b7f2:	4650      	mov	r0, sl
 800b7f4:	4659      	mov	r1, fp
 800b7f6:	b1c3      	cbz	r3, 800b82a <_strtod_l+0x93a>
 800b7f8:	f7ff fb5c 	bl	800aeb4 <sulp>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	460b      	mov	r3, r1
 800b800:	ec51 0b18 	vmov	r0, r1, d8
 800b804:	f7f4 fd42 	bl	800028c <__adddf3>
 800b808:	4682      	mov	sl, r0
 800b80a:	468b      	mov	fp, r1
 800b80c:	e7df      	b.n	800b7ce <_strtod_l+0x8de>
 800b80e:	4013      	ands	r3, r2
 800b810:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b814:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b818:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b81c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b820:	e7d5      	b.n	800b7ce <_strtod_l+0x8de>
 800b822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b824:	ea13 0f0a 	tst.w	r3, sl
 800b828:	e7e0      	b.n	800b7ec <_strtod_l+0x8fc>
 800b82a:	f7ff fb43 	bl	800aeb4 <sulp>
 800b82e:	4602      	mov	r2, r0
 800b830:	460b      	mov	r3, r1
 800b832:	ec51 0b18 	vmov	r0, r1, d8
 800b836:	f7f4 fd27 	bl	8000288 <__aeabi_dsub>
 800b83a:	2200      	movs	r2, #0
 800b83c:	2300      	movs	r3, #0
 800b83e:	4682      	mov	sl, r0
 800b840:	468b      	mov	fp, r1
 800b842:	f7f5 f941 	bl	8000ac8 <__aeabi_dcmpeq>
 800b846:	2800      	cmp	r0, #0
 800b848:	d0c1      	beq.n	800b7ce <_strtod_l+0x8de>
 800b84a:	e611      	b.n	800b470 <_strtod_l+0x580>
 800b84c:	fffffc02 	.word	0xfffffc02
 800b850:	7ff00000 	.word	0x7ff00000
 800b854:	39500000 	.word	0x39500000
 800b858:	000fffff 	.word	0x000fffff
 800b85c:	7fefffff 	.word	0x7fefffff
 800b860:	08010ab8 	.word	0x08010ab8
 800b864:	4631      	mov	r1, r6
 800b866:	4628      	mov	r0, r5
 800b868:	f002 f832 	bl	800d8d0 <__ratio>
 800b86c:	ec59 8b10 	vmov	r8, r9, d0
 800b870:	ee10 0a10 	vmov	r0, s0
 800b874:	2200      	movs	r2, #0
 800b876:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b87a:	4649      	mov	r1, r9
 800b87c:	f7f5 f938 	bl	8000af0 <__aeabi_dcmple>
 800b880:	2800      	cmp	r0, #0
 800b882:	d07a      	beq.n	800b97a <_strtod_l+0xa8a>
 800b884:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b886:	2b00      	cmp	r3, #0
 800b888:	d04a      	beq.n	800b920 <_strtod_l+0xa30>
 800b88a:	4b95      	ldr	r3, [pc, #596]	; (800bae0 <_strtod_l+0xbf0>)
 800b88c:	2200      	movs	r2, #0
 800b88e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b892:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800bae0 <_strtod_l+0xbf0>
 800b896:	f04f 0800 	mov.w	r8, #0
 800b89a:	4b92      	ldr	r3, [pc, #584]	; (800bae4 <_strtod_l+0xbf4>)
 800b89c:	403b      	ands	r3, r7
 800b89e:	930d      	str	r3, [sp, #52]	; 0x34
 800b8a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b8a2:	4b91      	ldr	r3, [pc, #580]	; (800bae8 <_strtod_l+0xbf8>)
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	f040 80b0 	bne.w	800ba0a <_strtod_l+0xb1a>
 800b8aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b8ae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b8b2:	ec4b ab10 	vmov	d0, sl, fp
 800b8b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b8ba:	f001 ff31 	bl	800d720 <__ulp>
 800b8be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b8c2:	ec53 2b10 	vmov	r2, r3, d0
 800b8c6:	f7f4 fe97 	bl	80005f8 <__aeabi_dmul>
 800b8ca:	4652      	mov	r2, sl
 800b8cc:	465b      	mov	r3, fp
 800b8ce:	f7f4 fcdd 	bl	800028c <__adddf3>
 800b8d2:	460b      	mov	r3, r1
 800b8d4:	4983      	ldr	r1, [pc, #524]	; (800bae4 <_strtod_l+0xbf4>)
 800b8d6:	4a85      	ldr	r2, [pc, #532]	; (800baec <_strtod_l+0xbfc>)
 800b8d8:	4019      	ands	r1, r3
 800b8da:	4291      	cmp	r1, r2
 800b8dc:	4682      	mov	sl, r0
 800b8de:	d960      	bls.n	800b9a2 <_strtod_l+0xab2>
 800b8e0:	ee18 3a90 	vmov	r3, s17
 800b8e4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d104      	bne.n	800b8f6 <_strtod_l+0xa06>
 800b8ec:	ee18 3a10 	vmov	r3, s16
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	f43f ad45 	beq.w	800b380 <_strtod_l+0x490>
 800b8f6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800baf8 <_strtod_l+0xc08>
 800b8fa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b8fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b900:	4620      	mov	r0, r4
 800b902:	f001 fbdb 	bl	800d0bc <_Bfree>
 800b906:	9905      	ldr	r1, [sp, #20]
 800b908:	4620      	mov	r0, r4
 800b90a:	f001 fbd7 	bl	800d0bc <_Bfree>
 800b90e:	4631      	mov	r1, r6
 800b910:	4620      	mov	r0, r4
 800b912:	f001 fbd3 	bl	800d0bc <_Bfree>
 800b916:	4629      	mov	r1, r5
 800b918:	4620      	mov	r0, r4
 800b91a:	f001 fbcf 	bl	800d0bc <_Bfree>
 800b91e:	e61a      	b.n	800b556 <_strtod_l+0x666>
 800b920:	f1ba 0f00 	cmp.w	sl, #0
 800b924:	d11b      	bne.n	800b95e <_strtod_l+0xa6e>
 800b926:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b92a:	b9f3      	cbnz	r3, 800b96a <_strtod_l+0xa7a>
 800b92c:	4b6c      	ldr	r3, [pc, #432]	; (800bae0 <_strtod_l+0xbf0>)
 800b92e:	2200      	movs	r2, #0
 800b930:	4640      	mov	r0, r8
 800b932:	4649      	mov	r1, r9
 800b934:	f7f5 f8d2 	bl	8000adc <__aeabi_dcmplt>
 800b938:	b9d0      	cbnz	r0, 800b970 <_strtod_l+0xa80>
 800b93a:	4640      	mov	r0, r8
 800b93c:	4649      	mov	r1, r9
 800b93e:	4b6c      	ldr	r3, [pc, #432]	; (800baf0 <_strtod_l+0xc00>)
 800b940:	2200      	movs	r2, #0
 800b942:	f7f4 fe59 	bl	80005f8 <__aeabi_dmul>
 800b946:	4680      	mov	r8, r0
 800b948:	4689      	mov	r9, r1
 800b94a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b94e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b952:	9315      	str	r3, [sp, #84]	; 0x54
 800b954:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b958:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b95c:	e79d      	b.n	800b89a <_strtod_l+0x9aa>
 800b95e:	f1ba 0f01 	cmp.w	sl, #1
 800b962:	d102      	bne.n	800b96a <_strtod_l+0xa7a>
 800b964:	2f00      	cmp	r7, #0
 800b966:	f43f ad83 	beq.w	800b470 <_strtod_l+0x580>
 800b96a:	4b62      	ldr	r3, [pc, #392]	; (800baf4 <_strtod_l+0xc04>)
 800b96c:	2200      	movs	r2, #0
 800b96e:	e78e      	b.n	800b88e <_strtod_l+0x99e>
 800b970:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800baf0 <_strtod_l+0xc00>
 800b974:	f04f 0800 	mov.w	r8, #0
 800b978:	e7e7      	b.n	800b94a <_strtod_l+0xa5a>
 800b97a:	4b5d      	ldr	r3, [pc, #372]	; (800baf0 <_strtod_l+0xc00>)
 800b97c:	4640      	mov	r0, r8
 800b97e:	4649      	mov	r1, r9
 800b980:	2200      	movs	r2, #0
 800b982:	f7f4 fe39 	bl	80005f8 <__aeabi_dmul>
 800b986:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b988:	4680      	mov	r8, r0
 800b98a:	4689      	mov	r9, r1
 800b98c:	b933      	cbnz	r3, 800b99c <_strtod_l+0xaac>
 800b98e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b992:	900e      	str	r0, [sp, #56]	; 0x38
 800b994:	930f      	str	r3, [sp, #60]	; 0x3c
 800b996:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b99a:	e7dd      	b.n	800b958 <_strtod_l+0xa68>
 800b99c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b9a0:	e7f9      	b.n	800b996 <_strtod_l+0xaa6>
 800b9a2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b9a6:	9b04      	ldr	r3, [sp, #16]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d1a8      	bne.n	800b8fe <_strtod_l+0xa0e>
 800b9ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b9b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b9b2:	0d1b      	lsrs	r3, r3, #20
 800b9b4:	051b      	lsls	r3, r3, #20
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d1a1      	bne.n	800b8fe <_strtod_l+0xa0e>
 800b9ba:	4640      	mov	r0, r8
 800b9bc:	4649      	mov	r1, r9
 800b9be:	f7f5 f97b 	bl	8000cb8 <__aeabi_d2lz>
 800b9c2:	f7f4 fdeb 	bl	800059c <__aeabi_l2d>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	4640      	mov	r0, r8
 800b9cc:	4649      	mov	r1, r9
 800b9ce:	f7f4 fc5b 	bl	8000288 <__aeabi_dsub>
 800b9d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b9d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b9d8:	ea43 030a 	orr.w	r3, r3, sl
 800b9dc:	4313      	orrs	r3, r2
 800b9de:	4680      	mov	r8, r0
 800b9e0:	4689      	mov	r9, r1
 800b9e2:	d055      	beq.n	800ba90 <_strtod_l+0xba0>
 800b9e4:	a336      	add	r3, pc, #216	; (adr r3, 800bac0 <_strtod_l+0xbd0>)
 800b9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ea:	f7f5 f877 	bl	8000adc <__aeabi_dcmplt>
 800b9ee:	2800      	cmp	r0, #0
 800b9f0:	f47f acd0 	bne.w	800b394 <_strtod_l+0x4a4>
 800b9f4:	a334      	add	r3, pc, #208	; (adr r3, 800bac8 <_strtod_l+0xbd8>)
 800b9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fa:	4640      	mov	r0, r8
 800b9fc:	4649      	mov	r1, r9
 800b9fe:	f7f5 f88b 	bl	8000b18 <__aeabi_dcmpgt>
 800ba02:	2800      	cmp	r0, #0
 800ba04:	f43f af7b 	beq.w	800b8fe <_strtod_l+0xa0e>
 800ba08:	e4c4      	b.n	800b394 <_strtod_l+0x4a4>
 800ba0a:	9b04      	ldr	r3, [sp, #16]
 800ba0c:	b333      	cbz	r3, 800ba5c <_strtod_l+0xb6c>
 800ba0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba10:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ba14:	d822      	bhi.n	800ba5c <_strtod_l+0xb6c>
 800ba16:	a32e      	add	r3, pc, #184	; (adr r3, 800bad0 <_strtod_l+0xbe0>)
 800ba18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1c:	4640      	mov	r0, r8
 800ba1e:	4649      	mov	r1, r9
 800ba20:	f7f5 f866 	bl	8000af0 <__aeabi_dcmple>
 800ba24:	b1a0      	cbz	r0, 800ba50 <_strtod_l+0xb60>
 800ba26:	4649      	mov	r1, r9
 800ba28:	4640      	mov	r0, r8
 800ba2a:	f7f5 f8bd 	bl	8000ba8 <__aeabi_d2uiz>
 800ba2e:	2801      	cmp	r0, #1
 800ba30:	bf38      	it	cc
 800ba32:	2001      	movcc	r0, #1
 800ba34:	f7f4 fd66 	bl	8000504 <__aeabi_ui2d>
 800ba38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba3a:	4680      	mov	r8, r0
 800ba3c:	4689      	mov	r9, r1
 800ba3e:	bb23      	cbnz	r3, 800ba8a <_strtod_l+0xb9a>
 800ba40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba44:	9010      	str	r0, [sp, #64]	; 0x40
 800ba46:	9311      	str	r3, [sp, #68]	; 0x44
 800ba48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ba4c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ba50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ba54:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ba58:	1a9b      	subs	r3, r3, r2
 800ba5a:	9309      	str	r3, [sp, #36]	; 0x24
 800ba5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ba60:	eeb0 0a48 	vmov.f32	s0, s16
 800ba64:	eef0 0a68 	vmov.f32	s1, s17
 800ba68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ba6c:	f001 fe58 	bl	800d720 <__ulp>
 800ba70:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ba74:	ec53 2b10 	vmov	r2, r3, d0
 800ba78:	f7f4 fdbe 	bl	80005f8 <__aeabi_dmul>
 800ba7c:	ec53 2b18 	vmov	r2, r3, d8
 800ba80:	f7f4 fc04 	bl	800028c <__adddf3>
 800ba84:	4682      	mov	sl, r0
 800ba86:	468b      	mov	fp, r1
 800ba88:	e78d      	b.n	800b9a6 <_strtod_l+0xab6>
 800ba8a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800ba8e:	e7db      	b.n	800ba48 <_strtod_l+0xb58>
 800ba90:	a311      	add	r3, pc, #68	; (adr r3, 800bad8 <_strtod_l+0xbe8>)
 800ba92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba96:	f7f5 f821 	bl	8000adc <__aeabi_dcmplt>
 800ba9a:	e7b2      	b.n	800ba02 <_strtod_l+0xb12>
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	930a      	str	r3, [sp, #40]	; 0x28
 800baa0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800baa2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800baa4:	6013      	str	r3, [r2, #0]
 800baa6:	f7ff ba6b 	b.w	800af80 <_strtod_l+0x90>
 800baaa:	2a65      	cmp	r2, #101	; 0x65
 800baac:	f43f ab5f 	beq.w	800b16e <_strtod_l+0x27e>
 800bab0:	2a45      	cmp	r2, #69	; 0x45
 800bab2:	f43f ab5c 	beq.w	800b16e <_strtod_l+0x27e>
 800bab6:	2301      	movs	r3, #1
 800bab8:	f7ff bb94 	b.w	800b1e4 <_strtod_l+0x2f4>
 800babc:	f3af 8000 	nop.w
 800bac0:	94a03595 	.word	0x94a03595
 800bac4:	3fdfffff 	.word	0x3fdfffff
 800bac8:	35afe535 	.word	0x35afe535
 800bacc:	3fe00000 	.word	0x3fe00000
 800bad0:	ffc00000 	.word	0xffc00000
 800bad4:	41dfffff 	.word	0x41dfffff
 800bad8:	94a03595 	.word	0x94a03595
 800badc:	3fcfffff 	.word	0x3fcfffff
 800bae0:	3ff00000 	.word	0x3ff00000
 800bae4:	7ff00000 	.word	0x7ff00000
 800bae8:	7fe00000 	.word	0x7fe00000
 800baec:	7c9fffff 	.word	0x7c9fffff
 800baf0:	3fe00000 	.word	0x3fe00000
 800baf4:	bff00000 	.word	0xbff00000
 800baf8:	7fefffff 	.word	0x7fefffff

0800bafc <_strtod_r>:
 800bafc:	4b01      	ldr	r3, [pc, #4]	; (800bb04 <_strtod_r+0x8>)
 800bafe:	f7ff b9f7 	b.w	800aef0 <_strtod_l>
 800bb02:	bf00      	nop
 800bb04:	2000009c 	.word	0x2000009c

0800bb08 <_strtol_l.constprop.0>:
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb0e:	d001      	beq.n	800bb14 <_strtol_l.constprop.0+0xc>
 800bb10:	2b24      	cmp	r3, #36	; 0x24
 800bb12:	d906      	bls.n	800bb22 <_strtol_l.constprop.0+0x1a>
 800bb14:	f7fe fac8 	bl	800a0a8 <__errno>
 800bb18:	2316      	movs	r3, #22
 800bb1a:	6003      	str	r3, [r0, #0]
 800bb1c:	2000      	movs	r0, #0
 800bb1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb22:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bc08 <_strtol_l.constprop.0+0x100>
 800bb26:	460d      	mov	r5, r1
 800bb28:	462e      	mov	r6, r5
 800bb2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb2e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800bb32:	f017 0708 	ands.w	r7, r7, #8
 800bb36:	d1f7      	bne.n	800bb28 <_strtol_l.constprop.0+0x20>
 800bb38:	2c2d      	cmp	r4, #45	; 0x2d
 800bb3a:	d132      	bne.n	800bba2 <_strtol_l.constprop.0+0x9a>
 800bb3c:	782c      	ldrb	r4, [r5, #0]
 800bb3e:	2701      	movs	r7, #1
 800bb40:	1cb5      	adds	r5, r6, #2
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d05b      	beq.n	800bbfe <_strtol_l.constprop.0+0xf6>
 800bb46:	2b10      	cmp	r3, #16
 800bb48:	d109      	bne.n	800bb5e <_strtol_l.constprop.0+0x56>
 800bb4a:	2c30      	cmp	r4, #48	; 0x30
 800bb4c:	d107      	bne.n	800bb5e <_strtol_l.constprop.0+0x56>
 800bb4e:	782c      	ldrb	r4, [r5, #0]
 800bb50:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bb54:	2c58      	cmp	r4, #88	; 0x58
 800bb56:	d14d      	bne.n	800bbf4 <_strtol_l.constprop.0+0xec>
 800bb58:	786c      	ldrb	r4, [r5, #1]
 800bb5a:	2310      	movs	r3, #16
 800bb5c:	3502      	adds	r5, #2
 800bb5e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bb62:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bb66:	f04f 0c00 	mov.w	ip, #0
 800bb6a:	fbb8 f9f3 	udiv	r9, r8, r3
 800bb6e:	4666      	mov	r6, ip
 800bb70:	fb03 8a19 	mls	sl, r3, r9, r8
 800bb74:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800bb78:	f1be 0f09 	cmp.w	lr, #9
 800bb7c:	d816      	bhi.n	800bbac <_strtol_l.constprop.0+0xa4>
 800bb7e:	4674      	mov	r4, lr
 800bb80:	42a3      	cmp	r3, r4
 800bb82:	dd24      	ble.n	800bbce <_strtol_l.constprop.0+0xc6>
 800bb84:	f1bc 0f00 	cmp.w	ip, #0
 800bb88:	db1e      	blt.n	800bbc8 <_strtol_l.constprop.0+0xc0>
 800bb8a:	45b1      	cmp	r9, r6
 800bb8c:	d31c      	bcc.n	800bbc8 <_strtol_l.constprop.0+0xc0>
 800bb8e:	d101      	bne.n	800bb94 <_strtol_l.constprop.0+0x8c>
 800bb90:	45a2      	cmp	sl, r4
 800bb92:	db19      	blt.n	800bbc8 <_strtol_l.constprop.0+0xc0>
 800bb94:	fb06 4603 	mla	r6, r6, r3, r4
 800bb98:	f04f 0c01 	mov.w	ip, #1
 800bb9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bba0:	e7e8      	b.n	800bb74 <_strtol_l.constprop.0+0x6c>
 800bba2:	2c2b      	cmp	r4, #43	; 0x2b
 800bba4:	bf04      	itt	eq
 800bba6:	782c      	ldrbeq	r4, [r5, #0]
 800bba8:	1cb5      	addeq	r5, r6, #2
 800bbaa:	e7ca      	b.n	800bb42 <_strtol_l.constprop.0+0x3a>
 800bbac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800bbb0:	f1be 0f19 	cmp.w	lr, #25
 800bbb4:	d801      	bhi.n	800bbba <_strtol_l.constprop.0+0xb2>
 800bbb6:	3c37      	subs	r4, #55	; 0x37
 800bbb8:	e7e2      	b.n	800bb80 <_strtol_l.constprop.0+0x78>
 800bbba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800bbbe:	f1be 0f19 	cmp.w	lr, #25
 800bbc2:	d804      	bhi.n	800bbce <_strtol_l.constprop.0+0xc6>
 800bbc4:	3c57      	subs	r4, #87	; 0x57
 800bbc6:	e7db      	b.n	800bb80 <_strtol_l.constprop.0+0x78>
 800bbc8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800bbcc:	e7e6      	b.n	800bb9c <_strtol_l.constprop.0+0x94>
 800bbce:	f1bc 0f00 	cmp.w	ip, #0
 800bbd2:	da05      	bge.n	800bbe0 <_strtol_l.constprop.0+0xd8>
 800bbd4:	2322      	movs	r3, #34	; 0x22
 800bbd6:	6003      	str	r3, [r0, #0]
 800bbd8:	4646      	mov	r6, r8
 800bbda:	b942      	cbnz	r2, 800bbee <_strtol_l.constprop.0+0xe6>
 800bbdc:	4630      	mov	r0, r6
 800bbde:	e79e      	b.n	800bb1e <_strtol_l.constprop.0+0x16>
 800bbe0:	b107      	cbz	r7, 800bbe4 <_strtol_l.constprop.0+0xdc>
 800bbe2:	4276      	negs	r6, r6
 800bbe4:	2a00      	cmp	r2, #0
 800bbe6:	d0f9      	beq.n	800bbdc <_strtol_l.constprop.0+0xd4>
 800bbe8:	f1bc 0f00 	cmp.w	ip, #0
 800bbec:	d000      	beq.n	800bbf0 <_strtol_l.constprop.0+0xe8>
 800bbee:	1e69      	subs	r1, r5, #1
 800bbf0:	6011      	str	r1, [r2, #0]
 800bbf2:	e7f3      	b.n	800bbdc <_strtol_l.constprop.0+0xd4>
 800bbf4:	2430      	movs	r4, #48	; 0x30
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d1b1      	bne.n	800bb5e <_strtol_l.constprop.0+0x56>
 800bbfa:	2308      	movs	r3, #8
 800bbfc:	e7af      	b.n	800bb5e <_strtol_l.constprop.0+0x56>
 800bbfe:	2c30      	cmp	r4, #48	; 0x30
 800bc00:	d0a5      	beq.n	800bb4e <_strtol_l.constprop.0+0x46>
 800bc02:	230a      	movs	r3, #10
 800bc04:	e7ab      	b.n	800bb5e <_strtol_l.constprop.0+0x56>
 800bc06:	bf00      	nop
 800bc08:	08010ae1 	.word	0x08010ae1

0800bc0c <_strtol_r>:
 800bc0c:	f7ff bf7c 	b.w	800bb08 <_strtol_l.constprop.0>

0800bc10 <quorem>:
 800bc10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc14:	6903      	ldr	r3, [r0, #16]
 800bc16:	690c      	ldr	r4, [r1, #16]
 800bc18:	42a3      	cmp	r3, r4
 800bc1a:	4607      	mov	r7, r0
 800bc1c:	f2c0 8081 	blt.w	800bd22 <quorem+0x112>
 800bc20:	3c01      	subs	r4, #1
 800bc22:	f101 0814 	add.w	r8, r1, #20
 800bc26:	f100 0514 	add.w	r5, r0, #20
 800bc2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc2e:	9301      	str	r3, [sp, #4]
 800bc30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bc34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc38:	3301      	adds	r3, #1
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bc40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bc44:	fbb2 f6f3 	udiv	r6, r2, r3
 800bc48:	d331      	bcc.n	800bcae <quorem+0x9e>
 800bc4a:	f04f 0e00 	mov.w	lr, #0
 800bc4e:	4640      	mov	r0, r8
 800bc50:	46ac      	mov	ip, r5
 800bc52:	46f2      	mov	sl, lr
 800bc54:	f850 2b04 	ldr.w	r2, [r0], #4
 800bc58:	b293      	uxth	r3, r2
 800bc5a:	fb06 e303 	mla	r3, r6, r3, lr
 800bc5e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bc62:	b29b      	uxth	r3, r3
 800bc64:	ebaa 0303 	sub.w	r3, sl, r3
 800bc68:	f8dc a000 	ldr.w	sl, [ip]
 800bc6c:	0c12      	lsrs	r2, r2, #16
 800bc6e:	fa13 f38a 	uxtah	r3, r3, sl
 800bc72:	fb06 e202 	mla	r2, r6, r2, lr
 800bc76:	9300      	str	r3, [sp, #0]
 800bc78:	9b00      	ldr	r3, [sp, #0]
 800bc7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bc7e:	b292      	uxth	r2, r2
 800bc80:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bc84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc88:	f8bd 3000 	ldrh.w	r3, [sp]
 800bc8c:	4581      	cmp	r9, r0
 800bc8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc92:	f84c 3b04 	str.w	r3, [ip], #4
 800bc96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bc9a:	d2db      	bcs.n	800bc54 <quorem+0x44>
 800bc9c:	f855 300b 	ldr.w	r3, [r5, fp]
 800bca0:	b92b      	cbnz	r3, 800bcae <quorem+0x9e>
 800bca2:	9b01      	ldr	r3, [sp, #4]
 800bca4:	3b04      	subs	r3, #4
 800bca6:	429d      	cmp	r5, r3
 800bca8:	461a      	mov	r2, r3
 800bcaa:	d32e      	bcc.n	800bd0a <quorem+0xfa>
 800bcac:	613c      	str	r4, [r7, #16]
 800bcae:	4638      	mov	r0, r7
 800bcb0:	f001 fc90 	bl	800d5d4 <__mcmp>
 800bcb4:	2800      	cmp	r0, #0
 800bcb6:	db24      	blt.n	800bd02 <quorem+0xf2>
 800bcb8:	3601      	adds	r6, #1
 800bcba:	4628      	mov	r0, r5
 800bcbc:	f04f 0c00 	mov.w	ip, #0
 800bcc0:	f858 2b04 	ldr.w	r2, [r8], #4
 800bcc4:	f8d0 e000 	ldr.w	lr, [r0]
 800bcc8:	b293      	uxth	r3, r2
 800bcca:	ebac 0303 	sub.w	r3, ip, r3
 800bcce:	0c12      	lsrs	r2, r2, #16
 800bcd0:	fa13 f38e 	uxtah	r3, r3, lr
 800bcd4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bcd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bcdc:	b29b      	uxth	r3, r3
 800bcde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bce2:	45c1      	cmp	r9, r8
 800bce4:	f840 3b04 	str.w	r3, [r0], #4
 800bce8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bcec:	d2e8      	bcs.n	800bcc0 <quorem+0xb0>
 800bcee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bcf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bcf6:	b922      	cbnz	r2, 800bd02 <quorem+0xf2>
 800bcf8:	3b04      	subs	r3, #4
 800bcfa:	429d      	cmp	r5, r3
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	d30a      	bcc.n	800bd16 <quorem+0x106>
 800bd00:	613c      	str	r4, [r7, #16]
 800bd02:	4630      	mov	r0, r6
 800bd04:	b003      	add	sp, #12
 800bd06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd0a:	6812      	ldr	r2, [r2, #0]
 800bd0c:	3b04      	subs	r3, #4
 800bd0e:	2a00      	cmp	r2, #0
 800bd10:	d1cc      	bne.n	800bcac <quorem+0x9c>
 800bd12:	3c01      	subs	r4, #1
 800bd14:	e7c7      	b.n	800bca6 <quorem+0x96>
 800bd16:	6812      	ldr	r2, [r2, #0]
 800bd18:	3b04      	subs	r3, #4
 800bd1a:	2a00      	cmp	r2, #0
 800bd1c:	d1f0      	bne.n	800bd00 <quorem+0xf0>
 800bd1e:	3c01      	subs	r4, #1
 800bd20:	e7eb      	b.n	800bcfa <quorem+0xea>
 800bd22:	2000      	movs	r0, #0
 800bd24:	e7ee      	b.n	800bd04 <quorem+0xf4>
	...

0800bd28 <_dtoa_r>:
 800bd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd2c:	ed2d 8b04 	vpush	{d8-d9}
 800bd30:	ec57 6b10 	vmov	r6, r7, d0
 800bd34:	b093      	sub	sp, #76	; 0x4c
 800bd36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bd38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bd3c:	9106      	str	r1, [sp, #24]
 800bd3e:	ee10 aa10 	vmov	sl, s0
 800bd42:	4604      	mov	r4, r0
 800bd44:	9209      	str	r2, [sp, #36]	; 0x24
 800bd46:	930c      	str	r3, [sp, #48]	; 0x30
 800bd48:	46bb      	mov	fp, r7
 800bd4a:	b975      	cbnz	r5, 800bd6a <_dtoa_r+0x42>
 800bd4c:	2010      	movs	r0, #16
 800bd4e:	f001 f94d 	bl	800cfec <malloc>
 800bd52:	4602      	mov	r2, r0
 800bd54:	6260      	str	r0, [r4, #36]	; 0x24
 800bd56:	b920      	cbnz	r0, 800bd62 <_dtoa_r+0x3a>
 800bd58:	4ba7      	ldr	r3, [pc, #668]	; (800bff8 <_dtoa_r+0x2d0>)
 800bd5a:	21ea      	movs	r1, #234	; 0xea
 800bd5c:	48a7      	ldr	r0, [pc, #668]	; (800bffc <_dtoa_r+0x2d4>)
 800bd5e:	f002 f8bd 	bl	800dedc <__assert_func>
 800bd62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bd66:	6005      	str	r5, [r0, #0]
 800bd68:	60c5      	str	r5, [r0, #12]
 800bd6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd6c:	6819      	ldr	r1, [r3, #0]
 800bd6e:	b151      	cbz	r1, 800bd86 <_dtoa_r+0x5e>
 800bd70:	685a      	ldr	r2, [r3, #4]
 800bd72:	604a      	str	r2, [r1, #4]
 800bd74:	2301      	movs	r3, #1
 800bd76:	4093      	lsls	r3, r2
 800bd78:	608b      	str	r3, [r1, #8]
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	f001 f99e 	bl	800d0bc <_Bfree>
 800bd80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd82:	2200      	movs	r2, #0
 800bd84:	601a      	str	r2, [r3, #0]
 800bd86:	1e3b      	subs	r3, r7, #0
 800bd88:	bfaa      	itet	ge
 800bd8a:	2300      	movge	r3, #0
 800bd8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800bd90:	f8c8 3000 	strge.w	r3, [r8]
 800bd94:	4b9a      	ldr	r3, [pc, #616]	; (800c000 <_dtoa_r+0x2d8>)
 800bd96:	bfbc      	itt	lt
 800bd98:	2201      	movlt	r2, #1
 800bd9a:	f8c8 2000 	strlt.w	r2, [r8]
 800bd9e:	ea33 030b 	bics.w	r3, r3, fp
 800bda2:	d11b      	bne.n	800bddc <_dtoa_r+0xb4>
 800bda4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bda6:	f242 730f 	movw	r3, #9999	; 0x270f
 800bdaa:	6013      	str	r3, [r2, #0]
 800bdac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bdb0:	4333      	orrs	r3, r6
 800bdb2:	f000 8592 	beq.w	800c8da <_dtoa_r+0xbb2>
 800bdb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdb8:	b963      	cbnz	r3, 800bdd4 <_dtoa_r+0xac>
 800bdba:	4b92      	ldr	r3, [pc, #584]	; (800c004 <_dtoa_r+0x2dc>)
 800bdbc:	e022      	b.n	800be04 <_dtoa_r+0xdc>
 800bdbe:	4b92      	ldr	r3, [pc, #584]	; (800c008 <_dtoa_r+0x2e0>)
 800bdc0:	9301      	str	r3, [sp, #4]
 800bdc2:	3308      	adds	r3, #8
 800bdc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bdc6:	6013      	str	r3, [r2, #0]
 800bdc8:	9801      	ldr	r0, [sp, #4]
 800bdca:	b013      	add	sp, #76	; 0x4c
 800bdcc:	ecbd 8b04 	vpop	{d8-d9}
 800bdd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdd4:	4b8b      	ldr	r3, [pc, #556]	; (800c004 <_dtoa_r+0x2dc>)
 800bdd6:	9301      	str	r3, [sp, #4]
 800bdd8:	3303      	adds	r3, #3
 800bdda:	e7f3      	b.n	800bdc4 <_dtoa_r+0x9c>
 800bddc:	2200      	movs	r2, #0
 800bdde:	2300      	movs	r3, #0
 800bde0:	4650      	mov	r0, sl
 800bde2:	4659      	mov	r1, fp
 800bde4:	f7f4 fe70 	bl	8000ac8 <__aeabi_dcmpeq>
 800bde8:	ec4b ab19 	vmov	d9, sl, fp
 800bdec:	4680      	mov	r8, r0
 800bdee:	b158      	cbz	r0, 800be08 <_dtoa_r+0xe0>
 800bdf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	6013      	str	r3, [r2, #0]
 800bdf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	f000 856b 	beq.w	800c8d4 <_dtoa_r+0xbac>
 800bdfe:	4883      	ldr	r0, [pc, #524]	; (800c00c <_dtoa_r+0x2e4>)
 800be00:	6018      	str	r0, [r3, #0]
 800be02:	1e43      	subs	r3, r0, #1
 800be04:	9301      	str	r3, [sp, #4]
 800be06:	e7df      	b.n	800bdc8 <_dtoa_r+0xa0>
 800be08:	ec4b ab10 	vmov	d0, sl, fp
 800be0c:	aa10      	add	r2, sp, #64	; 0x40
 800be0e:	a911      	add	r1, sp, #68	; 0x44
 800be10:	4620      	mov	r0, r4
 800be12:	f001 fd01 	bl	800d818 <__d2b>
 800be16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800be1a:	ee08 0a10 	vmov	s16, r0
 800be1e:	2d00      	cmp	r5, #0
 800be20:	f000 8084 	beq.w	800bf2c <_dtoa_r+0x204>
 800be24:	ee19 3a90 	vmov	r3, s19
 800be28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800be30:	4656      	mov	r6, sl
 800be32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800be36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800be3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800be3e:	4b74      	ldr	r3, [pc, #464]	; (800c010 <_dtoa_r+0x2e8>)
 800be40:	2200      	movs	r2, #0
 800be42:	4630      	mov	r0, r6
 800be44:	4639      	mov	r1, r7
 800be46:	f7f4 fa1f 	bl	8000288 <__aeabi_dsub>
 800be4a:	a365      	add	r3, pc, #404	; (adr r3, 800bfe0 <_dtoa_r+0x2b8>)
 800be4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be50:	f7f4 fbd2 	bl	80005f8 <__aeabi_dmul>
 800be54:	a364      	add	r3, pc, #400	; (adr r3, 800bfe8 <_dtoa_r+0x2c0>)
 800be56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be5a:	f7f4 fa17 	bl	800028c <__adddf3>
 800be5e:	4606      	mov	r6, r0
 800be60:	4628      	mov	r0, r5
 800be62:	460f      	mov	r7, r1
 800be64:	f7f4 fb5e 	bl	8000524 <__aeabi_i2d>
 800be68:	a361      	add	r3, pc, #388	; (adr r3, 800bff0 <_dtoa_r+0x2c8>)
 800be6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6e:	f7f4 fbc3 	bl	80005f8 <__aeabi_dmul>
 800be72:	4602      	mov	r2, r0
 800be74:	460b      	mov	r3, r1
 800be76:	4630      	mov	r0, r6
 800be78:	4639      	mov	r1, r7
 800be7a:	f7f4 fa07 	bl	800028c <__adddf3>
 800be7e:	4606      	mov	r6, r0
 800be80:	460f      	mov	r7, r1
 800be82:	f7f4 fe69 	bl	8000b58 <__aeabi_d2iz>
 800be86:	2200      	movs	r2, #0
 800be88:	9000      	str	r0, [sp, #0]
 800be8a:	2300      	movs	r3, #0
 800be8c:	4630      	mov	r0, r6
 800be8e:	4639      	mov	r1, r7
 800be90:	f7f4 fe24 	bl	8000adc <__aeabi_dcmplt>
 800be94:	b150      	cbz	r0, 800beac <_dtoa_r+0x184>
 800be96:	9800      	ldr	r0, [sp, #0]
 800be98:	f7f4 fb44 	bl	8000524 <__aeabi_i2d>
 800be9c:	4632      	mov	r2, r6
 800be9e:	463b      	mov	r3, r7
 800bea0:	f7f4 fe12 	bl	8000ac8 <__aeabi_dcmpeq>
 800bea4:	b910      	cbnz	r0, 800beac <_dtoa_r+0x184>
 800bea6:	9b00      	ldr	r3, [sp, #0]
 800bea8:	3b01      	subs	r3, #1
 800beaa:	9300      	str	r3, [sp, #0]
 800beac:	9b00      	ldr	r3, [sp, #0]
 800beae:	2b16      	cmp	r3, #22
 800beb0:	d85a      	bhi.n	800bf68 <_dtoa_r+0x240>
 800beb2:	9a00      	ldr	r2, [sp, #0]
 800beb4:	4b57      	ldr	r3, [pc, #348]	; (800c014 <_dtoa_r+0x2ec>)
 800beb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800beba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bebe:	ec51 0b19 	vmov	r0, r1, d9
 800bec2:	f7f4 fe0b 	bl	8000adc <__aeabi_dcmplt>
 800bec6:	2800      	cmp	r0, #0
 800bec8:	d050      	beq.n	800bf6c <_dtoa_r+0x244>
 800beca:	9b00      	ldr	r3, [sp, #0]
 800becc:	3b01      	subs	r3, #1
 800bece:	9300      	str	r3, [sp, #0]
 800bed0:	2300      	movs	r3, #0
 800bed2:	930b      	str	r3, [sp, #44]	; 0x2c
 800bed4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bed6:	1b5d      	subs	r5, r3, r5
 800bed8:	1e6b      	subs	r3, r5, #1
 800beda:	9305      	str	r3, [sp, #20]
 800bedc:	bf45      	ittet	mi
 800bede:	f1c5 0301 	rsbmi	r3, r5, #1
 800bee2:	9304      	strmi	r3, [sp, #16]
 800bee4:	2300      	movpl	r3, #0
 800bee6:	2300      	movmi	r3, #0
 800bee8:	bf4c      	ite	mi
 800beea:	9305      	strmi	r3, [sp, #20]
 800beec:	9304      	strpl	r3, [sp, #16]
 800beee:	9b00      	ldr	r3, [sp, #0]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	db3d      	blt.n	800bf70 <_dtoa_r+0x248>
 800bef4:	9b05      	ldr	r3, [sp, #20]
 800bef6:	9a00      	ldr	r2, [sp, #0]
 800bef8:	920a      	str	r2, [sp, #40]	; 0x28
 800befa:	4413      	add	r3, r2
 800befc:	9305      	str	r3, [sp, #20]
 800befe:	2300      	movs	r3, #0
 800bf00:	9307      	str	r3, [sp, #28]
 800bf02:	9b06      	ldr	r3, [sp, #24]
 800bf04:	2b09      	cmp	r3, #9
 800bf06:	f200 8089 	bhi.w	800c01c <_dtoa_r+0x2f4>
 800bf0a:	2b05      	cmp	r3, #5
 800bf0c:	bfc4      	itt	gt
 800bf0e:	3b04      	subgt	r3, #4
 800bf10:	9306      	strgt	r3, [sp, #24]
 800bf12:	9b06      	ldr	r3, [sp, #24]
 800bf14:	f1a3 0302 	sub.w	r3, r3, #2
 800bf18:	bfcc      	ite	gt
 800bf1a:	2500      	movgt	r5, #0
 800bf1c:	2501      	movle	r5, #1
 800bf1e:	2b03      	cmp	r3, #3
 800bf20:	f200 8087 	bhi.w	800c032 <_dtoa_r+0x30a>
 800bf24:	e8df f003 	tbb	[pc, r3]
 800bf28:	59383a2d 	.word	0x59383a2d
 800bf2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bf30:	441d      	add	r5, r3
 800bf32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bf36:	2b20      	cmp	r3, #32
 800bf38:	bfc1      	itttt	gt
 800bf3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bf3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bf42:	fa0b f303 	lslgt.w	r3, fp, r3
 800bf46:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bf4a:	bfda      	itte	le
 800bf4c:	f1c3 0320 	rsble	r3, r3, #32
 800bf50:	fa06 f003 	lslle.w	r0, r6, r3
 800bf54:	4318      	orrgt	r0, r3
 800bf56:	f7f4 fad5 	bl	8000504 <__aeabi_ui2d>
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	4606      	mov	r6, r0
 800bf5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bf62:	3d01      	subs	r5, #1
 800bf64:	930e      	str	r3, [sp, #56]	; 0x38
 800bf66:	e76a      	b.n	800be3e <_dtoa_r+0x116>
 800bf68:	2301      	movs	r3, #1
 800bf6a:	e7b2      	b.n	800bed2 <_dtoa_r+0x1aa>
 800bf6c:	900b      	str	r0, [sp, #44]	; 0x2c
 800bf6e:	e7b1      	b.n	800bed4 <_dtoa_r+0x1ac>
 800bf70:	9b04      	ldr	r3, [sp, #16]
 800bf72:	9a00      	ldr	r2, [sp, #0]
 800bf74:	1a9b      	subs	r3, r3, r2
 800bf76:	9304      	str	r3, [sp, #16]
 800bf78:	4253      	negs	r3, r2
 800bf7a:	9307      	str	r3, [sp, #28]
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	930a      	str	r3, [sp, #40]	; 0x28
 800bf80:	e7bf      	b.n	800bf02 <_dtoa_r+0x1da>
 800bf82:	2300      	movs	r3, #0
 800bf84:	9308      	str	r3, [sp, #32]
 800bf86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	dc55      	bgt.n	800c038 <_dtoa_r+0x310>
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bf92:	461a      	mov	r2, r3
 800bf94:	9209      	str	r2, [sp, #36]	; 0x24
 800bf96:	e00c      	b.n	800bfb2 <_dtoa_r+0x28a>
 800bf98:	2301      	movs	r3, #1
 800bf9a:	e7f3      	b.n	800bf84 <_dtoa_r+0x25c>
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfa0:	9308      	str	r3, [sp, #32]
 800bfa2:	9b00      	ldr	r3, [sp, #0]
 800bfa4:	4413      	add	r3, r2
 800bfa6:	9302      	str	r3, [sp, #8]
 800bfa8:	3301      	adds	r3, #1
 800bfaa:	2b01      	cmp	r3, #1
 800bfac:	9303      	str	r3, [sp, #12]
 800bfae:	bfb8      	it	lt
 800bfb0:	2301      	movlt	r3, #1
 800bfb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	6042      	str	r2, [r0, #4]
 800bfb8:	2204      	movs	r2, #4
 800bfba:	f102 0614 	add.w	r6, r2, #20
 800bfbe:	429e      	cmp	r6, r3
 800bfc0:	6841      	ldr	r1, [r0, #4]
 800bfc2:	d93d      	bls.n	800c040 <_dtoa_r+0x318>
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	f001 f839 	bl	800d03c <_Balloc>
 800bfca:	9001      	str	r0, [sp, #4]
 800bfcc:	2800      	cmp	r0, #0
 800bfce:	d13b      	bne.n	800c048 <_dtoa_r+0x320>
 800bfd0:	4b11      	ldr	r3, [pc, #68]	; (800c018 <_dtoa_r+0x2f0>)
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bfd8:	e6c0      	b.n	800bd5c <_dtoa_r+0x34>
 800bfda:	2301      	movs	r3, #1
 800bfdc:	e7df      	b.n	800bf9e <_dtoa_r+0x276>
 800bfde:	bf00      	nop
 800bfe0:	636f4361 	.word	0x636f4361
 800bfe4:	3fd287a7 	.word	0x3fd287a7
 800bfe8:	8b60c8b3 	.word	0x8b60c8b3
 800bfec:	3fc68a28 	.word	0x3fc68a28
 800bff0:	509f79fb 	.word	0x509f79fb
 800bff4:	3fd34413 	.word	0x3fd34413
 800bff8:	08010bee 	.word	0x08010bee
 800bffc:	08010c05 	.word	0x08010c05
 800c000:	7ff00000 	.word	0x7ff00000
 800c004:	08010bea 	.word	0x08010bea
 800c008:	08010be1 	.word	0x08010be1
 800c00c:	08010a65 	.word	0x08010a65
 800c010:	3ff80000 	.word	0x3ff80000
 800c014:	08010d70 	.word	0x08010d70
 800c018:	08010c60 	.word	0x08010c60
 800c01c:	2501      	movs	r5, #1
 800c01e:	2300      	movs	r3, #0
 800c020:	9306      	str	r3, [sp, #24]
 800c022:	9508      	str	r5, [sp, #32]
 800c024:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c028:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c02c:	2200      	movs	r2, #0
 800c02e:	2312      	movs	r3, #18
 800c030:	e7b0      	b.n	800bf94 <_dtoa_r+0x26c>
 800c032:	2301      	movs	r3, #1
 800c034:	9308      	str	r3, [sp, #32]
 800c036:	e7f5      	b.n	800c024 <_dtoa_r+0x2fc>
 800c038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c03a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c03e:	e7b8      	b.n	800bfb2 <_dtoa_r+0x28a>
 800c040:	3101      	adds	r1, #1
 800c042:	6041      	str	r1, [r0, #4]
 800c044:	0052      	lsls	r2, r2, #1
 800c046:	e7b8      	b.n	800bfba <_dtoa_r+0x292>
 800c048:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c04a:	9a01      	ldr	r2, [sp, #4]
 800c04c:	601a      	str	r2, [r3, #0]
 800c04e:	9b03      	ldr	r3, [sp, #12]
 800c050:	2b0e      	cmp	r3, #14
 800c052:	f200 809d 	bhi.w	800c190 <_dtoa_r+0x468>
 800c056:	2d00      	cmp	r5, #0
 800c058:	f000 809a 	beq.w	800c190 <_dtoa_r+0x468>
 800c05c:	9b00      	ldr	r3, [sp, #0]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	dd32      	ble.n	800c0c8 <_dtoa_r+0x3a0>
 800c062:	4ab7      	ldr	r2, [pc, #732]	; (800c340 <_dtoa_r+0x618>)
 800c064:	f003 030f 	and.w	r3, r3, #15
 800c068:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c06c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c070:	9b00      	ldr	r3, [sp, #0]
 800c072:	05d8      	lsls	r0, r3, #23
 800c074:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c078:	d516      	bpl.n	800c0a8 <_dtoa_r+0x380>
 800c07a:	4bb2      	ldr	r3, [pc, #712]	; (800c344 <_dtoa_r+0x61c>)
 800c07c:	ec51 0b19 	vmov	r0, r1, d9
 800c080:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c084:	f7f4 fbe2 	bl	800084c <__aeabi_ddiv>
 800c088:	f007 070f 	and.w	r7, r7, #15
 800c08c:	4682      	mov	sl, r0
 800c08e:	468b      	mov	fp, r1
 800c090:	2503      	movs	r5, #3
 800c092:	4eac      	ldr	r6, [pc, #688]	; (800c344 <_dtoa_r+0x61c>)
 800c094:	b957      	cbnz	r7, 800c0ac <_dtoa_r+0x384>
 800c096:	4642      	mov	r2, r8
 800c098:	464b      	mov	r3, r9
 800c09a:	4650      	mov	r0, sl
 800c09c:	4659      	mov	r1, fp
 800c09e:	f7f4 fbd5 	bl	800084c <__aeabi_ddiv>
 800c0a2:	4682      	mov	sl, r0
 800c0a4:	468b      	mov	fp, r1
 800c0a6:	e028      	b.n	800c0fa <_dtoa_r+0x3d2>
 800c0a8:	2502      	movs	r5, #2
 800c0aa:	e7f2      	b.n	800c092 <_dtoa_r+0x36a>
 800c0ac:	07f9      	lsls	r1, r7, #31
 800c0ae:	d508      	bpl.n	800c0c2 <_dtoa_r+0x39a>
 800c0b0:	4640      	mov	r0, r8
 800c0b2:	4649      	mov	r1, r9
 800c0b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c0b8:	f7f4 fa9e 	bl	80005f8 <__aeabi_dmul>
 800c0bc:	3501      	adds	r5, #1
 800c0be:	4680      	mov	r8, r0
 800c0c0:	4689      	mov	r9, r1
 800c0c2:	107f      	asrs	r7, r7, #1
 800c0c4:	3608      	adds	r6, #8
 800c0c6:	e7e5      	b.n	800c094 <_dtoa_r+0x36c>
 800c0c8:	f000 809b 	beq.w	800c202 <_dtoa_r+0x4da>
 800c0cc:	9b00      	ldr	r3, [sp, #0]
 800c0ce:	4f9d      	ldr	r7, [pc, #628]	; (800c344 <_dtoa_r+0x61c>)
 800c0d0:	425e      	negs	r6, r3
 800c0d2:	4b9b      	ldr	r3, [pc, #620]	; (800c340 <_dtoa_r+0x618>)
 800c0d4:	f006 020f 	and.w	r2, r6, #15
 800c0d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e0:	ec51 0b19 	vmov	r0, r1, d9
 800c0e4:	f7f4 fa88 	bl	80005f8 <__aeabi_dmul>
 800c0e8:	1136      	asrs	r6, r6, #4
 800c0ea:	4682      	mov	sl, r0
 800c0ec:	468b      	mov	fp, r1
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	2502      	movs	r5, #2
 800c0f2:	2e00      	cmp	r6, #0
 800c0f4:	d17a      	bne.n	800c1ec <_dtoa_r+0x4c4>
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d1d3      	bne.n	800c0a2 <_dtoa_r+0x37a>
 800c0fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	f000 8082 	beq.w	800c206 <_dtoa_r+0x4de>
 800c102:	4b91      	ldr	r3, [pc, #580]	; (800c348 <_dtoa_r+0x620>)
 800c104:	2200      	movs	r2, #0
 800c106:	4650      	mov	r0, sl
 800c108:	4659      	mov	r1, fp
 800c10a:	f7f4 fce7 	bl	8000adc <__aeabi_dcmplt>
 800c10e:	2800      	cmp	r0, #0
 800c110:	d079      	beq.n	800c206 <_dtoa_r+0x4de>
 800c112:	9b03      	ldr	r3, [sp, #12]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d076      	beq.n	800c206 <_dtoa_r+0x4de>
 800c118:	9b02      	ldr	r3, [sp, #8]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	dd36      	ble.n	800c18c <_dtoa_r+0x464>
 800c11e:	9b00      	ldr	r3, [sp, #0]
 800c120:	4650      	mov	r0, sl
 800c122:	4659      	mov	r1, fp
 800c124:	1e5f      	subs	r7, r3, #1
 800c126:	2200      	movs	r2, #0
 800c128:	4b88      	ldr	r3, [pc, #544]	; (800c34c <_dtoa_r+0x624>)
 800c12a:	f7f4 fa65 	bl	80005f8 <__aeabi_dmul>
 800c12e:	9e02      	ldr	r6, [sp, #8]
 800c130:	4682      	mov	sl, r0
 800c132:	468b      	mov	fp, r1
 800c134:	3501      	adds	r5, #1
 800c136:	4628      	mov	r0, r5
 800c138:	f7f4 f9f4 	bl	8000524 <__aeabi_i2d>
 800c13c:	4652      	mov	r2, sl
 800c13e:	465b      	mov	r3, fp
 800c140:	f7f4 fa5a 	bl	80005f8 <__aeabi_dmul>
 800c144:	4b82      	ldr	r3, [pc, #520]	; (800c350 <_dtoa_r+0x628>)
 800c146:	2200      	movs	r2, #0
 800c148:	f7f4 f8a0 	bl	800028c <__adddf3>
 800c14c:	46d0      	mov	r8, sl
 800c14e:	46d9      	mov	r9, fp
 800c150:	4682      	mov	sl, r0
 800c152:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c156:	2e00      	cmp	r6, #0
 800c158:	d158      	bne.n	800c20c <_dtoa_r+0x4e4>
 800c15a:	4b7e      	ldr	r3, [pc, #504]	; (800c354 <_dtoa_r+0x62c>)
 800c15c:	2200      	movs	r2, #0
 800c15e:	4640      	mov	r0, r8
 800c160:	4649      	mov	r1, r9
 800c162:	f7f4 f891 	bl	8000288 <__aeabi_dsub>
 800c166:	4652      	mov	r2, sl
 800c168:	465b      	mov	r3, fp
 800c16a:	4680      	mov	r8, r0
 800c16c:	4689      	mov	r9, r1
 800c16e:	f7f4 fcd3 	bl	8000b18 <__aeabi_dcmpgt>
 800c172:	2800      	cmp	r0, #0
 800c174:	f040 8295 	bne.w	800c6a2 <_dtoa_r+0x97a>
 800c178:	4652      	mov	r2, sl
 800c17a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c17e:	4640      	mov	r0, r8
 800c180:	4649      	mov	r1, r9
 800c182:	f7f4 fcab 	bl	8000adc <__aeabi_dcmplt>
 800c186:	2800      	cmp	r0, #0
 800c188:	f040 8289 	bne.w	800c69e <_dtoa_r+0x976>
 800c18c:	ec5b ab19 	vmov	sl, fp, d9
 800c190:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c192:	2b00      	cmp	r3, #0
 800c194:	f2c0 8148 	blt.w	800c428 <_dtoa_r+0x700>
 800c198:	9a00      	ldr	r2, [sp, #0]
 800c19a:	2a0e      	cmp	r2, #14
 800c19c:	f300 8144 	bgt.w	800c428 <_dtoa_r+0x700>
 800c1a0:	4b67      	ldr	r3, [pc, #412]	; (800c340 <_dtoa_r+0x618>)
 800c1a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c1aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	f280 80d5 	bge.w	800c35c <_dtoa_r+0x634>
 800c1b2:	9b03      	ldr	r3, [sp, #12]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	f300 80d1 	bgt.w	800c35c <_dtoa_r+0x634>
 800c1ba:	f040 826f 	bne.w	800c69c <_dtoa_r+0x974>
 800c1be:	4b65      	ldr	r3, [pc, #404]	; (800c354 <_dtoa_r+0x62c>)
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	4640      	mov	r0, r8
 800c1c4:	4649      	mov	r1, r9
 800c1c6:	f7f4 fa17 	bl	80005f8 <__aeabi_dmul>
 800c1ca:	4652      	mov	r2, sl
 800c1cc:	465b      	mov	r3, fp
 800c1ce:	f7f4 fc99 	bl	8000b04 <__aeabi_dcmpge>
 800c1d2:	9e03      	ldr	r6, [sp, #12]
 800c1d4:	4637      	mov	r7, r6
 800c1d6:	2800      	cmp	r0, #0
 800c1d8:	f040 8245 	bne.w	800c666 <_dtoa_r+0x93e>
 800c1dc:	9d01      	ldr	r5, [sp, #4]
 800c1de:	2331      	movs	r3, #49	; 0x31
 800c1e0:	f805 3b01 	strb.w	r3, [r5], #1
 800c1e4:	9b00      	ldr	r3, [sp, #0]
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	9300      	str	r3, [sp, #0]
 800c1ea:	e240      	b.n	800c66e <_dtoa_r+0x946>
 800c1ec:	07f2      	lsls	r2, r6, #31
 800c1ee:	d505      	bpl.n	800c1fc <_dtoa_r+0x4d4>
 800c1f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1f4:	f7f4 fa00 	bl	80005f8 <__aeabi_dmul>
 800c1f8:	3501      	adds	r5, #1
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	1076      	asrs	r6, r6, #1
 800c1fe:	3708      	adds	r7, #8
 800c200:	e777      	b.n	800c0f2 <_dtoa_r+0x3ca>
 800c202:	2502      	movs	r5, #2
 800c204:	e779      	b.n	800c0fa <_dtoa_r+0x3d2>
 800c206:	9f00      	ldr	r7, [sp, #0]
 800c208:	9e03      	ldr	r6, [sp, #12]
 800c20a:	e794      	b.n	800c136 <_dtoa_r+0x40e>
 800c20c:	9901      	ldr	r1, [sp, #4]
 800c20e:	4b4c      	ldr	r3, [pc, #304]	; (800c340 <_dtoa_r+0x618>)
 800c210:	4431      	add	r1, r6
 800c212:	910d      	str	r1, [sp, #52]	; 0x34
 800c214:	9908      	ldr	r1, [sp, #32]
 800c216:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c21a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c21e:	2900      	cmp	r1, #0
 800c220:	d043      	beq.n	800c2aa <_dtoa_r+0x582>
 800c222:	494d      	ldr	r1, [pc, #308]	; (800c358 <_dtoa_r+0x630>)
 800c224:	2000      	movs	r0, #0
 800c226:	f7f4 fb11 	bl	800084c <__aeabi_ddiv>
 800c22a:	4652      	mov	r2, sl
 800c22c:	465b      	mov	r3, fp
 800c22e:	f7f4 f82b 	bl	8000288 <__aeabi_dsub>
 800c232:	9d01      	ldr	r5, [sp, #4]
 800c234:	4682      	mov	sl, r0
 800c236:	468b      	mov	fp, r1
 800c238:	4649      	mov	r1, r9
 800c23a:	4640      	mov	r0, r8
 800c23c:	f7f4 fc8c 	bl	8000b58 <__aeabi_d2iz>
 800c240:	4606      	mov	r6, r0
 800c242:	f7f4 f96f 	bl	8000524 <__aeabi_i2d>
 800c246:	4602      	mov	r2, r0
 800c248:	460b      	mov	r3, r1
 800c24a:	4640      	mov	r0, r8
 800c24c:	4649      	mov	r1, r9
 800c24e:	f7f4 f81b 	bl	8000288 <__aeabi_dsub>
 800c252:	3630      	adds	r6, #48	; 0x30
 800c254:	f805 6b01 	strb.w	r6, [r5], #1
 800c258:	4652      	mov	r2, sl
 800c25a:	465b      	mov	r3, fp
 800c25c:	4680      	mov	r8, r0
 800c25e:	4689      	mov	r9, r1
 800c260:	f7f4 fc3c 	bl	8000adc <__aeabi_dcmplt>
 800c264:	2800      	cmp	r0, #0
 800c266:	d163      	bne.n	800c330 <_dtoa_r+0x608>
 800c268:	4642      	mov	r2, r8
 800c26a:	464b      	mov	r3, r9
 800c26c:	4936      	ldr	r1, [pc, #216]	; (800c348 <_dtoa_r+0x620>)
 800c26e:	2000      	movs	r0, #0
 800c270:	f7f4 f80a 	bl	8000288 <__aeabi_dsub>
 800c274:	4652      	mov	r2, sl
 800c276:	465b      	mov	r3, fp
 800c278:	f7f4 fc30 	bl	8000adc <__aeabi_dcmplt>
 800c27c:	2800      	cmp	r0, #0
 800c27e:	f040 80b5 	bne.w	800c3ec <_dtoa_r+0x6c4>
 800c282:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c284:	429d      	cmp	r5, r3
 800c286:	d081      	beq.n	800c18c <_dtoa_r+0x464>
 800c288:	4b30      	ldr	r3, [pc, #192]	; (800c34c <_dtoa_r+0x624>)
 800c28a:	2200      	movs	r2, #0
 800c28c:	4650      	mov	r0, sl
 800c28e:	4659      	mov	r1, fp
 800c290:	f7f4 f9b2 	bl	80005f8 <__aeabi_dmul>
 800c294:	4b2d      	ldr	r3, [pc, #180]	; (800c34c <_dtoa_r+0x624>)
 800c296:	4682      	mov	sl, r0
 800c298:	468b      	mov	fp, r1
 800c29a:	4640      	mov	r0, r8
 800c29c:	4649      	mov	r1, r9
 800c29e:	2200      	movs	r2, #0
 800c2a0:	f7f4 f9aa 	bl	80005f8 <__aeabi_dmul>
 800c2a4:	4680      	mov	r8, r0
 800c2a6:	4689      	mov	r9, r1
 800c2a8:	e7c6      	b.n	800c238 <_dtoa_r+0x510>
 800c2aa:	4650      	mov	r0, sl
 800c2ac:	4659      	mov	r1, fp
 800c2ae:	f7f4 f9a3 	bl	80005f8 <__aeabi_dmul>
 800c2b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2b4:	9d01      	ldr	r5, [sp, #4]
 800c2b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2b8:	4682      	mov	sl, r0
 800c2ba:	468b      	mov	fp, r1
 800c2bc:	4649      	mov	r1, r9
 800c2be:	4640      	mov	r0, r8
 800c2c0:	f7f4 fc4a 	bl	8000b58 <__aeabi_d2iz>
 800c2c4:	4606      	mov	r6, r0
 800c2c6:	f7f4 f92d 	bl	8000524 <__aeabi_i2d>
 800c2ca:	3630      	adds	r6, #48	; 0x30
 800c2cc:	4602      	mov	r2, r0
 800c2ce:	460b      	mov	r3, r1
 800c2d0:	4640      	mov	r0, r8
 800c2d2:	4649      	mov	r1, r9
 800c2d4:	f7f3 ffd8 	bl	8000288 <__aeabi_dsub>
 800c2d8:	f805 6b01 	strb.w	r6, [r5], #1
 800c2dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2de:	429d      	cmp	r5, r3
 800c2e0:	4680      	mov	r8, r0
 800c2e2:	4689      	mov	r9, r1
 800c2e4:	f04f 0200 	mov.w	r2, #0
 800c2e8:	d124      	bne.n	800c334 <_dtoa_r+0x60c>
 800c2ea:	4b1b      	ldr	r3, [pc, #108]	; (800c358 <_dtoa_r+0x630>)
 800c2ec:	4650      	mov	r0, sl
 800c2ee:	4659      	mov	r1, fp
 800c2f0:	f7f3 ffcc 	bl	800028c <__adddf3>
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	460b      	mov	r3, r1
 800c2f8:	4640      	mov	r0, r8
 800c2fa:	4649      	mov	r1, r9
 800c2fc:	f7f4 fc0c 	bl	8000b18 <__aeabi_dcmpgt>
 800c300:	2800      	cmp	r0, #0
 800c302:	d173      	bne.n	800c3ec <_dtoa_r+0x6c4>
 800c304:	4652      	mov	r2, sl
 800c306:	465b      	mov	r3, fp
 800c308:	4913      	ldr	r1, [pc, #76]	; (800c358 <_dtoa_r+0x630>)
 800c30a:	2000      	movs	r0, #0
 800c30c:	f7f3 ffbc 	bl	8000288 <__aeabi_dsub>
 800c310:	4602      	mov	r2, r0
 800c312:	460b      	mov	r3, r1
 800c314:	4640      	mov	r0, r8
 800c316:	4649      	mov	r1, r9
 800c318:	f7f4 fbe0 	bl	8000adc <__aeabi_dcmplt>
 800c31c:	2800      	cmp	r0, #0
 800c31e:	f43f af35 	beq.w	800c18c <_dtoa_r+0x464>
 800c322:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c324:	1e6b      	subs	r3, r5, #1
 800c326:	930f      	str	r3, [sp, #60]	; 0x3c
 800c328:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c32c:	2b30      	cmp	r3, #48	; 0x30
 800c32e:	d0f8      	beq.n	800c322 <_dtoa_r+0x5fa>
 800c330:	9700      	str	r7, [sp, #0]
 800c332:	e049      	b.n	800c3c8 <_dtoa_r+0x6a0>
 800c334:	4b05      	ldr	r3, [pc, #20]	; (800c34c <_dtoa_r+0x624>)
 800c336:	f7f4 f95f 	bl	80005f8 <__aeabi_dmul>
 800c33a:	4680      	mov	r8, r0
 800c33c:	4689      	mov	r9, r1
 800c33e:	e7bd      	b.n	800c2bc <_dtoa_r+0x594>
 800c340:	08010d70 	.word	0x08010d70
 800c344:	08010d48 	.word	0x08010d48
 800c348:	3ff00000 	.word	0x3ff00000
 800c34c:	40240000 	.word	0x40240000
 800c350:	401c0000 	.word	0x401c0000
 800c354:	40140000 	.word	0x40140000
 800c358:	3fe00000 	.word	0x3fe00000
 800c35c:	9d01      	ldr	r5, [sp, #4]
 800c35e:	4656      	mov	r6, sl
 800c360:	465f      	mov	r7, fp
 800c362:	4642      	mov	r2, r8
 800c364:	464b      	mov	r3, r9
 800c366:	4630      	mov	r0, r6
 800c368:	4639      	mov	r1, r7
 800c36a:	f7f4 fa6f 	bl	800084c <__aeabi_ddiv>
 800c36e:	f7f4 fbf3 	bl	8000b58 <__aeabi_d2iz>
 800c372:	4682      	mov	sl, r0
 800c374:	f7f4 f8d6 	bl	8000524 <__aeabi_i2d>
 800c378:	4642      	mov	r2, r8
 800c37a:	464b      	mov	r3, r9
 800c37c:	f7f4 f93c 	bl	80005f8 <__aeabi_dmul>
 800c380:	4602      	mov	r2, r0
 800c382:	460b      	mov	r3, r1
 800c384:	4630      	mov	r0, r6
 800c386:	4639      	mov	r1, r7
 800c388:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c38c:	f7f3 ff7c 	bl	8000288 <__aeabi_dsub>
 800c390:	f805 6b01 	strb.w	r6, [r5], #1
 800c394:	9e01      	ldr	r6, [sp, #4]
 800c396:	9f03      	ldr	r7, [sp, #12]
 800c398:	1bae      	subs	r6, r5, r6
 800c39a:	42b7      	cmp	r7, r6
 800c39c:	4602      	mov	r2, r0
 800c39e:	460b      	mov	r3, r1
 800c3a0:	d135      	bne.n	800c40e <_dtoa_r+0x6e6>
 800c3a2:	f7f3 ff73 	bl	800028c <__adddf3>
 800c3a6:	4642      	mov	r2, r8
 800c3a8:	464b      	mov	r3, r9
 800c3aa:	4606      	mov	r6, r0
 800c3ac:	460f      	mov	r7, r1
 800c3ae:	f7f4 fbb3 	bl	8000b18 <__aeabi_dcmpgt>
 800c3b2:	b9d0      	cbnz	r0, 800c3ea <_dtoa_r+0x6c2>
 800c3b4:	4642      	mov	r2, r8
 800c3b6:	464b      	mov	r3, r9
 800c3b8:	4630      	mov	r0, r6
 800c3ba:	4639      	mov	r1, r7
 800c3bc:	f7f4 fb84 	bl	8000ac8 <__aeabi_dcmpeq>
 800c3c0:	b110      	cbz	r0, 800c3c8 <_dtoa_r+0x6a0>
 800c3c2:	f01a 0f01 	tst.w	sl, #1
 800c3c6:	d110      	bne.n	800c3ea <_dtoa_r+0x6c2>
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	ee18 1a10 	vmov	r1, s16
 800c3ce:	f000 fe75 	bl	800d0bc <_Bfree>
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	9800      	ldr	r0, [sp, #0]
 800c3d6:	702b      	strb	r3, [r5, #0]
 800c3d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3da:	3001      	adds	r0, #1
 800c3dc:	6018      	str	r0, [r3, #0]
 800c3de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	f43f acf1 	beq.w	800bdc8 <_dtoa_r+0xa0>
 800c3e6:	601d      	str	r5, [r3, #0]
 800c3e8:	e4ee      	b.n	800bdc8 <_dtoa_r+0xa0>
 800c3ea:	9f00      	ldr	r7, [sp, #0]
 800c3ec:	462b      	mov	r3, r5
 800c3ee:	461d      	mov	r5, r3
 800c3f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3f4:	2a39      	cmp	r2, #57	; 0x39
 800c3f6:	d106      	bne.n	800c406 <_dtoa_r+0x6de>
 800c3f8:	9a01      	ldr	r2, [sp, #4]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d1f7      	bne.n	800c3ee <_dtoa_r+0x6c6>
 800c3fe:	9901      	ldr	r1, [sp, #4]
 800c400:	2230      	movs	r2, #48	; 0x30
 800c402:	3701      	adds	r7, #1
 800c404:	700a      	strb	r2, [r1, #0]
 800c406:	781a      	ldrb	r2, [r3, #0]
 800c408:	3201      	adds	r2, #1
 800c40a:	701a      	strb	r2, [r3, #0]
 800c40c:	e790      	b.n	800c330 <_dtoa_r+0x608>
 800c40e:	4ba6      	ldr	r3, [pc, #664]	; (800c6a8 <_dtoa_r+0x980>)
 800c410:	2200      	movs	r2, #0
 800c412:	f7f4 f8f1 	bl	80005f8 <__aeabi_dmul>
 800c416:	2200      	movs	r2, #0
 800c418:	2300      	movs	r3, #0
 800c41a:	4606      	mov	r6, r0
 800c41c:	460f      	mov	r7, r1
 800c41e:	f7f4 fb53 	bl	8000ac8 <__aeabi_dcmpeq>
 800c422:	2800      	cmp	r0, #0
 800c424:	d09d      	beq.n	800c362 <_dtoa_r+0x63a>
 800c426:	e7cf      	b.n	800c3c8 <_dtoa_r+0x6a0>
 800c428:	9a08      	ldr	r2, [sp, #32]
 800c42a:	2a00      	cmp	r2, #0
 800c42c:	f000 80d7 	beq.w	800c5de <_dtoa_r+0x8b6>
 800c430:	9a06      	ldr	r2, [sp, #24]
 800c432:	2a01      	cmp	r2, #1
 800c434:	f300 80ba 	bgt.w	800c5ac <_dtoa_r+0x884>
 800c438:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c43a:	2a00      	cmp	r2, #0
 800c43c:	f000 80b2 	beq.w	800c5a4 <_dtoa_r+0x87c>
 800c440:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c444:	9e07      	ldr	r6, [sp, #28]
 800c446:	9d04      	ldr	r5, [sp, #16]
 800c448:	9a04      	ldr	r2, [sp, #16]
 800c44a:	441a      	add	r2, r3
 800c44c:	9204      	str	r2, [sp, #16]
 800c44e:	9a05      	ldr	r2, [sp, #20]
 800c450:	2101      	movs	r1, #1
 800c452:	441a      	add	r2, r3
 800c454:	4620      	mov	r0, r4
 800c456:	9205      	str	r2, [sp, #20]
 800c458:	f000 ff32 	bl	800d2c0 <__i2b>
 800c45c:	4607      	mov	r7, r0
 800c45e:	2d00      	cmp	r5, #0
 800c460:	dd0c      	ble.n	800c47c <_dtoa_r+0x754>
 800c462:	9b05      	ldr	r3, [sp, #20]
 800c464:	2b00      	cmp	r3, #0
 800c466:	dd09      	ble.n	800c47c <_dtoa_r+0x754>
 800c468:	42ab      	cmp	r3, r5
 800c46a:	9a04      	ldr	r2, [sp, #16]
 800c46c:	bfa8      	it	ge
 800c46e:	462b      	movge	r3, r5
 800c470:	1ad2      	subs	r2, r2, r3
 800c472:	9204      	str	r2, [sp, #16]
 800c474:	9a05      	ldr	r2, [sp, #20]
 800c476:	1aed      	subs	r5, r5, r3
 800c478:	1ad3      	subs	r3, r2, r3
 800c47a:	9305      	str	r3, [sp, #20]
 800c47c:	9b07      	ldr	r3, [sp, #28]
 800c47e:	b31b      	cbz	r3, 800c4c8 <_dtoa_r+0x7a0>
 800c480:	9b08      	ldr	r3, [sp, #32]
 800c482:	2b00      	cmp	r3, #0
 800c484:	f000 80af 	beq.w	800c5e6 <_dtoa_r+0x8be>
 800c488:	2e00      	cmp	r6, #0
 800c48a:	dd13      	ble.n	800c4b4 <_dtoa_r+0x78c>
 800c48c:	4639      	mov	r1, r7
 800c48e:	4632      	mov	r2, r6
 800c490:	4620      	mov	r0, r4
 800c492:	f000 ffd5 	bl	800d440 <__pow5mult>
 800c496:	ee18 2a10 	vmov	r2, s16
 800c49a:	4601      	mov	r1, r0
 800c49c:	4607      	mov	r7, r0
 800c49e:	4620      	mov	r0, r4
 800c4a0:	f000 ff24 	bl	800d2ec <__multiply>
 800c4a4:	ee18 1a10 	vmov	r1, s16
 800c4a8:	4680      	mov	r8, r0
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	f000 fe06 	bl	800d0bc <_Bfree>
 800c4b0:	ee08 8a10 	vmov	s16, r8
 800c4b4:	9b07      	ldr	r3, [sp, #28]
 800c4b6:	1b9a      	subs	r2, r3, r6
 800c4b8:	d006      	beq.n	800c4c8 <_dtoa_r+0x7a0>
 800c4ba:	ee18 1a10 	vmov	r1, s16
 800c4be:	4620      	mov	r0, r4
 800c4c0:	f000 ffbe 	bl	800d440 <__pow5mult>
 800c4c4:	ee08 0a10 	vmov	s16, r0
 800c4c8:	2101      	movs	r1, #1
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	f000 fef8 	bl	800d2c0 <__i2b>
 800c4d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	4606      	mov	r6, r0
 800c4d6:	f340 8088 	ble.w	800c5ea <_dtoa_r+0x8c2>
 800c4da:	461a      	mov	r2, r3
 800c4dc:	4601      	mov	r1, r0
 800c4de:	4620      	mov	r0, r4
 800c4e0:	f000 ffae 	bl	800d440 <__pow5mult>
 800c4e4:	9b06      	ldr	r3, [sp, #24]
 800c4e6:	2b01      	cmp	r3, #1
 800c4e8:	4606      	mov	r6, r0
 800c4ea:	f340 8081 	ble.w	800c5f0 <_dtoa_r+0x8c8>
 800c4ee:	f04f 0800 	mov.w	r8, #0
 800c4f2:	6933      	ldr	r3, [r6, #16]
 800c4f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c4f8:	6918      	ldr	r0, [r3, #16]
 800c4fa:	f000 fe91 	bl	800d220 <__hi0bits>
 800c4fe:	f1c0 0020 	rsb	r0, r0, #32
 800c502:	9b05      	ldr	r3, [sp, #20]
 800c504:	4418      	add	r0, r3
 800c506:	f010 001f 	ands.w	r0, r0, #31
 800c50a:	f000 8092 	beq.w	800c632 <_dtoa_r+0x90a>
 800c50e:	f1c0 0320 	rsb	r3, r0, #32
 800c512:	2b04      	cmp	r3, #4
 800c514:	f340 808a 	ble.w	800c62c <_dtoa_r+0x904>
 800c518:	f1c0 001c 	rsb	r0, r0, #28
 800c51c:	9b04      	ldr	r3, [sp, #16]
 800c51e:	4403      	add	r3, r0
 800c520:	9304      	str	r3, [sp, #16]
 800c522:	9b05      	ldr	r3, [sp, #20]
 800c524:	4403      	add	r3, r0
 800c526:	4405      	add	r5, r0
 800c528:	9305      	str	r3, [sp, #20]
 800c52a:	9b04      	ldr	r3, [sp, #16]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	dd07      	ble.n	800c540 <_dtoa_r+0x818>
 800c530:	ee18 1a10 	vmov	r1, s16
 800c534:	461a      	mov	r2, r3
 800c536:	4620      	mov	r0, r4
 800c538:	f000 ffdc 	bl	800d4f4 <__lshift>
 800c53c:	ee08 0a10 	vmov	s16, r0
 800c540:	9b05      	ldr	r3, [sp, #20]
 800c542:	2b00      	cmp	r3, #0
 800c544:	dd05      	ble.n	800c552 <_dtoa_r+0x82a>
 800c546:	4631      	mov	r1, r6
 800c548:	461a      	mov	r2, r3
 800c54a:	4620      	mov	r0, r4
 800c54c:	f000 ffd2 	bl	800d4f4 <__lshift>
 800c550:	4606      	mov	r6, r0
 800c552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c554:	2b00      	cmp	r3, #0
 800c556:	d06e      	beq.n	800c636 <_dtoa_r+0x90e>
 800c558:	ee18 0a10 	vmov	r0, s16
 800c55c:	4631      	mov	r1, r6
 800c55e:	f001 f839 	bl	800d5d4 <__mcmp>
 800c562:	2800      	cmp	r0, #0
 800c564:	da67      	bge.n	800c636 <_dtoa_r+0x90e>
 800c566:	9b00      	ldr	r3, [sp, #0]
 800c568:	3b01      	subs	r3, #1
 800c56a:	ee18 1a10 	vmov	r1, s16
 800c56e:	9300      	str	r3, [sp, #0]
 800c570:	220a      	movs	r2, #10
 800c572:	2300      	movs	r3, #0
 800c574:	4620      	mov	r0, r4
 800c576:	f000 fdc3 	bl	800d100 <__multadd>
 800c57a:	9b08      	ldr	r3, [sp, #32]
 800c57c:	ee08 0a10 	vmov	s16, r0
 800c580:	2b00      	cmp	r3, #0
 800c582:	f000 81b1 	beq.w	800c8e8 <_dtoa_r+0xbc0>
 800c586:	2300      	movs	r3, #0
 800c588:	4639      	mov	r1, r7
 800c58a:	220a      	movs	r2, #10
 800c58c:	4620      	mov	r0, r4
 800c58e:	f000 fdb7 	bl	800d100 <__multadd>
 800c592:	9b02      	ldr	r3, [sp, #8]
 800c594:	2b00      	cmp	r3, #0
 800c596:	4607      	mov	r7, r0
 800c598:	f300 808e 	bgt.w	800c6b8 <_dtoa_r+0x990>
 800c59c:	9b06      	ldr	r3, [sp, #24]
 800c59e:	2b02      	cmp	r3, #2
 800c5a0:	dc51      	bgt.n	800c646 <_dtoa_r+0x91e>
 800c5a2:	e089      	b.n	800c6b8 <_dtoa_r+0x990>
 800c5a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c5a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c5aa:	e74b      	b.n	800c444 <_dtoa_r+0x71c>
 800c5ac:	9b03      	ldr	r3, [sp, #12]
 800c5ae:	1e5e      	subs	r6, r3, #1
 800c5b0:	9b07      	ldr	r3, [sp, #28]
 800c5b2:	42b3      	cmp	r3, r6
 800c5b4:	bfbf      	itttt	lt
 800c5b6:	9b07      	ldrlt	r3, [sp, #28]
 800c5b8:	9607      	strlt	r6, [sp, #28]
 800c5ba:	1af2      	sublt	r2, r6, r3
 800c5bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c5be:	bfb6      	itet	lt
 800c5c0:	189b      	addlt	r3, r3, r2
 800c5c2:	1b9e      	subge	r6, r3, r6
 800c5c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c5c6:	9b03      	ldr	r3, [sp, #12]
 800c5c8:	bfb8      	it	lt
 800c5ca:	2600      	movlt	r6, #0
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	bfb7      	itett	lt
 800c5d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c5d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c5d8:	1a9d      	sublt	r5, r3, r2
 800c5da:	2300      	movlt	r3, #0
 800c5dc:	e734      	b.n	800c448 <_dtoa_r+0x720>
 800c5de:	9e07      	ldr	r6, [sp, #28]
 800c5e0:	9d04      	ldr	r5, [sp, #16]
 800c5e2:	9f08      	ldr	r7, [sp, #32]
 800c5e4:	e73b      	b.n	800c45e <_dtoa_r+0x736>
 800c5e6:	9a07      	ldr	r2, [sp, #28]
 800c5e8:	e767      	b.n	800c4ba <_dtoa_r+0x792>
 800c5ea:	9b06      	ldr	r3, [sp, #24]
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	dc18      	bgt.n	800c622 <_dtoa_r+0x8fa>
 800c5f0:	f1ba 0f00 	cmp.w	sl, #0
 800c5f4:	d115      	bne.n	800c622 <_dtoa_r+0x8fa>
 800c5f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c5fa:	b993      	cbnz	r3, 800c622 <_dtoa_r+0x8fa>
 800c5fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c600:	0d1b      	lsrs	r3, r3, #20
 800c602:	051b      	lsls	r3, r3, #20
 800c604:	b183      	cbz	r3, 800c628 <_dtoa_r+0x900>
 800c606:	9b04      	ldr	r3, [sp, #16]
 800c608:	3301      	adds	r3, #1
 800c60a:	9304      	str	r3, [sp, #16]
 800c60c:	9b05      	ldr	r3, [sp, #20]
 800c60e:	3301      	adds	r3, #1
 800c610:	9305      	str	r3, [sp, #20]
 800c612:	f04f 0801 	mov.w	r8, #1
 800c616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c618:	2b00      	cmp	r3, #0
 800c61a:	f47f af6a 	bne.w	800c4f2 <_dtoa_r+0x7ca>
 800c61e:	2001      	movs	r0, #1
 800c620:	e76f      	b.n	800c502 <_dtoa_r+0x7da>
 800c622:	f04f 0800 	mov.w	r8, #0
 800c626:	e7f6      	b.n	800c616 <_dtoa_r+0x8ee>
 800c628:	4698      	mov	r8, r3
 800c62a:	e7f4      	b.n	800c616 <_dtoa_r+0x8ee>
 800c62c:	f43f af7d 	beq.w	800c52a <_dtoa_r+0x802>
 800c630:	4618      	mov	r0, r3
 800c632:	301c      	adds	r0, #28
 800c634:	e772      	b.n	800c51c <_dtoa_r+0x7f4>
 800c636:	9b03      	ldr	r3, [sp, #12]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	dc37      	bgt.n	800c6ac <_dtoa_r+0x984>
 800c63c:	9b06      	ldr	r3, [sp, #24]
 800c63e:	2b02      	cmp	r3, #2
 800c640:	dd34      	ble.n	800c6ac <_dtoa_r+0x984>
 800c642:	9b03      	ldr	r3, [sp, #12]
 800c644:	9302      	str	r3, [sp, #8]
 800c646:	9b02      	ldr	r3, [sp, #8]
 800c648:	b96b      	cbnz	r3, 800c666 <_dtoa_r+0x93e>
 800c64a:	4631      	mov	r1, r6
 800c64c:	2205      	movs	r2, #5
 800c64e:	4620      	mov	r0, r4
 800c650:	f000 fd56 	bl	800d100 <__multadd>
 800c654:	4601      	mov	r1, r0
 800c656:	4606      	mov	r6, r0
 800c658:	ee18 0a10 	vmov	r0, s16
 800c65c:	f000 ffba 	bl	800d5d4 <__mcmp>
 800c660:	2800      	cmp	r0, #0
 800c662:	f73f adbb 	bgt.w	800c1dc <_dtoa_r+0x4b4>
 800c666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c668:	9d01      	ldr	r5, [sp, #4]
 800c66a:	43db      	mvns	r3, r3
 800c66c:	9300      	str	r3, [sp, #0]
 800c66e:	f04f 0800 	mov.w	r8, #0
 800c672:	4631      	mov	r1, r6
 800c674:	4620      	mov	r0, r4
 800c676:	f000 fd21 	bl	800d0bc <_Bfree>
 800c67a:	2f00      	cmp	r7, #0
 800c67c:	f43f aea4 	beq.w	800c3c8 <_dtoa_r+0x6a0>
 800c680:	f1b8 0f00 	cmp.w	r8, #0
 800c684:	d005      	beq.n	800c692 <_dtoa_r+0x96a>
 800c686:	45b8      	cmp	r8, r7
 800c688:	d003      	beq.n	800c692 <_dtoa_r+0x96a>
 800c68a:	4641      	mov	r1, r8
 800c68c:	4620      	mov	r0, r4
 800c68e:	f000 fd15 	bl	800d0bc <_Bfree>
 800c692:	4639      	mov	r1, r7
 800c694:	4620      	mov	r0, r4
 800c696:	f000 fd11 	bl	800d0bc <_Bfree>
 800c69a:	e695      	b.n	800c3c8 <_dtoa_r+0x6a0>
 800c69c:	2600      	movs	r6, #0
 800c69e:	4637      	mov	r7, r6
 800c6a0:	e7e1      	b.n	800c666 <_dtoa_r+0x93e>
 800c6a2:	9700      	str	r7, [sp, #0]
 800c6a4:	4637      	mov	r7, r6
 800c6a6:	e599      	b.n	800c1dc <_dtoa_r+0x4b4>
 800c6a8:	40240000 	.word	0x40240000
 800c6ac:	9b08      	ldr	r3, [sp, #32]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	f000 80ca 	beq.w	800c848 <_dtoa_r+0xb20>
 800c6b4:	9b03      	ldr	r3, [sp, #12]
 800c6b6:	9302      	str	r3, [sp, #8]
 800c6b8:	2d00      	cmp	r5, #0
 800c6ba:	dd05      	ble.n	800c6c8 <_dtoa_r+0x9a0>
 800c6bc:	4639      	mov	r1, r7
 800c6be:	462a      	mov	r2, r5
 800c6c0:	4620      	mov	r0, r4
 800c6c2:	f000 ff17 	bl	800d4f4 <__lshift>
 800c6c6:	4607      	mov	r7, r0
 800c6c8:	f1b8 0f00 	cmp.w	r8, #0
 800c6cc:	d05b      	beq.n	800c786 <_dtoa_r+0xa5e>
 800c6ce:	6879      	ldr	r1, [r7, #4]
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	f000 fcb3 	bl	800d03c <_Balloc>
 800c6d6:	4605      	mov	r5, r0
 800c6d8:	b928      	cbnz	r0, 800c6e6 <_dtoa_r+0x9be>
 800c6da:	4b87      	ldr	r3, [pc, #540]	; (800c8f8 <_dtoa_r+0xbd0>)
 800c6dc:	4602      	mov	r2, r0
 800c6de:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c6e2:	f7ff bb3b 	b.w	800bd5c <_dtoa_r+0x34>
 800c6e6:	693a      	ldr	r2, [r7, #16]
 800c6e8:	3202      	adds	r2, #2
 800c6ea:	0092      	lsls	r2, r2, #2
 800c6ec:	f107 010c 	add.w	r1, r7, #12
 800c6f0:	300c      	adds	r0, #12
 800c6f2:	f000 fc95 	bl	800d020 <memcpy>
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	4629      	mov	r1, r5
 800c6fa:	4620      	mov	r0, r4
 800c6fc:	f000 fefa 	bl	800d4f4 <__lshift>
 800c700:	9b01      	ldr	r3, [sp, #4]
 800c702:	f103 0901 	add.w	r9, r3, #1
 800c706:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c70a:	4413      	add	r3, r2
 800c70c:	9305      	str	r3, [sp, #20]
 800c70e:	f00a 0301 	and.w	r3, sl, #1
 800c712:	46b8      	mov	r8, r7
 800c714:	9304      	str	r3, [sp, #16]
 800c716:	4607      	mov	r7, r0
 800c718:	4631      	mov	r1, r6
 800c71a:	ee18 0a10 	vmov	r0, s16
 800c71e:	f7ff fa77 	bl	800bc10 <quorem>
 800c722:	4641      	mov	r1, r8
 800c724:	9002      	str	r0, [sp, #8]
 800c726:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c72a:	ee18 0a10 	vmov	r0, s16
 800c72e:	f000 ff51 	bl	800d5d4 <__mcmp>
 800c732:	463a      	mov	r2, r7
 800c734:	9003      	str	r0, [sp, #12]
 800c736:	4631      	mov	r1, r6
 800c738:	4620      	mov	r0, r4
 800c73a:	f000 ff67 	bl	800d60c <__mdiff>
 800c73e:	68c2      	ldr	r2, [r0, #12]
 800c740:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800c744:	4605      	mov	r5, r0
 800c746:	bb02      	cbnz	r2, 800c78a <_dtoa_r+0xa62>
 800c748:	4601      	mov	r1, r0
 800c74a:	ee18 0a10 	vmov	r0, s16
 800c74e:	f000 ff41 	bl	800d5d4 <__mcmp>
 800c752:	4602      	mov	r2, r0
 800c754:	4629      	mov	r1, r5
 800c756:	4620      	mov	r0, r4
 800c758:	9207      	str	r2, [sp, #28]
 800c75a:	f000 fcaf 	bl	800d0bc <_Bfree>
 800c75e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c762:	ea43 0102 	orr.w	r1, r3, r2
 800c766:	9b04      	ldr	r3, [sp, #16]
 800c768:	430b      	orrs	r3, r1
 800c76a:	464d      	mov	r5, r9
 800c76c:	d10f      	bne.n	800c78e <_dtoa_r+0xa66>
 800c76e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c772:	d02a      	beq.n	800c7ca <_dtoa_r+0xaa2>
 800c774:	9b03      	ldr	r3, [sp, #12]
 800c776:	2b00      	cmp	r3, #0
 800c778:	dd02      	ble.n	800c780 <_dtoa_r+0xa58>
 800c77a:	9b02      	ldr	r3, [sp, #8]
 800c77c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c780:	f88b a000 	strb.w	sl, [fp]
 800c784:	e775      	b.n	800c672 <_dtoa_r+0x94a>
 800c786:	4638      	mov	r0, r7
 800c788:	e7ba      	b.n	800c700 <_dtoa_r+0x9d8>
 800c78a:	2201      	movs	r2, #1
 800c78c:	e7e2      	b.n	800c754 <_dtoa_r+0xa2c>
 800c78e:	9b03      	ldr	r3, [sp, #12]
 800c790:	2b00      	cmp	r3, #0
 800c792:	db04      	blt.n	800c79e <_dtoa_r+0xa76>
 800c794:	9906      	ldr	r1, [sp, #24]
 800c796:	430b      	orrs	r3, r1
 800c798:	9904      	ldr	r1, [sp, #16]
 800c79a:	430b      	orrs	r3, r1
 800c79c:	d122      	bne.n	800c7e4 <_dtoa_r+0xabc>
 800c79e:	2a00      	cmp	r2, #0
 800c7a0:	ddee      	ble.n	800c780 <_dtoa_r+0xa58>
 800c7a2:	ee18 1a10 	vmov	r1, s16
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	4620      	mov	r0, r4
 800c7aa:	f000 fea3 	bl	800d4f4 <__lshift>
 800c7ae:	4631      	mov	r1, r6
 800c7b0:	ee08 0a10 	vmov	s16, r0
 800c7b4:	f000 ff0e 	bl	800d5d4 <__mcmp>
 800c7b8:	2800      	cmp	r0, #0
 800c7ba:	dc03      	bgt.n	800c7c4 <_dtoa_r+0xa9c>
 800c7bc:	d1e0      	bne.n	800c780 <_dtoa_r+0xa58>
 800c7be:	f01a 0f01 	tst.w	sl, #1
 800c7c2:	d0dd      	beq.n	800c780 <_dtoa_r+0xa58>
 800c7c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c7c8:	d1d7      	bne.n	800c77a <_dtoa_r+0xa52>
 800c7ca:	2339      	movs	r3, #57	; 0x39
 800c7cc:	f88b 3000 	strb.w	r3, [fp]
 800c7d0:	462b      	mov	r3, r5
 800c7d2:	461d      	mov	r5, r3
 800c7d4:	3b01      	subs	r3, #1
 800c7d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c7da:	2a39      	cmp	r2, #57	; 0x39
 800c7dc:	d071      	beq.n	800c8c2 <_dtoa_r+0xb9a>
 800c7de:	3201      	adds	r2, #1
 800c7e0:	701a      	strb	r2, [r3, #0]
 800c7e2:	e746      	b.n	800c672 <_dtoa_r+0x94a>
 800c7e4:	2a00      	cmp	r2, #0
 800c7e6:	dd07      	ble.n	800c7f8 <_dtoa_r+0xad0>
 800c7e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c7ec:	d0ed      	beq.n	800c7ca <_dtoa_r+0xaa2>
 800c7ee:	f10a 0301 	add.w	r3, sl, #1
 800c7f2:	f88b 3000 	strb.w	r3, [fp]
 800c7f6:	e73c      	b.n	800c672 <_dtoa_r+0x94a>
 800c7f8:	9b05      	ldr	r3, [sp, #20]
 800c7fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c7fe:	4599      	cmp	r9, r3
 800c800:	d047      	beq.n	800c892 <_dtoa_r+0xb6a>
 800c802:	ee18 1a10 	vmov	r1, s16
 800c806:	2300      	movs	r3, #0
 800c808:	220a      	movs	r2, #10
 800c80a:	4620      	mov	r0, r4
 800c80c:	f000 fc78 	bl	800d100 <__multadd>
 800c810:	45b8      	cmp	r8, r7
 800c812:	ee08 0a10 	vmov	s16, r0
 800c816:	f04f 0300 	mov.w	r3, #0
 800c81a:	f04f 020a 	mov.w	r2, #10
 800c81e:	4641      	mov	r1, r8
 800c820:	4620      	mov	r0, r4
 800c822:	d106      	bne.n	800c832 <_dtoa_r+0xb0a>
 800c824:	f000 fc6c 	bl	800d100 <__multadd>
 800c828:	4680      	mov	r8, r0
 800c82a:	4607      	mov	r7, r0
 800c82c:	f109 0901 	add.w	r9, r9, #1
 800c830:	e772      	b.n	800c718 <_dtoa_r+0x9f0>
 800c832:	f000 fc65 	bl	800d100 <__multadd>
 800c836:	4639      	mov	r1, r7
 800c838:	4680      	mov	r8, r0
 800c83a:	2300      	movs	r3, #0
 800c83c:	220a      	movs	r2, #10
 800c83e:	4620      	mov	r0, r4
 800c840:	f000 fc5e 	bl	800d100 <__multadd>
 800c844:	4607      	mov	r7, r0
 800c846:	e7f1      	b.n	800c82c <_dtoa_r+0xb04>
 800c848:	9b03      	ldr	r3, [sp, #12]
 800c84a:	9302      	str	r3, [sp, #8]
 800c84c:	9d01      	ldr	r5, [sp, #4]
 800c84e:	ee18 0a10 	vmov	r0, s16
 800c852:	4631      	mov	r1, r6
 800c854:	f7ff f9dc 	bl	800bc10 <quorem>
 800c858:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c85c:	9b01      	ldr	r3, [sp, #4]
 800c85e:	f805 ab01 	strb.w	sl, [r5], #1
 800c862:	1aea      	subs	r2, r5, r3
 800c864:	9b02      	ldr	r3, [sp, #8]
 800c866:	4293      	cmp	r3, r2
 800c868:	dd09      	ble.n	800c87e <_dtoa_r+0xb56>
 800c86a:	ee18 1a10 	vmov	r1, s16
 800c86e:	2300      	movs	r3, #0
 800c870:	220a      	movs	r2, #10
 800c872:	4620      	mov	r0, r4
 800c874:	f000 fc44 	bl	800d100 <__multadd>
 800c878:	ee08 0a10 	vmov	s16, r0
 800c87c:	e7e7      	b.n	800c84e <_dtoa_r+0xb26>
 800c87e:	9b02      	ldr	r3, [sp, #8]
 800c880:	2b00      	cmp	r3, #0
 800c882:	bfc8      	it	gt
 800c884:	461d      	movgt	r5, r3
 800c886:	9b01      	ldr	r3, [sp, #4]
 800c888:	bfd8      	it	le
 800c88a:	2501      	movle	r5, #1
 800c88c:	441d      	add	r5, r3
 800c88e:	f04f 0800 	mov.w	r8, #0
 800c892:	ee18 1a10 	vmov	r1, s16
 800c896:	2201      	movs	r2, #1
 800c898:	4620      	mov	r0, r4
 800c89a:	f000 fe2b 	bl	800d4f4 <__lshift>
 800c89e:	4631      	mov	r1, r6
 800c8a0:	ee08 0a10 	vmov	s16, r0
 800c8a4:	f000 fe96 	bl	800d5d4 <__mcmp>
 800c8a8:	2800      	cmp	r0, #0
 800c8aa:	dc91      	bgt.n	800c7d0 <_dtoa_r+0xaa8>
 800c8ac:	d102      	bne.n	800c8b4 <_dtoa_r+0xb8c>
 800c8ae:	f01a 0f01 	tst.w	sl, #1
 800c8b2:	d18d      	bne.n	800c7d0 <_dtoa_r+0xaa8>
 800c8b4:	462b      	mov	r3, r5
 800c8b6:	461d      	mov	r5, r3
 800c8b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c8bc:	2a30      	cmp	r2, #48	; 0x30
 800c8be:	d0fa      	beq.n	800c8b6 <_dtoa_r+0xb8e>
 800c8c0:	e6d7      	b.n	800c672 <_dtoa_r+0x94a>
 800c8c2:	9a01      	ldr	r2, [sp, #4]
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d184      	bne.n	800c7d2 <_dtoa_r+0xaaa>
 800c8c8:	9b00      	ldr	r3, [sp, #0]
 800c8ca:	3301      	adds	r3, #1
 800c8cc:	9300      	str	r3, [sp, #0]
 800c8ce:	2331      	movs	r3, #49	; 0x31
 800c8d0:	7013      	strb	r3, [r2, #0]
 800c8d2:	e6ce      	b.n	800c672 <_dtoa_r+0x94a>
 800c8d4:	4b09      	ldr	r3, [pc, #36]	; (800c8fc <_dtoa_r+0xbd4>)
 800c8d6:	f7ff ba95 	b.w	800be04 <_dtoa_r+0xdc>
 800c8da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	f47f aa6e 	bne.w	800bdbe <_dtoa_r+0x96>
 800c8e2:	4b07      	ldr	r3, [pc, #28]	; (800c900 <_dtoa_r+0xbd8>)
 800c8e4:	f7ff ba8e 	b.w	800be04 <_dtoa_r+0xdc>
 800c8e8:	9b02      	ldr	r3, [sp, #8]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	dcae      	bgt.n	800c84c <_dtoa_r+0xb24>
 800c8ee:	9b06      	ldr	r3, [sp, #24]
 800c8f0:	2b02      	cmp	r3, #2
 800c8f2:	f73f aea8 	bgt.w	800c646 <_dtoa_r+0x91e>
 800c8f6:	e7a9      	b.n	800c84c <_dtoa_r+0xb24>
 800c8f8:	08010c60 	.word	0x08010c60
 800c8fc:	08010a64 	.word	0x08010a64
 800c900:	08010be1 	.word	0x08010be1

0800c904 <rshift>:
 800c904:	6903      	ldr	r3, [r0, #16]
 800c906:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c90a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c90e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c912:	f100 0414 	add.w	r4, r0, #20
 800c916:	dd45      	ble.n	800c9a4 <rshift+0xa0>
 800c918:	f011 011f 	ands.w	r1, r1, #31
 800c91c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c920:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c924:	d10c      	bne.n	800c940 <rshift+0x3c>
 800c926:	f100 0710 	add.w	r7, r0, #16
 800c92a:	4629      	mov	r1, r5
 800c92c:	42b1      	cmp	r1, r6
 800c92e:	d334      	bcc.n	800c99a <rshift+0x96>
 800c930:	1a9b      	subs	r3, r3, r2
 800c932:	009b      	lsls	r3, r3, #2
 800c934:	1eea      	subs	r2, r5, #3
 800c936:	4296      	cmp	r6, r2
 800c938:	bf38      	it	cc
 800c93a:	2300      	movcc	r3, #0
 800c93c:	4423      	add	r3, r4
 800c93e:	e015      	b.n	800c96c <rshift+0x68>
 800c940:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c944:	f1c1 0820 	rsb	r8, r1, #32
 800c948:	40cf      	lsrs	r7, r1
 800c94a:	f105 0e04 	add.w	lr, r5, #4
 800c94e:	46a1      	mov	r9, r4
 800c950:	4576      	cmp	r6, lr
 800c952:	46f4      	mov	ip, lr
 800c954:	d815      	bhi.n	800c982 <rshift+0x7e>
 800c956:	1a9a      	subs	r2, r3, r2
 800c958:	0092      	lsls	r2, r2, #2
 800c95a:	3a04      	subs	r2, #4
 800c95c:	3501      	adds	r5, #1
 800c95e:	42ae      	cmp	r6, r5
 800c960:	bf38      	it	cc
 800c962:	2200      	movcc	r2, #0
 800c964:	18a3      	adds	r3, r4, r2
 800c966:	50a7      	str	r7, [r4, r2]
 800c968:	b107      	cbz	r7, 800c96c <rshift+0x68>
 800c96a:	3304      	adds	r3, #4
 800c96c:	1b1a      	subs	r2, r3, r4
 800c96e:	42a3      	cmp	r3, r4
 800c970:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c974:	bf08      	it	eq
 800c976:	2300      	moveq	r3, #0
 800c978:	6102      	str	r2, [r0, #16]
 800c97a:	bf08      	it	eq
 800c97c:	6143      	streq	r3, [r0, #20]
 800c97e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c982:	f8dc c000 	ldr.w	ip, [ip]
 800c986:	fa0c fc08 	lsl.w	ip, ip, r8
 800c98a:	ea4c 0707 	orr.w	r7, ip, r7
 800c98e:	f849 7b04 	str.w	r7, [r9], #4
 800c992:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c996:	40cf      	lsrs	r7, r1
 800c998:	e7da      	b.n	800c950 <rshift+0x4c>
 800c99a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c99e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c9a2:	e7c3      	b.n	800c92c <rshift+0x28>
 800c9a4:	4623      	mov	r3, r4
 800c9a6:	e7e1      	b.n	800c96c <rshift+0x68>

0800c9a8 <__hexdig_fun>:
 800c9a8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c9ac:	2b09      	cmp	r3, #9
 800c9ae:	d802      	bhi.n	800c9b6 <__hexdig_fun+0xe>
 800c9b0:	3820      	subs	r0, #32
 800c9b2:	b2c0      	uxtb	r0, r0
 800c9b4:	4770      	bx	lr
 800c9b6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c9ba:	2b05      	cmp	r3, #5
 800c9bc:	d801      	bhi.n	800c9c2 <__hexdig_fun+0x1a>
 800c9be:	3847      	subs	r0, #71	; 0x47
 800c9c0:	e7f7      	b.n	800c9b2 <__hexdig_fun+0xa>
 800c9c2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c9c6:	2b05      	cmp	r3, #5
 800c9c8:	d801      	bhi.n	800c9ce <__hexdig_fun+0x26>
 800c9ca:	3827      	subs	r0, #39	; 0x27
 800c9cc:	e7f1      	b.n	800c9b2 <__hexdig_fun+0xa>
 800c9ce:	2000      	movs	r0, #0
 800c9d0:	4770      	bx	lr
	...

0800c9d4 <__gethex>:
 800c9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9d8:	ed2d 8b02 	vpush	{d8}
 800c9dc:	b089      	sub	sp, #36	; 0x24
 800c9de:	ee08 0a10 	vmov	s16, r0
 800c9e2:	9304      	str	r3, [sp, #16]
 800c9e4:	4bb4      	ldr	r3, [pc, #720]	; (800ccb8 <__gethex+0x2e4>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	9301      	str	r3, [sp, #4]
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	468b      	mov	fp, r1
 800c9ee:	4690      	mov	r8, r2
 800c9f0:	f7f3 fbee 	bl	80001d0 <strlen>
 800c9f4:	9b01      	ldr	r3, [sp, #4]
 800c9f6:	f8db 2000 	ldr.w	r2, [fp]
 800c9fa:	4403      	add	r3, r0
 800c9fc:	4682      	mov	sl, r0
 800c9fe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ca02:	9305      	str	r3, [sp, #20]
 800ca04:	1c93      	adds	r3, r2, #2
 800ca06:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ca0a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ca0e:	32fe      	adds	r2, #254	; 0xfe
 800ca10:	18d1      	adds	r1, r2, r3
 800ca12:	461f      	mov	r7, r3
 800ca14:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ca18:	9100      	str	r1, [sp, #0]
 800ca1a:	2830      	cmp	r0, #48	; 0x30
 800ca1c:	d0f8      	beq.n	800ca10 <__gethex+0x3c>
 800ca1e:	f7ff ffc3 	bl	800c9a8 <__hexdig_fun>
 800ca22:	4604      	mov	r4, r0
 800ca24:	2800      	cmp	r0, #0
 800ca26:	d13a      	bne.n	800ca9e <__gethex+0xca>
 800ca28:	9901      	ldr	r1, [sp, #4]
 800ca2a:	4652      	mov	r2, sl
 800ca2c:	4638      	mov	r0, r7
 800ca2e:	f001 fa33 	bl	800de98 <strncmp>
 800ca32:	4605      	mov	r5, r0
 800ca34:	2800      	cmp	r0, #0
 800ca36:	d168      	bne.n	800cb0a <__gethex+0x136>
 800ca38:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ca3c:	eb07 060a 	add.w	r6, r7, sl
 800ca40:	f7ff ffb2 	bl	800c9a8 <__hexdig_fun>
 800ca44:	2800      	cmp	r0, #0
 800ca46:	d062      	beq.n	800cb0e <__gethex+0x13a>
 800ca48:	4633      	mov	r3, r6
 800ca4a:	7818      	ldrb	r0, [r3, #0]
 800ca4c:	2830      	cmp	r0, #48	; 0x30
 800ca4e:	461f      	mov	r7, r3
 800ca50:	f103 0301 	add.w	r3, r3, #1
 800ca54:	d0f9      	beq.n	800ca4a <__gethex+0x76>
 800ca56:	f7ff ffa7 	bl	800c9a8 <__hexdig_fun>
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	fab0 f480 	clz	r4, r0
 800ca60:	0964      	lsrs	r4, r4, #5
 800ca62:	4635      	mov	r5, r6
 800ca64:	9300      	str	r3, [sp, #0]
 800ca66:	463a      	mov	r2, r7
 800ca68:	4616      	mov	r6, r2
 800ca6a:	3201      	adds	r2, #1
 800ca6c:	7830      	ldrb	r0, [r6, #0]
 800ca6e:	f7ff ff9b 	bl	800c9a8 <__hexdig_fun>
 800ca72:	2800      	cmp	r0, #0
 800ca74:	d1f8      	bne.n	800ca68 <__gethex+0x94>
 800ca76:	9901      	ldr	r1, [sp, #4]
 800ca78:	4652      	mov	r2, sl
 800ca7a:	4630      	mov	r0, r6
 800ca7c:	f001 fa0c 	bl	800de98 <strncmp>
 800ca80:	b980      	cbnz	r0, 800caa4 <__gethex+0xd0>
 800ca82:	b94d      	cbnz	r5, 800ca98 <__gethex+0xc4>
 800ca84:	eb06 050a 	add.w	r5, r6, sl
 800ca88:	462a      	mov	r2, r5
 800ca8a:	4616      	mov	r6, r2
 800ca8c:	3201      	adds	r2, #1
 800ca8e:	7830      	ldrb	r0, [r6, #0]
 800ca90:	f7ff ff8a 	bl	800c9a8 <__hexdig_fun>
 800ca94:	2800      	cmp	r0, #0
 800ca96:	d1f8      	bne.n	800ca8a <__gethex+0xb6>
 800ca98:	1bad      	subs	r5, r5, r6
 800ca9a:	00ad      	lsls	r5, r5, #2
 800ca9c:	e004      	b.n	800caa8 <__gethex+0xd4>
 800ca9e:	2400      	movs	r4, #0
 800caa0:	4625      	mov	r5, r4
 800caa2:	e7e0      	b.n	800ca66 <__gethex+0x92>
 800caa4:	2d00      	cmp	r5, #0
 800caa6:	d1f7      	bne.n	800ca98 <__gethex+0xc4>
 800caa8:	7833      	ldrb	r3, [r6, #0]
 800caaa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800caae:	2b50      	cmp	r3, #80	; 0x50
 800cab0:	d13b      	bne.n	800cb2a <__gethex+0x156>
 800cab2:	7873      	ldrb	r3, [r6, #1]
 800cab4:	2b2b      	cmp	r3, #43	; 0x2b
 800cab6:	d02c      	beq.n	800cb12 <__gethex+0x13e>
 800cab8:	2b2d      	cmp	r3, #45	; 0x2d
 800caba:	d02e      	beq.n	800cb1a <__gethex+0x146>
 800cabc:	1c71      	adds	r1, r6, #1
 800cabe:	f04f 0900 	mov.w	r9, #0
 800cac2:	7808      	ldrb	r0, [r1, #0]
 800cac4:	f7ff ff70 	bl	800c9a8 <__hexdig_fun>
 800cac8:	1e43      	subs	r3, r0, #1
 800caca:	b2db      	uxtb	r3, r3
 800cacc:	2b18      	cmp	r3, #24
 800cace:	d82c      	bhi.n	800cb2a <__gethex+0x156>
 800cad0:	f1a0 0210 	sub.w	r2, r0, #16
 800cad4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cad8:	f7ff ff66 	bl	800c9a8 <__hexdig_fun>
 800cadc:	1e43      	subs	r3, r0, #1
 800cade:	b2db      	uxtb	r3, r3
 800cae0:	2b18      	cmp	r3, #24
 800cae2:	d91d      	bls.n	800cb20 <__gethex+0x14c>
 800cae4:	f1b9 0f00 	cmp.w	r9, #0
 800cae8:	d000      	beq.n	800caec <__gethex+0x118>
 800caea:	4252      	negs	r2, r2
 800caec:	4415      	add	r5, r2
 800caee:	f8cb 1000 	str.w	r1, [fp]
 800caf2:	b1e4      	cbz	r4, 800cb2e <__gethex+0x15a>
 800caf4:	9b00      	ldr	r3, [sp, #0]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	bf14      	ite	ne
 800cafa:	2700      	movne	r7, #0
 800cafc:	2706      	moveq	r7, #6
 800cafe:	4638      	mov	r0, r7
 800cb00:	b009      	add	sp, #36	; 0x24
 800cb02:	ecbd 8b02 	vpop	{d8}
 800cb06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb0a:	463e      	mov	r6, r7
 800cb0c:	4625      	mov	r5, r4
 800cb0e:	2401      	movs	r4, #1
 800cb10:	e7ca      	b.n	800caa8 <__gethex+0xd4>
 800cb12:	f04f 0900 	mov.w	r9, #0
 800cb16:	1cb1      	adds	r1, r6, #2
 800cb18:	e7d3      	b.n	800cac2 <__gethex+0xee>
 800cb1a:	f04f 0901 	mov.w	r9, #1
 800cb1e:	e7fa      	b.n	800cb16 <__gethex+0x142>
 800cb20:	230a      	movs	r3, #10
 800cb22:	fb03 0202 	mla	r2, r3, r2, r0
 800cb26:	3a10      	subs	r2, #16
 800cb28:	e7d4      	b.n	800cad4 <__gethex+0x100>
 800cb2a:	4631      	mov	r1, r6
 800cb2c:	e7df      	b.n	800caee <__gethex+0x11a>
 800cb2e:	1bf3      	subs	r3, r6, r7
 800cb30:	3b01      	subs	r3, #1
 800cb32:	4621      	mov	r1, r4
 800cb34:	2b07      	cmp	r3, #7
 800cb36:	dc0b      	bgt.n	800cb50 <__gethex+0x17c>
 800cb38:	ee18 0a10 	vmov	r0, s16
 800cb3c:	f000 fa7e 	bl	800d03c <_Balloc>
 800cb40:	4604      	mov	r4, r0
 800cb42:	b940      	cbnz	r0, 800cb56 <__gethex+0x182>
 800cb44:	4b5d      	ldr	r3, [pc, #372]	; (800ccbc <__gethex+0x2e8>)
 800cb46:	4602      	mov	r2, r0
 800cb48:	21de      	movs	r1, #222	; 0xde
 800cb4a:	485d      	ldr	r0, [pc, #372]	; (800ccc0 <__gethex+0x2ec>)
 800cb4c:	f001 f9c6 	bl	800dedc <__assert_func>
 800cb50:	3101      	adds	r1, #1
 800cb52:	105b      	asrs	r3, r3, #1
 800cb54:	e7ee      	b.n	800cb34 <__gethex+0x160>
 800cb56:	f100 0914 	add.w	r9, r0, #20
 800cb5a:	f04f 0b00 	mov.w	fp, #0
 800cb5e:	f1ca 0301 	rsb	r3, sl, #1
 800cb62:	f8cd 9008 	str.w	r9, [sp, #8]
 800cb66:	f8cd b000 	str.w	fp, [sp]
 800cb6a:	9306      	str	r3, [sp, #24]
 800cb6c:	42b7      	cmp	r7, r6
 800cb6e:	d340      	bcc.n	800cbf2 <__gethex+0x21e>
 800cb70:	9802      	ldr	r0, [sp, #8]
 800cb72:	9b00      	ldr	r3, [sp, #0]
 800cb74:	f840 3b04 	str.w	r3, [r0], #4
 800cb78:	eba0 0009 	sub.w	r0, r0, r9
 800cb7c:	1080      	asrs	r0, r0, #2
 800cb7e:	0146      	lsls	r6, r0, #5
 800cb80:	6120      	str	r0, [r4, #16]
 800cb82:	4618      	mov	r0, r3
 800cb84:	f000 fb4c 	bl	800d220 <__hi0bits>
 800cb88:	1a30      	subs	r0, r6, r0
 800cb8a:	f8d8 6000 	ldr.w	r6, [r8]
 800cb8e:	42b0      	cmp	r0, r6
 800cb90:	dd63      	ble.n	800cc5a <__gethex+0x286>
 800cb92:	1b87      	subs	r7, r0, r6
 800cb94:	4639      	mov	r1, r7
 800cb96:	4620      	mov	r0, r4
 800cb98:	f000 fef0 	bl	800d97c <__any_on>
 800cb9c:	4682      	mov	sl, r0
 800cb9e:	b1a8      	cbz	r0, 800cbcc <__gethex+0x1f8>
 800cba0:	1e7b      	subs	r3, r7, #1
 800cba2:	1159      	asrs	r1, r3, #5
 800cba4:	f003 021f 	and.w	r2, r3, #31
 800cba8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cbac:	f04f 0a01 	mov.w	sl, #1
 800cbb0:	fa0a f202 	lsl.w	r2, sl, r2
 800cbb4:	420a      	tst	r2, r1
 800cbb6:	d009      	beq.n	800cbcc <__gethex+0x1f8>
 800cbb8:	4553      	cmp	r3, sl
 800cbba:	dd05      	ble.n	800cbc8 <__gethex+0x1f4>
 800cbbc:	1eb9      	subs	r1, r7, #2
 800cbbe:	4620      	mov	r0, r4
 800cbc0:	f000 fedc 	bl	800d97c <__any_on>
 800cbc4:	2800      	cmp	r0, #0
 800cbc6:	d145      	bne.n	800cc54 <__gethex+0x280>
 800cbc8:	f04f 0a02 	mov.w	sl, #2
 800cbcc:	4639      	mov	r1, r7
 800cbce:	4620      	mov	r0, r4
 800cbd0:	f7ff fe98 	bl	800c904 <rshift>
 800cbd4:	443d      	add	r5, r7
 800cbd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cbda:	42ab      	cmp	r3, r5
 800cbdc:	da4c      	bge.n	800cc78 <__gethex+0x2a4>
 800cbde:	ee18 0a10 	vmov	r0, s16
 800cbe2:	4621      	mov	r1, r4
 800cbe4:	f000 fa6a 	bl	800d0bc <_Bfree>
 800cbe8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cbea:	2300      	movs	r3, #0
 800cbec:	6013      	str	r3, [r2, #0]
 800cbee:	27a3      	movs	r7, #163	; 0xa3
 800cbf0:	e785      	b.n	800cafe <__gethex+0x12a>
 800cbf2:	1e73      	subs	r3, r6, #1
 800cbf4:	9a05      	ldr	r2, [sp, #20]
 800cbf6:	9303      	str	r3, [sp, #12]
 800cbf8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d019      	beq.n	800cc34 <__gethex+0x260>
 800cc00:	f1bb 0f20 	cmp.w	fp, #32
 800cc04:	d107      	bne.n	800cc16 <__gethex+0x242>
 800cc06:	9b02      	ldr	r3, [sp, #8]
 800cc08:	9a00      	ldr	r2, [sp, #0]
 800cc0a:	f843 2b04 	str.w	r2, [r3], #4
 800cc0e:	9302      	str	r3, [sp, #8]
 800cc10:	2300      	movs	r3, #0
 800cc12:	9300      	str	r3, [sp, #0]
 800cc14:	469b      	mov	fp, r3
 800cc16:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cc1a:	f7ff fec5 	bl	800c9a8 <__hexdig_fun>
 800cc1e:	9b00      	ldr	r3, [sp, #0]
 800cc20:	f000 000f 	and.w	r0, r0, #15
 800cc24:	fa00 f00b 	lsl.w	r0, r0, fp
 800cc28:	4303      	orrs	r3, r0
 800cc2a:	9300      	str	r3, [sp, #0]
 800cc2c:	f10b 0b04 	add.w	fp, fp, #4
 800cc30:	9b03      	ldr	r3, [sp, #12]
 800cc32:	e00d      	b.n	800cc50 <__gethex+0x27c>
 800cc34:	9b03      	ldr	r3, [sp, #12]
 800cc36:	9a06      	ldr	r2, [sp, #24]
 800cc38:	4413      	add	r3, r2
 800cc3a:	42bb      	cmp	r3, r7
 800cc3c:	d3e0      	bcc.n	800cc00 <__gethex+0x22c>
 800cc3e:	4618      	mov	r0, r3
 800cc40:	9901      	ldr	r1, [sp, #4]
 800cc42:	9307      	str	r3, [sp, #28]
 800cc44:	4652      	mov	r2, sl
 800cc46:	f001 f927 	bl	800de98 <strncmp>
 800cc4a:	9b07      	ldr	r3, [sp, #28]
 800cc4c:	2800      	cmp	r0, #0
 800cc4e:	d1d7      	bne.n	800cc00 <__gethex+0x22c>
 800cc50:	461e      	mov	r6, r3
 800cc52:	e78b      	b.n	800cb6c <__gethex+0x198>
 800cc54:	f04f 0a03 	mov.w	sl, #3
 800cc58:	e7b8      	b.n	800cbcc <__gethex+0x1f8>
 800cc5a:	da0a      	bge.n	800cc72 <__gethex+0x29e>
 800cc5c:	1a37      	subs	r7, r6, r0
 800cc5e:	4621      	mov	r1, r4
 800cc60:	ee18 0a10 	vmov	r0, s16
 800cc64:	463a      	mov	r2, r7
 800cc66:	f000 fc45 	bl	800d4f4 <__lshift>
 800cc6a:	1bed      	subs	r5, r5, r7
 800cc6c:	4604      	mov	r4, r0
 800cc6e:	f100 0914 	add.w	r9, r0, #20
 800cc72:	f04f 0a00 	mov.w	sl, #0
 800cc76:	e7ae      	b.n	800cbd6 <__gethex+0x202>
 800cc78:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cc7c:	42a8      	cmp	r0, r5
 800cc7e:	dd72      	ble.n	800cd66 <__gethex+0x392>
 800cc80:	1b45      	subs	r5, r0, r5
 800cc82:	42ae      	cmp	r6, r5
 800cc84:	dc36      	bgt.n	800ccf4 <__gethex+0x320>
 800cc86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cc8a:	2b02      	cmp	r3, #2
 800cc8c:	d02a      	beq.n	800cce4 <__gethex+0x310>
 800cc8e:	2b03      	cmp	r3, #3
 800cc90:	d02c      	beq.n	800ccec <__gethex+0x318>
 800cc92:	2b01      	cmp	r3, #1
 800cc94:	d11c      	bne.n	800ccd0 <__gethex+0x2fc>
 800cc96:	42ae      	cmp	r6, r5
 800cc98:	d11a      	bne.n	800ccd0 <__gethex+0x2fc>
 800cc9a:	2e01      	cmp	r6, #1
 800cc9c:	d112      	bne.n	800ccc4 <__gethex+0x2f0>
 800cc9e:	9a04      	ldr	r2, [sp, #16]
 800cca0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cca4:	6013      	str	r3, [r2, #0]
 800cca6:	2301      	movs	r3, #1
 800cca8:	6123      	str	r3, [r4, #16]
 800ccaa:	f8c9 3000 	str.w	r3, [r9]
 800ccae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ccb0:	2762      	movs	r7, #98	; 0x62
 800ccb2:	601c      	str	r4, [r3, #0]
 800ccb4:	e723      	b.n	800cafe <__gethex+0x12a>
 800ccb6:	bf00      	nop
 800ccb8:	08010cd8 	.word	0x08010cd8
 800ccbc:	08010c60 	.word	0x08010c60
 800ccc0:	08010c71 	.word	0x08010c71
 800ccc4:	1e71      	subs	r1, r6, #1
 800ccc6:	4620      	mov	r0, r4
 800ccc8:	f000 fe58 	bl	800d97c <__any_on>
 800cccc:	2800      	cmp	r0, #0
 800ccce:	d1e6      	bne.n	800cc9e <__gethex+0x2ca>
 800ccd0:	ee18 0a10 	vmov	r0, s16
 800ccd4:	4621      	mov	r1, r4
 800ccd6:	f000 f9f1 	bl	800d0bc <_Bfree>
 800ccda:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ccdc:	2300      	movs	r3, #0
 800ccde:	6013      	str	r3, [r2, #0]
 800cce0:	2750      	movs	r7, #80	; 0x50
 800cce2:	e70c      	b.n	800cafe <__gethex+0x12a>
 800cce4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d1f2      	bne.n	800ccd0 <__gethex+0x2fc>
 800ccea:	e7d8      	b.n	800cc9e <__gethex+0x2ca>
 800ccec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d1d5      	bne.n	800cc9e <__gethex+0x2ca>
 800ccf2:	e7ed      	b.n	800ccd0 <__gethex+0x2fc>
 800ccf4:	1e6f      	subs	r7, r5, #1
 800ccf6:	f1ba 0f00 	cmp.w	sl, #0
 800ccfa:	d131      	bne.n	800cd60 <__gethex+0x38c>
 800ccfc:	b127      	cbz	r7, 800cd08 <__gethex+0x334>
 800ccfe:	4639      	mov	r1, r7
 800cd00:	4620      	mov	r0, r4
 800cd02:	f000 fe3b 	bl	800d97c <__any_on>
 800cd06:	4682      	mov	sl, r0
 800cd08:	117b      	asrs	r3, r7, #5
 800cd0a:	2101      	movs	r1, #1
 800cd0c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cd10:	f007 071f 	and.w	r7, r7, #31
 800cd14:	fa01 f707 	lsl.w	r7, r1, r7
 800cd18:	421f      	tst	r7, r3
 800cd1a:	4629      	mov	r1, r5
 800cd1c:	4620      	mov	r0, r4
 800cd1e:	bf18      	it	ne
 800cd20:	f04a 0a02 	orrne.w	sl, sl, #2
 800cd24:	1b76      	subs	r6, r6, r5
 800cd26:	f7ff fded 	bl	800c904 <rshift>
 800cd2a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cd2e:	2702      	movs	r7, #2
 800cd30:	f1ba 0f00 	cmp.w	sl, #0
 800cd34:	d048      	beq.n	800cdc8 <__gethex+0x3f4>
 800cd36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cd3a:	2b02      	cmp	r3, #2
 800cd3c:	d015      	beq.n	800cd6a <__gethex+0x396>
 800cd3e:	2b03      	cmp	r3, #3
 800cd40:	d017      	beq.n	800cd72 <__gethex+0x39e>
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d109      	bne.n	800cd5a <__gethex+0x386>
 800cd46:	f01a 0f02 	tst.w	sl, #2
 800cd4a:	d006      	beq.n	800cd5a <__gethex+0x386>
 800cd4c:	f8d9 0000 	ldr.w	r0, [r9]
 800cd50:	ea4a 0a00 	orr.w	sl, sl, r0
 800cd54:	f01a 0f01 	tst.w	sl, #1
 800cd58:	d10e      	bne.n	800cd78 <__gethex+0x3a4>
 800cd5a:	f047 0710 	orr.w	r7, r7, #16
 800cd5e:	e033      	b.n	800cdc8 <__gethex+0x3f4>
 800cd60:	f04f 0a01 	mov.w	sl, #1
 800cd64:	e7d0      	b.n	800cd08 <__gethex+0x334>
 800cd66:	2701      	movs	r7, #1
 800cd68:	e7e2      	b.n	800cd30 <__gethex+0x35c>
 800cd6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd6c:	f1c3 0301 	rsb	r3, r3, #1
 800cd70:	9315      	str	r3, [sp, #84]	; 0x54
 800cd72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d0f0      	beq.n	800cd5a <__gethex+0x386>
 800cd78:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cd7c:	f104 0314 	add.w	r3, r4, #20
 800cd80:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cd84:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cd88:	f04f 0c00 	mov.w	ip, #0
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd92:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800cd96:	d01c      	beq.n	800cdd2 <__gethex+0x3fe>
 800cd98:	3201      	adds	r2, #1
 800cd9a:	6002      	str	r2, [r0, #0]
 800cd9c:	2f02      	cmp	r7, #2
 800cd9e:	f104 0314 	add.w	r3, r4, #20
 800cda2:	d13f      	bne.n	800ce24 <__gethex+0x450>
 800cda4:	f8d8 2000 	ldr.w	r2, [r8]
 800cda8:	3a01      	subs	r2, #1
 800cdaa:	42b2      	cmp	r2, r6
 800cdac:	d10a      	bne.n	800cdc4 <__gethex+0x3f0>
 800cdae:	1171      	asrs	r1, r6, #5
 800cdb0:	2201      	movs	r2, #1
 800cdb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cdb6:	f006 061f 	and.w	r6, r6, #31
 800cdba:	fa02 f606 	lsl.w	r6, r2, r6
 800cdbe:	421e      	tst	r6, r3
 800cdc0:	bf18      	it	ne
 800cdc2:	4617      	movne	r7, r2
 800cdc4:	f047 0720 	orr.w	r7, r7, #32
 800cdc8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cdca:	601c      	str	r4, [r3, #0]
 800cdcc:	9b04      	ldr	r3, [sp, #16]
 800cdce:	601d      	str	r5, [r3, #0]
 800cdd0:	e695      	b.n	800cafe <__gethex+0x12a>
 800cdd2:	4299      	cmp	r1, r3
 800cdd4:	f843 cc04 	str.w	ip, [r3, #-4]
 800cdd8:	d8d8      	bhi.n	800cd8c <__gethex+0x3b8>
 800cdda:	68a3      	ldr	r3, [r4, #8]
 800cddc:	459b      	cmp	fp, r3
 800cdde:	db19      	blt.n	800ce14 <__gethex+0x440>
 800cde0:	6861      	ldr	r1, [r4, #4]
 800cde2:	ee18 0a10 	vmov	r0, s16
 800cde6:	3101      	adds	r1, #1
 800cde8:	f000 f928 	bl	800d03c <_Balloc>
 800cdec:	4681      	mov	r9, r0
 800cdee:	b918      	cbnz	r0, 800cdf8 <__gethex+0x424>
 800cdf0:	4b1a      	ldr	r3, [pc, #104]	; (800ce5c <__gethex+0x488>)
 800cdf2:	4602      	mov	r2, r0
 800cdf4:	2184      	movs	r1, #132	; 0x84
 800cdf6:	e6a8      	b.n	800cb4a <__gethex+0x176>
 800cdf8:	6922      	ldr	r2, [r4, #16]
 800cdfa:	3202      	adds	r2, #2
 800cdfc:	f104 010c 	add.w	r1, r4, #12
 800ce00:	0092      	lsls	r2, r2, #2
 800ce02:	300c      	adds	r0, #12
 800ce04:	f000 f90c 	bl	800d020 <memcpy>
 800ce08:	4621      	mov	r1, r4
 800ce0a:	ee18 0a10 	vmov	r0, s16
 800ce0e:	f000 f955 	bl	800d0bc <_Bfree>
 800ce12:	464c      	mov	r4, r9
 800ce14:	6923      	ldr	r3, [r4, #16]
 800ce16:	1c5a      	adds	r2, r3, #1
 800ce18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ce1c:	6122      	str	r2, [r4, #16]
 800ce1e:	2201      	movs	r2, #1
 800ce20:	615a      	str	r2, [r3, #20]
 800ce22:	e7bb      	b.n	800cd9c <__gethex+0x3c8>
 800ce24:	6922      	ldr	r2, [r4, #16]
 800ce26:	455a      	cmp	r2, fp
 800ce28:	dd0b      	ble.n	800ce42 <__gethex+0x46e>
 800ce2a:	2101      	movs	r1, #1
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	f7ff fd69 	bl	800c904 <rshift>
 800ce32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ce36:	3501      	adds	r5, #1
 800ce38:	42ab      	cmp	r3, r5
 800ce3a:	f6ff aed0 	blt.w	800cbde <__gethex+0x20a>
 800ce3e:	2701      	movs	r7, #1
 800ce40:	e7c0      	b.n	800cdc4 <__gethex+0x3f0>
 800ce42:	f016 061f 	ands.w	r6, r6, #31
 800ce46:	d0fa      	beq.n	800ce3e <__gethex+0x46a>
 800ce48:	4453      	add	r3, sl
 800ce4a:	f1c6 0620 	rsb	r6, r6, #32
 800ce4e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ce52:	f000 f9e5 	bl	800d220 <__hi0bits>
 800ce56:	42b0      	cmp	r0, r6
 800ce58:	dbe7      	blt.n	800ce2a <__gethex+0x456>
 800ce5a:	e7f0      	b.n	800ce3e <__gethex+0x46a>
 800ce5c:	08010c60 	.word	0x08010c60

0800ce60 <L_shift>:
 800ce60:	f1c2 0208 	rsb	r2, r2, #8
 800ce64:	0092      	lsls	r2, r2, #2
 800ce66:	b570      	push	{r4, r5, r6, lr}
 800ce68:	f1c2 0620 	rsb	r6, r2, #32
 800ce6c:	6843      	ldr	r3, [r0, #4]
 800ce6e:	6804      	ldr	r4, [r0, #0]
 800ce70:	fa03 f506 	lsl.w	r5, r3, r6
 800ce74:	432c      	orrs	r4, r5
 800ce76:	40d3      	lsrs	r3, r2
 800ce78:	6004      	str	r4, [r0, #0]
 800ce7a:	f840 3f04 	str.w	r3, [r0, #4]!
 800ce7e:	4288      	cmp	r0, r1
 800ce80:	d3f4      	bcc.n	800ce6c <L_shift+0xc>
 800ce82:	bd70      	pop	{r4, r5, r6, pc}

0800ce84 <__match>:
 800ce84:	b530      	push	{r4, r5, lr}
 800ce86:	6803      	ldr	r3, [r0, #0]
 800ce88:	3301      	adds	r3, #1
 800ce8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce8e:	b914      	cbnz	r4, 800ce96 <__match+0x12>
 800ce90:	6003      	str	r3, [r0, #0]
 800ce92:	2001      	movs	r0, #1
 800ce94:	bd30      	pop	{r4, r5, pc}
 800ce96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce9a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ce9e:	2d19      	cmp	r5, #25
 800cea0:	bf98      	it	ls
 800cea2:	3220      	addls	r2, #32
 800cea4:	42a2      	cmp	r2, r4
 800cea6:	d0f0      	beq.n	800ce8a <__match+0x6>
 800cea8:	2000      	movs	r0, #0
 800ceaa:	e7f3      	b.n	800ce94 <__match+0x10>

0800ceac <__hexnan>:
 800ceac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceb0:	680b      	ldr	r3, [r1, #0]
 800ceb2:	115e      	asrs	r6, r3, #5
 800ceb4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ceb8:	f013 031f 	ands.w	r3, r3, #31
 800cebc:	b087      	sub	sp, #28
 800cebe:	bf18      	it	ne
 800cec0:	3604      	addne	r6, #4
 800cec2:	2500      	movs	r5, #0
 800cec4:	1f37      	subs	r7, r6, #4
 800cec6:	4690      	mov	r8, r2
 800cec8:	6802      	ldr	r2, [r0, #0]
 800ceca:	9301      	str	r3, [sp, #4]
 800cecc:	4682      	mov	sl, r0
 800cece:	f846 5c04 	str.w	r5, [r6, #-4]
 800ced2:	46b9      	mov	r9, r7
 800ced4:	463c      	mov	r4, r7
 800ced6:	9502      	str	r5, [sp, #8]
 800ced8:	46ab      	mov	fp, r5
 800ceda:	7851      	ldrb	r1, [r2, #1]
 800cedc:	1c53      	adds	r3, r2, #1
 800cede:	9303      	str	r3, [sp, #12]
 800cee0:	b341      	cbz	r1, 800cf34 <__hexnan+0x88>
 800cee2:	4608      	mov	r0, r1
 800cee4:	9205      	str	r2, [sp, #20]
 800cee6:	9104      	str	r1, [sp, #16]
 800cee8:	f7ff fd5e 	bl	800c9a8 <__hexdig_fun>
 800ceec:	2800      	cmp	r0, #0
 800ceee:	d14f      	bne.n	800cf90 <__hexnan+0xe4>
 800cef0:	9904      	ldr	r1, [sp, #16]
 800cef2:	9a05      	ldr	r2, [sp, #20]
 800cef4:	2920      	cmp	r1, #32
 800cef6:	d818      	bhi.n	800cf2a <__hexnan+0x7e>
 800cef8:	9b02      	ldr	r3, [sp, #8]
 800cefa:	459b      	cmp	fp, r3
 800cefc:	dd13      	ble.n	800cf26 <__hexnan+0x7a>
 800cefe:	454c      	cmp	r4, r9
 800cf00:	d206      	bcs.n	800cf10 <__hexnan+0x64>
 800cf02:	2d07      	cmp	r5, #7
 800cf04:	dc04      	bgt.n	800cf10 <__hexnan+0x64>
 800cf06:	462a      	mov	r2, r5
 800cf08:	4649      	mov	r1, r9
 800cf0a:	4620      	mov	r0, r4
 800cf0c:	f7ff ffa8 	bl	800ce60 <L_shift>
 800cf10:	4544      	cmp	r4, r8
 800cf12:	d950      	bls.n	800cfb6 <__hexnan+0x10a>
 800cf14:	2300      	movs	r3, #0
 800cf16:	f1a4 0904 	sub.w	r9, r4, #4
 800cf1a:	f844 3c04 	str.w	r3, [r4, #-4]
 800cf1e:	f8cd b008 	str.w	fp, [sp, #8]
 800cf22:	464c      	mov	r4, r9
 800cf24:	461d      	mov	r5, r3
 800cf26:	9a03      	ldr	r2, [sp, #12]
 800cf28:	e7d7      	b.n	800ceda <__hexnan+0x2e>
 800cf2a:	2929      	cmp	r1, #41	; 0x29
 800cf2c:	d156      	bne.n	800cfdc <__hexnan+0x130>
 800cf2e:	3202      	adds	r2, #2
 800cf30:	f8ca 2000 	str.w	r2, [sl]
 800cf34:	f1bb 0f00 	cmp.w	fp, #0
 800cf38:	d050      	beq.n	800cfdc <__hexnan+0x130>
 800cf3a:	454c      	cmp	r4, r9
 800cf3c:	d206      	bcs.n	800cf4c <__hexnan+0xa0>
 800cf3e:	2d07      	cmp	r5, #7
 800cf40:	dc04      	bgt.n	800cf4c <__hexnan+0xa0>
 800cf42:	462a      	mov	r2, r5
 800cf44:	4649      	mov	r1, r9
 800cf46:	4620      	mov	r0, r4
 800cf48:	f7ff ff8a 	bl	800ce60 <L_shift>
 800cf4c:	4544      	cmp	r4, r8
 800cf4e:	d934      	bls.n	800cfba <__hexnan+0x10e>
 800cf50:	f1a8 0204 	sub.w	r2, r8, #4
 800cf54:	4623      	mov	r3, r4
 800cf56:	f853 1b04 	ldr.w	r1, [r3], #4
 800cf5a:	f842 1f04 	str.w	r1, [r2, #4]!
 800cf5e:	429f      	cmp	r7, r3
 800cf60:	d2f9      	bcs.n	800cf56 <__hexnan+0xaa>
 800cf62:	1b3b      	subs	r3, r7, r4
 800cf64:	f023 0303 	bic.w	r3, r3, #3
 800cf68:	3304      	adds	r3, #4
 800cf6a:	3401      	adds	r4, #1
 800cf6c:	3e03      	subs	r6, #3
 800cf6e:	42b4      	cmp	r4, r6
 800cf70:	bf88      	it	hi
 800cf72:	2304      	movhi	r3, #4
 800cf74:	4443      	add	r3, r8
 800cf76:	2200      	movs	r2, #0
 800cf78:	f843 2b04 	str.w	r2, [r3], #4
 800cf7c:	429f      	cmp	r7, r3
 800cf7e:	d2fb      	bcs.n	800cf78 <__hexnan+0xcc>
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	b91b      	cbnz	r3, 800cf8c <__hexnan+0xe0>
 800cf84:	4547      	cmp	r7, r8
 800cf86:	d127      	bne.n	800cfd8 <__hexnan+0x12c>
 800cf88:	2301      	movs	r3, #1
 800cf8a:	603b      	str	r3, [r7, #0]
 800cf8c:	2005      	movs	r0, #5
 800cf8e:	e026      	b.n	800cfde <__hexnan+0x132>
 800cf90:	3501      	adds	r5, #1
 800cf92:	2d08      	cmp	r5, #8
 800cf94:	f10b 0b01 	add.w	fp, fp, #1
 800cf98:	dd06      	ble.n	800cfa8 <__hexnan+0xfc>
 800cf9a:	4544      	cmp	r4, r8
 800cf9c:	d9c3      	bls.n	800cf26 <__hexnan+0x7a>
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	f844 3c04 	str.w	r3, [r4, #-4]
 800cfa4:	2501      	movs	r5, #1
 800cfa6:	3c04      	subs	r4, #4
 800cfa8:	6822      	ldr	r2, [r4, #0]
 800cfaa:	f000 000f 	and.w	r0, r0, #15
 800cfae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cfb2:	6022      	str	r2, [r4, #0]
 800cfb4:	e7b7      	b.n	800cf26 <__hexnan+0x7a>
 800cfb6:	2508      	movs	r5, #8
 800cfb8:	e7b5      	b.n	800cf26 <__hexnan+0x7a>
 800cfba:	9b01      	ldr	r3, [sp, #4]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d0df      	beq.n	800cf80 <__hexnan+0xd4>
 800cfc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cfc4:	f1c3 0320 	rsb	r3, r3, #32
 800cfc8:	fa22 f303 	lsr.w	r3, r2, r3
 800cfcc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cfd0:	401a      	ands	r2, r3
 800cfd2:	f846 2c04 	str.w	r2, [r6, #-4]
 800cfd6:	e7d3      	b.n	800cf80 <__hexnan+0xd4>
 800cfd8:	3f04      	subs	r7, #4
 800cfda:	e7d1      	b.n	800cf80 <__hexnan+0xd4>
 800cfdc:	2004      	movs	r0, #4
 800cfde:	b007      	add	sp, #28
 800cfe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cfe4 <_localeconv_r>:
 800cfe4:	4800      	ldr	r0, [pc, #0]	; (800cfe8 <_localeconv_r+0x4>)
 800cfe6:	4770      	bx	lr
 800cfe8:	2000018c 	.word	0x2000018c

0800cfec <malloc>:
 800cfec:	4b02      	ldr	r3, [pc, #8]	; (800cff8 <malloc+0xc>)
 800cfee:	4601      	mov	r1, r0
 800cff0:	6818      	ldr	r0, [r3, #0]
 800cff2:	f000 bd67 	b.w	800dac4 <_malloc_r>
 800cff6:	bf00      	nop
 800cff8:	20000034 	.word	0x20000034

0800cffc <__ascii_mbtowc>:
 800cffc:	b082      	sub	sp, #8
 800cffe:	b901      	cbnz	r1, 800d002 <__ascii_mbtowc+0x6>
 800d000:	a901      	add	r1, sp, #4
 800d002:	b142      	cbz	r2, 800d016 <__ascii_mbtowc+0x1a>
 800d004:	b14b      	cbz	r3, 800d01a <__ascii_mbtowc+0x1e>
 800d006:	7813      	ldrb	r3, [r2, #0]
 800d008:	600b      	str	r3, [r1, #0]
 800d00a:	7812      	ldrb	r2, [r2, #0]
 800d00c:	1e10      	subs	r0, r2, #0
 800d00e:	bf18      	it	ne
 800d010:	2001      	movne	r0, #1
 800d012:	b002      	add	sp, #8
 800d014:	4770      	bx	lr
 800d016:	4610      	mov	r0, r2
 800d018:	e7fb      	b.n	800d012 <__ascii_mbtowc+0x16>
 800d01a:	f06f 0001 	mvn.w	r0, #1
 800d01e:	e7f8      	b.n	800d012 <__ascii_mbtowc+0x16>

0800d020 <memcpy>:
 800d020:	440a      	add	r2, r1
 800d022:	4291      	cmp	r1, r2
 800d024:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d028:	d100      	bne.n	800d02c <memcpy+0xc>
 800d02a:	4770      	bx	lr
 800d02c:	b510      	push	{r4, lr}
 800d02e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d032:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d036:	4291      	cmp	r1, r2
 800d038:	d1f9      	bne.n	800d02e <memcpy+0xe>
 800d03a:	bd10      	pop	{r4, pc}

0800d03c <_Balloc>:
 800d03c:	b570      	push	{r4, r5, r6, lr}
 800d03e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d040:	4604      	mov	r4, r0
 800d042:	460d      	mov	r5, r1
 800d044:	b976      	cbnz	r6, 800d064 <_Balloc+0x28>
 800d046:	2010      	movs	r0, #16
 800d048:	f7ff ffd0 	bl	800cfec <malloc>
 800d04c:	4602      	mov	r2, r0
 800d04e:	6260      	str	r0, [r4, #36]	; 0x24
 800d050:	b920      	cbnz	r0, 800d05c <_Balloc+0x20>
 800d052:	4b18      	ldr	r3, [pc, #96]	; (800d0b4 <_Balloc+0x78>)
 800d054:	4818      	ldr	r0, [pc, #96]	; (800d0b8 <_Balloc+0x7c>)
 800d056:	2166      	movs	r1, #102	; 0x66
 800d058:	f000 ff40 	bl	800dedc <__assert_func>
 800d05c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d060:	6006      	str	r6, [r0, #0]
 800d062:	60c6      	str	r6, [r0, #12]
 800d064:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d066:	68f3      	ldr	r3, [r6, #12]
 800d068:	b183      	cbz	r3, 800d08c <_Balloc+0x50>
 800d06a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d06c:	68db      	ldr	r3, [r3, #12]
 800d06e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d072:	b9b8      	cbnz	r0, 800d0a4 <_Balloc+0x68>
 800d074:	2101      	movs	r1, #1
 800d076:	fa01 f605 	lsl.w	r6, r1, r5
 800d07a:	1d72      	adds	r2, r6, #5
 800d07c:	0092      	lsls	r2, r2, #2
 800d07e:	4620      	mov	r0, r4
 800d080:	f000 fc9d 	bl	800d9be <_calloc_r>
 800d084:	b160      	cbz	r0, 800d0a0 <_Balloc+0x64>
 800d086:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d08a:	e00e      	b.n	800d0aa <_Balloc+0x6e>
 800d08c:	2221      	movs	r2, #33	; 0x21
 800d08e:	2104      	movs	r1, #4
 800d090:	4620      	mov	r0, r4
 800d092:	f000 fc94 	bl	800d9be <_calloc_r>
 800d096:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d098:	60f0      	str	r0, [r6, #12]
 800d09a:	68db      	ldr	r3, [r3, #12]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d1e4      	bne.n	800d06a <_Balloc+0x2e>
 800d0a0:	2000      	movs	r0, #0
 800d0a2:	bd70      	pop	{r4, r5, r6, pc}
 800d0a4:	6802      	ldr	r2, [r0, #0]
 800d0a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d0b0:	e7f7      	b.n	800d0a2 <_Balloc+0x66>
 800d0b2:	bf00      	nop
 800d0b4:	08010bee 	.word	0x08010bee
 800d0b8:	08010cec 	.word	0x08010cec

0800d0bc <_Bfree>:
 800d0bc:	b570      	push	{r4, r5, r6, lr}
 800d0be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d0c0:	4605      	mov	r5, r0
 800d0c2:	460c      	mov	r4, r1
 800d0c4:	b976      	cbnz	r6, 800d0e4 <_Bfree+0x28>
 800d0c6:	2010      	movs	r0, #16
 800d0c8:	f7ff ff90 	bl	800cfec <malloc>
 800d0cc:	4602      	mov	r2, r0
 800d0ce:	6268      	str	r0, [r5, #36]	; 0x24
 800d0d0:	b920      	cbnz	r0, 800d0dc <_Bfree+0x20>
 800d0d2:	4b09      	ldr	r3, [pc, #36]	; (800d0f8 <_Bfree+0x3c>)
 800d0d4:	4809      	ldr	r0, [pc, #36]	; (800d0fc <_Bfree+0x40>)
 800d0d6:	218a      	movs	r1, #138	; 0x8a
 800d0d8:	f000 ff00 	bl	800dedc <__assert_func>
 800d0dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d0e0:	6006      	str	r6, [r0, #0]
 800d0e2:	60c6      	str	r6, [r0, #12]
 800d0e4:	b13c      	cbz	r4, 800d0f6 <_Bfree+0x3a>
 800d0e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d0e8:	6862      	ldr	r2, [r4, #4]
 800d0ea:	68db      	ldr	r3, [r3, #12]
 800d0ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d0f0:	6021      	str	r1, [r4, #0]
 800d0f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d0f6:	bd70      	pop	{r4, r5, r6, pc}
 800d0f8:	08010bee 	.word	0x08010bee
 800d0fc:	08010cec 	.word	0x08010cec

0800d100 <__multadd>:
 800d100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d104:	690d      	ldr	r5, [r1, #16]
 800d106:	4607      	mov	r7, r0
 800d108:	460c      	mov	r4, r1
 800d10a:	461e      	mov	r6, r3
 800d10c:	f101 0c14 	add.w	ip, r1, #20
 800d110:	2000      	movs	r0, #0
 800d112:	f8dc 3000 	ldr.w	r3, [ip]
 800d116:	b299      	uxth	r1, r3
 800d118:	fb02 6101 	mla	r1, r2, r1, r6
 800d11c:	0c1e      	lsrs	r6, r3, #16
 800d11e:	0c0b      	lsrs	r3, r1, #16
 800d120:	fb02 3306 	mla	r3, r2, r6, r3
 800d124:	b289      	uxth	r1, r1
 800d126:	3001      	adds	r0, #1
 800d128:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d12c:	4285      	cmp	r5, r0
 800d12e:	f84c 1b04 	str.w	r1, [ip], #4
 800d132:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d136:	dcec      	bgt.n	800d112 <__multadd+0x12>
 800d138:	b30e      	cbz	r6, 800d17e <__multadd+0x7e>
 800d13a:	68a3      	ldr	r3, [r4, #8]
 800d13c:	42ab      	cmp	r3, r5
 800d13e:	dc19      	bgt.n	800d174 <__multadd+0x74>
 800d140:	6861      	ldr	r1, [r4, #4]
 800d142:	4638      	mov	r0, r7
 800d144:	3101      	adds	r1, #1
 800d146:	f7ff ff79 	bl	800d03c <_Balloc>
 800d14a:	4680      	mov	r8, r0
 800d14c:	b928      	cbnz	r0, 800d15a <__multadd+0x5a>
 800d14e:	4602      	mov	r2, r0
 800d150:	4b0c      	ldr	r3, [pc, #48]	; (800d184 <__multadd+0x84>)
 800d152:	480d      	ldr	r0, [pc, #52]	; (800d188 <__multadd+0x88>)
 800d154:	21b5      	movs	r1, #181	; 0xb5
 800d156:	f000 fec1 	bl	800dedc <__assert_func>
 800d15a:	6922      	ldr	r2, [r4, #16]
 800d15c:	3202      	adds	r2, #2
 800d15e:	f104 010c 	add.w	r1, r4, #12
 800d162:	0092      	lsls	r2, r2, #2
 800d164:	300c      	adds	r0, #12
 800d166:	f7ff ff5b 	bl	800d020 <memcpy>
 800d16a:	4621      	mov	r1, r4
 800d16c:	4638      	mov	r0, r7
 800d16e:	f7ff ffa5 	bl	800d0bc <_Bfree>
 800d172:	4644      	mov	r4, r8
 800d174:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d178:	3501      	adds	r5, #1
 800d17a:	615e      	str	r6, [r3, #20]
 800d17c:	6125      	str	r5, [r4, #16]
 800d17e:	4620      	mov	r0, r4
 800d180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d184:	08010c60 	.word	0x08010c60
 800d188:	08010cec 	.word	0x08010cec

0800d18c <__s2b>:
 800d18c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d190:	460c      	mov	r4, r1
 800d192:	4615      	mov	r5, r2
 800d194:	461f      	mov	r7, r3
 800d196:	2209      	movs	r2, #9
 800d198:	3308      	adds	r3, #8
 800d19a:	4606      	mov	r6, r0
 800d19c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d1a0:	2100      	movs	r1, #0
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	db09      	blt.n	800d1bc <__s2b+0x30>
 800d1a8:	4630      	mov	r0, r6
 800d1aa:	f7ff ff47 	bl	800d03c <_Balloc>
 800d1ae:	b940      	cbnz	r0, 800d1c2 <__s2b+0x36>
 800d1b0:	4602      	mov	r2, r0
 800d1b2:	4b19      	ldr	r3, [pc, #100]	; (800d218 <__s2b+0x8c>)
 800d1b4:	4819      	ldr	r0, [pc, #100]	; (800d21c <__s2b+0x90>)
 800d1b6:	21ce      	movs	r1, #206	; 0xce
 800d1b8:	f000 fe90 	bl	800dedc <__assert_func>
 800d1bc:	0052      	lsls	r2, r2, #1
 800d1be:	3101      	adds	r1, #1
 800d1c0:	e7f0      	b.n	800d1a4 <__s2b+0x18>
 800d1c2:	9b08      	ldr	r3, [sp, #32]
 800d1c4:	6143      	str	r3, [r0, #20]
 800d1c6:	2d09      	cmp	r5, #9
 800d1c8:	f04f 0301 	mov.w	r3, #1
 800d1cc:	6103      	str	r3, [r0, #16]
 800d1ce:	dd16      	ble.n	800d1fe <__s2b+0x72>
 800d1d0:	f104 0909 	add.w	r9, r4, #9
 800d1d4:	46c8      	mov	r8, r9
 800d1d6:	442c      	add	r4, r5
 800d1d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d1dc:	4601      	mov	r1, r0
 800d1de:	3b30      	subs	r3, #48	; 0x30
 800d1e0:	220a      	movs	r2, #10
 800d1e2:	4630      	mov	r0, r6
 800d1e4:	f7ff ff8c 	bl	800d100 <__multadd>
 800d1e8:	45a0      	cmp	r8, r4
 800d1ea:	d1f5      	bne.n	800d1d8 <__s2b+0x4c>
 800d1ec:	f1a5 0408 	sub.w	r4, r5, #8
 800d1f0:	444c      	add	r4, r9
 800d1f2:	1b2d      	subs	r5, r5, r4
 800d1f4:	1963      	adds	r3, r4, r5
 800d1f6:	42bb      	cmp	r3, r7
 800d1f8:	db04      	blt.n	800d204 <__s2b+0x78>
 800d1fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1fe:	340a      	adds	r4, #10
 800d200:	2509      	movs	r5, #9
 800d202:	e7f6      	b.n	800d1f2 <__s2b+0x66>
 800d204:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d208:	4601      	mov	r1, r0
 800d20a:	3b30      	subs	r3, #48	; 0x30
 800d20c:	220a      	movs	r2, #10
 800d20e:	4630      	mov	r0, r6
 800d210:	f7ff ff76 	bl	800d100 <__multadd>
 800d214:	e7ee      	b.n	800d1f4 <__s2b+0x68>
 800d216:	bf00      	nop
 800d218:	08010c60 	.word	0x08010c60
 800d21c:	08010cec 	.word	0x08010cec

0800d220 <__hi0bits>:
 800d220:	0c03      	lsrs	r3, r0, #16
 800d222:	041b      	lsls	r3, r3, #16
 800d224:	b9d3      	cbnz	r3, 800d25c <__hi0bits+0x3c>
 800d226:	0400      	lsls	r0, r0, #16
 800d228:	2310      	movs	r3, #16
 800d22a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d22e:	bf04      	itt	eq
 800d230:	0200      	lsleq	r0, r0, #8
 800d232:	3308      	addeq	r3, #8
 800d234:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d238:	bf04      	itt	eq
 800d23a:	0100      	lsleq	r0, r0, #4
 800d23c:	3304      	addeq	r3, #4
 800d23e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d242:	bf04      	itt	eq
 800d244:	0080      	lsleq	r0, r0, #2
 800d246:	3302      	addeq	r3, #2
 800d248:	2800      	cmp	r0, #0
 800d24a:	db05      	blt.n	800d258 <__hi0bits+0x38>
 800d24c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d250:	f103 0301 	add.w	r3, r3, #1
 800d254:	bf08      	it	eq
 800d256:	2320      	moveq	r3, #32
 800d258:	4618      	mov	r0, r3
 800d25a:	4770      	bx	lr
 800d25c:	2300      	movs	r3, #0
 800d25e:	e7e4      	b.n	800d22a <__hi0bits+0xa>

0800d260 <__lo0bits>:
 800d260:	6803      	ldr	r3, [r0, #0]
 800d262:	f013 0207 	ands.w	r2, r3, #7
 800d266:	4601      	mov	r1, r0
 800d268:	d00b      	beq.n	800d282 <__lo0bits+0x22>
 800d26a:	07da      	lsls	r2, r3, #31
 800d26c:	d423      	bmi.n	800d2b6 <__lo0bits+0x56>
 800d26e:	0798      	lsls	r0, r3, #30
 800d270:	bf49      	itett	mi
 800d272:	085b      	lsrmi	r3, r3, #1
 800d274:	089b      	lsrpl	r3, r3, #2
 800d276:	2001      	movmi	r0, #1
 800d278:	600b      	strmi	r3, [r1, #0]
 800d27a:	bf5c      	itt	pl
 800d27c:	600b      	strpl	r3, [r1, #0]
 800d27e:	2002      	movpl	r0, #2
 800d280:	4770      	bx	lr
 800d282:	b298      	uxth	r0, r3
 800d284:	b9a8      	cbnz	r0, 800d2b2 <__lo0bits+0x52>
 800d286:	0c1b      	lsrs	r3, r3, #16
 800d288:	2010      	movs	r0, #16
 800d28a:	b2da      	uxtb	r2, r3
 800d28c:	b90a      	cbnz	r2, 800d292 <__lo0bits+0x32>
 800d28e:	3008      	adds	r0, #8
 800d290:	0a1b      	lsrs	r3, r3, #8
 800d292:	071a      	lsls	r2, r3, #28
 800d294:	bf04      	itt	eq
 800d296:	091b      	lsreq	r3, r3, #4
 800d298:	3004      	addeq	r0, #4
 800d29a:	079a      	lsls	r2, r3, #30
 800d29c:	bf04      	itt	eq
 800d29e:	089b      	lsreq	r3, r3, #2
 800d2a0:	3002      	addeq	r0, #2
 800d2a2:	07da      	lsls	r2, r3, #31
 800d2a4:	d403      	bmi.n	800d2ae <__lo0bits+0x4e>
 800d2a6:	085b      	lsrs	r3, r3, #1
 800d2a8:	f100 0001 	add.w	r0, r0, #1
 800d2ac:	d005      	beq.n	800d2ba <__lo0bits+0x5a>
 800d2ae:	600b      	str	r3, [r1, #0]
 800d2b0:	4770      	bx	lr
 800d2b2:	4610      	mov	r0, r2
 800d2b4:	e7e9      	b.n	800d28a <__lo0bits+0x2a>
 800d2b6:	2000      	movs	r0, #0
 800d2b8:	4770      	bx	lr
 800d2ba:	2020      	movs	r0, #32
 800d2bc:	4770      	bx	lr
	...

0800d2c0 <__i2b>:
 800d2c0:	b510      	push	{r4, lr}
 800d2c2:	460c      	mov	r4, r1
 800d2c4:	2101      	movs	r1, #1
 800d2c6:	f7ff feb9 	bl	800d03c <_Balloc>
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	b928      	cbnz	r0, 800d2da <__i2b+0x1a>
 800d2ce:	4b05      	ldr	r3, [pc, #20]	; (800d2e4 <__i2b+0x24>)
 800d2d0:	4805      	ldr	r0, [pc, #20]	; (800d2e8 <__i2b+0x28>)
 800d2d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d2d6:	f000 fe01 	bl	800dedc <__assert_func>
 800d2da:	2301      	movs	r3, #1
 800d2dc:	6144      	str	r4, [r0, #20]
 800d2de:	6103      	str	r3, [r0, #16]
 800d2e0:	bd10      	pop	{r4, pc}
 800d2e2:	bf00      	nop
 800d2e4:	08010c60 	.word	0x08010c60
 800d2e8:	08010cec 	.word	0x08010cec

0800d2ec <__multiply>:
 800d2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2f0:	4691      	mov	r9, r2
 800d2f2:	690a      	ldr	r2, [r1, #16]
 800d2f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	bfb8      	it	lt
 800d2fc:	460b      	movlt	r3, r1
 800d2fe:	460c      	mov	r4, r1
 800d300:	bfbc      	itt	lt
 800d302:	464c      	movlt	r4, r9
 800d304:	4699      	movlt	r9, r3
 800d306:	6927      	ldr	r7, [r4, #16]
 800d308:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d30c:	68a3      	ldr	r3, [r4, #8]
 800d30e:	6861      	ldr	r1, [r4, #4]
 800d310:	eb07 060a 	add.w	r6, r7, sl
 800d314:	42b3      	cmp	r3, r6
 800d316:	b085      	sub	sp, #20
 800d318:	bfb8      	it	lt
 800d31a:	3101      	addlt	r1, #1
 800d31c:	f7ff fe8e 	bl	800d03c <_Balloc>
 800d320:	b930      	cbnz	r0, 800d330 <__multiply+0x44>
 800d322:	4602      	mov	r2, r0
 800d324:	4b44      	ldr	r3, [pc, #272]	; (800d438 <__multiply+0x14c>)
 800d326:	4845      	ldr	r0, [pc, #276]	; (800d43c <__multiply+0x150>)
 800d328:	f240 115d 	movw	r1, #349	; 0x15d
 800d32c:	f000 fdd6 	bl	800dedc <__assert_func>
 800d330:	f100 0514 	add.w	r5, r0, #20
 800d334:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d338:	462b      	mov	r3, r5
 800d33a:	2200      	movs	r2, #0
 800d33c:	4543      	cmp	r3, r8
 800d33e:	d321      	bcc.n	800d384 <__multiply+0x98>
 800d340:	f104 0314 	add.w	r3, r4, #20
 800d344:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d348:	f109 0314 	add.w	r3, r9, #20
 800d34c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d350:	9202      	str	r2, [sp, #8]
 800d352:	1b3a      	subs	r2, r7, r4
 800d354:	3a15      	subs	r2, #21
 800d356:	f022 0203 	bic.w	r2, r2, #3
 800d35a:	3204      	adds	r2, #4
 800d35c:	f104 0115 	add.w	r1, r4, #21
 800d360:	428f      	cmp	r7, r1
 800d362:	bf38      	it	cc
 800d364:	2204      	movcc	r2, #4
 800d366:	9201      	str	r2, [sp, #4]
 800d368:	9a02      	ldr	r2, [sp, #8]
 800d36a:	9303      	str	r3, [sp, #12]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d80c      	bhi.n	800d38a <__multiply+0x9e>
 800d370:	2e00      	cmp	r6, #0
 800d372:	dd03      	ble.n	800d37c <__multiply+0x90>
 800d374:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d05a      	beq.n	800d432 <__multiply+0x146>
 800d37c:	6106      	str	r6, [r0, #16]
 800d37e:	b005      	add	sp, #20
 800d380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d384:	f843 2b04 	str.w	r2, [r3], #4
 800d388:	e7d8      	b.n	800d33c <__multiply+0x50>
 800d38a:	f8b3 a000 	ldrh.w	sl, [r3]
 800d38e:	f1ba 0f00 	cmp.w	sl, #0
 800d392:	d024      	beq.n	800d3de <__multiply+0xf2>
 800d394:	f104 0e14 	add.w	lr, r4, #20
 800d398:	46a9      	mov	r9, r5
 800d39a:	f04f 0c00 	mov.w	ip, #0
 800d39e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d3a2:	f8d9 1000 	ldr.w	r1, [r9]
 800d3a6:	fa1f fb82 	uxth.w	fp, r2
 800d3aa:	b289      	uxth	r1, r1
 800d3ac:	fb0a 110b 	mla	r1, sl, fp, r1
 800d3b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d3b4:	f8d9 2000 	ldr.w	r2, [r9]
 800d3b8:	4461      	add	r1, ip
 800d3ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d3be:	fb0a c20b 	mla	r2, sl, fp, ip
 800d3c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d3c6:	b289      	uxth	r1, r1
 800d3c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d3cc:	4577      	cmp	r7, lr
 800d3ce:	f849 1b04 	str.w	r1, [r9], #4
 800d3d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d3d6:	d8e2      	bhi.n	800d39e <__multiply+0xb2>
 800d3d8:	9a01      	ldr	r2, [sp, #4]
 800d3da:	f845 c002 	str.w	ip, [r5, r2]
 800d3de:	9a03      	ldr	r2, [sp, #12]
 800d3e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d3e4:	3304      	adds	r3, #4
 800d3e6:	f1b9 0f00 	cmp.w	r9, #0
 800d3ea:	d020      	beq.n	800d42e <__multiply+0x142>
 800d3ec:	6829      	ldr	r1, [r5, #0]
 800d3ee:	f104 0c14 	add.w	ip, r4, #20
 800d3f2:	46ae      	mov	lr, r5
 800d3f4:	f04f 0a00 	mov.w	sl, #0
 800d3f8:	f8bc b000 	ldrh.w	fp, [ip]
 800d3fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d400:	fb09 220b 	mla	r2, r9, fp, r2
 800d404:	4492      	add	sl, r2
 800d406:	b289      	uxth	r1, r1
 800d408:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d40c:	f84e 1b04 	str.w	r1, [lr], #4
 800d410:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d414:	f8be 1000 	ldrh.w	r1, [lr]
 800d418:	0c12      	lsrs	r2, r2, #16
 800d41a:	fb09 1102 	mla	r1, r9, r2, r1
 800d41e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d422:	4567      	cmp	r7, ip
 800d424:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d428:	d8e6      	bhi.n	800d3f8 <__multiply+0x10c>
 800d42a:	9a01      	ldr	r2, [sp, #4]
 800d42c:	50a9      	str	r1, [r5, r2]
 800d42e:	3504      	adds	r5, #4
 800d430:	e79a      	b.n	800d368 <__multiply+0x7c>
 800d432:	3e01      	subs	r6, #1
 800d434:	e79c      	b.n	800d370 <__multiply+0x84>
 800d436:	bf00      	nop
 800d438:	08010c60 	.word	0x08010c60
 800d43c:	08010cec 	.word	0x08010cec

0800d440 <__pow5mult>:
 800d440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d444:	4615      	mov	r5, r2
 800d446:	f012 0203 	ands.w	r2, r2, #3
 800d44a:	4606      	mov	r6, r0
 800d44c:	460f      	mov	r7, r1
 800d44e:	d007      	beq.n	800d460 <__pow5mult+0x20>
 800d450:	4c25      	ldr	r4, [pc, #148]	; (800d4e8 <__pow5mult+0xa8>)
 800d452:	3a01      	subs	r2, #1
 800d454:	2300      	movs	r3, #0
 800d456:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d45a:	f7ff fe51 	bl	800d100 <__multadd>
 800d45e:	4607      	mov	r7, r0
 800d460:	10ad      	asrs	r5, r5, #2
 800d462:	d03d      	beq.n	800d4e0 <__pow5mult+0xa0>
 800d464:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d466:	b97c      	cbnz	r4, 800d488 <__pow5mult+0x48>
 800d468:	2010      	movs	r0, #16
 800d46a:	f7ff fdbf 	bl	800cfec <malloc>
 800d46e:	4602      	mov	r2, r0
 800d470:	6270      	str	r0, [r6, #36]	; 0x24
 800d472:	b928      	cbnz	r0, 800d480 <__pow5mult+0x40>
 800d474:	4b1d      	ldr	r3, [pc, #116]	; (800d4ec <__pow5mult+0xac>)
 800d476:	481e      	ldr	r0, [pc, #120]	; (800d4f0 <__pow5mult+0xb0>)
 800d478:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d47c:	f000 fd2e 	bl	800dedc <__assert_func>
 800d480:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d484:	6004      	str	r4, [r0, #0]
 800d486:	60c4      	str	r4, [r0, #12]
 800d488:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d48c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d490:	b94c      	cbnz	r4, 800d4a6 <__pow5mult+0x66>
 800d492:	f240 2171 	movw	r1, #625	; 0x271
 800d496:	4630      	mov	r0, r6
 800d498:	f7ff ff12 	bl	800d2c0 <__i2b>
 800d49c:	2300      	movs	r3, #0
 800d49e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d4a2:	4604      	mov	r4, r0
 800d4a4:	6003      	str	r3, [r0, #0]
 800d4a6:	f04f 0900 	mov.w	r9, #0
 800d4aa:	07eb      	lsls	r3, r5, #31
 800d4ac:	d50a      	bpl.n	800d4c4 <__pow5mult+0x84>
 800d4ae:	4639      	mov	r1, r7
 800d4b0:	4622      	mov	r2, r4
 800d4b2:	4630      	mov	r0, r6
 800d4b4:	f7ff ff1a 	bl	800d2ec <__multiply>
 800d4b8:	4639      	mov	r1, r7
 800d4ba:	4680      	mov	r8, r0
 800d4bc:	4630      	mov	r0, r6
 800d4be:	f7ff fdfd 	bl	800d0bc <_Bfree>
 800d4c2:	4647      	mov	r7, r8
 800d4c4:	106d      	asrs	r5, r5, #1
 800d4c6:	d00b      	beq.n	800d4e0 <__pow5mult+0xa0>
 800d4c8:	6820      	ldr	r0, [r4, #0]
 800d4ca:	b938      	cbnz	r0, 800d4dc <__pow5mult+0x9c>
 800d4cc:	4622      	mov	r2, r4
 800d4ce:	4621      	mov	r1, r4
 800d4d0:	4630      	mov	r0, r6
 800d4d2:	f7ff ff0b 	bl	800d2ec <__multiply>
 800d4d6:	6020      	str	r0, [r4, #0]
 800d4d8:	f8c0 9000 	str.w	r9, [r0]
 800d4dc:	4604      	mov	r4, r0
 800d4de:	e7e4      	b.n	800d4aa <__pow5mult+0x6a>
 800d4e0:	4638      	mov	r0, r7
 800d4e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4e6:	bf00      	nop
 800d4e8:	08010e38 	.word	0x08010e38
 800d4ec:	08010bee 	.word	0x08010bee
 800d4f0:	08010cec 	.word	0x08010cec

0800d4f4 <__lshift>:
 800d4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4f8:	460c      	mov	r4, r1
 800d4fa:	6849      	ldr	r1, [r1, #4]
 800d4fc:	6923      	ldr	r3, [r4, #16]
 800d4fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d502:	68a3      	ldr	r3, [r4, #8]
 800d504:	4607      	mov	r7, r0
 800d506:	4691      	mov	r9, r2
 800d508:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d50c:	f108 0601 	add.w	r6, r8, #1
 800d510:	42b3      	cmp	r3, r6
 800d512:	db0b      	blt.n	800d52c <__lshift+0x38>
 800d514:	4638      	mov	r0, r7
 800d516:	f7ff fd91 	bl	800d03c <_Balloc>
 800d51a:	4605      	mov	r5, r0
 800d51c:	b948      	cbnz	r0, 800d532 <__lshift+0x3e>
 800d51e:	4602      	mov	r2, r0
 800d520:	4b2a      	ldr	r3, [pc, #168]	; (800d5cc <__lshift+0xd8>)
 800d522:	482b      	ldr	r0, [pc, #172]	; (800d5d0 <__lshift+0xdc>)
 800d524:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d528:	f000 fcd8 	bl	800dedc <__assert_func>
 800d52c:	3101      	adds	r1, #1
 800d52e:	005b      	lsls	r3, r3, #1
 800d530:	e7ee      	b.n	800d510 <__lshift+0x1c>
 800d532:	2300      	movs	r3, #0
 800d534:	f100 0114 	add.w	r1, r0, #20
 800d538:	f100 0210 	add.w	r2, r0, #16
 800d53c:	4618      	mov	r0, r3
 800d53e:	4553      	cmp	r3, sl
 800d540:	db37      	blt.n	800d5b2 <__lshift+0xbe>
 800d542:	6920      	ldr	r0, [r4, #16]
 800d544:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d548:	f104 0314 	add.w	r3, r4, #20
 800d54c:	f019 091f 	ands.w	r9, r9, #31
 800d550:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d554:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d558:	d02f      	beq.n	800d5ba <__lshift+0xc6>
 800d55a:	f1c9 0e20 	rsb	lr, r9, #32
 800d55e:	468a      	mov	sl, r1
 800d560:	f04f 0c00 	mov.w	ip, #0
 800d564:	681a      	ldr	r2, [r3, #0]
 800d566:	fa02 f209 	lsl.w	r2, r2, r9
 800d56a:	ea42 020c 	orr.w	r2, r2, ip
 800d56e:	f84a 2b04 	str.w	r2, [sl], #4
 800d572:	f853 2b04 	ldr.w	r2, [r3], #4
 800d576:	4298      	cmp	r0, r3
 800d578:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d57c:	d8f2      	bhi.n	800d564 <__lshift+0x70>
 800d57e:	1b03      	subs	r3, r0, r4
 800d580:	3b15      	subs	r3, #21
 800d582:	f023 0303 	bic.w	r3, r3, #3
 800d586:	3304      	adds	r3, #4
 800d588:	f104 0215 	add.w	r2, r4, #21
 800d58c:	4290      	cmp	r0, r2
 800d58e:	bf38      	it	cc
 800d590:	2304      	movcc	r3, #4
 800d592:	f841 c003 	str.w	ip, [r1, r3]
 800d596:	f1bc 0f00 	cmp.w	ip, #0
 800d59a:	d001      	beq.n	800d5a0 <__lshift+0xac>
 800d59c:	f108 0602 	add.w	r6, r8, #2
 800d5a0:	3e01      	subs	r6, #1
 800d5a2:	4638      	mov	r0, r7
 800d5a4:	612e      	str	r6, [r5, #16]
 800d5a6:	4621      	mov	r1, r4
 800d5a8:	f7ff fd88 	bl	800d0bc <_Bfree>
 800d5ac:	4628      	mov	r0, r5
 800d5ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d5b6:	3301      	adds	r3, #1
 800d5b8:	e7c1      	b.n	800d53e <__lshift+0x4a>
 800d5ba:	3904      	subs	r1, #4
 800d5bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800d5c4:	4298      	cmp	r0, r3
 800d5c6:	d8f9      	bhi.n	800d5bc <__lshift+0xc8>
 800d5c8:	e7ea      	b.n	800d5a0 <__lshift+0xac>
 800d5ca:	bf00      	nop
 800d5cc:	08010c60 	.word	0x08010c60
 800d5d0:	08010cec 	.word	0x08010cec

0800d5d4 <__mcmp>:
 800d5d4:	b530      	push	{r4, r5, lr}
 800d5d6:	6902      	ldr	r2, [r0, #16]
 800d5d8:	690c      	ldr	r4, [r1, #16]
 800d5da:	1b12      	subs	r2, r2, r4
 800d5dc:	d10e      	bne.n	800d5fc <__mcmp+0x28>
 800d5de:	f100 0314 	add.w	r3, r0, #20
 800d5e2:	3114      	adds	r1, #20
 800d5e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d5e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d5ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d5f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d5f4:	42a5      	cmp	r5, r4
 800d5f6:	d003      	beq.n	800d600 <__mcmp+0x2c>
 800d5f8:	d305      	bcc.n	800d606 <__mcmp+0x32>
 800d5fa:	2201      	movs	r2, #1
 800d5fc:	4610      	mov	r0, r2
 800d5fe:	bd30      	pop	{r4, r5, pc}
 800d600:	4283      	cmp	r3, r0
 800d602:	d3f3      	bcc.n	800d5ec <__mcmp+0x18>
 800d604:	e7fa      	b.n	800d5fc <__mcmp+0x28>
 800d606:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d60a:	e7f7      	b.n	800d5fc <__mcmp+0x28>

0800d60c <__mdiff>:
 800d60c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d610:	460c      	mov	r4, r1
 800d612:	4606      	mov	r6, r0
 800d614:	4611      	mov	r1, r2
 800d616:	4620      	mov	r0, r4
 800d618:	4690      	mov	r8, r2
 800d61a:	f7ff ffdb 	bl	800d5d4 <__mcmp>
 800d61e:	1e05      	subs	r5, r0, #0
 800d620:	d110      	bne.n	800d644 <__mdiff+0x38>
 800d622:	4629      	mov	r1, r5
 800d624:	4630      	mov	r0, r6
 800d626:	f7ff fd09 	bl	800d03c <_Balloc>
 800d62a:	b930      	cbnz	r0, 800d63a <__mdiff+0x2e>
 800d62c:	4b3a      	ldr	r3, [pc, #232]	; (800d718 <__mdiff+0x10c>)
 800d62e:	4602      	mov	r2, r0
 800d630:	f240 2132 	movw	r1, #562	; 0x232
 800d634:	4839      	ldr	r0, [pc, #228]	; (800d71c <__mdiff+0x110>)
 800d636:	f000 fc51 	bl	800dedc <__assert_func>
 800d63a:	2301      	movs	r3, #1
 800d63c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d640:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d644:	bfa4      	itt	ge
 800d646:	4643      	movge	r3, r8
 800d648:	46a0      	movge	r8, r4
 800d64a:	4630      	mov	r0, r6
 800d64c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d650:	bfa6      	itte	ge
 800d652:	461c      	movge	r4, r3
 800d654:	2500      	movge	r5, #0
 800d656:	2501      	movlt	r5, #1
 800d658:	f7ff fcf0 	bl	800d03c <_Balloc>
 800d65c:	b920      	cbnz	r0, 800d668 <__mdiff+0x5c>
 800d65e:	4b2e      	ldr	r3, [pc, #184]	; (800d718 <__mdiff+0x10c>)
 800d660:	4602      	mov	r2, r0
 800d662:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d666:	e7e5      	b.n	800d634 <__mdiff+0x28>
 800d668:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d66c:	6926      	ldr	r6, [r4, #16]
 800d66e:	60c5      	str	r5, [r0, #12]
 800d670:	f104 0914 	add.w	r9, r4, #20
 800d674:	f108 0514 	add.w	r5, r8, #20
 800d678:	f100 0e14 	add.w	lr, r0, #20
 800d67c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d680:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d684:	f108 0210 	add.w	r2, r8, #16
 800d688:	46f2      	mov	sl, lr
 800d68a:	2100      	movs	r1, #0
 800d68c:	f859 3b04 	ldr.w	r3, [r9], #4
 800d690:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d694:	fa1f f883 	uxth.w	r8, r3
 800d698:	fa11 f18b 	uxtah	r1, r1, fp
 800d69c:	0c1b      	lsrs	r3, r3, #16
 800d69e:	eba1 0808 	sub.w	r8, r1, r8
 800d6a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d6a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d6aa:	fa1f f888 	uxth.w	r8, r8
 800d6ae:	1419      	asrs	r1, r3, #16
 800d6b0:	454e      	cmp	r6, r9
 800d6b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d6b6:	f84a 3b04 	str.w	r3, [sl], #4
 800d6ba:	d8e7      	bhi.n	800d68c <__mdiff+0x80>
 800d6bc:	1b33      	subs	r3, r6, r4
 800d6be:	3b15      	subs	r3, #21
 800d6c0:	f023 0303 	bic.w	r3, r3, #3
 800d6c4:	3304      	adds	r3, #4
 800d6c6:	3415      	adds	r4, #21
 800d6c8:	42a6      	cmp	r6, r4
 800d6ca:	bf38      	it	cc
 800d6cc:	2304      	movcc	r3, #4
 800d6ce:	441d      	add	r5, r3
 800d6d0:	4473      	add	r3, lr
 800d6d2:	469e      	mov	lr, r3
 800d6d4:	462e      	mov	r6, r5
 800d6d6:	4566      	cmp	r6, ip
 800d6d8:	d30e      	bcc.n	800d6f8 <__mdiff+0xec>
 800d6da:	f10c 0203 	add.w	r2, ip, #3
 800d6de:	1b52      	subs	r2, r2, r5
 800d6e0:	f022 0203 	bic.w	r2, r2, #3
 800d6e4:	3d03      	subs	r5, #3
 800d6e6:	45ac      	cmp	ip, r5
 800d6e8:	bf38      	it	cc
 800d6ea:	2200      	movcc	r2, #0
 800d6ec:	441a      	add	r2, r3
 800d6ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d6f2:	b17b      	cbz	r3, 800d714 <__mdiff+0x108>
 800d6f4:	6107      	str	r7, [r0, #16]
 800d6f6:	e7a3      	b.n	800d640 <__mdiff+0x34>
 800d6f8:	f856 8b04 	ldr.w	r8, [r6], #4
 800d6fc:	fa11 f288 	uxtah	r2, r1, r8
 800d700:	1414      	asrs	r4, r2, #16
 800d702:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d706:	b292      	uxth	r2, r2
 800d708:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d70c:	f84e 2b04 	str.w	r2, [lr], #4
 800d710:	1421      	asrs	r1, r4, #16
 800d712:	e7e0      	b.n	800d6d6 <__mdiff+0xca>
 800d714:	3f01      	subs	r7, #1
 800d716:	e7ea      	b.n	800d6ee <__mdiff+0xe2>
 800d718:	08010c60 	.word	0x08010c60
 800d71c:	08010cec 	.word	0x08010cec

0800d720 <__ulp>:
 800d720:	b082      	sub	sp, #8
 800d722:	ed8d 0b00 	vstr	d0, [sp]
 800d726:	9b01      	ldr	r3, [sp, #4]
 800d728:	4912      	ldr	r1, [pc, #72]	; (800d774 <__ulp+0x54>)
 800d72a:	4019      	ands	r1, r3
 800d72c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d730:	2900      	cmp	r1, #0
 800d732:	dd05      	ble.n	800d740 <__ulp+0x20>
 800d734:	2200      	movs	r2, #0
 800d736:	460b      	mov	r3, r1
 800d738:	ec43 2b10 	vmov	d0, r2, r3
 800d73c:	b002      	add	sp, #8
 800d73e:	4770      	bx	lr
 800d740:	4249      	negs	r1, r1
 800d742:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d746:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d74a:	f04f 0200 	mov.w	r2, #0
 800d74e:	f04f 0300 	mov.w	r3, #0
 800d752:	da04      	bge.n	800d75e <__ulp+0x3e>
 800d754:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d758:	fa41 f300 	asr.w	r3, r1, r0
 800d75c:	e7ec      	b.n	800d738 <__ulp+0x18>
 800d75e:	f1a0 0114 	sub.w	r1, r0, #20
 800d762:	291e      	cmp	r1, #30
 800d764:	bfda      	itte	le
 800d766:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d76a:	fa20 f101 	lsrle.w	r1, r0, r1
 800d76e:	2101      	movgt	r1, #1
 800d770:	460a      	mov	r2, r1
 800d772:	e7e1      	b.n	800d738 <__ulp+0x18>
 800d774:	7ff00000 	.word	0x7ff00000

0800d778 <__b2d>:
 800d778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d77a:	6905      	ldr	r5, [r0, #16]
 800d77c:	f100 0714 	add.w	r7, r0, #20
 800d780:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d784:	1f2e      	subs	r6, r5, #4
 800d786:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d78a:	4620      	mov	r0, r4
 800d78c:	f7ff fd48 	bl	800d220 <__hi0bits>
 800d790:	f1c0 0320 	rsb	r3, r0, #32
 800d794:	280a      	cmp	r0, #10
 800d796:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d814 <__b2d+0x9c>
 800d79a:	600b      	str	r3, [r1, #0]
 800d79c:	dc14      	bgt.n	800d7c8 <__b2d+0x50>
 800d79e:	f1c0 0e0b 	rsb	lr, r0, #11
 800d7a2:	fa24 f10e 	lsr.w	r1, r4, lr
 800d7a6:	42b7      	cmp	r7, r6
 800d7a8:	ea41 030c 	orr.w	r3, r1, ip
 800d7ac:	bf34      	ite	cc
 800d7ae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d7b2:	2100      	movcs	r1, #0
 800d7b4:	3015      	adds	r0, #21
 800d7b6:	fa04 f000 	lsl.w	r0, r4, r0
 800d7ba:	fa21 f10e 	lsr.w	r1, r1, lr
 800d7be:	ea40 0201 	orr.w	r2, r0, r1
 800d7c2:	ec43 2b10 	vmov	d0, r2, r3
 800d7c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7c8:	42b7      	cmp	r7, r6
 800d7ca:	bf3a      	itte	cc
 800d7cc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d7d0:	f1a5 0608 	subcc.w	r6, r5, #8
 800d7d4:	2100      	movcs	r1, #0
 800d7d6:	380b      	subs	r0, #11
 800d7d8:	d017      	beq.n	800d80a <__b2d+0x92>
 800d7da:	f1c0 0c20 	rsb	ip, r0, #32
 800d7de:	fa04 f500 	lsl.w	r5, r4, r0
 800d7e2:	42be      	cmp	r6, r7
 800d7e4:	fa21 f40c 	lsr.w	r4, r1, ip
 800d7e8:	ea45 0504 	orr.w	r5, r5, r4
 800d7ec:	bf8c      	ite	hi
 800d7ee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d7f2:	2400      	movls	r4, #0
 800d7f4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d7f8:	fa01 f000 	lsl.w	r0, r1, r0
 800d7fc:	fa24 f40c 	lsr.w	r4, r4, ip
 800d800:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d804:	ea40 0204 	orr.w	r2, r0, r4
 800d808:	e7db      	b.n	800d7c2 <__b2d+0x4a>
 800d80a:	ea44 030c 	orr.w	r3, r4, ip
 800d80e:	460a      	mov	r2, r1
 800d810:	e7d7      	b.n	800d7c2 <__b2d+0x4a>
 800d812:	bf00      	nop
 800d814:	3ff00000 	.word	0x3ff00000

0800d818 <__d2b>:
 800d818:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d81c:	4689      	mov	r9, r1
 800d81e:	2101      	movs	r1, #1
 800d820:	ec57 6b10 	vmov	r6, r7, d0
 800d824:	4690      	mov	r8, r2
 800d826:	f7ff fc09 	bl	800d03c <_Balloc>
 800d82a:	4604      	mov	r4, r0
 800d82c:	b930      	cbnz	r0, 800d83c <__d2b+0x24>
 800d82e:	4602      	mov	r2, r0
 800d830:	4b25      	ldr	r3, [pc, #148]	; (800d8c8 <__d2b+0xb0>)
 800d832:	4826      	ldr	r0, [pc, #152]	; (800d8cc <__d2b+0xb4>)
 800d834:	f240 310a 	movw	r1, #778	; 0x30a
 800d838:	f000 fb50 	bl	800dedc <__assert_func>
 800d83c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d840:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d844:	bb35      	cbnz	r5, 800d894 <__d2b+0x7c>
 800d846:	2e00      	cmp	r6, #0
 800d848:	9301      	str	r3, [sp, #4]
 800d84a:	d028      	beq.n	800d89e <__d2b+0x86>
 800d84c:	4668      	mov	r0, sp
 800d84e:	9600      	str	r6, [sp, #0]
 800d850:	f7ff fd06 	bl	800d260 <__lo0bits>
 800d854:	9900      	ldr	r1, [sp, #0]
 800d856:	b300      	cbz	r0, 800d89a <__d2b+0x82>
 800d858:	9a01      	ldr	r2, [sp, #4]
 800d85a:	f1c0 0320 	rsb	r3, r0, #32
 800d85e:	fa02 f303 	lsl.w	r3, r2, r3
 800d862:	430b      	orrs	r3, r1
 800d864:	40c2      	lsrs	r2, r0
 800d866:	6163      	str	r3, [r4, #20]
 800d868:	9201      	str	r2, [sp, #4]
 800d86a:	9b01      	ldr	r3, [sp, #4]
 800d86c:	61a3      	str	r3, [r4, #24]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	bf14      	ite	ne
 800d872:	2202      	movne	r2, #2
 800d874:	2201      	moveq	r2, #1
 800d876:	6122      	str	r2, [r4, #16]
 800d878:	b1d5      	cbz	r5, 800d8b0 <__d2b+0x98>
 800d87a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d87e:	4405      	add	r5, r0
 800d880:	f8c9 5000 	str.w	r5, [r9]
 800d884:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d888:	f8c8 0000 	str.w	r0, [r8]
 800d88c:	4620      	mov	r0, r4
 800d88e:	b003      	add	sp, #12
 800d890:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d894:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d898:	e7d5      	b.n	800d846 <__d2b+0x2e>
 800d89a:	6161      	str	r1, [r4, #20]
 800d89c:	e7e5      	b.n	800d86a <__d2b+0x52>
 800d89e:	a801      	add	r0, sp, #4
 800d8a0:	f7ff fcde 	bl	800d260 <__lo0bits>
 800d8a4:	9b01      	ldr	r3, [sp, #4]
 800d8a6:	6163      	str	r3, [r4, #20]
 800d8a8:	2201      	movs	r2, #1
 800d8aa:	6122      	str	r2, [r4, #16]
 800d8ac:	3020      	adds	r0, #32
 800d8ae:	e7e3      	b.n	800d878 <__d2b+0x60>
 800d8b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d8b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d8b8:	f8c9 0000 	str.w	r0, [r9]
 800d8bc:	6918      	ldr	r0, [r3, #16]
 800d8be:	f7ff fcaf 	bl	800d220 <__hi0bits>
 800d8c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d8c6:	e7df      	b.n	800d888 <__d2b+0x70>
 800d8c8:	08010c60 	.word	0x08010c60
 800d8cc:	08010cec 	.word	0x08010cec

0800d8d0 <__ratio>:
 800d8d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8d4:	4688      	mov	r8, r1
 800d8d6:	4669      	mov	r1, sp
 800d8d8:	4681      	mov	r9, r0
 800d8da:	f7ff ff4d 	bl	800d778 <__b2d>
 800d8de:	a901      	add	r1, sp, #4
 800d8e0:	4640      	mov	r0, r8
 800d8e2:	ec55 4b10 	vmov	r4, r5, d0
 800d8e6:	f7ff ff47 	bl	800d778 <__b2d>
 800d8ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d8ee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d8f2:	eba3 0c02 	sub.w	ip, r3, r2
 800d8f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d8fa:	1a9b      	subs	r3, r3, r2
 800d8fc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d900:	ec51 0b10 	vmov	r0, r1, d0
 800d904:	2b00      	cmp	r3, #0
 800d906:	bfd6      	itet	le
 800d908:	460a      	movle	r2, r1
 800d90a:	462a      	movgt	r2, r5
 800d90c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d910:	468b      	mov	fp, r1
 800d912:	462f      	mov	r7, r5
 800d914:	bfd4      	ite	le
 800d916:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d91a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d91e:	4620      	mov	r0, r4
 800d920:	ee10 2a10 	vmov	r2, s0
 800d924:	465b      	mov	r3, fp
 800d926:	4639      	mov	r1, r7
 800d928:	f7f2 ff90 	bl	800084c <__aeabi_ddiv>
 800d92c:	ec41 0b10 	vmov	d0, r0, r1
 800d930:	b003      	add	sp, #12
 800d932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d936 <__copybits>:
 800d936:	3901      	subs	r1, #1
 800d938:	b570      	push	{r4, r5, r6, lr}
 800d93a:	1149      	asrs	r1, r1, #5
 800d93c:	6914      	ldr	r4, [r2, #16]
 800d93e:	3101      	adds	r1, #1
 800d940:	f102 0314 	add.w	r3, r2, #20
 800d944:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d948:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d94c:	1f05      	subs	r5, r0, #4
 800d94e:	42a3      	cmp	r3, r4
 800d950:	d30c      	bcc.n	800d96c <__copybits+0x36>
 800d952:	1aa3      	subs	r3, r4, r2
 800d954:	3b11      	subs	r3, #17
 800d956:	f023 0303 	bic.w	r3, r3, #3
 800d95a:	3211      	adds	r2, #17
 800d95c:	42a2      	cmp	r2, r4
 800d95e:	bf88      	it	hi
 800d960:	2300      	movhi	r3, #0
 800d962:	4418      	add	r0, r3
 800d964:	2300      	movs	r3, #0
 800d966:	4288      	cmp	r0, r1
 800d968:	d305      	bcc.n	800d976 <__copybits+0x40>
 800d96a:	bd70      	pop	{r4, r5, r6, pc}
 800d96c:	f853 6b04 	ldr.w	r6, [r3], #4
 800d970:	f845 6f04 	str.w	r6, [r5, #4]!
 800d974:	e7eb      	b.n	800d94e <__copybits+0x18>
 800d976:	f840 3b04 	str.w	r3, [r0], #4
 800d97a:	e7f4      	b.n	800d966 <__copybits+0x30>

0800d97c <__any_on>:
 800d97c:	f100 0214 	add.w	r2, r0, #20
 800d980:	6900      	ldr	r0, [r0, #16]
 800d982:	114b      	asrs	r3, r1, #5
 800d984:	4298      	cmp	r0, r3
 800d986:	b510      	push	{r4, lr}
 800d988:	db11      	blt.n	800d9ae <__any_on+0x32>
 800d98a:	dd0a      	ble.n	800d9a2 <__any_on+0x26>
 800d98c:	f011 011f 	ands.w	r1, r1, #31
 800d990:	d007      	beq.n	800d9a2 <__any_on+0x26>
 800d992:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d996:	fa24 f001 	lsr.w	r0, r4, r1
 800d99a:	fa00 f101 	lsl.w	r1, r0, r1
 800d99e:	428c      	cmp	r4, r1
 800d9a0:	d10b      	bne.n	800d9ba <__any_on+0x3e>
 800d9a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d9a6:	4293      	cmp	r3, r2
 800d9a8:	d803      	bhi.n	800d9b2 <__any_on+0x36>
 800d9aa:	2000      	movs	r0, #0
 800d9ac:	bd10      	pop	{r4, pc}
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	e7f7      	b.n	800d9a2 <__any_on+0x26>
 800d9b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d9b6:	2900      	cmp	r1, #0
 800d9b8:	d0f5      	beq.n	800d9a6 <__any_on+0x2a>
 800d9ba:	2001      	movs	r0, #1
 800d9bc:	e7f6      	b.n	800d9ac <__any_on+0x30>

0800d9be <_calloc_r>:
 800d9be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d9c0:	fba1 2402 	umull	r2, r4, r1, r2
 800d9c4:	b94c      	cbnz	r4, 800d9da <_calloc_r+0x1c>
 800d9c6:	4611      	mov	r1, r2
 800d9c8:	9201      	str	r2, [sp, #4]
 800d9ca:	f000 f87b 	bl	800dac4 <_malloc_r>
 800d9ce:	9a01      	ldr	r2, [sp, #4]
 800d9d0:	4605      	mov	r5, r0
 800d9d2:	b930      	cbnz	r0, 800d9e2 <_calloc_r+0x24>
 800d9d4:	4628      	mov	r0, r5
 800d9d6:	b003      	add	sp, #12
 800d9d8:	bd30      	pop	{r4, r5, pc}
 800d9da:	220c      	movs	r2, #12
 800d9dc:	6002      	str	r2, [r0, #0]
 800d9de:	2500      	movs	r5, #0
 800d9e0:	e7f8      	b.n	800d9d4 <_calloc_r+0x16>
 800d9e2:	4621      	mov	r1, r4
 800d9e4:	f7fc fb8a 	bl	800a0fc <memset>
 800d9e8:	e7f4      	b.n	800d9d4 <_calloc_r+0x16>
	...

0800d9ec <_free_r>:
 800d9ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d9ee:	2900      	cmp	r1, #0
 800d9f0:	d044      	beq.n	800da7c <_free_r+0x90>
 800d9f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9f6:	9001      	str	r0, [sp, #4]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	f1a1 0404 	sub.w	r4, r1, #4
 800d9fe:	bfb8      	it	lt
 800da00:	18e4      	addlt	r4, r4, r3
 800da02:	f000 fab5 	bl	800df70 <__malloc_lock>
 800da06:	4a1e      	ldr	r2, [pc, #120]	; (800da80 <_free_r+0x94>)
 800da08:	9801      	ldr	r0, [sp, #4]
 800da0a:	6813      	ldr	r3, [r2, #0]
 800da0c:	b933      	cbnz	r3, 800da1c <_free_r+0x30>
 800da0e:	6063      	str	r3, [r4, #4]
 800da10:	6014      	str	r4, [r2, #0]
 800da12:	b003      	add	sp, #12
 800da14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da18:	f000 bab0 	b.w	800df7c <__malloc_unlock>
 800da1c:	42a3      	cmp	r3, r4
 800da1e:	d908      	bls.n	800da32 <_free_r+0x46>
 800da20:	6825      	ldr	r5, [r4, #0]
 800da22:	1961      	adds	r1, r4, r5
 800da24:	428b      	cmp	r3, r1
 800da26:	bf01      	itttt	eq
 800da28:	6819      	ldreq	r1, [r3, #0]
 800da2a:	685b      	ldreq	r3, [r3, #4]
 800da2c:	1949      	addeq	r1, r1, r5
 800da2e:	6021      	streq	r1, [r4, #0]
 800da30:	e7ed      	b.n	800da0e <_free_r+0x22>
 800da32:	461a      	mov	r2, r3
 800da34:	685b      	ldr	r3, [r3, #4]
 800da36:	b10b      	cbz	r3, 800da3c <_free_r+0x50>
 800da38:	42a3      	cmp	r3, r4
 800da3a:	d9fa      	bls.n	800da32 <_free_r+0x46>
 800da3c:	6811      	ldr	r1, [r2, #0]
 800da3e:	1855      	adds	r5, r2, r1
 800da40:	42a5      	cmp	r5, r4
 800da42:	d10b      	bne.n	800da5c <_free_r+0x70>
 800da44:	6824      	ldr	r4, [r4, #0]
 800da46:	4421      	add	r1, r4
 800da48:	1854      	adds	r4, r2, r1
 800da4a:	42a3      	cmp	r3, r4
 800da4c:	6011      	str	r1, [r2, #0]
 800da4e:	d1e0      	bne.n	800da12 <_free_r+0x26>
 800da50:	681c      	ldr	r4, [r3, #0]
 800da52:	685b      	ldr	r3, [r3, #4]
 800da54:	6053      	str	r3, [r2, #4]
 800da56:	4421      	add	r1, r4
 800da58:	6011      	str	r1, [r2, #0]
 800da5a:	e7da      	b.n	800da12 <_free_r+0x26>
 800da5c:	d902      	bls.n	800da64 <_free_r+0x78>
 800da5e:	230c      	movs	r3, #12
 800da60:	6003      	str	r3, [r0, #0]
 800da62:	e7d6      	b.n	800da12 <_free_r+0x26>
 800da64:	6825      	ldr	r5, [r4, #0]
 800da66:	1961      	adds	r1, r4, r5
 800da68:	428b      	cmp	r3, r1
 800da6a:	bf04      	itt	eq
 800da6c:	6819      	ldreq	r1, [r3, #0]
 800da6e:	685b      	ldreq	r3, [r3, #4]
 800da70:	6063      	str	r3, [r4, #4]
 800da72:	bf04      	itt	eq
 800da74:	1949      	addeq	r1, r1, r5
 800da76:	6021      	streq	r1, [r4, #0]
 800da78:	6054      	str	r4, [r2, #4]
 800da7a:	e7ca      	b.n	800da12 <_free_r+0x26>
 800da7c:	b003      	add	sp, #12
 800da7e:	bd30      	pop	{r4, r5, pc}
 800da80:	20000ad8 	.word	0x20000ad8

0800da84 <sbrk_aligned>:
 800da84:	b570      	push	{r4, r5, r6, lr}
 800da86:	4e0e      	ldr	r6, [pc, #56]	; (800dac0 <sbrk_aligned+0x3c>)
 800da88:	460c      	mov	r4, r1
 800da8a:	6831      	ldr	r1, [r6, #0]
 800da8c:	4605      	mov	r5, r0
 800da8e:	b911      	cbnz	r1, 800da96 <sbrk_aligned+0x12>
 800da90:	f000 f9f2 	bl	800de78 <_sbrk_r>
 800da94:	6030      	str	r0, [r6, #0]
 800da96:	4621      	mov	r1, r4
 800da98:	4628      	mov	r0, r5
 800da9a:	f000 f9ed 	bl	800de78 <_sbrk_r>
 800da9e:	1c43      	adds	r3, r0, #1
 800daa0:	d00a      	beq.n	800dab8 <sbrk_aligned+0x34>
 800daa2:	1cc4      	adds	r4, r0, #3
 800daa4:	f024 0403 	bic.w	r4, r4, #3
 800daa8:	42a0      	cmp	r0, r4
 800daaa:	d007      	beq.n	800dabc <sbrk_aligned+0x38>
 800daac:	1a21      	subs	r1, r4, r0
 800daae:	4628      	mov	r0, r5
 800dab0:	f000 f9e2 	bl	800de78 <_sbrk_r>
 800dab4:	3001      	adds	r0, #1
 800dab6:	d101      	bne.n	800dabc <sbrk_aligned+0x38>
 800dab8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800dabc:	4620      	mov	r0, r4
 800dabe:	bd70      	pop	{r4, r5, r6, pc}
 800dac0:	20000adc 	.word	0x20000adc

0800dac4 <_malloc_r>:
 800dac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dac8:	1ccd      	adds	r5, r1, #3
 800daca:	f025 0503 	bic.w	r5, r5, #3
 800dace:	3508      	adds	r5, #8
 800dad0:	2d0c      	cmp	r5, #12
 800dad2:	bf38      	it	cc
 800dad4:	250c      	movcc	r5, #12
 800dad6:	2d00      	cmp	r5, #0
 800dad8:	4607      	mov	r7, r0
 800dada:	db01      	blt.n	800dae0 <_malloc_r+0x1c>
 800dadc:	42a9      	cmp	r1, r5
 800dade:	d905      	bls.n	800daec <_malloc_r+0x28>
 800dae0:	230c      	movs	r3, #12
 800dae2:	603b      	str	r3, [r7, #0]
 800dae4:	2600      	movs	r6, #0
 800dae6:	4630      	mov	r0, r6
 800dae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daec:	4e2e      	ldr	r6, [pc, #184]	; (800dba8 <_malloc_r+0xe4>)
 800daee:	f000 fa3f 	bl	800df70 <__malloc_lock>
 800daf2:	6833      	ldr	r3, [r6, #0]
 800daf4:	461c      	mov	r4, r3
 800daf6:	bb34      	cbnz	r4, 800db46 <_malloc_r+0x82>
 800daf8:	4629      	mov	r1, r5
 800dafa:	4638      	mov	r0, r7
 800dafc:	f7ff ffc2 	bl	800da84 <sbrk_aligned>
 800db00:	1c43      	adds	r3, r0, #1
 800db02:	4604      	mov	r4, r0
 800db04:	d14d      	bne.n	800dba2 <_malloc_r+0xde>
 800db06:	6834      	ldr	r4, [r6, #0]
 800db08:	4626      	mov	r6, r4
 800db0a:	2e00      	cmp	r6, #0
 800db0c:	d140      	bne.n	800db90 <_malloc_r+0xcc>
 800db0e:	6823      	ldr	r3, [r4, #0]
 800db10:	4631      	mov	r1, r6
 800db12:	4638      	mov	r0, r7
 800db14:	eb04 0803 	add.w	r8, r4, r3
 800db18:	f000 f9ae 	bl	800de78 <_sbrk_r>
 800db1c:	4580      	cmp	r8, r0
 800db1e:	d13a      	bne.n	800db96 <_malloc_r+0xd2>
 800db20:	6821      	ldr	r1, [r4, #0]
 800db22:	3503      	adds	r5, #3
 800db24:	1a6d      	subs	r5, r5, r1
 800db26:	f025 0503 	bic.w	r5, r5, #3
 800db2a:	3508      	adds	r5, #8
 800db2c:	2d0c      	cmp	r5, #12
 800db2e:	bf38      	it	cc
 800db30:	250c      	movcc	r5, #12
 800db32:	4629      	mov	r1, r5
 800db34:	4638      	mov	r0, r7
 800db36:	f7ff ffa5 	bl	800da84 <sbrk_aligned>
 800db3a:	3001      	adds	r0, #1
 800db3c:	d02b      	beq.n	800db96 <_malloc_r+0xd2>
 800db3e:	6823      	ldr	r3, [r4, #0]
 800db40:	442b      	add	r3, r5
 800db42:	6023      	str	r3, [r4, #0]
 800db44:	e00e      	b.n	800db64 <_malloc_r+0xa0>
 800db46:	6822      	ldr	r2, [r4, #0]
 800db48:	1b52      	subs	r2, r2, r5
 800db4a:	d41e      	bmi.n	800db8a <_malloc_r+0xc6>
 800db4c:	2a0b      	cmp	r2, #11
 800db4e:	d916      	bls.n	800db7e <_malloc_r+0xba>
 800db50:	1961      	adds	r1, r4, r5
 800db52:	42a3      	cmp	r3, r4
 800db54:	6025      	str	r5, [r4, #0]
 800db56:	bf18      	it	ne
 800db58:	6059      	strne	r1, [r3, #4]
 800db5a:	6863      	ldr	r3, [r4, #4]
 800db5c:	bf08      	it	eq
 800db5e:	6031      	streq	r1, [r6, #0]
 800db60:	5162      	str	r2, [r4, r5]
 800db62:	604b      	str	r3, [r1, #4]
 800db64:	4638      	mov	r0, r7
 800db66:	f104 060b 	add.w	r6, r4, #11
 800db6a:	f000 fa07 	bl	800df7c <__malloc_unlock>
 800db6e:	f026 0607 	bic.w	r6, r6, #7
 800db72:	1d23      	adds	r3, r4, #4
 800db74:	1af2      	subs	r2, r6, r3
 800db76:	d0b6      	beq.n	800dae6 <_malloc_r+0x22>
 800db78:	1b9b      	subs	r3, r3, r6
 800db7a:	50a3      	str	r3, [r4, r2]
 800db7c:	e7b3      	b.n	800dae6 <_malloc_r+0x22>
 800db7e:	6862      	ldr	r2, [r4, #4]
 800db80:	42a3      	cmp	r3, r4
 800db82:	bf0c      	ite	eq
 800db84:	6032      	streq	r2, [r6, #0]
 800db86:	605a      	strne	r2, [r3, #4]
 800db88:	e7ec      	b.n	800db64 <_malloc_r+0xa0>
 800db8a:	4623      	mov	r3, r4
 800db8c:	6864      	ldr	r4, [r4, #4]
 800db8e:	e7b2      	b.n	800daf6 <_malloc_r+0x32>
 800db90:	4634      	mov	r4, r6
 800db92:	6876      	ldr	r6, [r6, #4]
 800db94:	e7b9      	b.n	800db0a <_malloc_r+0x46>
 800db96:	230c      	movs	r3, #12
 800db98:	603b      	str	r3, [r7, #0]
 800db9a:	4638      	mov	r0, r7
 800db9c:	f000 f9ee 	bl	800df7c <__malloc_unlock>
 800dba0:	e7a1      	b.n	800dae6 <_malloc_r+0x22>
 800dba2:	6025      	str	r5, [r4, #0]
 800dba4:	e7de      	b.n	800db64 <_malloc_r+0xa0>
 800dba6:	bf00      	nop
 800dba8:	20000ad8 	.word	0x20000ad8

0800dbac <__ssputs_r>:
 800dbac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbb0:	688e      	ldr	r6, [r1, #8]
 800dbb2:	429e      	cmp	r6, r3
 800dbb4:	4682      	mov	sl, r0
 800dbb6:	460c      	mov	r4, r1
 800dbb8:	4690      	mov	r8, r2
 800dbba:	461f      	mov	r7, r3
 800dbbc:	d838      	bhi.n	800dc30 <__ssputs_r+0x84>
 800dbbe:	898a      	ldrh	r2, [r1, #12]
 800dbc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dbc4:	d032      	beq.n	800dc2c <__ssputs_r+0x80>
 800dbc6:	6825      	ldr	r5, [r4, #0]
 800dbc8:	6909      	ldr	r1, [r1, #16]
 800dbca:	eba5 0901 	sub.w	r9, r5, r1
 800dbce:	6965      	ldr	r5, [r4, #20]
 800dbd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dbd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dbd8:	3301      	adds	r3, #1
 800dbda:	444b      	add	r3, r9
 800dbdc:	106d      	asrs	r5, r5, #1
 800dbde:	429d      	cmp	r5, r3
 800dbe0:	bf38      	it	cc
 800dbe2:	461d      	movcc	r5, r3
 800dbe4:	0553      	lsls	r3, r2, #21
 800dbe6:	d531      	bpl.n	800dc4c <__ssputs_r+0xa0>
 800dbe8:	4629      	mov	r1, r5
 800dbea:	f7ff ff6b 	bl	800dac4 <_malloc_r>
 800dbee:	4606      	mov	r6, r0
 800dbf0:	b950      	cbnz	r0, 800dc08 <__ssputs_r+0x5c>
 800dbf2:	230c      	movs	r3, #12
 800dbf4:	f8ca 3000 	str.w	r3, [sl]
 800dbf8:	89a3      	ldrh	r3, [r4, #12]
 800dbfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbfe:	81a3      	strh	r3, [r4, #12]
 800dc00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc08:	6921      	ldr	r1, [r4, #16]
 800dc0a:	464a      	mov	r2, r9
 800dc0c:	f7ff fa08 	bl	800d020 <memcpy>
 800dc10:	89a3      	ldrh	r3, [r4, #12]
 800dc12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dc16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc1a:	81a3      	strh	r3, [r4, #12]
 800dc1c:	6126      	str	r6, [r4, #16]
 800dc1e:	6165      	str	r5, [r4, #20]
 800dc20:	444e      	add	r6, r9
 800dc22:	eba5 0509 	sub.w	r5, r5, r9
 800dc26:	6026      	str	r6, [r4, #0]
 800dc28:	60a5      	str	r5, [r4, #8]
 800dc2a:	463e      	mov	r6, r7
 800dc2c:	42be      	cmp	r6, r7
 800dc2e:	d900      	bls.n	800dc32 <__ssputs_r+0x86>
 800dc30:	463e      	mov	r6, r7
 800dc32:	6820      	ldr	r0, [r4, #0]
 800dc34:	4632      	mov	r2, r6
 800dc36:	4641      	mov	r1, r8
 800dc38:	f000 f980 	bl	800df3c <memmove>
 800dc3c:	68a3      	ldr	r3, [r4, #8]
 800dc3e:	1b9b      	subs	r3, r3, r6
 800dc40:	60a3      	str	r3, [r4, #8]
 800dc42:	6823      	ldr	r3, [r4, #0]
 800dc44:	4433      	add	r3, r6
 800dc46:	6023      	str	r3, [r4, #0]
 800dc48:	2000      	movs	r0, #0
 800dc4a:	e7db      	b.n	800dc04 <__ssputs_r+0x58>
 800dc4c:	462a      	mov	r2, r5
 800dc4e:	f000 f99b 	bl	800df88 <_realloc_r>
 800dc52:	4606      	mov	r6, r0
 800dc54:	2800      	cmp	r0, #0
 800dc56:	d1e1      	bne.n	800dc1c <__ssputs_r+0x70>
 800dc58:	6921      	ldr	r1, [r4, #16]
 800dc5a:	4650      	mov	r0, sl
 800dc5c:	f7ff fec6 	bl	800d9ec <_free_r>
 800dc60:	e7c7      	b.n	800dbf2 <__ssputs_r+0x46>
	...

0800dc64 <_svfiprintf_r>:
 800dc64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc68:	4698      	mov	r8, r3
 800dc6a:	898b      	ldrh	r3, [r1, #12]
 800dc6c:	061b      	lsls	r3, r3, #24
 800dc6e:	b09d      	sub	sp, #116	; 0x74
 800dc70:	4607      	mov	r7, r0
 800dc72:	460d      	mov	r5, r1
 800dc74:	4614      	mov	r4, r2
 800dc76:	d50e      	bpl.n	800dc96 <_svfiprintf_r+0x32>
 800dc78:	690b      	ldr	r3, [r1, #16]
 800dc7a:	b963      	cbnz	r3, 800dc96 <_svfiprintf_r+0x32>
 800dc7c:	2140      	movs	r1, #64	; 0x40
 800dc7e:	f7ff ff21 	bl	800dac4 <_malloc_r>
 800dc82:	6028      	str	r0, [r5, #0]
 800dc84:	6128      	str	r0, [r5, #16]
 800dc86:	b920      	cbnz	r0, 800dc92 <_svfiprintf_r+0x2e>
 800dc88:	230c      	movs	r3, #12
 800dc8a:	603b      	str	r3, [r7, #0]
 800dc8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc90:	e0d1      	b.n	800de36 <_svfiprintf_r+0x1d2>
 800dc92:	2340      	movs	r3, #64	; 0x40
 800dc94:	616b      	str	r3, [r5, #20]
 800dc96:	2300      	movs	r3, #0
 800dc98:	9309      	str	r3, [sp, #36]	; 0x24
 800dc9a:	2320      	movs	r3, #32
 800dc9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dca0:	f8cd 800c 	str.w	r8, [sp, #12]
 800dca4:	2330      	movs	r3, #48	; 0x30
 800dca6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800de50 <_svfiprintf_r+0x1ec>
 800dcaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dcae:	f04f 0901 	mov.w	r9, #1
 800dcb2:	4623      	mov	r3, r4
 800dcb4:	469a      	mov	sl, r3
 800dcb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcba:	b10a      	cbz	r2, 800dcc0 <_svfiprintf_r+0x5c>
 800dcbc:	2a25      	cmp	r2, #37	; 0x25
 800dcbe:	d1f9      	bne.n	800dcb4 <_svfiprintf_r+0x50>
 800dcc0:	ebba 0b04 	subs.w	fp, sl, r4
 800dcc4:	d00b      	beq.n	800dcde <_svfiprintf_r+0x7a>
 800dcc6:	465b      	mov	r3, fp
 800dcc8:	4622      	mov	r2, r4
 800dcca:	4629      	mov	r1, r5
 800dccc:	4638      	mov	r0, r7
 800dcce:	f7ff ff6d 	bl	800dbac <__ssputs_r>
 800dcd2:	3001      	adds	r0, #1
 800dcd4:	f000 80aa 	beq.w	800de2c <_svfiprintf_r+0x1c8>
 800dcd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcda:	445a      	add	r2, fp
 800dcdc:	9209      	str	r2, [sp, #36]	; 0x24
 800dcde:	f89a 3000 	ldrb.w	r3, [sl]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	f000 80a2 	beq.w	800de2c <_svfiprintf_r+0x1c8>
 800dce8:	2300      	movs	r3, #0
 800dcea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dcee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dcf2:	f10a 0a01 	add.w	sl, sl, #1
 800dcf6:	9304      	str	r3, [sp, #16]
 800dcf8:	9307      	str	r3, [sp, #28]
 800dcfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dcfe:	931a      	str	r3, [sp, #104]	; 0x68
 800dd00:	4654      	mov	r4, sl
 800dd02:	2205      	movs	r2, #5
 800dd04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd08:	4851      	ldr	r0, [pc, #324]	; (800de50 <_svfiprintf_r+0x1ec>)
 800dd0a:	f7f2 fa69 	bl	80001e0 <memchr>
 800dd0e:	9a04      	ldr	r2, [sp, #16]
 800dd10:	b9d8      	cbnz	r0, 800dd4a <_svfiprintf_r+0xe6>
 800dd12:	06d0      	lsls	r0, r2, #27
 800dd14:	bf44      	itt	mi
 800dd16:	2320      	movmi	r3, #32
 800dd18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd1c:	0711      	lsls	r1, r2, #28
 800dd1e:	bf44      	itt	mi
 800dd20:	232b      	movmi	r3, #43	; 0x2b
 800dd22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd26:	f89a 3000 	ldrb.w	r3, [sl]
 800dd2a:	2b2a      	cmp	r3, #42	; 0x2a
 800dd2c:	d015      	beq.n	800dd5a <_svfiprintf_r+0xf6>
 800dd2e:	9a07      	ldr	r2, [sp, #28]
 800dd30:	4654      	mov	r4, sl
 800dd32:	2000      	movs	r0, #0
 800dd34:	f04f 0c0a 	mov.w	ip, #10
 800dd38:	4621      	mov	r1, r4
 800dd3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd3e:	3b30      	subs	r3, #48	; 0x30
 800dd40:	2b09      	cmp	r3, #9
 800dd42:	d94e      	bls.n	800dde2 <_svfiprintf_r+0x17e>
 800dd44:	b1b0      	cbz	r0, 800dd74 <_svfiprintf_r+0x110>
 800dd46:	9207      	str	r2, [sp, #28]
 800dd48:	e014      	b.n	800dd74 <_svfiprintf_r+0x110>
 800dd4a:	eba0 0308 	sub.w	r3, r0, r8
 800dd4e:	fa09 f303 	lsl.w	r3, r9, r3
 800dd52:	4313      	orrs	r3, r2
 800dd54:	9304      	str	r3, [sp, #16]
 800dd56:	46a2      	mov	sl, r4
 800dd58:	e7d2      	b.n	800dd00 <_svfiprintf_r+0x9c>
 800dd5a:	9b03      	ldr	r3, [sp, #12]
 800dd5c:	1d19      	adds	r1, r3, #4
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	9103      	str	r1, [sp, #12]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	bfbb      	ittet	lt
 800dd66:	425b      	neglt	r3, r3
 800dd68:	f042 0202 	orrlt.w	r2, r2, #2
 800dd6c:	9307      	strge	r3, [sp, #28]
 800dd6e:	9307      	strlt	r3, [sp, #28]
 800dd70:	bfb8      	it	lt
 800dd72:	9204      	strlt	r2, [sp, #16]
 800dd74:	7823      	ldrb	r3, [r4, #0]
 800dd76:	2b2e      	cmp	r3, #46	; 0x2e
 800dd78:	d10c      	bne.n	800dd94 <_svfiprintf_r+0x130>
 800dd7a:	7863      	ldrb	r3, [r4, #1]
 800dd7c:	2b2a      	cmp	r3, #42	; 0x2a
 800dd7e:	d135      	bne.n	800ddec <_svfiprintf_r+0x188>
 800dd80:	9b03      	ldr	r3, [sp, #12]
 800dd82:	1d1a      	adds	r2, r3, #4
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	9203      	str	r2, [sp, #12]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	bfb8      	it	lt
 800dd8c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800dd90:	3402      	adds	r4, #2
 800dd92:	9305      	str	r3, [sp, #20]
 800dd94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800de60 <_svfiprintf_r+0x1fc>
 800dd98:	7821      	ldrb	r1, [r4, #0]
 800dd9a:	2203      	movs	r2, #3
 800dd9c:	4650      	mov	r0, sl
 800dd9e:	f7f2 fa1f 	bl	80001e0 <memchr>
 800dda2:	b140      	cbz	r0, 800ddb6 <_svfiprintf_r+0x152>
 800dda4:	2340      	movs	r3, #64	; 0x40
 800dda6:	eba0 000a 	sub.w	r0, r0, sl
 800ddaa:	fa03 f000 	lsl.w	r0, r3, r0
 800ddae:	9b04      	ldr	r3, [sp, #16]
 800ddb0:	4303      	orrs	r3, r0
 800ddb2:	3401      	adds	r4, #1
 800ddb4:	9304      	str	r3, [sp, #16]
 800ddb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddba:	4826      	ldr	r0, [pc, #152]	; (800de54 <_svfiprintf_r+0x1f0>)
 800ddbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ddc0:	2206      	movs	r2, #6
 800ddc2:	f7f2 fa0d 	bl	80001e0 <memchr>
 800ddc6:	2800      	cmp	r0, #0
 800ddc8:	d038      	beq.n	800de3c <_svfiprintf_r+0x1d8>
 800ddca:	4b23      	ldr	r3, [pc, #140]	; (800de58 <_svfiprintf_r+0x1f4>)
 800ddcc:	bb1b      	cbnz	r3, 800de16 <_svfiprintf_r+0x1b2>
 800ddce:	9b03      	ldr	r3, [sp, #12]
 800ddd0:	3307      	adds	r3, #7
 800ddd2:	f023 0307 	bic.w	r3, r3, #7
 800ddd6:	3308      	adds	r3, #8
 800ddd8:	9303      	str	r3, [sp, #12]
 800ddda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dddc:	4433      	add	r3, r6
 800ddde:	9309      	str	r3, [sp, #36]	; 0x24
 800dde0:	e767      	b.n	800dcb2 <_svfiprintf_r+0x4e>
 800dde2:	fb0c 3202 	mla	r2, ip, r2, r3
 800dde6:	460c      	mov	r4, r1
 800dde8:	2001      	movs	r0, #1
 800ddea:	e7a5      	b.n	800dd38 <_svfiprintf_r+0xd4>
 800ddec:	2300      	movs	r3, #0
 800ddee:	3401      	adds	r4, #1
 800ddf0:	9305      	str	r3, [sp, #20]
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	f04f 0c0a 	mov.w	ip, #10
 800ddf8:	4620      	mov	r0, r4
 800ddfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ddfe:	3a30      	subs	r2, #48	; 0x30
 800de00:	2a09      	cmp	r2, #9
 800de02:	d903      	bls.n	800de0c <_svfiprintf_r+0x1a8>
 800de04:	2b00      	cmp	r3, #0
 800de06:	d0c5      	beq.n	800dd94 <_svfiprintf_r+0x130>
 800de08:	9105      	str	r1, [sp, #20]
 800de0a:	e7c3      	b.n	800dd94 <_svfiprintf_r+0x130>
 800de0c:	fb0c 2101 	mla	r1, ip, r1, r2
 800de10:	4604      	mov	r4, r0
 800de12:	2301      	movs	r3, #1
 800de14:	e7f0      	b.n	800ddf8 <_svfiprintf_r+0x194>
 800de16:	ab03      	add	r3, sp, #12
 800de18:	9300      	str	r3, [sp, #0]
 800de1a:	462a      	mov	r2, r5
 800de1c:	4b0f      	ldr	r3, [pc, #60]	; (800de5c <_svfiprintf_r+0x1f8>)
 800de1e:	a904      	add	r1, sp, #16
 800de20:	4638      	mov	r0, r7
 800de22:	f7fc fa13 	bl	800a24c <_printf_float>
 800de26:	1c42      	adds	r2, r0, #1
 800de28:	4606      	mov	r6, r0
 800de2a:	d1d6      	bne.n	800ddda <_svfiprintf_r+0x176>
 800de2c:	89ab      	ldrh	r3, [r5, #12]
 800de2e:	065b      	lsls	r3, r3, #25
 800de30:	f53f af2c 	bmi.w	800dc8c <_svfiprintf_r+0x28>
 800de34:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de36:	b01d      	add	sp, #116	; 0x74
 800de38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de3c:	ab03      	add	r3, sp, #12
 800de3e:	9300      	str	r3, [sp, #0]
 800de40:	462a      	mov	r2, r5
 800de42:	4b06      	ldr	r3, [pc, #24]	; (800de5c <_svfiprintf_r+0x1f8>)
 800de44:	a904      	add	r1, sp, #16
 800de46:	4638      	mov	r0, r7
 800de48:	f7fc fca4 	bl	800a794 <_printf_i>
 800de4c:	e7eb      	b.n	800de26 <_svfiprintf_r+0x1c2>
 800de4e:	bf00      	nop
 800de50:	08010e44 	.word	0x08010e44
 800de54:	08010e4e 	.word	0x08010e4e
 800de58:	0800a24d 	.word	0x0800a24d
 800de5c:	0800dbad 	.word	0x0800dbad
 800de60:	08010e4a 	.word	0x08010e4a
 800de64:	00000000 	.word	0x00000000

0800de68 <nan>:
 800de68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800de70 <nan+0x8>
 800de6c:	4770      	bx	lr
 800de6e:	bf00      	nop
 800de70:	00000000 	.word	0x00000000
 800de74:	7ff80000 	.word	0x7ff80000

0800de78 <_sbrk_r>:
 800de78:	b538      	push	{r3, r4, r5, lr}
 800de7a:	4d06      	ldr	r5, [pc, #24]	; (800de94 <_sbrk_r+0x1c>)
 800de7c:	2300      	movs	r3, #0
 800de7e:	4604      	mov	r4, r0
 800de80:	4608      	mov	r0, r1
 800de82:	602b      	str	r3, [r5, #0]
 800de84:	f7f4 fcce 	bl	8002824 <_sbrk>
 800de88:	1c43      	adds	r3, r0, #1
 800de8a:	d102      	bne.n	800de92 <_sbrk_r+0x1a>
 800de8c:	682b      	ldr	r3, [r5, #0]
 800de8e:	b103      	cbz	r3, 800de92 <_sbrk_r+0x1a>
 800de90:	6023      	str	r3, [r4, #0]
 800de92:	bd38      	pop	{r3, r4, r5, pc}
 800de94:	20000ae0 	.word	0x20000ae0

0800de98 <strncmp>:
 800de98:	b510      	push	{r4, lr}
 800de9a:	b17a      	cbz	r2, 800debc <strncmp+0x24>
 800de9c:	4603      	mov	r3, r0
 800de9e:	3901      	subs	r1, #1
 800dea0:	1884      	adds	r4, r0, r2
 800dea2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dea6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800deaa:	4290      	cmp	r0, r2
 800deac:	d101      	bne.n	800deb2 <strncmp+0x1a>
 800deae:	42a3      	cmp	r3, r4
 800deb0:	d101      	bne.n	800deb6 <strncmp+0x1e>
 800deb2:	1a80      	subs	r0, r0, r2
 800deb4:	bd10      	pop	{r4, pc}
 800deb6:	2800      	cmp	r0, #0
 800deb8:	d1f3      	bne.n	800dea2 <strncmp+0xa>
 800deba:	e7fa      	b.n	800deb2 <strncmp+0x1a>
 800debc:	4610      	mov	r0, r2
 800debe:	e7f9      	b.n	800deb4 <strncmp+0x1c>

0800dec0 <__ascii_wctomb>:
 800dec0:	b149      	cbz	r1, 800ded6 <__ascii_wctomb+0x16>
 800dec2:	2aff      	cmp	r2, #255	; 0xff
 800dec4:	bf85      	ittet	hi
 800dec6:	238a      	movhi	r3, #138	; 0x8a
 800dec8:	6003      	strhi	r3, [r0, #0]
 800deca:	700a      	strbls	r2, [r1, #0]
 800decc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ded0:	bf98      	it	ls
 800ded2:	2001      	movls	r0, #1
 800ded4:	4770      	bx	lr
 800ded6:	4608      	mov	r0, r1
 800ded8:	4770      	bx	lr
	...

0800dedc <__assert_func>:
 800dedc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dede:	4614      	mov	r4, r2
 800dee0:	461a      	mov	r2, r3
 800dee2:	4b09      	ldr	r3, [pc, #36]	; (800df08 <__assert_func+0x2c>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	4605      	mov	r5, r0
 800dee8:	68d8      	ldr	r0, [r3, #12]
 800deea:	b14c      	cbz	r4, 800df00 <__assert_func+0x24>
 800deec:	4b07      	ldr	r3, [pc, #28]	; (800df0c <__assert_func+0x30>)
 800deee:	9100      	str	r1, [sp, #0]
 800def0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800def4:	4906      	ldr	r1, [pc, #24]	; (800df10 <__assert_func+0x34>)
 800def6:	462b      	mov	r3, r5
 800def8:	f000 f80e 	bl	800df18 <fiprintf>
 800defc:	f000 fa8c 	bl	800e418 <abort>
 800df00:	4b04      	ldr	r3, [pc, #16]	; (800df14 <__assert_func+0x38>)
 800df02:	461c      	mov	r4, r3
 800df04:	e7f3      	b.n	800deee <__assert_func+0x12>
 800df06:	bf00      	nop
 800df08:	20000034 	.word	0x20000034
 800df0c:	08010e55 	.word	0x08010e55
 800df10:	08010e62 	.word	0x08010e62
 800df14:	08010e90 	.word	0x08010e90

0800df18 <fiprintf>:
 800df18:	b40e      	push	{r1, r2, r3}
 800df1a:	b503      	push	{r0, r1, lr}
 800df1c:	4601      	mov	r1, r0
 800df1e:	ab03      	add	r3, sp, #12
 800df20:	4805      	ldr	r0, [pc, #20]	; (800df38 <fiprintf+0x20>)
 800df22:	f853 2b04 	ldr.w	r2, [r3], #4
 800df26:	6800      	ldr	r0, [r0, #0]
 800df28:	9301      	str	r3, [sp, #4]
 800df2a:	f000 f885 	bl	800e038 <_vfiprintf_r>
 800df2e:	b002      	add	sp, #8
 800df30:	f85d eb04 	ldr.w	lr, [sp], #4
 800df34:	b003      	add	sp, #12
 800df36:	4770      	bx	lr
 800df38:	20000034 	.word	0x20000034

0800df3c <memmove>:
 800df3c:	4288      	cmp	r0, r1
 800df3e:	b510      	push	{r4, lr}
 800df40:	eb01 0402 	add.w	r4, r1, r2
 800df44:	d902      	bls.n	800df4c <memmove+0x10>
 800df46:	4284      	cmp	r4, r0
 800df48:	4623      	mov	r3, r4
 800df4a:	d807      	bhi.n	800df5c <memmove+0x20>
 800df4c:	1e43      	subs	r3, r0, #1
 800df4e:	42a1      	cmp	r1, r4
 800df50:	d008      	beq.n	800df64 <memmove+0x28>
 800df52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df56:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df5a:	e7f8      	b.n	800df4e <memmove+0x12>
 800df5c:	4402      	add	r2, r0
 800df5e:	4601      	mov	r1, r0
 800df60:	428a      	cmp	r2, r1
 800df62:	d100      	bne.n	800df66 <memmove+0x2a>
 800df64:	bd10      	pop	{r4, pc}
 800df66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800df6e:	e7f7      	b.n	800df60 <memmove+0x24>

0800df70 <__malloc_lock>:
 800df70:	4801      	ldr	r0, [pc, #4]	; (800df78 <__malloc_lock+0x8>)
 800df72:	f000 bc11 	b.w	800e798 <__retarget_lock_acquire_recursive>
 800df76:	bf00      	nop
 800df78:	20000ae4 	.word	0x20000ae4

0800df7c <__malloc_unlock>:
 800df7c:	4801      	ldr	r0, [pc, #4]	; (800df84 <__malloc_unlock+0x8>)
 800df7e:	f000 bc0c 	b.w	800e79a <__retarget_lock_release_recursive>
 800df82:	bf00      	nop
 800df84:	20000ae4 	.word	0x20000ae4

0800df88 <_realloc_r>:
 800df88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df8c:	4680      	mov	r8, r0
 800df8e:	4614      	mov	r4, r2
 800df90:	460e      	mov	r6, r1
 800df92:	b921      	cbnz	r1, 800df9e <_realloc_r+0x16>
 800df94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df98:	4611      	mov	r1, r2
 800df9a:	f7ff bd93 	b.w	800dac4 <_malloc_r>
 800df9e:	b92a      	cbnz	r2, 800dfac <_realloc_r+0x24>
 800dfa0:	f7ff fd24 	bl	800d9ec <_free_r>
 800dfa4:	4625      	mov	r5, r4
 800dfa6:	4628      	mov	r0, r5
 800dfa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfac:	f000 fc5c 	bl	800e868 <_malloc_usable_size_r>
 800dfb0:	4284      	cmp	r4, r0
 800dfb2:	4607      	mov	r7, r0
 800dfb4:	d802      	bhi.n	800dfbc <_realloc_r+0x34>
 800dfb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dfba:	d812      	bhi.n	800dfe2 <_realloc_r+0x5a>
 800dfbc:	4621      	mov	r1, r4
 800dfbe:	4640      	mov	r0, r8
 800dfc0:	f7ff fd80 	bl	800dac4 <_malloc_r>
 800dfc4:	4605      	mov	r5, r0
 800dfc6:	2800      	cmp	r0, #0
 800dfc8:	d0ed      	beq.n	800dfa6 <_realloc_r+0x1e>
 800dfca:	42bc      	cmp	r4, r7
 800dfcc:	4622      	mov	r2, r4
 800dfce:	4631      	mov	r1, r6
 800dfd0:	bf28      	it	cs
 800dfd2:	463a      	movcs	r2, r7
 800dfd4:	f7ff f824 	bl	800d020 <memcpy>
 800dfd8:	4631      	mov	r1, r6
 800dfda:	4640      	mov	r0, r8
 800dfdc:	f7ff fd06 	bl	800d9ec <_free_r>
 800dfe0:	e7e1      	b.n	800dfa6 <_realloc_r+0x1e>
 800dfe2:	4635      	mov	r5, r6
 800dfe4:	e7df      	b.n	800dfa6 <_realloc_r+0x1e>

0800dfe6 <__sfputc_r>:
 800dfe6:	6893      	ldr	r3, [r2, #8]
 800dfe8:	3b01      	subs	r3, #1
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	b410      	push	{r4}
 800dfee:	6093      	str	r3, [r2, #8]
 800dff0:	da08      	bge.n	800e004 <__sfputc_r+0x1e>
 800dff2:	6994      	ldr	r4, [r2, #24]
 800dff4:	42a3      	cmp	r3, r4
 800dff6:	db01      	blt.n	800dffc <__sfputc_r+0x16>
 800dff8:	290a      	cmp	r1, #10
 800dffa:	d103      	bne.n	800e004 <__sfputc_r+0x1e>
 800dffc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e000:	f000 b94a 	b.w	800e298 <__swbuf_r>
 800e004:	6813      	ldr	r3, [r2, #0]
 800e006:	1c58      	adds	r0, r3, #1
 800e008:	6010      	str	r0, [r2, #0]
 800e00a:	7019      	strb	r1, [r3, #0]
 800e00c:	4608      	mov	r0, r1
 800e00e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e012:	4770      	bx	lr

0800e014 <__sfputs_r>:
 800e014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e016:	4606      	mov	r6, r0
 800e018:	460f      	mov	r7, r1
 800e01a:	4614      	mov	r4, r2
 800e01c:	18d5      	adds	r5, r2, r3
 800e01e:	42ac      	cmp	r4, r5
 800e020:	d101      	bne.n	800e026 <__sfputs_r+0x12>
 800e022:	2000      	movs	r0, #0
 800e024:	e007      	b.n	800e036 <__sfputs_r+0x22>
 800e026:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e02a:	463a      	mov	r2, r7
 800e02c:	4630      	mov	r0, r6
 800e02e:	f7ff ffda 	bl	800dfe6 <__sfputc_r>
 800e032:	1c43      	adds	r3, r0, #1
 800e034:	d1f3      	bne.n	800e01e <__sfputs_r+0xa>
 800e036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e038 <_vfiprintf_r>:
 800e038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e03c:	460d      	mov	r5, r1
 800e03e:	b09d      	sub	sp, #116	; 0x74
 800e040:	4614      	mov	r4, r2
 800e042:	4698      	mov	r8, r3
 800e044:	4606      	mov	r6, r0
 800e046:	b118      	cbz	r0, 800e050 <_vfiprintf_r+0x18>
 800e048:	6983      	ldr	r3, [r0, #24]
 800e04a:	b90b      	cbnz	r3, 800e050 <_vfiprintf_r+0x18>
 800e04c:	f000 fb06 	bl	800e65c <__sinit>
 800e050:	4b89      	ldr	r3, [pc, #548]	; (800e278 <_vfiprintf_r+0x240>)
 800e052:	429d      	cmp	r5, r3
 800e054:	d11b      	bne.n	800e08e <_vfiprintf_r+0x56>
 800e056:	6875      	ldr	r5, [r6, #4]
 800e058:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e05a:	07d9      	lsls	r1, r3, #31
 800e05c:	d405      	bmi.n	800e06a <_vfiprintf_r+0x32>
 800e05e:	89ab      	ldrh	r3, [r5, #12]
 800e060:	059a      	lsls	r2, r3, #22
 800e062:	d402      	bmi.n	800e06a <_vfiprintf_r+0x32>
 800e064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e066:	f000 fb97 	bl	800e798 <__retarget_lock_acquire_recursive>
 800e06a:	89ab      	ldrh	r3, [r5, #12]
 800e06c:	071b      	lsls	r3, r3, #28
 800e06e:	d501      	bpl.n	800e074 <_vfiprintf_r+0x3c>
 800e070:	692b      	ldr	r3, [r5, #16]
 800e072:	b9eb      	cbnz	r3, 800e0b0 <_vfiprintf_r+0x78>
 800e074:	4629      	mov	r1, r5
 800e076:	4630      	mov	r0, r6
 800e078:	f000 f960 	bl	800e33c <__swsetup_r>
 800e07c:	b1c0      	cbz	r0, 800e0b0 <_vfiprintf_r+0x78>
 800e07e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e080:	07dc      	lsls	r4, r3, #31
 800e082:	d50e      	bpl.n	800e0a2 <_vfiprintf_r+0x6a>
 800e084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e088:	b01d      	add	sp, #116	; 0x74
 800e08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e08e:	4b7b      	ldr	r3, [pc, #492]	; (800e27c <_vfiprintf_r+0x244>)
 800e090:	429d      	cmp	r5, r3
 800e092:	d101      	bne.n	800e098 <_vfiprintf_r+0x60>
 800e094:	68b5      	ldr	r5, [r6, #8]
 800e096:	e7df      	b.n	800e058 <_vfiprintf_r+0x20>
 800e098:	4b79      	ldr	r3, [pc, #484]	; (800e280 <_vfiprintf_r+0x248>)
 800e09a:	429d      	cmp	r5, r3
 800e09c:	bf08      	it	eq
 800e09e:	68f5      	ldreq	r5, [r6, #12]
 800e0a0:	e7da      	b.n	800e058 <_vfiprintf_r+0x20>
 800e0a2:	89ab      	ldrh	r3, [r5, #12]
 800e0a4:	0598      	lsls	r0, r3, #22
 800e0a6:	d4ed      	bmi.n	800e084 <_vfiprintf_r+0x4c>
 800e0a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e0aa:	f000 fb76 	bl	800e79a <__retarget_lock_release_recursive>
 800e0ae:	e7e9      	b.n	800e084 <_vfiprintf_r+0x4c>
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	9309      	str	r3, [sp, #36]	; 0x24
 800e0b4:	2320      	movs	r3, #32
 800e0b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e0ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0be:	2330      	movs	r3, #48	; 0x30
 800e0c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e284 <_vfiprintf_r+0x24c>
 800e0c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e0c8:	f04f 0901 	mov.w	r9, #1
 800e0cc:	4623      	mov	r3, r4
 800e0ce:	469a      	mov	sl, r3
 800e0d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0d4:	b10a      	cbz	r2, 800e0da <_vfiprintf_r+0xa2>
 800e0d6:	2a25      	cmp	r2, #37	; 0x25
 800e0d8:	d1f9      	bne.n	800e0ce <_vfiprintf_r+0x96>
 800e0da:	ebba 0b04 	subs.w	fp, sl, r4
 800e0de:	d00b      	beq.n	800e0f8 <_vfiprintf_r+0xc0>
 800e0e0:	465b      	mov	r3, fp
 800e0e2:	4622      	mov	r2, r4
 800e0e4:	4629      	mov	r1, r5
 800e0e6:	4630      	mov	r0, r6
 800e0e8:	f7ff ff94 	bl	800e014 <__sfputs_r>
 800e0ec:	3001      	adds	r0, #1
 800e0ee:	f000 80aa 	beq.w	800e246 <_vfiprintf_r+0x20e>
 800e0f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0f4:	445a      	add	r2, fp
 800e0f6:	9209      	str	r2, [sp, #36]	; 0x24
 800e0f8:	f89a 3000 	ldrb.w	r3, [sl]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	f000 80a2 	beq.w	800e246 <_vfiprintf_r+0x20e>
 800e102:	2300      	movs	r3, #0
 800e104:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e108:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e10c:	f10a 0a01 	add.w	sl, sl, #1
 800e110:	9304      	str	r3, [sp, #16]
 800e112:	9307      	str	r3, [sp, #28]
 800e114:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e118:	931a      	str	r3, [sp, #104]	; 0x68
 800e11a:	4654      	mov	r4, sl
 800e11c:	2205      	movs	r2, #5
 800e11e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e122:	4858      	ldr	r0, [pc, #352]	; (800e284 <_vfiprintf_r+0x24c>)
 800e124:	f7f2 f85c 	bl	80001e0 <memchr>
 800e128:	9a04      	ldr	r2, [sp, #16]
 800e12a:	b9d8      	cbnz	r0, 800e164 <_vfiprintf_r+0x12c>
 800e12c:	06d1      	lsls	r1, r2, #27
 800e12e:	bf44      	itt	mi
 800e130:	2320      	movmi	r3, #32
 800e132:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e136:	0713      	lsls	r3, r2, #28
 800e138:	bf44      	itt	mi
 800e13a:	232b      	movmi	r3, #43	; 0x2b
 800e13c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e140:	f89a 3000 	ldrb.w	r3, [sl]
 800e144:	2b2a      	cmp	r3, #42	; 0x2a
 800e146:	d015      	beq.n	800e174 <_vfiprintf_r+0x13c>
 800e148:	9a07      	ldr	r2, [sp, #28]
 800e14a:	4654      	mov	r4, sl
 800e14c:	2000      	movs	r0, #0
 800e14e:	f04f 0c0a 	mov.w	ip, #10
 800e152:	4621      	mov	r1, r4
 800e154:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e158:	3b30      	subs	r3, #48	; 0x30
 800e15a:	2b09      	cmp	r3, #9
 800e15c:	d94e      	bls.n	800e1fc <_vfiprintf_r+0x1c4>
 800e15e:	b1b0      	cbz	r0, 800e18e <_vfiprintf_r+0x156>
 800e160:	9207      	str	r2, [sp, #28]
 800e162:	e014      	b.n	800e18e <_vfiprintf_r+0x156>
 800e164:	eba0 0308 	sub.w	r3, r0, r8
 800e168:	fa09 f303 	lsl.w	r3, r9, r3
 800e16c:	4313      	orrs	r3, r2
 800e16e:	9304      	str	r3, [sp, #16]
 800e170:	46a2      	mov	sl, r4
 800e172:	e7d2      	b.n	800e11a <_vfiprintf_r+0xe2>
 800e174:	9b03      	ldr	r3, [sp, #12]
 800e176:	1d19      	adds	r1, r3, #4
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	9103      	str	r1, [sp, #12]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	bfbb      	ittet	lt
 800e180:	425b      	neglt	r3, r3
 800e182:	f042 0202 	orrlt.w	r2, r2, #2
 800e186:	9307      	strge	r3, [sp, #28]
 800e188:	9307      	strlt	r3, [sp, #28]
 800e18a:	bfb8      	it	lt
 800e18c:	9204      	strlt	r2, [sp, #16]
 800e18e:	7823      	ldrb	r3, [r4, #0]
 800e190:	2b2e      	cmp	r3, #46	; 0x2e
 800e192:	d10c      	bne.n	800e1ae <_vfiprintf_r+0x176>
 800e194:	7863      	ldrb	r3, [r4, #1]
 800e196:	2b2a      	cmp	r3, #42	; 0x2a
 800e198:	d135      	bne.n	800e206 <_vfiprintf_r+0x1ce>
 800e19a:	9b03      	ldr	r3, [sp, #12]
 800e19c:	1d1a      	adds	r2, r3, #4
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	9203      	str	r2, [sp, #12]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	bfb8      	it	lt
 800e1a6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e1aa:	3402      	adds	r4, #2
 800e1ac:	9305      	str	r3, [sp, #20]
 800e1ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e294 <_vfiprintf_r+0x25c>
 800e1b2:	7821      	ldrb	r1, [r4, #0]
 800e1b4:	2203      	movs	r2, #3
 800e1b6:	4650      	mov	r0, sl
 800e1b8:	f7f2 f812 	bl	80001e0 <memchr>
 800e1bc:	b140      	cbz	r0, 800e1d0 <_vfiprintf_r+0x198>
 800e1be:	2340      	movs	r3, #64	; 0x40
 800e1c0:	eba0 000a 	sub.w	r0, r0, sl
 800e1c4:	fa03 f000 	lsl.w	r0, r3, r0
 800e1c8:	9b04      	ldr	r3, [sp, #16]
 800e1ca:	4303      	orrs	r3, r0
 800e1cc:	3401      	adds	r4, #1
 800e1ce:	9304      	str	r3, [sp, #16]
 800e1d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1d4:	482c      	ldr	r0, [pc, #176]	; (800e288 <_vfiprintf_r+0x250>)
 800e1d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e1da:	2206      	movs	r2, #6
 800e1dc:	f7f2 f800 	bl	80001e0 <memchr>
 800e1e0:	2800      	cmp	r0, #0
 800e1e2:	d03f      	beq.n	800e264 <_vfiprintf_r+0x22c>
 800e1e4:	4b29      	ldr	r3, [pc, #164]	; (800e28c <_vfiprintf_r+0x254>)
 800e1e6:	bb1b      	cbnz	r3, 800e230 <_vfiprintf_r+0x1f8>
 800e1e8:	9b03      	ldr	r3, [sp, #12]
 800e1ea:	3307      	adds	r3, #7
 800e1ec:	f023 0307 	bic.w	r3, r3, #7
 800e1f0:	3308      	adds	r3, #8
 800e1f2:	9303      	str	r3, [sp, #12]
 800e1f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1f6:	443b      	add	r3, r7
 800e1f8:	9309      	str	r3, [sp, #36]	; 0x24
 800e1fa:	e767      	b.n	800e0cc <_vfiprintf_r+0x94>
 800e1fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800e200:	460c      	mov	r4, r1
 800e202:	2001      	movs	r0, #1
 800e204:	e7a5      	b.n	800e152 <_vfiprintf_r+0x11a>
 800e206:	2300      	movs	r3, #0
 800e208:	3401      	adds	r4, #1
 800e20a:	9305      	str	r3, [sp, #20]
 800e20c:	4619      	mov	r1, r3
 800e20e:	f04f 0c0a 	mov.w	ip, #10
 800e212:	4620      	mov	r0, r4
 800e214:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e218:	3a30      	subs	r2, #48	; 0x30
 800e21a:	2a09      	cmp	r2, #9
 800e21c:	d903      	bls.n	800e226 <_vfiprintf_r+0x1ee>
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d0c5      	beq.n	800e1ae <_vfiprintf_r+0x176>
 800e222:	9105      	str	r1, [sp, #20]
 800e224:	e7c3      	b.n	800e1ae <_vfiprintf_r+0x176>
 800e226:	fb0c 2101 	mla	r1, ip, r1, r2
 800e22a:	4604      	mov	r4, r0
 800e22c:	2301      	movs	r3, #1
 800e22e:	e7f0      	b.n	800e212 <_vfiprintf_r+0x1da>
 800e230:	ab03      	add	r3, sp, #12
 800e232:	9300      	str	r3, [sp, #0]
 800e234:	462a      	mov	r2, r5
 800e236:	4b16      	ldr	r3, [pc, #88]	; (800e290 <_vfiprintf_r+0x258>)
 800e238:	a904      	add	r1, sp, #16
 800e23a:	4630      	mov	r0, r6
 800e23c:	f7fc f806 	bl	800a24c <_printf_float>
 800e240:	4607      	mov	r7, r0
 800e242:	1c78      	adds	r0, r7, #1
 800e244:	d1d6      	bne.n	800e1f4 <_vfiprintf_r+0x1bc>
 800e246:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e248:	07d9      	lsls	r1, r3, #31
 800e24a:	d405      	bmi.n	800e258 <_vfiprintf_r+0x220>
 800e24c:	89ab      	ldrh	r3, [r5, #12]
 800e24e:	059a      	lsls	r2, r3, #22
 800e250:	d402      	bmi.n	800e258 <_vfiprintf_r+0x220>
 800e252:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e254:	f000 faa1 	bl	800e79a <__retarget_lock_release_recursive>
 800e258:	89ab      	ldrh	r3, [r5, #12]
 800e25a:	065b      	lsls	r3, r3, #25
 800e25c:	f53f af12 	bmi.w	800e084 <_vfiprintf_r+0x4c>
 800e260:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e262:	e711      	b.n	800e088 <_vfiprintf_r+0x50>
 800e264:	ab03      	add	r3, sp, #12
 800e266:	9300      	str	r3, [sp, #0]
 800e268:	462a      	mov	r2, r5
 800e26a:	4b09      	ldr	r3, [pc, #36]	; (800e290 <_vfiprintf_r+0x258>)
 800e26c:	a904      	add	r1, sp, #16
 800e26e:	4630      	mov	r0, r6
 800e270:	f7fc fa90 	bl	800a794 <_printf_i>
 800e274:	e7e4      	b.n	800e240 <_vfiprintf_r+0x208>
 800e276:	bf00      	nop
 800e278:	08010eb4 	.word	0x08010eb4
 800e27c:	08010ed4 	.word	0x08010ed4
 800e280:	08010e94 	.word	0x08010e94
 800e284:	08010e44 	.word	0x08010e44
 800e288:	08010e4e 	.word	0x08010e4e
 800e28c:	0800a24d 	.word	0x0800a24d
 800e290:	0800e015 	.word	0x0800e015
 800e294:	08010e4a 	.word	0x08010e4a

0800e298 <__swbuf_r>:
 800e298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e29a:	460e      	mov	r6, r1
 800e29c:	4614      	mov	r4, r2
 800e29e:	4605      	mov	r5, r0
 800e2a0:	b118      	cbz	r0, 800e2aa <__swbuf_r+0x12>
 800e2a2:	6983      	ldr	r3, [r0, #24]
 800e2a4:	b90b      	cbnz	r3, 800e2aa <__swbuf_r+0x12>
 800e2a6:	f000 f9d9 	bl	800e65c <__sinit>
 800e2aa:	4b21      	ldr	r3, [pc, #132]	; (800e330 <__swbuf_r+0x98>)
 800e2ac:	429c      	cmp	r4, r3
 800e2ae:	d12b      	bne.n	800e308 <__swbuf_r+0x70>
 800e2b0:	686c      	ldr	r4, [r5, #4]
 800e2b2:	69a3      	ldr	r3, [r4, #24]
 800e2b4:	60a3      	str	r3, [r4, #8]
 800e2b6:	89a3      	ldrh	r3, [r4, #12]
 800e2b8:	071a      	lsls	r2, r3, #28
 800e2ba:	d52f      	bpl.n	800e31c <__swbuf_r+0x84>
 800e2bc:	6923      	ldr	r3, [r4, #16]
 800e2be:	b36b      	cbz	r3, 800e31c <__swbuf_r+0x84>
 800e2c0:	6923      	ldr	r3, [r4, #16]
 800e2c2:	6820      	ldr	r0, [r4, #0]
 800e2c4:	1ac0      	subs	r0, r0, r3
 800e2c6:	6963      	ldr	r3, [r4, #20]
 800e2c8:	b2f6      	uxtb	r6, r6
 800e2ca:	4283      	cmp	r3, r0
 800e2cc:	4637      	mov	r7, r6
 800e2ce:	dc04      	bgt.n	800e2da <__swbuf_r+0x42>
 800e2d0:	4621      	mov	r1, r4
 800e2d2:	4628      	mov	r0, r5
 800e2d4:	f000 f92e 	bl	800e534 <_fflush_r>
 800e2d8:	bb30      	cbnz	r0, 800e328 <__swbuf_r+0x90>
 800e2da:	68a3      	ldr	r3, [r4, #8]
 800e2dc:	3b01      	subs	r3, #1
 800e2de:	60a3      	str	r3, [r4, #8]
 800e2e0:	6823      	ldr	r3, [r4, #0]
 800e2e2:	1c5a      	adds	r2, r3, #1
 800e2e4:	6022      	str	r2, [r4, #0]
 800e2e6:	701e      	strb	r6, [r3, #0]
 800e2e8:	6963      	ldr	r3, [r4, #20]
 800e2ea:	3001      	adds	r0, #1
 800e2ec:	4283      	cmp	r3, r0
 800e2ee:	d004      	beq.n	800e2fa <__swbuf_r+0x62>
 800e2f0:	89a3      	ldrh	r3, [r4, #12]
 800e2f2:	07db      	lsls	r3, r3, #31
 800e2f4:	d506      	bpl.n	800e304 <__swbuf_r+0x6c>
 800e2f6:	2e0a      	cmp	r6, #10
 800e2f8:	d104      	bne.n	800e304 <__swbuf_r+0x6c>
 800e2fa:	4621      	mov	r1, r4
 800e2fc:	4628      	mov	r0, r5
 800e2fe:	f000 f919 	bl	800e534 <_fflush_r>
 800e302:	b988      	cbnz	r0, 800e328 <__swbuf_r+0x90>
 800e304:	4638      	mov	r0, r7
 800e306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e308:	4b0a      	ldr	r3, [pc, #40]	; (800e334 <__swbuf_r+0x9c>)
 800e30a:	429c      	cmp	r4, r3
 800e30c:	d101      	bne.n	800e312 <__swbuf_r+0x7a>
 800e30e:	68ac      	ldr	r4, [r5, #8]
 800e310:	e7cf      	b.n	800e2b2 <__swbuf_r+0x1a>
 800e312:	4b09      	ldr	r3, [pc, #36]	; (800e338 <__swbuf_r+0xa0>)
 800e314:	429c      	cmp	r4, r3
 800e316:	bf08      	it	eq
 800e318:	68ec      	ldreq	r4, [r5, #12]
 800e31a:	e7ca      	b.n	800e2b2 <__swbuf_r+0x1a>
 800e31c:	4621      	mov	r1, r4
 800e31e:	4628      	mov	r0, r5
 800e320:	f000 f80c 	bl	800e33c <__swsetup_r>
 800e324:	2800      	cmp	r0, #0
 800e326:	d0cb      	beq.n	800e2c0 <__swbuf_r+0x28>
 800e328:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e32c:	e7ea      	b.n	800e304 <__swbuf_r+0x6c>
 800e32e:	bf00      	nop
 800e330:	08010eb4 	.word	0x08010eb4
 800e334:	08010ed4 	.word	0x08010ed4
 800e338:	08010e94 	.word	0x08010e94

0800e33c <__swsetup_r>:
 800e33c:	4b32      	ldr	r3, [pc, #200]	; (800e408 <__swsetup_r+0xcc>)
 800e33e:	b570      	push	{r4, r5, r6, lr}
 800e340:	681d      	ldr	r5, [r3, #0]
 800e342:	4606      	mov	r6, r0
 800e344:	460c      	mov	r4, r1
 800e346:	b125      	cbz	r5, 800e352 <__swsetup_r+0x16>
 800e348:	69ab      	ldr	r3, [r5, #24]
 800e34a:	b913      	cbnz	r3, 800e352 <__swsetup_r+0x16>
 800e34c:	4628      	mov	r0, r5
 800e34e:	f000 f985 	bl	800e65c <__sinit>
 800e352:	4b2e      	ldr	r3, [pc, #184]	; (800e40c <__swsetup_r+0xd0>)
 800e354:	429c      	cmp	r4, r3
 800e356:	d10f      	bne.n	800e378 <__swsetup_r+0x3c>
 800e358:	686c      	ldr	r4, [r5, #4]
 800e35a:	89a3      	ldrh	r3, [r4, #12]
 800e35c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e360:	0719      	lsls	r1, r3, #28
 800e362:	d42c      	bmi.n	800e3be <__swsetup_r+0x82>
 800e364:	06dd      	lsls	r5, r3, #27
 800e366:	d411      	bmi.n	800e38c <__swsetup_r+0x50>
 800e368:	2309      	movs	r3, #9
 800e36a:	6033      	str	r3, [r6, #0]
 800e36c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e370:	81a3      	strh	r3, [r4, #12]
 800e372:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e376:	e03e      	b.n	800e3f6 <__swsetup_r+0xba>
 800e378:	4b25      	ldr	r3, [pc, #148]	; (800e410 <__swsetup_r+0xd4>)
 800e37a:	429c      	cmp	r4, r3
 800e37c:	d101      	bne.n	800e382 <__swsetup_r+0x46>
 800e37e:	68ac      	ldr	r4, [r5, #8]
 800e380:	e7eb      	b.n	800e35a <__swsetup_r+0x1e>
 800e382:	4b24      	ldr	r3, [pc, #144]	; (800e414 <__swsetup_r+0xd8>)
 800e384:	429c      	cmp	r4, r3
 800e386:	bf08      	it	eq
 800e388:	68ec      	ldreq	r4, [r5, #12]
 800e38a:	e7e6      	b.n	800e35a <__swsetup_r+0x1e>
 800e38c:	0758      	lsls	r0, r3, #29
 800e38e:	d512      	bpl.n	800e3b6 <__swsetup_r+0x7a>
 800e390:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e392:	b141      	cbz	r1, 800e3a6 <__swsetup_r+0x6a>
 800e394:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e398:	4299      	cmp	r1, r3
 800e39a:	d002      	beq.n	800e3a2 <__swsetup_r+0x66>
 800e39c:	4630      	mov	r0, r6
 800e39e:	f7ff fb25 	bl	800d9ec <_free_r>
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	6363      	str	r3, [r4, #52]	; 0x34
 800e3a6:	89a3      	ldrh	r3, [r4, #12]
 800e3a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e3ac:	81a3      	strh	r3, [r4, #12]
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	6063      	str	r3, [r4, #4]
 800e3b2:	6923      	ldr	r3, [r4, #16]
 800e3b4:	6023      	str	r3, [r4, #0]
 800e3b6:	89a3      	ldrh	r3, [r4, #12]
 800e3b8:	f043 0308 	orr.w	r3, r3, #8
 800e3bc:	81a3      	strh	r3, [r4, #12]
 800e3be:	6923      	ldr	r3, [r4, #16]
 800e3c0:	b94b      	cbnz	r3, 800e3d6 <__swsetup_r+0x9a>
 800e3c2:	89a3      	ldrh	r3, [r4, #12]
 800e3c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e3c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3cc:	d003      	beq.n	800e3d6 <__swsetup_r+0x9a>
 800e3ce:	4621      	mov	r1, r4
 800e3d0:	4630      	mov	r0, r6
 800e3d2:	f000 fa09 	bl	800e7e8 <__smakebuf_r>
 800e3d6:	89a0      	ldrh	r0, [r4, #12]
 800e3d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e3dc:	f010 0301 	ands.w	r3, r0, #1
 800e3e0:	d00a      	beq.n	800e3f8 <__swsetup_r+0xbc>
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	60a3      	str	r3, [r4, #8]
 800e3e6:	6963      	ldr	r3, [r4, #20]
 800e3e8:	425b      	negs	r3, r3
 800e3ea:	61a3      	str	r3, [r4, #24]
 800e3ec:	6923      	ldr	r3, [r4, #16]
 800e3ee:	b943      	cbnz	r3, 800e402 <__swsetup_r+0xc6>
 800e3f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e3f4:	d1ba      	bne.n	800e36c <__swsetup_r+0x30>
 800e3f6:	bd70      	pop	{r4, r5, r6, pc}
 800e3f8:	0781      	lsls	r1, r0, #30
 800e3fa:	bf58      	it	pl
 800e3fc:	6963      	ldrpl	r3, [r4, #20]
 800e3fe:	60a3      	str	r3, [r4, #8]
 800e400:	e7f4      	b.n	800e3ec <__swsetup_r+0xb0>
 800e402:	2000      	movs	r0, #0
 800e404:	e7f7      	b.n	800e3f6 <__swsetup_r+0xba>
 800e406:	bf00      	nop
 800e408:	20000034 	.word	0x20000034
 800e40c:	08010eb4 	.word	0x08010eb4
 800e410:	08010ed4 	.word	0x08010ed4
 800e414:	08010e94 	.word	0x08010e94

0800e418 <abort>:
 800e418:	b508      	push	{r3, lr}
 800e41a:	2006      	movs	r0, #6
 800e41c:	f000 fa54 	bl	800e8c8 <raise>
 800e420:	2001      	movs	r0, #1
 800e422:	f7f4 f987 	bl	8002734 <_exit>
	...

0800e428 <__sflush_r>:
 800e428:	898a      	ldrh	r2, [r1, #12]
 800e42a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e42e:	4605      	mov	r5, r0
 800e430:	0710      	lsls	r0, r2, #28
 800e432:	460c      	mov	r4, r1
 800e434:	d458      	bmi.n	800e4e8 <__sflush_r+0xc0>
 800e436:	684b      	ldr	r3, [r1, #4]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	dc05      	bgt.n	800e448 <__sflush_r+0x20>
 800e43c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e43e:	2b00      	cmp	r3, #0
 800e440:	dc02      	bgt.n	800e448 <__sflush_r+0x20>
 800e442:	2000      	movs	r0, #0
 800e444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e448:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e44a:	2e00      	cmp	r6, #0
 800e44c:	d0f9      	beq.n	800e442 <__sflush_r+0x1a>
 800e44e:	2300      	movs	r3, #0
 800e450:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e454:	682f      	ldr	r7, [r5, #0]
 800e456:	602b      	str	r3, [r5, #0]
 800e458:	d032      	beq.n	800e4c0 <__sflush_r+0x98>
 800e45a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e45c:	89a3      	ldrh	r3, [r4, #12]
 800e45e:	075a      	lsls	r2, r3, #29
 800e460:	d505      	bpl.n	800e46e <__sflush_r+0x46>
 800e462:	6863      	ldr	r3, [r4, #4]
 800e464:	1ac0      	subs	r0, r0, r3
 800e466:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e468:	b10b      	cbz	r3, 800e46e <__sflush_r+0x46>
 800e46a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e46c:	1ac0      	subs	r0, r0, r3
 800e46e:	2300      	movs	r3, #0
 800e470:	4602      	mov	r2, r0
 800e472:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e474:	6a21      	ldr	r1, [r4, #32]
 800e476:	4628      	mov	r0, r5
 800e478:	47b0      	blx	r6
 800e47a:	1c43      	adds	r3, r0, #1
 800e47c:	89a3      	ldrh	r3, [r4, #12]
 800e47e:	d106      	bne.n	800e48e <__sflush_r+0x66>
 800e480:	6829      	ldr	r1, [r5, #0]
 800e482:	291d      	cmp	r1, #29
 800e484:	d82c      	bhi.n	800e4e0 <__sflush_r+0xb8>
 800e486:	4a2a      	ldr	r2, [pc, #168]	; (800e530 <__sflush_r+0x108>)
 800e488:	40ca      	lsrs	r2, r1
 800e48a:	07d6      	lsls	r6, r2, #31
 800e48c:	d528      	bpl.n	800e4e0 <__sflush_r+0xb8>
 800e48e:	2200      	movs	r2, #0
 800e490:	6062      	str	r2, [r4, #4]
 800e492:	04d9      	lsls	r1, r3, #19
 800e494:	6922      	ldr	r2, [r4, #16]
 800e496:	6022      	str	r2, [r4, #0]
 800e498:	d504      	bpl.n	800e4a4 <__sflush_r+0x7c>
 800e49a:	1c42      	adds	r2, r0, #1
 800e49c:	d101      	bne.n	800e4a2 <__sflush_r+0x7a>
 800e49e:	682b      	ldr	r3, [r5, #0]
 800e4a0:	b903      	cbnz	r3, 800e4a4 <__sflush_r+0x7c>
 800e4a2:	6560      	str	r0, [r4, #84]	; 0x54
 800e4a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e4a6:	602f      	str	r7, [r5, #0]
 800e4a8:	2900      	cmp	r1, #0
 800e4aa:	d0ca      	beq.n	800e442 <__sflush_r+0x1a>
 800e4ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e4b0:	4299      	cmp	r1, r3
 800e4b2:	d002      	beq.n	800e4ba <__sflush_r+0x92>
 800e4b4:	4628      	mov	r0, r5
 800e4b6:	f7ff fa99 	bl	800d9ec <_free_r>
 800e4ba:	2000      	movs	r0, #0
 800e4bc:	6360      	str	r0, [r4, #52]	; 0x34
 800e4be:	e7c1      	b.n	800e444 <__sflush_r+0x1c>
 800e4c0:	6a21      	ldr	r1, [r4, #32]
 800e4c2:	2301      	movs	r3, #1
 800e4c4:	4628      	mov	r0, r5
 800e4c6:	47b0      	blx	r6
 800e4c8:	1c41      	adds	r1, r0, #1
 800e4ca:	d1c7      	bne.n	800e45c <__sflush_r+0x34>
 800e4cc:	682b      	ldr	r3, [r5, #0]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d0c4      	beq.n	800e45c <__sflush_r+0x34>
 800e4d2:	2b1d      	cmp	r3, #29
 800e4d4:	d001      	beq.n	800e4da <__sflush_r+0xb2>
 800e4d6:	2b16      	cmp	r3, #22
 800e4d8:	d101      	bne.n	800e4de <__sflush_r+0xb6>
 800e4da:	602f      	str	r7, [r5, #0]
 800e4dc:	e7b1      	b.n	800e442 <__sflush_r+0x1a>
 800e4de:	89a3      	ldrh	r3, [r4, #12]
 800e4e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4e4:	81a3      	strh	r3, [r4, #12]
 800e4e6:	e7ad      	b.n	800e444 <__sflush_r+0x1c>
 800e4e8:	690f      	ldr	r7, [r1, #16]
 800e4ea:	2f00      	cmp	r7, #0
 800e4ec:	d0a9      	beq.n	800e442 <__sflush_r+0x1a>
 800e4ee:	0793      	lsls	r3, r2, #30
 800e4f0:	680e      	ldr	r6, [r1, #0]
 800e4f2:	bf08      	it	eq
 800e4f4:	694b      	ldreq	r3, [r1, #20]
 800e4f6:	600f      	str	r7, [r1, #0]
 800e4f8:	bf18      	it	ne
 800e4fa:	2300      	movne	r3, #0
 800e4fc:	eba6 0807 	sub.w	r8, r6, r7
 800e500:	608b      	str	r3, [r1, #8]
 800e502:	f1b8 0f00 	cmp.w	r8, #0
 800e506:	dd9c      	ble.n	800e442 <__sflush_r+0x1a>
 800e508:	6a21      	ldr	r1, [r4, #32]
 800e50a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e50c:	4643      	mov	r3, r8
 800e50e:	463a      	mov	r2, r7
 800e510:	4628      	mov	r0, r5
 800e512:	47b0      	blx	r6
 800e514:	2800      	cmp	r0, #0
 800e516:	dc06      	bgt.n	800e526 <__sflush_r+0xfe>
 800e518:	89a3      	ldrh	r3, [r4, #12]
 800e51a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e51e:	81a3      	strh	r3, [r4, #12]
 800e520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e524:	e78e      	b.n	800e444 <__sflush_r+0x1c>
 800e526:	4407      	add	r7, r0
 800e528:	eba8 0800 	sub.w	r8, r8, r0
 800e52c:	e7e9      	b.n	800e502 <__sflush_r+0xda>
 800e52e:	bf00      	nop
 800e530:	20400001 	.word	0x20400001

0800e534 <_fflush_r>:
 800e534:	b538      	push	{r3, r4, r5, lr}
 800e536:	690b      	ldr	r3, [r1, #16]
 800e538:	4605      	mov	r5, r0
 800e53a:	460c      	mov	r4, r1
 800e53c:	b913      	cbnz	r3, 800e544 <_fflush_r+0x10>
 800e53e:	2500      	movs	r5, #0
 800e540:	4628      	mov	r0, r5
 800e542:	bd38      	pop	{r3, r4, r5, pc}
 800e544:	b118      	cbz	r0, 800e54e <_fflush_r+0x1a>
 800e546:	6983      	ldr	r3, [r0, #24]
 800e548:	b90b      	cbnz	r3, 800e54e <_fflush_r+0x1a>
 800e54a:	f000 f887 	bl	800e65c <__sinit>
 800e54e:	4b14      	ldr	r3, [pc, #80]	; (800e5a0 <_fflush_r+0x6c>)
 800e550:	429c      	cmp	r4, r3
 800e552:	d11b      	bne.n	800e58c <_fflush_r+0x58>
 800e554:	686c      	ldr	r4, [r5, #4]
 800e556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d0ef      	beq.n	800e53e <_fflush_r+0xa>
 800e55e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e560:	07d0      	lsls	r0, r2, #31
 800e562:	d404      	bmi.n	800e56e <_fflush_r+0x3a>
 800e564:	0599      	lsls	r1, r3, #22
 800e566:	d402      	bmi.n	800e56e <_fflush_r+0x3a>
 800e568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e56a:	f000 f915 	bl	800e798 <__retarget_lock_acquire_recursive>
 800e56e:	4628      	mov	r0, r5
 800e570:	4621      	mov	r1, r4
 800e572:	f7ff ff59 	bl	800e428 <__sflush_r>
 800e576:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e578:	07da      	lsls	r2, r3, #31
 800e57a:	4605      	mov	r5, r0
 800e57c:	d4e0      	bmi.n	800e540 <_fflush_r+0xc>
 800e57e:	89a3      	ldrh	r3, [r4, #12]
 800e580:	059b      	lsls	r3, r3, #22
 800e582:	d4dd      	bmi.n	800e540 <_fflush_r+0xc>
 800e584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e586:	f000 f908 	bl	800e79a <__retarget_lock_release_recursive>
 800e58a:	e7d9      	b.n	800e540 <_fflush_r+0xc>
 800e58c:	4b05      	ldr	r3, [pc, #20]	; (800e5a4 <_fflush_r+0x70>)
 800e58e:	429c      	cmp	r4, r3
 800e590:	d101      	bne.n	800e596 <_fflush_r+0x62>
 800e592:	68ac      	ldr	r4, [r5, #8]
 800e594:	e7df      	b.n	800e556 <_fflush_r+0x22>
 800e596:	4b04      	ldr	r3, [pc, #16]	; (800e5a8 <_fflush_r+0x74>)
 800e598:	429c      	cmp	r4, r3
 800e59a:	bf08      	it	eq
 800e59c:	68ec      	ldreq	r4, [r5, #12]
 800e59e:	e7da      	b.n	800e556 <_fflush_r+0x22>
 800e5a0:	08010eb4 	.word	0x08010eb4
 800e5a4:	08010ed4 	.word	0x08010ed4
 800e5a8:	08010e94 	.word	0x08010e94

0800e5ac <std>:
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	b510      	push	{r4, lr}
 800e5b0:	4604      	mov	r4, r0
 800e5b2:	e9c0 3300 	strd	r3, r3, [r0]
 800e5b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e5ba:	6083      	str	r3, [r0, #8]
 800e5bc:	8181      	strh	r1, [r0, #12]
 800e5be:	6643      	str	r3, [r0, #100]	; 0x64
 800e5c0:	81c2      	strh	r2, [r0, #14]
 800e5c2:	6183      	str	r3, [r0, #24]
 800e5c4:	4619      	mov	r1, r3
 800e5c6:	2208      	movs	r2, #8
 800e5c8:	305c      	adds	r0, #92	; 0x5c
 800e5ca:	f7fb fd97 	bl	800a0fc <memset>
 800e5ce:	4b05      	ldr	r3, [pc, #20]	; (800e5e4 <std+0x38>)
 800e5d0:	6263      	str	r3, [r4, #36]	; 0x24
 800e5d2:	4b05      	ldr	r3, [pc, #20]	; (800e5e8 <std+0x3c>)
 800e5d4:	62a3      	str	r3, [r4, #40]	; 0x28
 800e5d6:	4b05      	ldr	r3, [pc, #20]	; (800e5ec <std+0x40>)
 800e5d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e5da:	4b05      	ldr	r3, [pc, #20]	; (800e5f0 <std+0x44>)
 800e5dc:	6224      	str	r4, [r4, #32]
 800e5de:	6323      	str	r3, [r4, #48]	; 0x30
 800e5e0:	bd10      	pop	{r4, pc}
 800e5e2:	bf00      	nop
 800e5e4:	0800e901 	.word	0x0800e901
 800e5e8:	0800e923 	.word	0x0800e923
 800e5ec:	0800e95b 	.word	0x0800e95b
 800e5f0:	0800e97f 	.word	0x0800e97f

0800e5f4 <_cleanup_r>:
 800e5f4:	4901      	ldr	r1, [pc, #4]	; (800e5fc <_cleanup_r+0x8>)
 800e5f6:	f000 b8af 	b.w	800e758 <_fwalk_reent>
 800e5fa:	bf00      	nop
 800e5fc:	0800e535 	.word	0x0800e535

0800e600 <__sfmoreglue>:
 800e600:	b570      	push	{r4, r5, r6, lr}
 800e602:	2268      	movs	r2, #104	; 0x68
 800e604:	1e4d      	subs	r5, r1, #1
 800e606:	4355      	muls	r5, r2
 800e608:	460e      	mov	r6, r1
 800e60a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e60e:	f7ff fa59 	bl	800dac4 <_malloc_r>
 800e612:	4604      	mov	r4, r0
 800e614:	b140      	cbz	r0, 800e628 <__sfmoreglue+0x28>
 800e616:	2100      	movs	r1, #0
 800e618:	e9c0 1600 	strd	r1, r6, [r0]
 800e61c:	300c      	adds	r0, #12
 800e61e:	60a0      	str	r0, [r4, #8]
 800e620:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e624:	f7fb fd6a 	bl	800a0fc <memset>
 800e628:	4620      	mov	r0, r4
 800e62a:	bd70      	pop	{r4, r5, r6, pc}

0800e62c <__sfp_lock_acquire>:
 800e62c:	4801      	ldr	r0, [pc, #4]	; (800e634 <__sfp_lock_acquire+0x8>)
 800e62e:	f000 b8b3 	b.w	800e798 <__retarget_lock_acquire_recursive>
 800e632:	bf00      	nop
 800e634:	20000ae5 	.word	0x20000ae5

0800e638 <__sfp_lock_release>:
 800e638:	4801      	ldr	r0, [pc, #4]	; (800e640 <__sfp_lock_release+0x8>)
 800e63a:	f000 b8ae 	b.w	800e79a <__retarget_lock_release_recursive>
 800e63e:	bf00      	nop
 800e640:	20000ae5 	.word	0x20000ae5

0800e644 <__sinit_lock_acquire>:
 800e644:	4801      	ldr	r0, [pc, #4]	; (800e64c <__sinit_lock_acquire+0x8>)
 800e646:	f000 b8a7 	b.w	800e798 <__retarget_lock_acquire_recursive>
 800e64a:	bf00      	nop
 800e64c:	20000ae6 	.word	0x20000ae6

0800e650 <__sinit_lock_release>:
 800e650:	4801      	ldr	r0, [pc, #4]	; (800e658 <__sinit_lock_release+0x8>)
 800e652:	f000 b8a2 	b.w	800e79a <__retarget_lock_release_recursive>
 800e656:	bf00      	nop
 800e658:	20000ae6 	.word	0x20000ae6

0800e65c <__sinit>:
 800e65c:	b510      	push	{r4, lr}
 800e65e:	4604      	mov	r4, r0
 800e660:	f7ff fff0 	bl	800e644 <__sinit_lock_acquire>
 800e664:	69a3      	ldr	r3, [r4, #24]
 800e666:	b11b      	cbz	r3, 800e670 <__sinit+0x14>
 800e668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e66c:	f7ff bff0 	b.w	800e650 <__sinit_lock_release>
 800e670:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e674:	6523      	str	r3, [r4, #80]	; 0x50
 800e676:	4b13      	ldr	r3, [pc, #76]	; (800e6c4 <__sinit+0x68>)
 800e678:	4a13      	ldr	r2, [pc, #76]	; (800e6c8 <__sinit+0x6c>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e67e:	42a3      	cmp	r3, r4
 800e680:	bf04      	itt	eq
 800e682:	2301      	moveq	r3, #1
 800e684:	61a3      	streq	r3, [r4, #24]
 800e686:	4620      	mov	r0, r4
 800e688:	f000 f820 	bl	800e6cc <__sfp>
 800e68c:	6060      	str	r0, [r4, #4]
 800e68e:	4620      	mov	r0, r4
 800e690:	f000 f81c 	bl	800e6cc <__sfp>
 800e694:	60a0      	str	r0, [r4, #8]
 800e696:	4620      	mov	r0, r4
 800e698:	f000 f818 	bl	800e6cc <__sfp>
 800e69c:	2200      	movs	r2, #0
 800e69e:	60e0      	str	r0, [r4, #12]
 800e6a0:	2104      	movs	r1, #4
 800e6a2:	6860      	ldr	r0, [r4, #4]
 800e6a4:	f7ff ff82 	bl	800e5ac <std>
 800e6a8:	68a0      	ldr	r0, [r4, #8]
 800e6aa:	2201      	movs	r2, #1
 800e6ac:	2109      	movs	r1, #9
 800e6ae:	f7ff ff7d 	bl	800e5ac <std>
 800e6b2:	68e0      	ldr	r0, [r4, #12]
 800e6b4:	2202      	movs	r2, #2
 800e6b6:	2112      	movs	r1, #18
 800e6b8:	f7ff ff78 	bl	800e5ac <std>
 800e6bc:	2301      	movs	r3, #1
 800e6be:	61a3      	str	r3, [r4, #24]
 800e6c0:	e7d2      	b.n	800e668 <__sinit+0xc>
 800e6c2:	bf00      	nop
 800e6c4:	08010a50 	.word	0x08010a50
 800e6c8:	0800e5f5 	.word	0x0800e5f5

0800e6cc <__sfp>:
 800e6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6ce:	4607      	mov	r7, r0
 800e6d0:	f7ff ffac 	bl	800e62c <__sfp_lock_acquire>
 800e6d4:	4b1e      	ldr	r3, [pc, #120]	; (800e750 <__sfp+0x84>)
 800e6d6:	681e      	ldr	r6, [r3, #0]
 800e6d8:	69b3      	ldr	r3, [r6, #24]
 800e6da:	b913      	cbnz	r3, 800e6e2 <__sfp+0x16>
 800e6dc:	4630      	mov	r0, r6
 800e6de:	f7ff ffbd 	bl	800e65c <__sinit>
 800e6e2:	3648      	adds	r6, #72	; 0x48
 800e6e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e6e8:	3b01      	subs	r3, #1
 800e6ea:	d503      	bpl.n	800e6f4 <__sfp+0x28>
 800e6ec:	6833      	ldr	r3, [r6, #0]
 800e6ee:	b30b      	cbz	r3, 800e734 <__sfp+0x68>
 800e6f0:	6836      	ldr	r6, [r6, #0]
 800e6f2:	e7f7      	b.n	800e6e4 <__sfp+0x18>
 800e6f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e6f8:	b9d5      	cbnz	r5, 800e730 <__sfp+0x64>
 800e6fa:	4b16      	ldr	r3, [pc, #88]	; (800e754 <__sfp+0x88>)
 800e6fc:	60e3      	str	r3, [r4, #12]
 800e6fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e702:	6665      	str	r5, [r4, #100]	; 0x64
 800e704:	f000 f847 	bl	800e796 <__retarget_lock_init_recursive>
 800e708:	f7ff ff96 	bl	800e638 <__sfp_lock_release>
 800e70c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e710:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e714:	6025      	str	r5, [r4, #0]
 800e716:	61a5      	str	r5, [r4, #24]
 800e718:	2208      	movs	r2, #8
 800e71a:	4629      	mov	r1, r5
 800e71c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e720:	f7fb fcec 	bl	800a0fc <memset>
 800e724:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e728:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e72c:	4620      	mov	r0, r4
 800e72e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e730:	3468      	adds	r4, #104	; 0x68
 800e732:	e7d9      	b.n	800e6e8 <__sfp+0x1c>
 800e734:	2104      	movs	r1, #4
 800e736:	4638      	mov	r0, r7
 800e738:	f7ff ff62 	bl	800e600 <__sfmoreglue>
 800e73c:	4604      	mov	r4, r0
 800e73e:	6030      	str	r0, [r6, #0]
 800e740:	2800      	cmp	r0, #0
 800e742:	d1d5      	bne.n	800e6f0 <__sfp+0x24>
 800e744:	f7ff ff78 	bl	800e638 <__sfp_lock_release>
 800e748:	230c      	movs	r3, #12
 800e74a:	603b      	str	r3, [r7, #0]
 800e74c:	e7ee      	b.n	800e72c <__sfp+0x60>
 800e74e:	bf00      	nop
 800e750:	08010a50 	.word	0x08010a50
 800e754:	ffff0001 	.word	0xffff0001

0800e758 <_fwalk_reent>:
 800e758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e75c:	4606      	mov	r6, r0
 800e75e:	4688      	mov	r8, r1
 800e760:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e764:	2700      	movs	r7, #0
 800e766:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e76a:	f1b9 0901 	subs.w	r9, r9, #1
 800e76e:	d505      	bpl.n	800e77c <_fwalk_reent+0x24>
 800e770:	6824      	ldr	r4, [r4, #0]
 800e772:	2c00      	cmp	r4, #0
 800e774:	d1f7      	bne.n	800e766 <_fwalk_reent+0xe>
 800e776:	4638      	mov	r0, r7
 800e778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e77c:	89ab      	ldrh	r3, [r5, #12]
 800e77e:	2b01      	cmp	r3, #1
 800e780:	d907      	bls.n	800e792 <_fwalk_reent+0x3a>
 800e782:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e786:	3301      	adds	r3, #1
 800e788:	d003      	beq.n	800e792 <_fwalk_reent+0x3a>
 800e78a:	4629      	mov	r1, r5
 800e78c:	4630      	mov	r0, r6
 800e78e:	47c0      	blx	r8
 800e790:	4307      	orrs	r7, r0
 800e792:	3568      	adds	r5, #104	; 0x68
 800e794:	e7e9      	b.n	800e76a <_fwalk_reent+0x12>

0800e796 <__retarget_lock_init_recursive>:
 800e796:	4770      	bx	lr

0800e798 <__retarget_lock_acquire_recursive>:
 800e798:	4770      	bx	lr

0800e79a <__retarget_lock_release_recursive>:
 800e79a:	4770      	bx	lr

0800e79c <__swhatbuf_r>:
 800e79c:	b570      	push	{r4, r5, r6, lr}
 800e79e:	460e      	mov	r6, r1
 800e7a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7a4:	2900      	cmp	r1, #0
 800e7a6:	b096      	sub	sp, #88	; 0x58
 800e7a8:	4614      	mov	r4, r2
 800e7aa:	461d      	mov	r5, r3
 800e7ac:	da08      	bge.n	800e7c0 <__swhatbuf_r+0x24>
 800e7ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	602a      	str	r2, [r5, #0]
 800e7b6:	061a      	lsls	r2, r3, #24
 800e7b8:	d410      	bmi.n	800e7dc <__swhatbuf_r+0x40>
 800e7ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7be:	e00e      	b.n	800e7de <__swhatbuf_r+0x42>
 800e7c0:	466a      	mov	r2, sp
 800e7c2:	f000 f903 	bl	800e9cc <_fstat_r>
 800e7c6:	2800      	cmp	r0, #0
 800e7c8:	dbf1      	blt.n	800e7ae <__swhatbuf_r+0x12>
 800e7ca:	9a01      	ldr	r2, [sp, #4]
 800e7cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e7d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e7d4:	425a      	negs	r2, r3
 800e7d6:	415a      	adcs	r2, r3
 800e7d8:	602a      	str	r2, [r5, #0]
 800e7da:	e7ee      	b.n	800e7ba <__swhatbuf_r+0x1e>
 800e7dc:	2340      	movs	r3, #64	; 0x40
 800e7de:	2000      	movs	r0, #0
 800e7e0:	6023      	str	r3, [r4, #0]
 800e7e2:	b016      	add	sp, #88	; 0x58
 800e7e4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e7e8 <__smakebuf_r>:
 800e7e8:	898b      	ldrh	r3, [r1, #12]
 800e7ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e7ec:	079d      	lsls	r5, r3, #30
 800e7ee:	4606      	mov	r6, r0
 800e7f0:	460c      	mov	r4, r1
 800e7f2:	d507      	bpl.n	800e804 <__smakebuf_r+0x1c>
 800e7f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e7f8:	6023      	str	r3, [r4, #0]
 800e7fa:	6123      	str	r3, [r4, #16]
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	6163      	str	r3, [r4, #20]
 800e800:	b002      	add	sp, #8
 800e802:	bd70      	pop	{r4, r5, r6, pc}
 800e804:	ab01      	add	r3, sp, #4
 800e806:	466a      	mov	r2, sp
 800e808:	f7ff ffc8 	bl	800e79c <__swhatbuf_r>
 800e80c:	9900      	ldr	r1, [sp, #0]
 800e80e:	4605      	mov	r5, r0
 800e810:	4630      	mov	r0, r6
 800e812:	f7ff f957 	bl	800dac4 <_malloc_r>
 800e816:	b948      	cbnz	r0, 800e82c <__smakebuf_r+0x44>
 800e818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e81c:	059a      	lsls	r2, r3, #22
 800e81e:	d4ef      	bmi.n	800e800 <__smakebuf_r+0x18>
 800e820:	f023 0303 	bic.w	r3, r3, #3
 800e824:	f043 0302 	orr.w	r3, r3, #2
 800e828:	81a3      	strh	r3, [r4, #12]
 800e82a:	e7e3      	b.n	800e7f4 <__smakebuf_r+0xc>
 800e82c:	4b0d      	ldr	r3, [pc, #52]	; (800e864 <__smakebuf_r+0x7c>)
 800e82e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e830:	89a3      	ldrh	r3, [r4, #12]
 800e832:	6020      	str	r0, [r4, #0]
 800e834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e838:	81a3      	strh	r3, [r4, #12]
 800e83a:	9b00      	ldr	r3, [sp, #0]
 800e83c:	6163      	str	r3, [r4, #20]
 800e83e:	9b01      	ldr	r3, [sp, #4]
 800e840:	6120      	str	r0, [r4, #16]
 800e842:	b15b      	cbz	r3, 800e85c <__smakebuf_r+0x74>
 800e844:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e848:	4630      	mov	r0, r6
 800e84a:	f000 f8d1 	bl	800e9f0 <_isatty_r>
 800e84e:	b128      	cbz	r0, 800e85c <__smakebuf_r+0x74>
 800e850:	89a3      	ldrh	r3, [r4, #12]
 800e852:	f023 0303 	bic.w	r3, r3, #3
 800e856:	f043 0301 	orr.w	r3, r3, #1
 800e85a:	81a3      	strh	r3, [r4, #12]
 800e85c:	89a0      	ldrh	r0, [r4, #12]
 800e85e:	4305      	orrs	r5, r0
 800e860:	81a5      	strh	r5, [r4, #12]
 800e862:	e7cd      	b.n	800e800 <__smakebuf_r+0x18>
 800e864:	0800e5f5 	.word	0x0800e5f5

0800e868 <_malloc_usable_size_r>:
 800e868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e86c:	1f18      	subs	r0, r3, #4
 800e86e:	2b00      	cmp	r3, #0
 800e870:	bfbc      	itt	lt
 800e872:	580b      	ldrlt	r3, [r1, r0]
 800e874:	18c0      	addlt	r0, r0, r3
 800e876:	4770      	bx	lr

0800e878 <_raise_r>:
 800e878:	291f      	cmp	r1, #31
 800e87a:	b538      	push	{r3, r4, r5, lr}
 800e87c:	4604      	mov	r4, r0
 800e87e:	460d      	mov	r5, r1
 800e880:	d904      	bls.n	800e88c <_raise_r+0x14>
 800e882:	2316      	movs	r3, #22
 800e884:	6003      	str	r3, [r0, #0]
 800e886:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e88a:	bd38      	pop	{r3, r4, r5, pc}
 800e88c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e88e:	b112      	cbz	r2, 800e896 <_raise_r+0x1e>
 800e890:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e894:	b94b      	cbnz	r3, 800e8aa <_raise_r+0x32>
 800e896:	4620      	mov	r0, r4
 800e898:	f000 f830 	bl	800e8fc <_getpid_r>
 800e89c:	462a      	mov	r2, r5
 800e89e:	4601      	mov	r1, r0
 800e8a0:	4620      	mov	r0, r4
 800e8a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8a6:	f000 b817 	b.w	800e8d8 <_kill_r>
 800e8aa:	2b01      	cmp	r3, #1
 800e8ac:	d00a      	beq.n	800e8c4 <_raise_r+0x4c>
 800e8ae:	1c59      	adds	r1, r3, #1
 800e8b0:	d103      	bne.n	800e8ba <_raise_r+0x42>
 800e8b2:	2316      	movs	r3, #22
 800e8b4:	6003      	str	r3, [r0, #0]
 800e8b6:	2001      	movs	r0, #1
 800e8b8:	e7e7      	b.n	800e88a <_raise_r+0x12>
 800e8ba:	2400      	movs	r4, #0
 800e8bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e8c0:	4628      	mov	r0, r5
 800e8c2:	4798      	blx	r3
 800e8c4:	2000      	movs	r0, #0
 800e8c6:	e7e0      	b.n	800e88a <_raise_r+0x12>

0800e8c8 <raise>:
 800e8c8:	4b02      	ldr	r3, [pc, #8]	; (800e8d4 <raise+0xc>)
 800e8ca:	4601      	mov	r1, r0
 800e8cc:	6818      	ldr	r0, [r3, #0]
 800e8ce:	f7ff bfd3 	b.w	800e878 <_raise_r>
 800e8d2:	bf00      	nop
 800e8d4:	20000034 	.word	0x20000034

0800e8d8 <_kill_r>:
 800e8d8:	b538      	push	{r3, r4, r5, lr}
 800e8da:	4d07      	ldr	r5, [pc, #28]	; (800e8f8 <_kill_r+0x20>)
 800e8dc:	2300      	movs	r3, #0
 800e8de:	4604      	mov	r4, r0
 800e8e0:	4608      	mov	r0, r1
 800e8e2:	4611      	mov	r1, r2
 800e8e4:	602b      	str	r3, [r5, #0]
 800e8e6:	f7f3 ff15 	bl	8002714 <_kill>
 800e8ea:	1c43      	adds	r3, r0, #1
 800e8ec:	d102      	bne.n	800e8f4 <_kill_r+0x1c>
 800e8ee:	682b      	ldr	r3, [r5, #0]
 800e8f0:	b103      	cbz	r3, 800e8f4 <_kill_r+0x1c>
 800e8f2:	6023      	str	r3, [r4, #0]
 800e8f4:	bd38      	pop	{r3, r4, r5, pc}
 800e8f6:	bf00      	nop
 800e8f8:	20000ae0 	.word	0x20000ae0

0800e8fc <_getpid_r>:
 800e8fc:	f7f3 bf02 	b.w	8002704 <_getpid>

0800e900 <__sread>:
 800e900:	b510      	push	{r4, lr}
 800e902:	460c      	mov	r4, r1
 800e904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e908:	f000 f894 	bl	800ea34 <_read_r>
 800e90c:	2800      	cmp	r0, #0
 800e90e:	bfab      	itete	ge
 800e910:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e912:	89a3      	ldrhlt	r3, [r4, #12]
 800e914:	181b      	addge	r3, r3, r0
 800e916:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e91a:	bfac      	ite	ge
 800e91c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e91e:	81a3      	strhlt	r3, [r4, #12]
 800e920:	bd10      	pop	{r4, pc}

0800e922 <__swrite>:
 800e922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e926:	461f      	mov	r7, r3
 800e928:	898b      	ldrh	r3, [r1, #12]
 800e92a:	05db      	lsls	r3, r3, #23
 800e92c:	4605      	mov	r5, r0
 800e92e:	460c      	mov	r4, r1
 800e930:	4616      	mov	r6, r2
 800e932:	d505      	bpl.n	800e940 <__swrite+0x1e>
 800e934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e938:	2302      	movs	r3, #2
 800e93a:	2200      	movs	r2, #0
 800e93c:	f000 f868 	bl	800ea10 <_lseek_r>
 800e940:	89a3      	ldrh	r3, [r4, #12]
 800e942:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e946:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e94a:	81a3      	strh	r3, [r4, #12]
 800e94c:	4632      	mov	r2, r6
 800e94e:	463b      	mov	r3, r7
 800e950:	4628      	mov	r0, r5
 800e952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e956:	f000 b817 	b.w	800e988 <_write_r>

0800e95a <__sseek>:
 800e95a:	b510      	push	{r4, lr}
 800e95c:	460c      	mov	r4, r1
 800e95e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e962:	f000 f855 	bl	800ea10 <_lseek_r>
 800e966:	1c43      	adds	r3, r0, #1
 800e968:	89a3      	ldrh	r3, [r4, #12]
 800e96a:	bf15      	itete	ne
 800e96c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e96e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e972:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e976:	81a3      	strheq	r3, [r4, #12]
 800e978:	bf18      	it	ne
 800e97a:	81a3      	strhne	r3, [r4, #12]
 800e97c:	bd10      	pop	{r4, pc}

0800e97e <__sclose>:
 800e97e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e982:	f000 b813 	b.w	800e9ac <_close_r>
	...

0800e988 <_write_r>:
 800e988:	b538      	push	{r3, r4, r5, lr}
 800e98a:	4d07      	ldr	r5, [pc, #28]	; (800e9a8 <_write_r+0x20>)
 800e98c:	4604      	mov	r4, r0
 800e98e:	4608      	mov	r0, r1
 800e990:	4611      	mov	r1, r2
 800e992:	2200      	movs	r2, #0
 800e994:	602a      	str	r2, [r5, #0]
 800e996:	461a      	mov	r2, r3
 800e998:	f7f3 fef3 	bl	8002782 <_write>
 800e99c:	1c43      	adds	r3, r0, #1
 800e99e:	d102      	bne.n	800e9a6 <_write_r+0x1e>
 800e9a0:	682b      	ldr	r3, [r5, #0]
 800e9a2:	b103      	cbz	r3, 800e9a6 <_write_r+0x1e>
 800e9a4:	6023      	str	r3, [r4, #0]
 800e9a6:	bd38      	pop	{r3, r4, r5, pc}
 800e9a8:	20000ae0 	.word	0x20000ae0

0800e9ac <_close_r>:
 800e9ac:	b538      	push	{r3, r4, r5, lr}
 800e9ae:	4d06      	ldr	r5, [pc, #24]	; (800e9c8 <_close_r+0x1c>)
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	4604      	mov	r4, r0
 800e9b4:	4608      	mov	r0, r1
 800e9b6:	602b      	str	r3, [r5, #0]
 800e9b8:	f7f3 feff 	bl	80027ba <_close>
 800e9bc:	1c43      	adds	r3, r0, #1
 800e9be:	d102      	bne.n	800e9c6 <_close_r+0x1a>
 800e9c0:	682b      	ldr	r3, [r5, #0]
 800e9c2:	b103      	cbz	r3, 800e9c6 <_close_r+0x1a>
 800e9c4:	6023      	str	r3, [r4, #0]
 800e9c6:	bd38      	pop	{r3, r4, r5, pc}
 800e9c8:	20000ae0 	.word	0x20000ae0

0800e9cc <_fstat_r>:
 800e9cc:	b538      	push	{r3, r4, r5, lr}
 800e9ce:	4d07      	ldr	r5, [pc, #28]	; (800e9ec <_fstat_r+0x20>)
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	4604      	mov	r4, r0
 800e9d4:	4608      	mov	r0, r1
 800e9d6:	4611      	mov	r1, r2
 800e9d8:	602b      	str	r3, [r5, #0]
 800e9da:	f7f3 fefa 	bl	80027d2 <_fstat>
 800e9de:	1c43      	adds	r3, r0, #1
 800e9e0:	d102      	bne.n	800e9e8 <_fstat_r+0x1c>
 800e9e2:	682b      	ldr	r3, [r5, #0]
 800e9e4:	b103      	cbz	r3, 800e9e8 <_fstat_r+0x1c>
 800e9e6:	6023      	str	r3, [r4, #0]
 800e9e8:	bd38      	pop	{r3, r4, r5, pc}
 800e9ea:	bf00      	nop
 800e9ec:	20000ae0 	.word	0x20000ae0

0800e9f0 <_isatty_r>:
 800e9f0:	b538      	push	{r3, r4, r5, lr}
 800e9f2:	4d06      	ldr	r5, [pc, #24]	; (800ea0c <_isatty_r+0x1c>)
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	4604      	mov	r4, r0
 800e9f8:	4608      	mov	r0, r1
 800e9fa:	602b      	str	r3, [r5, #0]
 800e9fc:	f7f3 fef9 	bl	80027f2 <_isatty>
 800ea00:	1c43      	adds	r3, r0, #1
 800ea02:	d102      	bne.n	800ea0a <_isatty_r+0x1a>
 800ea04:	682b      	ldr	r3, [r5, #0]
 800ea06:	b103      	cbz	r3, 800ea0a <_isatty_r+0x1a>
 800ea08:	6023      	str	r3, [r4, #0]
 800ea0a:	bd38      	pop	{r3, r4, r5, pc}
 800ea0c:	20000ae0 	.word	0x20000ae0

0800ea10 <_lseek_r>:
 800ea10:	b538      	push	{r3, r4, r5, lr}
 800ea12:	4d07      	ldr	r5, [pc, #28]	; (800ea30 <_lseek_r+0x20>)
 800ea14:	4604      	mov	r4, r0
 800ea16:	4608      	mov	r0, r1
 800ea18:	4611      	mov	r1, r2
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	602a      	str	r2, [r5, #0]
 800ea1e:	461a      	mov	r2, r3
 800ea20:	f7f3 fef2 	bl	8002808 <_lseek>
 800ea24:	1c43      	adds	r3, r0, #1
 800ea26:	d102      	bne.n	800ea2e <_lseek_r+0x1e>
 800ea28:	682b      	ldr	r3, [r5, #0]
 800ea2a:	b103      	cbz	r3, 800ea2e <_lseek_r+0x1e>
 800ea2c:	6023      	str	r3, [r4, #0]
 800ea2e:	bd38      	pop	{r3, r4, r5, pc}
 800ea30:	20000ae0 	.word	0x20000ae0

0800ea34 <_read_r>:
 800ea34:	b538      	push	{r3, r4, r5, lr}
 800ea36:	4d07      	ldr	r5, [pc, #28]	; (800ea54 <_read_r+0x20>)
 800ea38:	4604      	mov	r4, r0
 800ea3a:	4608      	mov	r0, r1
 800ea3c:	4611      	mov	r1, r2
 800ea3e:	2200      	movs	r2, #0
 800ea40:	602a      	str	r2, [r5, #0]
 800ea42:	461a      	mov	r2, r3
 800ea44:	f7f3 fe80 	bl	8002748 <_read>
 800ea48:	1c43      	adds	r3, r0, #1
 800ea4a:	d102      	bne.n	800ea52 <_read_r+0x1e>
 800ea4c:	682b      	ldr	r3, [r5, #0]
 800ea4e:	b103      	cbz	r3, 800ea52 <_read_r+0x1e>
 800ea50:	6023      	str	r3, [r4, #0]
 800ea52:	bd38      	pop	{r3, r4, r5, pc}
 800ea54:	20000ae0 	.word	0x20000ae0

0800ea58 <tan>:
 800ea58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ea5a:	ec53 2b10 	vmov	r2, r3, d0
 800ea5e:	4816      	ldr	r0, [pc, #88]	; (800eab8 <tan+0x60>)
 800ea60:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ea64:	4281      	cmp	r1, r0
 800ea66:	dc07      	bgt.n	800ea78 <tan+0x20>
 800ea68:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800eab0 <tan+0x58>
 800ea6c:	2001      	movs	r0, #1
 800ea6e:	b005      	add	sp, #20
 800ea70:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea74:	f001 bbd4 	b.w	8010220 <__kernel_tan>
 800ea78:	4810      	ldr	r0, [pc, #64]	; (800eabc <tan+0x64>)
 800ea7a:	4281      	cmp	r1, r0
 800ea7c:	dd09      	ble.n	800ea92 <tan+0x3a>
 800ea7e:	ee10 0a10 	vmov	r0, s0
 800ea82:	4619      	mov	r1, r3
 800ea84:	f7f1 fc00 	bl	8000288 <__aeabi_dsub>
 800ea88:	ec41 0b10 	vmov	d0, r0, r1
 800ea8c:	b005      	add	sp, #20
 800ea8e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ea92:	4668      	mov	r0, sp
 800ea94:	f000 fdb4 	bl	800f600 <__ieee754_rem_pio2>
 800ea98:	0040      	lsls	r0, r0, #1
 800ea9a:	f000 0002 	and.w	r0, r0, #2
 800ea9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eaa2:	ed9d 0b00 	vldr	d0, [sp]
 800eaa6:	f1c0 0001 	rsb	r0, r0, #1
 800eaaa:	f001 fbb9 	bl	8010220 <__kernel_tan>
 800eaae:	e7ed      	b.n	800ea8c <tan+0x34>
	...
 800eab8:	3fe921fb 	.word	0x3fe921fb
 800eabc:	7fefffff 	.word	0x7fefffff

0800eac0 <pow>:
 800eac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eac2:	ed2d 8b02 	vpush	{d8}
 800eac6:	eeb0 8a40 	vmov.f32	s16, s0
 800eaca:	eef0 8a60 	vmov.f32	s17, s1
 800eace:	ec55 4b11 	vmov	r4, r5, d1
 800ead2:	f000 f865 	bl	800eba0 <__ieee754_pow>
 800ead6:	4622      	mov	r2, r4
 800ead8:	462b      	mov	r3, r5
 800eada:	4620      	mov	r0, r4
 800eadc:	4629      	mov	r1, r5
 800eade:	ec57 6b10 	vmov	r6, r7, d0
 800eae2:	f7f2 f823 	bl	8000b2c <__aeabi_dcmpun>
 800eae6:	2800      	cmp	r0, #0
 800eae8:	d13b      	bne.n	800eb62 <pow+0xa2>
 800eaea:	ec51 0b18 	vmov	r0, r1, d8
 800eaee:	2200      	movs	r2, #0
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	f7f1 ffe9 	bl	8000ac8 <__aeabi_dcmpeq>
 800eaf6:	b1b8      	cbz	r0, 800eb28 <pow+0x68>
 800eaf8:	2200      	movs	r2, #0
 800eafa:	2300      	movs	r3, #0
 800eafc:	4620      	mov	r0, r4
 800eafe:	4629      	mov	r1, r5
 800eb00:	f7f1 ffe2 	bl	8000ac8 <__aeabi_dcmpeq>
 800eb04:	2800      	cmp	r0, #0
 800eb06:	d146      	bne.n	800eb96 <pow+0xd6>
 800eb08:	ec45 4b10 	vmov	d0, r4, r5
 800eb0c:	f001 fdcb 	bl	80106a6 <finite>
 800eb10:	b338      	cbz	r0, 800eb62 <pow+0xa2>
 800eb12:	2200      	movs	r2, #0
 800eb14:	2300      	movs	r3, #0
 800eb16:	4620      	mov	r0, r4
 800eb18:	4629      	mov	r1, r5
 800eb1a:	f7f1 ffdf 	bl	8000adc <__aeabi_dcmplt>
 800eb1e:	b300      	cbz	r0, 800eb62 <pow+0xa2>
 800eb20:	f7fb fac2 	bl	800a0a8 <__errno>
 800eb24:	2322      	movs	r3, #34	; 0x22
 800eb26:	e01b      	b.n	800eb60 <pow+0xa0>
 800eb28:	ec47 6b10 	vmov	d0, r6, r7
 800eb2c:	f001 fdbb 	bl	80106a6 <finite>
 800eb30:	b9e0      	cbnz	r0, 800eb6c <pow+0xac>
 800eb32:	eeb0 0a48 	vmov.f32	s0, s16
 800eb36:	eef0 0a68 	vmov.f32	s1, s17
 800eb3a:	f001 fdb4 	bl	80106a6 <finite>
 800eb3e:	b1a8      	cbz	r0, 800eb6c <pow+0xac>
 800eb40:	ec45 4b10 	vmov	d0, r4, r5
 800eb44:	f001 fdaf 	bl	80106a6 <finite>
 800eb48:	b180      	cbz	r0, 800eb6c <pow+0xac>
 800eb4a:	4632      	mov	r2, r6
 800eb4c:	463b      	mov	r3, r7
 800eb4e:	4630      	mov	r0, r6
 800eb50:	4639      	mov	r1, r7
 800eb52:	f7f1 ffeb 	bl	8000b2c <__aeabi_dcmpun>
 800eb56:	2800      	cmp	r0, #0
 800eb58:	d0e2      	beq.n	800eb20 <pow+0x60>
 800eb5a:	f7fb faa5 	bl	800a0a8 <__errno>
 800eb5e:	2321      	movs	r3, #33	; 0x21
 800eb60:	6003      	str	r3, [r0, #0]
 800eb62:	ecbd 8b02 	vpop	{d8}
 800eb66:	ec47 6b10 	vmov	d0, r6, r7
 800eb6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	2300      	movs	r3, #0
 800eb70:	4630      	mov	r0, r6
 800eb72:	4639      	mov	r1, r7
 800eb74:	f7f1 ffa8 	bl	8000ac8 <__aeabi_dcmpeq>
 800eb78:	2800      	cmp	r0, #0
 800eb7a:	d0f2      	beq.n	800eb62 <pow+0xa2>
 800eb7c:	eeb0 0a48 	vmov.f32	s0, s16
 800eb80:	eef0 0a68 	vmov.f32	s1, s17
 800eb84:	f001 fd8f 	bl	80106a6 <finite>
 800eb88:	2800      	cmp	r0, #0
 800eb8a:	d0ea      	beq.n	800eb62 <pow+0xa2>
 800eb8c:	ec45 4b10 	vmov	d0, r4, r5
 800eb90:	f001 fd89 	bl	80106a6 <finite>
 800eb94:	e7c3      	b.n	800eb1e <pow+0x5e>
 800eb96:	4f01      	ldr	r7, [pc, #4]	; (800eb9c <pow+0xdc>)
 800eb98:	2600      	movs	r6, #0
 800eb9a:	e7e2      	b.n	800eb62 <pow+0xa2>
 800eb9c:	3ff00000 	.word	0x3ff00000

0800eba0 <__ieee754_pow>:
 800eba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eba4:	ed2d 8b06 	vpush	{d8-d10}
 800eba8:	b089      	sub	sp, #36	; 0x24
 800ebaa:	ed8d 1b00 	vstr	d1, [sp]
 800ebae:	e9dd 2900 	ldrd	r2, r9, [sp]
 800ebb2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800ebb6:	ea58 0102 	orrs.w	r1, r8, r2
 800ebba:	ec57 6b10 	vmov	r6, r7, d0
 800ebbe:	d115      	bne.n	800ebec <__ieee754_pow+0x4c>
 800ebc0:	19b3      	adds	r3, r6, r6
 800ebc2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800ebc6:	4152      	adcs	r2, r2
 800ebc8:	4299      	cmp	r1, r3
 800ebca:	4b89      	ldr	r3, [pc, #548]	; (800edf0 <__ieee754_pow+0x250>)
 800ebcc:	4193      	sbcs	r3, r2
 800ebce:	f080 84d2 	bcs.w	800f576 <__ieee754_pow+0x9d6>
 800ebd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ebd6:	4630      	mov	r0, r6
 800ebd8:	4639      	mov	r1, r7
 800ebda:	f7f1 fb57 	bl	800028c <__adddf3>
 800ebde:	ec41 0b10 	vmov	d0, r0, r1
 800ebe2:	b009      	add	sp, #36	; 0x24
 800ebe4:	ecbd 8b06 	vpop	{d8-d10}
 800ebe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebec:	4b81      	ldr	r3, [pc, #516]	; (800edf4 <__ieee754_pow+0x254>)
 800ebee:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800ebf2:	429c      	cmp	r4, r3
 800ebf4:	ee10 aa10 	vmov	sl, s0
 800ebf8:	463d      	mov	r5, r7
 800ebfa:	dc06      	bgt.n	800ec0a <__ieee754_pow+0x6a>
 800ebfc:	d101      	bne.n	800ec02 <__ieee754_pow+0x62>
 800ebfe:	2e00      	cmp	r6, #0
 800ec00:	d1e7      	bne.n	800ebd2 <__ieee754_pow+0x32>
 800ec02:	4598      	cmp	r8, r3
 800ec04:	dc01      	bgt.n	800ec0a <__ieee754_pow+0x6a>
 800ec06:	d10f      	bne.n	800ec28 <__ieee754_pow+0x88>
 800ec08:	b172      	cbz	r2, 800ec28 <__ieee754_pow+0x88>
 800ec0a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800ec0e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800ec12:	ea55 050a 	orrs.w	r5, r5, sl
 800ec16:	d1dc      	bne.n	800ebd2 <__ieee754_pow+0x32>
 800ec18:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ec1c:	18db      	adds	r3, r3, r3
 800ec1e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800ec22:	4152      	adcs	r2, r2
 800ec24:	429d      	cmp	r5, r3
 800ec26:	e7d0      	b.n	800ebca <__ieee754_pow+0x2a>
 800ec28:	2d00      	cmp	r5, #0
 800ec2a:	da3b      	bge.n	800eca4 <__ieee754_pow+0x104>
 800ec2c:	4b72      	ldr	r3, [pc, #456]	; (800edf8 <__ieee754_pow+0x258>)
 800ec2e:	4598      	cmp	r8, r3
 800ec30:	dc51      	bgt.n	800ecd6 <__ieee754_pow+0x136>
 800ec32:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ec36:	4598      	cmp	r8, r3
 800ec38:	f340 84ac 	ble.w	800f594 <__ieee754_pow+0x9f4>
 800ec3c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ec40:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ec44:	2b14      	cmp	r3, #20
 800ec46:	dd0f      	ble.n	800ec68 <__ieee754_pow+0xc8>
 800ec48:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ec4c:	fa22 f103 	lsr.w	r1, r2, r3
 800ec50:	fa01 f303 	lsl.w	r3, r1, r3
 800ec54:	4293      	cmp	r3, r2
 800ec56:	f040 849d 	bne.w	800f594 <__ieee754_pow+0x9f4>
 800ec5a:	f001 0101 	and.w	r1, r1, #1
 800ec5e:	f1c1 0302 	rsb	r3, r1, #2
 800ec62:	9304      	str	r3, [sp, #16]
 800ec64:	b182      	cbz	r2, 800ec88 <__ieee754_pow+0xe8>
 800ec66:	e05f      	b.n	800ed28 <__ieee754_pow+0x188>
 800ec68:	2a00      	cmp	r2, #0
 800ec6a:	d15b      	bne.n	800ed24 <__ieee754_pow+0x184>
 800ec6c:	f1c3 0314 	rsb	r3, r3, #20
 800ec70:	fa48 f103 	asr.w	r1, r8, r3
 800ec74:	fa01 f303 	lsl.w	r3, r1, r3
 800ec78:	4543      	cmp	r3, r8
 800ec7a:	f040 8488 	bne.w	800f58e <__ieee754_pow+0x9ee>
 800ec7e:	f001 0101 	and.w	r1, r1, #1
 800ec82:	f1c1 0302 	rsb	r3, r1, #2
 800ec86:	9304      	str	r3, [sp, #16]
 800ec88:	4b5c      	ldr	r3, [pc, #368]	; (800edfc <__ieee754_pow+0x25c>)
 800ec8a:	4598      	cmp	r8, r3
 800ec8c:	d132      	bne.n	800ecf4 <__ieee754_pow+0x154>
 800ec8e:	f1b9 0f00 	cmp.w	r9, #0
 800ec92:	f280 8478 	bge.w	800f586 <__ieee754_pow+0x9e6>
 800ec96:	4959      	ldr	r1, [pc, #356]	; (800edfc <__ieee754_pow+0x25c>)
 800ec98:	4632      	mov	r2, r6
 800ec9a:	463b      	mov	r3, r7
 800ec9c:	2000      	movs	r0, #0
 800ec9e:	f7f1 fdd5 	bl	800084c <__aeabi_ddiv>
 800eca2:	e79c      	b.n	800ebde <__ieee754_pow+0x3e>
 800eca4:	2300      	movs	r3, #0
 800eca6:	9304      	str	r3, [sp, #16]
 800eca8:	2a00      	cmp	r2, #0
 800ecaa:	d13d      	bne.n	800ed28 <__ieee754_pow+0x188>
 800ecac:	4b51      	ldr	r3, [pc, #324]	; (800edf4 <__ieee754_pow+0x254>)
 800ecae:	4598      	cmp	r8, r3
 800ecb0:	d1ea      	bne.n	800ec88 <__ieee754_pow+0xe8>
 800ecb2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ecb6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ecba:	ea53 030a 	orrs.w	r3, r3, sl
 800ecbe:	f000 845a 	beq.w	800f576 <__ieee754_pow+0x9d6>
 800ecc2:	4b4f      	ldr	r3, [pc, #316]	; (800ee00 <__ieee754_pow+0x260>)
 800ecc4:	429c      	cmp	r4, r3
 800ecc6:	dd08      	ble.n	800ecda <__ieee754_pow+0x13a>
 800ecc8:	f1b9 0f00 	cmp.w	r9, #0
 800eccc:	f2c0 8457 	blt.w	800f57e <__ieee754_pow+0x9de>
 800ecd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ecd4:	e783      	b.n	800ebde <__ieee754_pow+0x3e>
 800ecd6:	2302      	movs	r3, #2
 800ecd8:	e7e5      	b.n	800eca6 <__ieee754_pow+0x106>
 800ecda:	f1b9 0f00 	cmp.w	r9, #0
 800ecde:	f04f 0000 	mov.w	r0, #0
 800ece2:	f04f 0100 	mov.w	r1, #0
 800ece6:	f6bf af7a 	bge.w	800ebde <__ieee754_pow+0x3e>
 800ecea:	e9dd 0300 	ldrd	r0, r3, [sp]
 800ecee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ecf2:	e774      	b.n	800ebde <__ieee754_pow+0x3e>
 800ecf4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800ecf8:	d106      	bne.n	800ed08 <__ieee754_pow+0x168>
 800ecfa:	4632      	mov	r2, r6
 800ecfc:	463b      	mov	r3, r7
 800ecfe:	4630      	mov	r0, r6
 800ed00:	4639      	mov	r1, r7
 800ed02:	f7f1 fc79 	bl	80005f8 <__aeabi_dmul>
 800ed06:	e76a      	b.n	800ebde <__ieee754_pow+0x3e>
 800ed08:	4b3e      	ldr	r3, [pc, #248]	; (800ee04 <__ieee754_pow+0x264>)
 800ed0a:	4599      	cmp	r9, r3
 800ed0c:	d10c      	bne.n	800ed28 <__ieee754_pow+0x188>
 800ed0e:	2d00      	cmp	r5, #0
 800ed10:	db0a      	blt.n	800ed28 <__ieee754_pow+0x188>
 800ed12:	ec47 6b10 	vmov	d0, r6, r7
 800ed16:	b009      	add	sp, #36	; 0x24
 800ed18:	ecbd 8b06 	vpop	{d8-d10}
 800ed1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed20:	f000 be7a 	b.w	800fa18 <__ieee754_sqrt>
 800ed24:	2300      	movs	r3, #0
 800ed26:	9304      	str	r3, [sp, #16]
 800ed28:	ec47 6b10 	vmov	d0, r6, r7
 800ed2c:	f001 fcb2 	bl	8010694 <fabs>
 800ed30:	ec51 0b10 	vmov	r0, r1, d0
 800ed34:	f1ba 0f00 	cmp.w	sl, #0
 800ed38:	d129      	bne.n	800ed8e <__ieee754_pow+0x1ee>
 800ed3a:	b124      	cbz	r4, 800ed46 <__ieee754_pow+0x1a6>
 800ed3c:	4b2f      	ldr	r3, [pc, #188]	; (800edfc <__ieee754_pow+0x25c>)
 800ed3e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800ed42:	429a      	cmp	r2, r3
 800ed44:	d123      	bne.n	800ed8e <__ieee754_pow+0x1ee>
 800ed46:	f1b9 0f00 	cmp.w	r9, #0
 800ed4a:	da05      	bge.n	800ed58 <__ieee754_pow+0x1b8>
 800ed4c:	4602      	mov	r2, r0
 800ed4e:	460b      	mov	r3, r1
 800ed50:	2000      	movs	r0, #0
 800ed52:	492a      	ldr	r1, [pc, #168]	; (800edfc <__ieee754_pow+0x25c>)
 800ed54:	f7f1 fd7a 	bl	800084c <__aeabi_ddiv>
 800ed58:	2d00      	cmp	r5, #0
 800ed5a:	f6bf af40 	bge.w	800ebde <__ieee754_pow+0x3e>
 800ed5e:	9b04      	ldr	r3, [sp, #16]
 800ed60:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ed64:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ed68:	4323      	orrs	r3, r4
 800ed6a:	d108      	bne.n	800ed7e <__ieee754_pow+0x1de>
 800ed6c:	4602      	mov	r2, r0
 800ed6e:	460b      	mov	r3, r1
 800ed70:	4610      	mov	r0, r2
 800ed72:	4619      	mov	r1, r3
 800ed74:	f7f1 fa88 	bl	8000288 <__aeabi_dsub>
 800ed78:	4602      	mov	r2, r0
 800ed7a:	460b      	mov	r3, r1
 800ed7c:	e78f      	b.n	800ec9e <__ieee754_pow+0xfe>
 800ed7e:	9b04      	ldr	r3, [sp, #16]
 800ed80:	2b01      	cmp	r3, #1
 800ed82:	f47f af2c 	bne.w	800ebde <__ieee754_pow+0x3e>
 800ed86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed8a:	4619      	mov	r1, r3
 800ed8c:	e727      	b.n	800ebde <__ieee754_pow+0x3e>
 800ed8e:	0feb      	lsrs	r3, r5, #31
 800ed90:	3b01      	subs	r3, #1
 800ed92:	9306      	str	r3, [sp, #24]
 800ed94:	9a06      	ldr	r2, [sp, #24]
 800ed96:	9b04      	ldr	r3, [sp, #16]
 800ed98:	4313      	orrs	r3, r2
 800ed9a:	d102      	bne.n	800eda2 <__ieee754_pow+0x202>
 800ed9c:	4632      	mov	r2, r6
 800ed9e:	463b      	mov	r3, r7
 800eda0:	e7e6      	b.n	800ed70 <__ieee754_pow+0x1d0>
 800eda2:	4b19      	ldr	r3, [pc, #100]	; (800ee08 <__ieee754_pow+0x268>)
 800eda4:	4598      	cmp	r8, r3
 800eda6:	f340 80fb 	ble.w	800efa0 <__ieee754_pow+0x400>
 800edaa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800edae:	4598      	cmp	r8, r3
 800edb0:	4b13      	ldr	r3, [pc, #76]	; (800ee00 <__ieee754_pow+0x260>)
 800edb2:	dd0c      	ble.n	800edce <__ieee754_pow+0x22e>
 800edb4:	429c      	cmp	r4, r3
 800edb6:	dc0f      	bgt.n	800edd8 <__ieee754_pow+0x238>
 800edb8:	f1b9 0f00 	cmp.w	r9, #0
 800edbc:	da0f      	bge.n	800edde <__ieee754_pow+0x23e>
 800edbe:	2000      	movs	r0, #0
 800edc0:	b009      	add	sp, #36	; 0x24
 800edc2:	ecbd 8b06 	vpop	{d8-d10}
 800edc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edca:	f001 bc5a 	b.w	8010682 <__math_oflow>
 800edce:	429c      	cmp	r4, r3
 800edd0:	dbf2      	blt.n	800edb8 <__ieee754_pow+0x218>
 800edd2:	4b0a      	ldr	r3, [pc, #40]	; (800edfc <__ieee754_pow+0x25c>)
 800edd4:	429c      	cmp	r4, r3
 800edd6:	dd19      	ble.n	800ee0c <__ieee754_pow+0x26c>
 800edd8:	f1b9 0f00 	cmp.w	r9, #0
 800eddc:	dcef      	bgt.n	800edbe <__ieee754_pow+0x21e>
 800edde:	2000      	movs	r0, #0
 800ede0:	b009      	add	sp, #36	; 0x24
 800ede2:	ecbd 8b06 	vpop	{d8-d10}
 800ede6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edea:	f001 bc41 	b.w	8010670 <__math_uflow>
 800edee:	bf00      	nop
 800edf0:	fff00000 	.word	0xfff00000
 800edf4:	7ff00000 	.word	0x7ff00000
 800edf8:	433fffff 	.word	0x433fffff
 800edfc:	3ff00000 	.word	0x3ff00000
 800ee00:	3fefffff 	.word	0x3fefffff
 800ee04:	3fe00000 	.word	0x3fe00000
 800ee08:	41e00000 	.word	0x41e00000
 800ee0c:	4b60      	ldr	r3, [pc, #384]	; (800ef90 <__ieee754_pow+0x3f0>)
 800ee0e:	2200      	movs	r2, #0
 800ee10:	f7f1 fa3a 	bl	8000288 <__aeabi_dsub>
 800ee14:	a354      	add	r3, pc, #336	; (adr r3, 800ef68 <__ieee754_pow+0x3c8>)
 800ee16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee1a:	4604      	mov	r4, r0
 800ee1c:	460d      	mov	r5, r1
 800ee1e:	f7f1 fbeb 	bl	80005f8 <__aeabi_dmul>
 800ee22:	a353      	add	r3, pc, #332	; (adr r3, 800ef70 <__ieee754_pow+0x3d0>)
 800ee24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee28:	4606      	mov	r6, r0
 800ee2a:	460f      	mov	r7, r1
 800ee2c:	4620      	mov	r0, r4
 800ee2e:	4629      	mov	r1, r5
 800ee30:	f7f1 fbe2 	bl	80005f8 <__aeabi_dmul>
 800ee34:	4b57      	ldr	r3, [pc, #348]	; (800ef94 <__ieee754_pow+0x3f4>)
 800ee36:	4682      	mov	sl, r0
 800ee38:	468b      	mov	fp, r1
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	4620      	mov	r0, r4
 800ee3e:	4629      	mov	r1, r5
 800ee40:	f7f1 fbda 	bl	80005f8 <__aeabi_dmul>
 800ee44:	4602      	mov	r2, r0
 800ee46:	460b      	mov	r3, r1
 800ee48:	a14b      	add	r1, pc, #300	; (adr r1, 800ef78 <__ieee754_pow+0x3d8>)
 800ee4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee4e:	f7f1 fa1b 	bl	8000288 <__aeabi_dsub>
 800ee52:	4622      	mov	r2, r4
 800ee54:	462b      	mov	r3, r5
 800ee56:	f7f1 fbcf 	bl	80005f8 <__aeabi_dmul>
 800ee5a:	4602      	mov	r2, r0
 800ee5c:	460b      	mov	r3, r1
 800ee5e:	2000      	movs	r0, #0
 800ee60:	494d      	ldr	r1, [pc, #308]	; (800ef98 <__ieee754_pow+0x3f8>)
 800ee62:	f7f1 fa11 	bl	8000288 <__aeabi_dsub>
 800ee66:	4622      	mov	r2, r4
 800ee68:	4680      	mov	r8, r0
 800ee6a:	4689      	mov	r9, r1
 800ee6c:	462b      	mov	r3, r5
 800ee6e:	4620      	mov	r0, r4
 800ee70:	4629      	mov	r1, r5
 800ee72:	f7f1 fbc1 	bl	80005f8 <__aeabi_dmul>
 800ee76:	4602      	mov	r2, r0
 800ee78:	460b      	mov	r3, r1
 800ee7a:	4640      	mov	r0, r8
 800ee7c:	4649      	mov	r1, r9
 800ee7e:	f7f1 fbbb 	bl	80005f8 <__aeabi_dmul>
 800ee82:	a33f      	add	r3, pc, #252	; (adr r3, 800ef80 <__ieee754_pow+0x3e0>)
 800ee84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee88:	f7f1 fbb6 	bl	80005f8 <__aeabi_dmul>
 800ee8c:	4602      	mov	r2, r0
 800ee8e:	460b      	mov	r3, r1
 800ee90:	4650      	mov	r0, sl
 800ee92:	4659      	mov	r1, fp
 800ee94:	f7f1 f9f8 	bl	8000288 <__aeabi_dsub>
 800ee98:	4602      	mov	r2, r0
 800ee9a:	460b      	mov	r3, r1
 800ee9c:	4680      	mov	r8, r0
 800ee9e:	4689      	mov	r9, r1
 800eea0:	4630      	mov	r0, r6
 800eea2:	4639      	mov	r1, r7
 800eea4:	f7f1 f9f2 	bl	800028c <__adddf3>
 800eea8:	2000      	movs	r0, #0
 800eeaa:	4632      	mov	r2, r6
 800eeac:	463b      	mov	r3, r7
 800eeae:	4604      	mov	r4, r0
 800eeb0:	460d      	mov	r5, r1
 800eeb2:	f7f1 f9e9 	bl	8000288 <__aeabi_dsub>
 800eeb6:	4602      	mov	r2, r0
 800eeb8:	460b      	mov	r3, r1
 800eeba:	4640      	mov	r0, r8
 800eebc:	4649      	mov	r1, r9
 800eebe:	f7f1 f9e3 	bl	8000288 <__aeabi_dsub>
 800eec2:	9b04      	ldr	r3, [sp, #16]
 800eec4:	9a06      	ldr	r2, [sp, #24]
 800eec6:	3b01      	subs	r3, #1
 800eec8:	4313      	orrs	r3, r2
 800eeca:	4682      	mov	sl, r0
 800eecc:	468b      	mov	fp, r1
 800eece:	f040 81e7 	bne.w	800f2a0 <__ieee754_pow+0x700>
 800eed2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ef88 <__ieee754_pow+0x3e8>
 800eed6:	eeb0 8a47 	vmov.f32	s16, s14
 800eeda:	eef0 8a67 	vmov.f32	s17, s15
 800eede:	e9dd 6700 	ldrd	r6, r7, [sp]
 800eee2:	2600      	movs	r6, #0
 800eee4:	4632      	mov	r2, r6
 800eee6:	463b      	mov	r3, r7
 800eee8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eeec:	f7f1 f9cc 	bl	8000288 <__aeabi_dsub>
 800eef0:	4622      	mov	r2, r4
 800eef2:	462b      	mov	r3, r5
 800eef4:	f7f1 fb80 	bl	80005f8 <__aeabi_dmul>
 800eef8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eefc:	4680      	mov	r8, r0
 800eefe:	4689      	mov	r9, r1
 800ef00:	4650      	mov	r0, sl
 800ef02:	4659      	mov	r1, fp
 800ef04:	f7f1 fb78 	bl	80005f8 <__aeabi_dmul>
 800ef08:	4602      	mov	r2, r0
 800ef0a:	460b      	mov	r3, r1
 800ef0c:	4640      	mov	r0, r8
 800ef0e:	4649      	mov	r1, r9
 800ef10:	f7f1 f9bc 	bl	800028c <__adddf3>
 800ef14:	4632      	mov	r2, r6
 800ef16:	463b      	mov	r3, r7
 800ef18:	4680      	mov	r8, r0
 800ef1a:	4689      	mov	r9, r1
 800ef1c:	4620      	mov	r0, r4
 800ef1e:	4629      	mov	r1, r5
 800ef20:	f7f1 fb6a 	bl	80005f8 <__aeabi_dmul>
 800ef24:	460b      	mov	r3, r1
 800ef26:	4604      	mov	r4, r0
 800ef28:	460d      	mov	r5, r1
 800ef2a:	4602      	mov	r2, r0
 800ef2c:	4649      	mov	r1, r9
 800ef2e:	4640      	mov	r0, r8
 800ef30:	f7f1 f9ac 	bl	800028c <__adddf3>
 800ef34:	4b19      	ldr	r3, [pc, #100]	; (800ef9c <__ieee754_pow+0x3fc>)
 800ef36:	4299      	cmp	r1, r3
 800ef38:	ec45 4b19 	vmov	d9, r4, r5
 800ef3c:	4606      	mov	r6, r0
 800ef3e:	460f      	mov	r7, r1
 800ef40:	468b      	mov	fp, r1
 800ef42:	f340 82f1 	ble.w	800f528 <__ieee754_pow+0x988>
 800ef46:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ef4a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ef4e:	4303      	orrs	r3, r0
 800ef50:	f000 81e4 	beq.w	800f31c <__ieee754_pow+0x77c>
 800ef54:	ec51 0b18 	vmov	r0, r1, d8
 800ef58:	2200      	movs	r2, #0
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	f7f1 fdbe 	bl	8000adc <__aeabi_dcmplt>
 800ef60:	3800      	subs	r0, #0
 800ef62:	bf18      	it	ne
 800ef64:	2001      	movne	r0, #1
 800ef66:	e72b      	b.n	800edc0 <__ieee754_pow+0x220>
 800ef68:	60000000 	.word	0x60000000
 800ef6c:	3ff71547 	.word	0x3ff71547
 800ef70:	f85ddf44 	.word	0xf85ddf44
 800ef74:	3e54ae0b 	.word	0x3e54ae0b
 800ef78:	55555555 	.word	0x55555555
 800ef7c:	3fd55555 	.word	0x3fd55555
 800ef80:	652b82fe 	.word	0x652b82fe
 800ef84:	3ff71547 	.word	0x3ff71547
 800ef88:	00000000 	.word	0x00000000
 800ef8c:	bff00000 	.word	0xbff00000
 800ef90:	3ff00000 	.word	0x3ff00000
 800ef94:	3fd00000 	.word	0x3fd00000
 800ef98:	3fe00000 	.word	0x3fe00000
 800ef9c:	408fffff 	.word	0x408fffff
 800efa0:	4bd5      	ldr	r3, [pc, #852]	; (800f2f8 <__ieee754_pow+0x758>)
 800efa2:	402b      	ands	r3, r5
 800efa4:	2200      	movs	r2, #0
 800efa6:	b92b      	cbnz	r3, 800efb4 <__ieee754_pow+0x414>
 800efa8:	4bd4      	ldr	r3, [pc, #848]	; (800f2fc <__ieee754_pow+0x75c>)
 800efaa:	f7f1 fb25 	bl	80005f8 <__aeabi_dmul>
 800efae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800efb2:	460c      	mov	r4, r1
 800efb4:	1523      	asrs	r3, r4, #20
 800efb6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800efba:	4413      	add	r3, r2
 800efbc:	9305      	str	r3, [sp, #20]
 800efbe:	4bd0      	ldr	r3, [pc, #832]	; (800f300 <__ieee754_pow+0x760>)
 800efc0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800efc4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800efc8:	429c      	cmp	r4, r3
 800efca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800efce:	dd08      	ble.n	800efe2 <__ieee754_pow+0x442>
 800efd0:	4bcc      	ldr	r3, [pc, #816]	; (800f304 <__ieee754_pow+0x764>)
 800efd2:	429c      	cmp	r4, r3
 800efd4:	f340 8162 	ble.w	800f29c <__ieee754_pow+0x6fc>
 800efd8:	9b05      	ldr	r3, [sp, #20]
 800efda:	3301      	adds	r3, #1
 800efdc:	9305      	str	r3, [sp, #20]
 800efde:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800efe2:	2400      	movs	r4, #0
 800efe4:	00e3      	lsls	r3, r4, #3
 800efe6:	9307      	str	r3, [sp, #28]
 800efe8:	4bc7      	ldr	r3, [pc, #796]	; (800f308 <__ieee754_pow+0x768>)
 800efea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800efee:	ed93 7b00 	vldr	d7, [r3]
 800eff2:	4629      	mov	r1, r5
 800eff4:	ec53 2b17 	vmov	r2, r3, d7
 800eff8:	eeb0 9a47 	vmov.f32	s18, s14
 800effc:	eef0 9a67 	vmov.f32	s19, s15
 800f000:	4682      	mov	sl, r0
 800f002:	f7f1 f941 	bl	8000288 <__aeabi_dsub>
 800f006:	4652      	mov	r2, sl
 800f008:	4606      	mov	r6, r0
 800f00a:	460f      	mov	r7, r1
 800f00c:	462b      	mov	r3, r5
 800f00e:	ec51 0b19 	vmov	r0, r1, d9
 800f012:	f7f1 f93b 	bl	800028c <__adddf3>
 800f016:	4602      	mov	r2, r0
 800f018:	460b      	mov	r3, r1
 800f01a:	2000      	movs	r0, #0
 800f01c:	49bb      	ldr	r1, [pc, #748]	; (800f30c <__ieee754_pow+0x76c>)
 800f01e:	f7f1 fc15 	bl	800084c <__aeabi_ddiv>
 800f022:	ec41 0b1a 	vmov	d10, r0, r1
 800f026:	4602      	mov	r2, r0
 800f028:	460b      	mov	r3, r1
 800f02a:	4630      	mov	r0, r6
 800f02c:	4639      	mov	r1, r7
 800f02e:	f7f1 fae3 	bl	80005f8 <__aeabi_dmul>
 800f032:	2300      	movs	r3, #0
 800f034:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f038:	9302      	str	r3, [sp, #8]
 800f03a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f03e:	46ab      	mov	fp, r5
 800f040:	106d      	asrs	r5, r5, #1
 800f042:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800f046:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800f04a:	ec41 0b18 	vmov	d8, r0, r1
 800f04e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800f052:	2200      	movs	r2, #0
 800f054:	4640      	mov	r0, r8
 800f056:	4649      	mov	r1, r9
 800f058:	4614      	mov	r4, r2
 800f05a:	461d      	mov	r5, r3
 800f05c:	f7f1 facc 	bl	80005f8 <__aeabi_dmul>
 800f060:	4602      	mov	r2, r0
 800f062:	460b      	mov	r3, r1
 800f064:	4630      	mov	r0, r6
 800f066:	4639      	mov	r1, r7
 800f068:	f7f1 f90e 	bl	8000288 <__aeabi_dsub>
 800f06c:	ec53 2b19 	vmov	r2, r3, d9
 800f070:	4606      	mov	r6, r0
 800f072:	460f      	mov	r7, r1
 800f074:	4620      	mov	r0, r4
 800f076:	4629      	mov	r1, r5
 800f078:	f7f1 f906 	bl	8000288 <__aeabi_dsub>
 800f07c:	4602      	mov	r2, r0
 800f07e:	460b      	mov	r3, r1
 800f080:	4650      	mov	r0, sl
 800f082:	4659      	mov	r1, fp
 800f084:	f7f1 f900 	bl	8000288 <__aeabi_dsub>
 800f088:	4642      	mov	r2, r8
 800f08a:	464b      	mov	r3, r9
 800f08c:	f7f1 fab4 	bl	80005f8 <__aeabi_dmul>
 800f090:	4602      	mov	r2, r0
 800f092:	460b      	mov	r3, r1
 800f094:	4630      	mov	r0, r6
 800f096:	4639      	mov	r1, r7
 800f098:	f7f1 f8f6 	bl	8000288 <__aeabi_dsub>
 800f09c:	ec53 2b1a 	vmov	r2, r3, d10
 800f0a0:	f7f1 faaa 	bl	80005f8 <__aeabi_dmul>
 800f0a4:	ec53 2b18 	vmov	r2, r3, d8
 800f0a8:	ec41 0b19 	vmov	d9, r0, r1
 800f0ac:	ec51 0b18 	vmov	r0, r1, d8
 800f0b0:	f7f1 faa2 	bl	80005f8 <__aeabi_dmul>
 800f0b4:	a37c      	add	r3, pc, #496	; (adr r3, 800f2a8 <__ieee754_pow+0x708>)
 800f0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ba:	4604      	mov	r4, r0
 800f0bc:	460d      	mov	r5, r1
 800f0be:	f7f1 fa9b 	bl	80005f8 <__aeabi_dmul>
 800f0c2:	a37b      	add	r3, pc, #492	; (adr r3, 800f2b0 <__ieee754_pow+0x710>)
 800f0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c8:	f7f1 f8e0 	bl	800028c <__adddf3>
 800f0cc:	4622      	mov	r2, r4
 800f0ce:	462b      	mov	r3, r5
 800f0d0:	f7f1 fa92 	bl	80005f8 <__aeabi_dmul>
 800f0d4:	a378      	add	r3, pc, #480	; (adr r3, 800f2b8 <__ieee754_pow+0x718>)
 800f0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0da:	f7f1 f8d7 	bl	800028c <__adddf3>
 800f0de:	4622      	mov	r2, r4
 800f0e0:	462b      	mov	r3, r5
 800f0e2:	f7f1 fa89 	bl	80005f8 <__aeabi_dmul>
 800f0e6:	a376      	add	r3, pc, #472	; (adr r3, 800f2c0 <__ieee754_pow+0x720>)
 800f0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ec:	f7f1 f8ce 	bl	800028c <__adddf3>
 800f0f0:	4622      	mov	r2, r4
 800f0f2:	462b      	mov	r3, r5
 800f0f4:	f7f1 fa80 	bl	80005f8 <__aeabi_dmul>
 800f0f8:	a373      	add	r3, pc, #460	; (adr r3, 800f2c8 <__ieee754_pow+0x728>)
 800f0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0fe:	f7f1 f8c5 	bl	800028c <__adddf3>
 800f102:	4622      	mov	r2, r4
 800f104:	462b      	mov	r3, r5
 800f106:	f7f1 fa77 	bl	80005f8 <__aeabi_dmul>
 800f10a:	a371      	add	r3, pc, #452	; (adr r3, 800f2d0 <__ieee754_pow+0x730>)
 800f10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f110:	f7f1 f8bc 	bl	800028c <__adddf3>
 800f114:	4622      	mov	r2, r4
 800f116:	4606      	mov	r6, r0
 800f118:	460f      	mov	r7, r1
 800f11a:	462b      	mov	r3, r5
 800f11c:	4620      	mov	r0, r4
 800f11e:	4629      	mov	r1, r5
 800f120:	f7f1 fa6a 	bl	80005f8 <__aeabi_dmul>
 800f124:	4602      	mov	r2, r0
 800f126:	460b      	mov	r3, r1
 800f128:	4630      	mov	r0, r6
 800f12a:	4639      	mov	r1, r7
 800f12c:	f7f1 fa64 	bl	80005f8 <__aeabi_dmul>
 800f130:	4642      	mov	r2, r8
 800f132:	4604      	mov	r4, r0
 800f134:	460d      	mov	r5, r1
 800f136:	464b      	mov	r3, r9
 800f138:	ec51 0b18 	vmov	r0, r1, d8
 800f13c:	f7f1 f8a6 	bl	800028c <__adddf3>
 800f140:	ec53 2b19 	vmov	r2, r3, d9
 800f144:	f7f1 fa58 	bl	80005f8 <__aeabi_dmul>
 800f148:	4622      	mov	r2, r4
 800f14a:	462b      	mov	r3, r5
 800f14c:	f7f1 f89e 	bl	800028c <__adddf3>
 800f150:	4642      	mov	r2, r8
 800f152:	4682      	mov	sl, r0
 800f154:	468b      	mov	fp, r1
 800f156:	464b      	mov	r3, r9
 800f158:	4640      	mov	r0, r8
 800f15a:	4649      	mov	r1, r9
 800f15c:	f7f1 fa4c 	bl	80005f8 <__aeabi_dmul>
 800f160:	4b6b      	ldr	r3, [pc, #428]	; (800f310 <__ieee754_pow+0x770>)
 800f162:	2200      	movs	r2, #0
 800f164:	4606      	mov	r6, r0
 800f166:	460f      	mov	r7, r1
 800f168:	f7f1 f890 	bl	800028c <__adddf3>
 800f16c:	4652      	mov	r2, sl
 800f16e:	465b      	mov	r3, fp
 800f170:	f7f1 f88c 	bl	800028c <__adddf3>
 800f174:	2000      	movs	r0, #0
 800f176:	4604      	mov	r4, r0
 800f178:	460d      	mov	r5, r1
 800f17a:	4602      	mov	r2, r0
 800f17c:	460b      	mov	r3, r1
 800f17e:	4640      	mov	r0, r8
 800f180:	4649      	mov	r1, r9
 800f182:	f7f1 fa39 	bl	80005f8 <__aeabi_dmul>
 800f186:	4b62      	ldr	r3, [pc, #392]	; (800f310 <__ieee754_pow+0x770>)
 800f188:	4680      	mov	r8, r0
 800f18a:	4689      	mov	r9, r1
 800f18c:	2200      	movs	r2, #0
 800f18e:	4620      	mov	r0, r4
 800f190:	4629      	mov	r1, r5
 800f192:	f7f1 f879 	bl	8000288 <__aeabi_dsub>
 800f196:	4632      	mov	r2, r6
 800f198:	463b      	mov	r3, r7
 800f19a:	f7f1 f875 	bl	8000288 <__aeabi_dsub>
 800f19e:	4602      	mov	r2, r0
 800f1a0:	460b      	mov	r3, r1
 800f1a2:	4650      	mov	r0, sl
 800f1a4:	4659      	mov	r1, fp
 800f1a6:	f7f1 f86f 	bl	8000288 <__aeabi_dsub>
 800f1aa:	ec53 2b18 	vmov	r2, r3, d8
 800f1ae:	f7f1 fa23 	bl	80005f8 <__aeabi_dmul>
 800f1b2:	4622      	mov	r2, r4
 800f1b4:	4606      	mov	r6, r0
 800f1b6:	460f      	mov	r7, r1
 800f1b8:	462b      	mov	r3, r5
 800f1ba:	ec51 0b19 	vmov	r0, r1, d9
 800f1be:	f7f1 fa1b 	bl	80005f8 <__aeabi_dmul>
 800f1c2:	4602      	mov	r2, r0
 800f1c4:	460b      	mov	r3, r1
 800f1c6:	4630      	mov	r0, r6
 800f1c8:	4639      	mov	r1, r7
 800f1ca:	f7f1 f85f 	bl	800028c <__adddf3>
 800f1ce:	4606      	mov	r6, r0
 800f1d0:	460f      	mov	r7, r1
 800f1d2:	4602      	mov	r2, r0
 800f1d4:	460b      	mov	r3, r1
 800f1d6:	4640      	mov	r0, r8
 800f1d8:	4649      	mov	r1, r9
 800f1da:	f7f1 f857 	bl	800028c <__adddf3>
 800f1de:	a33e      	add	r3, pc, #248	; (adr r3, 800f2d8 <__ieee754_pow+0x738>)
 800f1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1e4:	2000      	movs	r0, #0
 800f1e6:	4604      	mov	r4, r0
 800f1e8:	460d      	mov	r5, r1
 800f1ea:	f7f1 fa05 	bl	80005f8 <__aeabi_dmul>
 800f1ee:	4642      	mov	r2, r8
 800f1f0:	ec41 0b18 	vmov	d8, r0, r1
 800f1f4:	464b      	mov	r3, r9
 800f1f6:	4620      	mov	r0, r4
 800f1f8:	4629      	mov	r1, r5
 800f1fa:	f7f1 f845 	bl	8000288 <__aeabi_dsub>
 800f1fe:	4602      	mov	r2, r0
 800f200:	460b      	mov	r3, r1
 800f202:	4630      	mov	r0, r6
 800f204:	4639      	mov	r1, r7
 800f206:	f7f1 f83f 	bl	8000288 <__aeabi_dsub>
 800f20a:	a335      	add	r3, pc, #212	; (adr r3, 800f2e0 <__ieee754_pow+0x740>)
 800f20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f210:	f7f1 f9f2 	bl	80005f8 <__aeabi_dmul>
 800f214:	a334      	add	r3, pc, #208	; (adr r3, 800f2e8 <__ieee754_pow+0x748>)
 800f216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f21a:	4606      	mov	r6, r0
 800f21c:	460f      	mov	r7, r1
 800f21e:	4620      	mov	r0, r4
 800f220:	4629      	mov	r1, r5
 800f222:	f7f1 f9e9 	bl	80005f8 <__aeabi_dmul>
 800f226:	4602      	mov	r2, r0
 800f228:	460b      	mov	r3, r1
 800f22a:	4630      	mov	r0, r6
 800f22c:	4639      	mov	r1, r7
 800f22e:	f7f1 f82d 	bl	800028c <__adddf3>
 800f232:	9a07      	ldr	r2, [sp, #28]
 800f234:	4b37      	ldr	r3, [pc, #220]	; (800f314 <__ieee754_pow+0x774>)
 800f236:	4413      	add	r3, r2
 800f238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f23c:	f7f1 f826 	bl	800028c <__adddf3>
 800f240:	4682      	mov	sl, r0
 800f242:	9805      	ldr	r0, [sp, #20]
 800f244:	468b      	mov	fp, r1
 800f246:	f7f1 f96d 	bl	8000524 <__aeabi_i2d>
 800f24a:	9a07      	ldr	r2, [sp, #28]
 800f24c:	4b32      	ldr	r3, [pc, #200]	; (800f318 <__ieee754_pow+0x778>)
 800f24e:	4413      	add	r3, r2
 800f250:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f254:	4606      	mov	r6, r0
 800f256:	460f      	mov	r7, r1
 800f258:	4652      	mov	r2, sl
 800f25a:	465b      	mov	r3, fp
 800f25c:	ec51 0b18 	vmov	r0, r1, d8
 800f260:	f7f1 f814 	bl	800028c <__adddf3>
 800f264:	4642      	mov	r2, r8
 800f266:	464b      	mov	r3, r9
 800f268:	f7f1 f810 	bl	800028c <__adddf3>
 800f26c:	4632      	mov	r2, r6
 800f26e:	463b      	mov	r3, r7
 800f270:	f7f1 f80c 	bl	800028c <__adddf3>
 800f274:	2000      	movs	r0, #0
 800f276:	4632      	mov	r2, r6
 800f278:	463b      	mov	r3, r7
 800f27a:	4604      	mov	r4, r0
 800f27c:	460d      	mov	r5, r1
 800f27e:	f7f1 f803 	bl	8000288 <__aeabi_dsub>
 800f282:	4642      	mov	r2, r8
 800f284:	464b      	mov	r3, r9
 800f286:	f7f0 ffff 	bl	8000288 <__aeabi_dsub>
 800f28a:	ec53 2b18 	vmov	r2, r3, d8
 800f28e:	f7f0 fffb 	bl	8000288 <__aeabi_dsub>
 800f292:	4602      	mov	r2, r0
 800f294:	460b      	mov	r3, r1
 800f296:	4650      	mov	r0, sl
 800f298:	4659      	mov	r1, fp
 800f29a:	e610      	b.n	800eebe <__ieee754_pow+0x31e>
 800f29c:	2401      	movs	r4, #1
 800f29e:	e6a1      	b.n	800efe4 <__ieee754_pow+0x444>
 800f2a0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800f2f0 <__ieee754_pow+0x750>
 800f2a4:	e617      	b.n	800eed6 <__ieee754_pow+0x336>
 800f2a6:	bf00      	nop
 800f2a8:	4a454eef 	.word	0x4a454eef
 800f2ac:	3fca7e28 	.word	0x3fca7e28
 800f2b0:	93c9db65 	.word	0x93c9db65
 800f2b4:	3fcd864a 	.word	0x3fcd864a
 800f2b8:	a91d4101 	.word	0xa91d4101
 800f2bc:	3fd17460 	.word	0x3fd17460
 800f2c0:	518f264d 	.word	0x518f264d
 800f2c4:	3fd55555 	.word	0x3fd55555
 800f2c8:	db6fabff 	.word	0xdb6fabff
 800f2cc:	3fdb6db6 	.word	0x3fdb6db6
 800f2d0:	33333303 	.word	0x33333303
 800f2d4:	3fe33333 	.word	0x3fe33333
 800f2d8:	e0000000 	.word	0xe0000000
 800f2dc:	3feec709 	.word	0x3feec709
 800f2e0:	dc3a03fd 	.word	0xdc3a03fd
 800f2e4:	3feec709 	.word	0x3feec709
 800f2e8:	145b01f5 	.word	0x145b01f5
 800f2ec:	be3e2fe0 	.word	0xbe3e2fe0
 800f2f0:	00000000 	.word	0x00000000
 800f2f4:	3ff00000 	.word	0x3ff00000
 800f2f8:	7ff00000 	.word	0x7ff00000
 800f2fc:	43400000 	.word	0x43400000
 800f300:	0003988e 	.word	0x0003988e
 800f304:	000bb679 	.word	0x000bb679
 800f308:	08010ef8 	.word	0x08010ef8
 800f30c:	3ff00000 	.word	0x3ff00000
 800f310:	40080000 	.word	0x40080000
 800f314:	08010f18 	.word	0x08010f18
 800f318:	08010f08 	.word	0x08010f08
 800f31c:	a3b5      	add	r3, pc, #724	; (adr r3, 800f5f4 <__ieee754_pow+0xa54>)
 800f31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f322:	4640      	mov	r0, r8
 800f324:	4649      	mov	r1, r9
 800f326:	f7f0 ffb1 	bl	800028c <__adddf3>
 800f32a:	4622      	mov	r2, r4
 800f32c:	ec41 0b1a 	vmov	d10, r0, r1
 800f330:	462b      	mov	r3, r5
 800f332:	4630      	mov	r0, r6
 800f334:	4639      	mov	r1, r7
 800f336:	f7f0 ffa7 	bl	8000288 <__aeabi_dsub>
 800f33a:	4602      	mov	r2, r0
 800f33c:	460b      	mov	r3, r1
 800f33e:	ec51 0b1a 	vmov	r0, r1, d10
 800f342:	f7f1 fbe9 	bl	8000b18 <__aeabi_dcmpgt>
 800f346:	2800      	cmp	r0, #0
 800f348:	f47f ae04 	bne.w	800ef54 <__ieee754_pow+0x3b4>
 800f34c:	4aa4      	ldr	r2, [pc, #656]	; (800f5e0 <__ieee754_pow+0xa40>)
 800f34e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f352:	4293      	cmp	r3, r2
 800f354:	f340 8108 	ble.w	800f568 <__ieee754_pow+0x9c8>
 800f358:	151b      	asrs	r3, r3, #20
 800f35a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800f35e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800f362:	fa4a f303 	asr.w	r3, sl, r3
 800f366:	445b      	add	r3, fp
 800f368:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f36c:	4e9d      	ldr	r6, [pc, #628]	; (800f5e4 <__ieee754_pow+0xa44>)
 800f36e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800f372:	4116      	asrs	r6, r2
 800f374:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800f378:	2000      	movs	r0, #0
 800f37a:	ea23 0106 	bic.w	r1, r3, r6
 800f37e:	f1c2 0214 	rsb	r2, r2, #20
 800f382:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800f386:	fa4a fa02 	asr.w	sl, sl, r2
 800f38a:	f1bb 0f00 	cmp.w	fp, #0
 800f38e:	4602      	mov	r2, r0
 800f390:	460b      	mov	r3, r1
 800f392:	4620      	mov	r0, r4
 800f394:	4629      	mov	r1, r5
 800f396:	bfb8      	it	lt
 800f398:	f1ca 0a00 	rsblt	sl, sl, #0
 800f39c:	f7f0 ff74 	bl	8000288 <__aeabi_dsub>
 800f3a0:	ec41 0b19 	vmov	d9, r0, r1
 800f3a4:	4642      	mov	r2, r8
 800f3a6:	464b      	mov	r3, r9
 800f3a8:	ec51 0b19 	vmov	r0, r1, d9
 800f3ac:	f7f0 ff6e 	bl	800028c <__adddf3>
 800f3b0:	a37b      	add	r3, pc, #492	; (adr r3, 800f5a0 <__ieee754_pow+0xa00>)
 800f3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b6:	2000      	movs	r0, #0
 800f3b8:	4604      	mov	r4, r0
 800f3ba:	460d      	mov	r5, r1
 800f3bc:	f7f1 f91c 	bl	80005f8 <__aeabi_dmul>
 800f3c0:	ec53 2b19 	vmov	r2, r3, d9
 800f3c4:	4606      	mov	r6, r0
 800f3c6:	460f      	mov	r7, r1
 800f3c8:	4620      	mov	r0, r4
 800f3ca:	4629      	mov	r1, r5
 800f3cc:	f7f0 ff5c 	bl	8000288 <__aeabi_dsub>
 800f3d0:	4602      	mov	r2, r0
 800f3d2:	460b      	mov	r3, r1
 800f3d4:	4640      	mov	r0, r8
 800f3d6:	4649      	mov	r1, r9
 800f3d8:	f7f0 ff56 	bl	8000288 <__aeabi_dsub>
 800f3dc:	a372      	add	r3, pc, #456	; (adr r3, 800f5a8 <__ieee754_pow+0xa08>)
 800f3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3e2:	f7f1 f909 	bl	80005f8 <__aeabi_dmul>
 800f3e6:	a372      	add	r3, pc, #456	; (adr r3, 800f5b0 <__ieee754_pow+0xa10>)
 800f3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3ec:	4680      	mov	r8, r0
 800f3ee:	4689      	mov	r9, r1
 800f3f0:	4620      	mov	r0, r4
 800f3f2:	4629      	mov	r1, r5
 800f3f4:	f7f1 f900 	bl	80005f8 <__aeabi_dmul>
 800f3f8:	4602      	mov	r2, r0
 800f3fa:	460b      	mov	r3, r1
 800f3fc:	4640      	mov	r0, r8
 800f3fe:	4649      	mov	r1, r9
 800f400:	f7f0 ff44 	bl	800028c <__adddf3>
 800f404:	4604      	mov	r4, r0
 800f406:	460d      	mov	r5, r1
 800f408:	4602      	mov	r2, r0
 800f40a:	460b      	mov	r3, r1
 800f40c:	4630      	mov	r0, r6
 800f40e:	4639      	mov	r1, r7
 800f410:	f7f0 ff3c 	bl	800028c <__adddf3>
 800f414:	4632      	mov	r2, r6
 800f416:	463b      	mov	r3, r7
 800f418:	4680      	mov	r8, r0
 800f41a:	4689      	mov	r9, r1
 800f41c:	f7f0 ff34 	bl	8000288 <__aeabi_dsub>
 800f420:	4602      	mov	r2, r0
 800f422:	460b      	mov	r3, r1
 800f424:	4620      	mov	r0, r4
 800f426:	4629      	mov	r1, r5
 800f428:	f7f0 ff2e 	bl	8000288 <__aeabi_dsub>
 800f42c:	4642      	mov	r2, r8
 800f42e:	4606      	mov	r6, r0
 800f430:	460f      	mov	r7, r1
 800f432:	464b      	mov	r3, r9
 800f434:	4640      	mov	r0, r8
 800f436:	4649      	mov	r1, r9
 800f438:	f7f1 f8de 	bl	80005f8 <__aeabi_dmul>
 800f43c:	a35e      	add	r3, pc, #376	; (adr r3, 800f5b8 <__ieee754_pow+0xa18>)
 800f43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f442:	4604      	mov	r4, r0
 800f444:	460d      	mov	r5, r1
 800f446:	f7f1 f8d7 	bl	80005f8 <__aeabi_dmul>
 800f44a:	a35d      	add	r3, pc, #372	; (adr r3, 800f5c0 <__ieee754_pow+0xa20>)
 800f44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f450:	f7f0 ff1a 	bl	8000288 <__aeabi_dsub>
 800f454:	4622      	mov	r2, r4
 800f456:	462b      	mov	r3, r5
 800f458:	f7f1 f8ce 	bl	80005f8 <__aeabi_dmul>
 800f45c:	a35a      	add	r3, pc, #360	; (adr r3, 800f5c8 <__ieee754_pow+0xa28>)
 800f45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f462:	f7f0 ff13 	bl	800028c <__adddf3>
 800f466:	4622      	mov	r2, r4
 800f468:	462b      	mov	r3, r5
 800f46a:	f7f1 f8c5 	bl	80005f8 <__aeabi_dmul>
 800f46e:	a358      	add	r3, pc, #352	; (adr r3, 800f5d0 <__ieee754_pow+0xa30>)
 800f470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f474:	f7f0 ff08 	bl	8000288 <__aeabi_dsub>
 800f478:	4622      	mov	r2, r4
 800f47a:	462b      	mov	r3, r5
 800f47c:	f7f1 f8bc 	bl	80005f8 <__aeabi_dmul>
 800f480:	a355      	add	r3, pc, #340	; (adr r3, 800f5d8 <__ieee754_pow+0xa38>)
 800f482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f486:	f7f0 ff01 	bl	800028c <__adddf3>
 800f48a:	4622      	mov	r2, r4
 800f48c:	462b      	mov	r3, r5
 800f48e:	f7f1 f8b3 	bl	80005f8 <__aeabi_dmul>
 800f492:	4602      	mov	r2, r0
 800f494:	460b      	mov	r3, r1
 800f496:	4640      	mov	r0, r8
 800f498:	4649      	mov	r1, r9
 800f49a:	f7f0 fef5 	bl	8000288 <__aeabi_dsub>
 800f49e:	4604      	mov	r4, r0
 800f4a0:	460d      	mov	r5, r1
 800f4a2:	4602      	mov	r2, r0
 800f4a4:	460b      	mov	r3, r1
 800f4a6:	4640      	mov	r0, r8
 800f4a8:	4649      	mov	r1, r9
 800f4aa:	f7f1 f8a5 	bl	80005f8 <__aeabi_dmul>
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	ec41 0b19 	vmov	d9, r0, r1
 800f4b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f4b8:	4620      	mov	r0, r4
 800f4ba:	4629      	mov	r1, r5
 800f4bc:	f7f0 fee4 	bl	8000288 <__aeabi_dsub>
 800f4c0:	4602      	mov	r2, r0
 800f4c2:	460b      	mov	r3, r1
 800f4c4:	ec51 0b19 	vmov	r0, r1, d9
 800f4c8:	f7f1 f9c0 	bl	800084c <__aeabi_ddiv>
 800f4cc:	4632      	mov	r2, r6
 800f4ce:	4604      	mov	r4, r0
 800f4d0:	460d      	mov	r5, r1
 800f4d2:	463b      	mov	r3, r7
 800f4d4:	4640      	mov	r0, r8
 800f4d6:	4649      	mov	r1, r9
 800f4d8:	f7f1 f88e 	bl	80005f8 <__aeabi_dmul>
 800f4dc:	4632      	mov	r2, r6
 800f4de:	463b      	mov	r3, r7
 800f4e0:	f7f0 fed4 	bl	800028c <__adddf3>
 800f4e4:	4602      	mov	r2, r0
 800f4e6:	460b      	mov	r3, r1
 800f4e8:	4620      	mov	r0, r4
 800f4ea:	4629      	mov	r1, r5
 800f4ec:	f7f0 fecc 	bl	8000288 <__aeabi_dsub>
 800f4f0:	4642      	mov	r2, r8
 800f4f2:	464b      	mov	r3, r9
 800f4f4:	f7f0 fec8 	bl	8000288 <__aeabi_dsub>
 800f4f8:	460b      	mov	r3, r1
 800f4fa:	4602      	mov	r2, r0
 800f4fc:	493a      	ldr	r1, [pc, #232]	; (800f5e8 <__ieee754_pow+0xa48>)
 800f4fe:	2000      	movs	r0, #0
 800f500:	f7f0 fec2 	bl	8000288 <__aeabi_dsub>
 800f504:	ec41 0b10 	vmov	d0, r0, r1
 800f508:	ee10 3a90 	vmov	r3, s1
 800f50c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f510:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f514:	da2b      	bge.n	800f56e <__ieee754_pow+0x9ce>
 800f516:	4650      	mov	r0, sl
 800f518:	f001 f952 	bl	80107c0 <scalbn>
 800f51c:	ec51 0b10 	vmov	r0, r1, d0
 800f520:	ec53 2b18 	vmov	r2, r3, d8
 800f524:	f7ff bbed 	b.w	800ed02 <__ieee754_pow+0x162>
 800f528:	4b30      	ldr	r3, [pc, #192]	; (800f5ec <__ieee754_pow+0xa4c>)
 800f52a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f52e:	429e      	cmp	r6, r3
 800f530:	f77f af0c 	ble.w	800f34c <__ieee754_pow+0x7ac>
 800f534:	4b2e      	ldr	r3, [pc, #184]	; (800f5f0 <__ieee754_pow+0xa50>)
 800f536:	440b      	add	r3, r1
 800f538:	4303      	orrs	r3, r0
 800f53a:	d009      	beq.n	800f550 <__ieee754_pow+0x9b0>
 800f53c:	ec51 0b18 	vmov	r0, r1, d8
 800f540:	2200      	movs	r2, #0
 800f542:	2300      	movs	r3, #0
 800f544:	f7f1 faca 	bl	8000adc <__aeabi_dcmplt>
 800f548:	3800      	subs	r0, #0
 800f54a:	bf18      	it	ne
 800f54c:	2001      	movne	r0, #1
 800f54e:	e447      	b.n	800ede0 <__ieee754_pow+0x240>
 800f550:	4622      	mov	r2, r4
 800f552:	462b      	mov	r3, r5
 800f554:	f7f0 fe98 	bl	8000288 <__aeabi_dsub>
 800f558:	4642      	mov	r2, r8
 800f55a:	464b      	mov	r3, r9
 800f55c:	f7f1 fad2 	bl	8000b04 <__aeabi_dcmpge>
 800f560:	2800      	cmp	r0, #0
 800f562:	f43f aef3 	beq.w	800f34c <__ieee754_pow+0x7ac>
 800f566:	e7e9      	b.n	800f53c <__ieee754_pow+0x99c>
 800f568:	f04f 0a00 	mov.w	sl, #0
 800f56c:	e71a      	b.n	800f3a4 <__ieee754_pow+0x804>
 800f56e:	ec51 0b10 	vmov	r0, r1, d0
 800f572:	4619      	mov	r1, r3
 800f574:	e7d4      	b.n	800f520 <__ieee754_pow+0x980>
 800f576:	491c      	ldr	r1, [pc, #112]	; (800f5e8 <__ieee754_pow+0xa48>)
 800f578:	2000      	movs	r0, #0
 800f57a:	f7ff bb30 	b.w	800ebde <__ieee754_pow+0x3e>
 800f57e:	2000      	movs	r0, #0
 800f580:	2100      	movs	r1, #0
 800f582:	f7ff bb2c 	b.w	800ebde <__ieee754_pow+0x3e>
 800f586:	4630      	mov	r0, r6
 800f588:	4639      	mov	r1, r7
 800f58a:	f7ff bb28 	b.w	800ebde <__ieee754_pow+0x3e>
 800f58e:	9204      	str	r2, [sp, #16]
 800f590:	f7ff bb7a 	b.w	800ec88 <__ieee754_pow+0xe8>
 800f594:	2300      	movs	r3, #0
 800f596:	f7ff bb64 	b.w	800ec62 <__ieee754_pow+0xc2>
 800f59a:	bf00      	nop
 800f59c:	f3af 8000 	nop.w
 800f5a0:	00000000 	.word	0x00000000
 800f5a4:	3fe62e43 	.word	0x3fe62e43
 800f5a8:	fefa39ef 	.word	0xfefa39ef
 800f5ac:	3fe62e42 	.word	0x3fe62e42
 800f5b0:	0ca86c39 	.word	0x0ca86c39
 800f5b4:	be205c61 	.word	0xbe205c61
 800f5b8:	72bea4d0 	.word	0x72bea4d0
 800f5bc:	3e663769 	.word	0x3e663769
 800f5c0:	c5d26bf1 	.word	0xc5d26bf1
 800f5c4:	3ebbbd41 	.word	0x3ebbbd41
 800f5c8:	af25de2c 	.word	0xaf25de2c
 800f5cc:	3f11566a 	.word	0x3f11566a
 800f5d0:	16bebd93 	.word	0x16bebd93
 800f5d4:	3f66c16c 	.word	0x3f66c16c
 800f5d8:	5555553e 	.word	0x5555553e
 800f5dc:	3fc55555 	.word	0x3fc55555
 800f5e0:	3fe00000 	.word	0x3fe00000
 800f5e4:	000fffff 	.word	0x000fffff
 800f5e8:	3ff00000 	.word	0x3ff00000
 800f5ec:	4090cbff 	.word	0x4090cbff
 800f5f0:	3f6f3400 	.word	0x3f6f3400
 800f5f4:	652b82fe 	.word	0x652b82fe
 800f5f8:	3c971547 	.word	0x3c971547
 800f5fc:	00000000 	.word	0x00000000

0800f600 <__ieee754_rem_pio2>:
 800f600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f604:	ed2d 8b02 	vpush	{d8}
 800f608:	ec55 4b10 	vmov	r4, r5, d0
 800f60c:	4bca      	ldr	r3, [pc, #808]	; (800f938 <__ieee754_rem_pio2+0x338>)
 800f60e:	b08b      	sub	sp, #44	; 0x2c
 800f610:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800f614:	4598      	cmp	r8, r3
 800f616:	4682      	mov	sl, r0
 800f618:	9502      	str	r5, [sp, #8]
 800f61a:	dc08      	bgt.n	800f62e <__ieee754_rem_pio2+0x2e>
 800f61c:	2200      	movs	r2, #0
 800f61e:	2300      	movs	r3, #0
 800f620:	ed80 0b00 	vstr	d0, [r0]
 800f624:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f628:	f04f 0b00 	mov.w	fp, #0
 800f62c:	e028      	b.n	800f680 <__ieee754_rem_pio2+0x80>
 800f62e:	4bc3      	ldr	r3, [pc, #780]	; (800f93c <__ieee754_rem_pio2+0x33c>)
 800f630:	4598      	cmp	r8, r3
 800f632:	dc78      	bgt.n	800f726 <__ieee754_rem_pio2+0x126>
 800f634:	9b02      	ldr	r3, [sp, #8]
 800f636:	4ec2      	ldr	r6, [pc, #776]	; (800f940 <__ieee754_rem_pio2+0x340>)
 800f638:	2b00      	cmp	r3, #0
 800f63a:	ee10 0a10 	vmov	r0, s0
 800f63e:	a3b0      	add	r3, pc, #704	; (adr r3, 800f900 <__ieee754_rem_pio2+0x300>)
 800f640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f644:	4629      	mov	r1, r5
 800f646:	dd39      	ble.n	800f6bc <__ieee754_rem_pio2+0xbc>
 800f648:	f7f0 fe1e 	bl	8000288 <__aeabi_dsub>
 800f64c:	45b0      	cmp	r8, r6
 800f64e:	4604      	mov	r4, r0
 800f650:	460d      	mov	r5, r1
 800f652:	d01b      	beq.n	800f68c <__ieee754_rem_pio2+0x8c>
 800f654:	a3ac      	add	r3, pc, #688	; (adr r3, 800f908 <__ieee754_rem_pio2+0x308>)
 800f656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f65a:	f7f0 fe15 	bl	8000288 <__aeabi_dsub>
 800f65e:	4602      	mov	r2, r0
 800f660:	460b      	mov	r3, r1
 800f662:	e9ca 2300 	strd	r2, r3, [sl]
 800f666:	4620      	mov	r0, r4
 800f668:	4629      	mov	r1, r5
 800f66a:	f7f0 fe0d 	bl	8000288 <__aeabi_dsub>
 800f66e:	a3a6      	add	r3, pc, #664	; (adr r3, 800f908 <__ieee754_rem_pio2+0x308>)
 800f670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f674:	f7f0 fe08 	bl	8000288 <__aeabi_dsub>
 800f678:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f67c:	f04f 0b01 	mov.w	fp, #1
 800f680:	4658      	mov	r0, fp
 800f682:	b00b      	add	sp, #44	; 0x2c
 800f684:	ecbd 8b02 	vpop	{d8}
 800f688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f68c:	a3a0      	add	r3, pc, #640	; (adr r3, 800f910 <__ieee754_rem_pio2+0x310>)
 800f68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f692:	f7f0 fdf9 	bl	8000288 <__aeabi_dsub>
 800f696:	a3a0      	add	r3, pc, #640	; (adr r3, 800f918 <__ieee754_rem_pio2+0x318>)
 800f698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f69c:	4604      	mov	r4, r0
 800f69e:	460d      	mov	r5, r1
 800f6a0:	f7f0 fdf2 	bl	8000288 <__aeabi_dsub>
 800f6a4:	4602      	mov	r2, r0
 800f6a6:	460b      	mov	r3, r1
 800f6a8:	e9ca 2300 	strd	r2, r3, [sl]
 800f6ac:	4620      	mov	r0, r4
 800f6ae:	4629      	mov	r1, r5
 800f6b0:	f7f0 fdea 	bl	8000288 <__aeabi_dsub>
 800f6b4:	a398      	add	r3, pc, #608	; (adr r3, 800f918 <__ieee754_rem_pio2+0x318>)
 800f6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ba:	e7db      	b.n	800f674 <__ieee754_rem_pio2+0x74>
 800f6bc:	f7f0 fde6 	bl	800028c <__adddf3>
 800f6c0:	45b0      	cmp	r8, r6
 800f6c2:	4604      	mov	r4, r0
 800f6c4:	460d      	mov	r5, r1
 800f6c6:	d016      	beq.n	800f6f6 <__ieee754_rem_pio2+0xf6>
 800f6c8:	a38f      	add	r3, pc, #572	; (adr r3, 800f908 <__ieee754_rem_pio2+0x308>)
 800f6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ce:	f7f0 fddd 	bl	800028c <__adddf3>
 800f6d2:	4602      	mov	r2, r0
 800f6d4:	460b      	mov	r3, r1
 800f6d6:	e9ca 2300 	strd	r2, r3, [sl]
 800f6da:	4620      	mov	r0, r4
 800f6dc:	4629      	mov	r1, r5
 800f6de:	f7f0 fdd3 	bl	8000288 <__aeabi_dsub>
 800f6e2:	a389      	add	r3, pc, #548	; (adr r3, 800f908 <__ieee754_rem_pio2+0x308>)
 800f6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6e8:	f7f0 fdd0 	bl	800028c <__adddf3>
 800f6ec:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800f6f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f6f4:	e7c4      	b.n	800f680 <__ieee754_rem_pio2+0x80>
 800f6f6:	a386      	add	r3, pc, #536	; (adr r3, 800f910 <__ieee754_rem_pio2+0x310>)
 800f6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6fc:	f7f0 fdc6 	bl	800028c <__adddf3>
 800f700:	a385      	add	r3, pc, #532	; (adr r3, 800f918 <__ieee754_rem_pio2+0x318>)
 800f702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f706:	4604      	mov	r4, r0
 800f708:	460d      	mov	r5, r1
 800f70a:	f7f0 fdbf 	bl	800028c <__adddf3>
 800f70e:	4602      	mov	r2, r0
 800f710:	460b      	mov	r3, r1
 800f712:	e9ca 2300 	strd	r2, r3, [sl]
 800f716:	4620      	mov	r0, r4
 800f718:	4629      	mov	r1, r5
 800f71a:	f7f0 fdb5 	bl	8000288 <__aeabi_dsub>
 800f71e:	a37e      	add	r3, pc, #504	; (adr r3, 800f918 <__ieee754_rem_pio2+0x318>)
 800f720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f724:	e7e0      	b.n	800f6e8 <__ieee754_rem_pio2+0xe8>
 800f726:	4b87      	ldr	r3, [pc, #540]	; (800f944 <__ieee754_rem_pio2+0x344>)
 800f728:	4598      	cmp	r8, r3
 800f72a:	f300 80d9 	bgt.w	800f8e0 <__ieee754_rem_pio2+0x2e0>
 800f72e:	f000 ffb1 	bl	8010694 <fabs>
 800f732:	ec55 4b10 	vmov	r4, r5, d0
 800f736:	ee10 0a10 	vmov	r0, s0
 800f73a:	a379      	add	r3, pc, #484	; (adr r3, 800f920 <__ieee754_rem_pio2+0x320>)
 800f73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f740:	4629      	mov	r1, r5
 800f742:	f7f0 ff59 	bl	80005f8 <__aeabi_dmul>
 800f746:	4b80      	ldr	r3, [pc, #512]	; (800f948 <__ieee754_rem_pio2+0x348>)
 800f748:	2200      	movs	r2, #0
 800f74a:	f7f0 fd9f 	bl	800028c <__adddf3>
 800f74e:	f7f1 fa03 	bl	8000b58 <__aeabi_d2iz>
 800f752:	4683      	mov	fp, r0
 800f754:	f7f0 fee6 	bl	8000524 <__aeabi_i2d>
 800f758:	4602      	mov	r2, r0
 800f75a:	460b      	mov	r3, r1
 800f75c:	ec43 2b18 	vmov	d8, r2, r3
 800f760:	a367      	add	r3, pc, #412	; (adr r3, 800f900 <__ieee754_rem_pio2+0x300>)
 800f762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f766:	f7f0 ff47 	bl	80005f8 <__aeabi_dmul>
 800f76a:	4602      	mov	r2, r0
 800f76c:	460b      	mov	r3, r1
 800f76e:	4620      	mov	r0, r4
 800f770:	4629      	mov	r1, r5
 800f772:	f7f0 fd89 	bl	8000288 <__aeabi_dsub>
 800f776:	a364      	add	r3, pc, #400	; (adr r3, 800f908 <__ieee754_rem_pio2+0x308>)
 800f778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f77c:	4606      	mov	r6, r0
 800f77e:	460f      	mov	r7, r1
 800f780:	ec51 0b18 	vmov	r0, r1, d8
 800f784:	f7f0 ff38 	bl	80005f8 <__aeabi_dmul>
 800f788:	f1bb 0f1f 	cmp.w	fp, #31
 800f78c:	4604      	mov	r4, r0
 800f78e:	460d      	mov	r5, r1
 800f790:	dc0d      	bgt.n	800f7ae <__ieee754_rem_pio2+0x1ae>
 800f792:	4b6e      	ldr	r3, [pc, #440]	; (800f94c <__ieee754_rem_pio2+0x34c>)
 800f794:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800f798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f79c:	4543      	cmp	r3, r8
 800f79e:	d006      	beq.n	800f7ae <__ieee754_rem_pio2+0x1ae>
 800f7a0:	4622      	mov	r2, r4
 800f7a2:	462b      	mov	r3, r5
 800f7a4:	4630      	mov	r0, r6
 800f7a6:	4639      	mov	r1, r7
 800f7a8:	f7f0 fd6e 	bl	8000288 <__aeabi_dsub>
 800f7ac:	e00f      	b.n	800f7ce <__ieee754_rem_pio2+0x1ce>
 800f7ae:	462b      	mov	r3, r5
 800f7b0:	4622      	mov	r2, r4
 800f7b2:	4630      	mov	r0, r6
 800f7b4:	4639      	mov	r1, r7
 800f7b6:	f7f0 fd67 	bl	8000288 <__aeabi_dsub>
 800f7ba:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f7be:	9303      	str	r3, [sp, #12]
 800f7c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f7c4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800f7c8:	f1b8 0f10 	cmp.w	r8, #16
 800f7cc:	dc02      	bgt.n	800f7d4 <__ieee754_rem_pio2+0x1d4>
 800f7ce:	e9ca 0100 	strd	r0, r1, [sl]
 800f7d2:	e039      	b.n	800f848 <__ieee754_rem_pio2+0x248>
 800f7d4:	a34e      	add	r3, pc, #312	; (adr r3, 800f910 <__ieee754_rem_pio2+0x310>)
 800f7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7da:	ec51 0b18 	vmov	r0, r1, d8
 800f7de:	f7f0 ff0b 	bl	80005f8 <__aeabi_dmul>
 800f7e2:	4604      	mov	r4, r0
 800f7e4:	460d      	mov	r5, r1
 800f7e6:	4602      	mov	r2, r0
 800f7e8:	460b      	mov	r3, r1
 800f7ea:	4630      	mov	r0, r6
 800f7ec:	4639      	mov	r1, r7
 800f7ee:	f7f0 fd4b 	bl	8000288 <__aeabi_dsub>
 800f7f2:	4602      	mov	r2, r0
 800f7f4:	460b      	mov	r3, r1
 800f7f6:	4680      	mov	r8, r0
 800f7f8:	4689      	mov	r9, r1
 800f7fa:	4630      	mov	r0, r6
 800f7fc:	4639      	mov	r1, r7
 800f7fe:	f7f0 fd43 	bl	8000288 <__aeabi_dsub>
 800f802:	4622      	mov	r2, r4
 800f804:	462b      	mov	r3, r5
 800f806:	f7f0 fd3f 	bl	8000288 <__aeabi_dsub>
 800f80a:	a343      	add	r3, pc, #268	; (adr r3, 800f918 <__ieee754_rem_pio2+0x318>)
 800f80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f810:	4604      	mov	r4, r0
 800f812:	460d      	mov	r5, r1
 800f814:	ec51 0b18 	vmov	r0, r1, d8
 800f818:	f7f0 feee 	bl	80005f8 <__aeabi_dmul>
 800f81c:	4622      	mov	r2, r4
 800f81e:	462b      	mov	r3, r5
 800f820:	f7f0 fd32 	bl	8000288 <__aeabi_dsub>
 800f824:	4602      	mov	r2, r0
 800f826:	460b      	mov	r3, r1
 800f828:	4604      	mov	r4, r0
 800f82a:	460d      	mov	r5, r1
 800f82c:	4640      	mov	r0, r8
 800f82e:	4649      	mov	r1, r9
 800f830:	f7f0 fd2a 	bl	8000288 <__aeabi_dsub>
 800f834:	9a03      	ldr	r2, [sp, #12]
 800f836:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f83a:	1ad3      	subs	r3, r2, r3
 800f83c:	2b31      	cmp	r3, #49	; 0x31
 800f83e:	dc24      	bgt.n	800f88a <__ieee754_rem_pio2+0x28a>
 800f840:	e9ca 0100 	strd	r0, r1, [sl]
 800f844:	4646      	mov	r6, r8
 800f846:	464f      	mov	r7, r9
 800f848:	e9da 8900 	ldrd	r8, r9, [sl]
 800f84c:	4630      	mov	r0, r6
 800f84e:	4642      	mov	r2, r8
 800f850:	464b      	mov	r3, r9
 800f852:	4639      	mov	r1, r7
 800f854:	f7f0 fd18 	bl	8000288 <__aeabi_dsub>
 800f858:	462b      	mov	r3, r5
 800f85a:	4622      	mov	r2, r4
 800f85c:	f7f0 fd14 	bl	8000288 <__aeabi_dsub>
 800f860:	9b02      	ldr	r3, [sp, #8]
 800f862:	2b00      	cmp	r3, #0
 800f864:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f868:	f6bf af0a 	bge.w	800f680 <__ieee754_rem_pio2+0x80>
 800f86c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f870:	f8ca 3004 	str.w	r3, [sl, #4]
 800f874:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f878:	f8ca 8000 	str.w	r8, [sl]
 800f87c:	f8ca 0008 	str.w	r0, [sl, #8]
 800f880:	f8ca 300c 	str.w	r3, [sl, #12]
 800f884:	f1cb 0b00 	rsb	fp, fp, #0
 800f888:	e6fa      	b.n	800f680 <__ieee754_rem_pio2+0x80>
 800f88a:	a327      	add	r3, pc, #156	; (adr r3, 800f928 <__ieee754_rem_pio2+0x328>)
 800f88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f890:	ec51 0b18 	vmov	r0, r1, d8
 800f894:	f7f0 feb0 	bl	80005f8 <__aeabi_dmul>
 800f898:	4604      	mov	r4, r0
 800f89a:	460d      	mov	r5, r1
 800f89c:	4602      	mov	r2, r0
 800f89e:	460b      	mov	r3, r1
 800f8a0:	4640      	mov	r0, r8
 800f8a2:	4649      	mov	r1, r9
 800f8a4:	f7f0 fcf0 	bl	8000288 <__aeabi_dsub>
 800f8a8:	4602      	mov	r2, r0
 800f8aa:	460b      	mov	r3, r1
 800f8ac:	4606      	mov	r6, r0
 800f8ae:	460f      	mov	r7, r1
 800f8b0:	4640      	mov	r0, r8
 800f8b2:	4649      	mov	r1, r9
 800f8b4:	f7f0 fce8 	bl	8000288 <__aeabi_dsub>
 800f8b8:	4622      	mov	r2, r4
 800f8ba:	462b      	mov	r3, r5
 800f8bc:	f7f0 fce4 	bl	8000288 <__aeabi_dsub>
 800f8c0:	a31b      	add	r3, pc, #108	; (adr r3, 800f930 <__ieee754_rem_pio2+0x330>)
 800f8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8c6:	4604      	mov	r4, r0
 800f8c8:	460d      	mov	r5, r1
 800f8ca:	ec51 0b18 	vmov	r0, r1, d8
 800f8ce:	f7f0 fe93 	bl	80005f8 <__aeabi_dmul>
 800f8d2:	4622      	mov	r2, r4
 800f8d4:	462b      	mov	r3, r5
 800f8d6:	f7f0 fcd7 	bl	8000288 <__aeabi_dsub>
 800f8da:	4604      	mov	r4, r0
 800f8dc:	460d      	mov	r5, r1
 800f8de:	e75f      	b.n	800f7a0 <__ieee754_rem_pio2+0x1a0>
 800f8e0:	4b1b      	ldr	r3, [pc, #108]	; (800f950 <__ieee754_rem_pio2+0x350>)
 800f8e2:	4598      	cmp	r8, r3
 800f8e4:	dd36      	ble.n	800f954 <__ieee754_rem_pio2+0x354>
 800f8e6:	ee10 2a10 	vmov	r2, s0
 800f8ea:	462b      	mov	r3, r5
 800f8ec:	4620      	mov	r0, r4
 800f8ee:	4629      	mov	r1, r5
 800f8f0:	f7f0 fcca 	bl	8000288 <__aeabi_dsub>
 800f8f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f8f8:	e9ca 0100 	strd	r0, r1, [sl]
 800f8fc:	e694      	b.n	800f628 <__ieee754_rem_pio2+0x28>
 800f8fe:	bf00      	nop
 800f900:	54400000 	.word	0x54400000
 800f904:	3ff921fb 	.word	0x3ff921fb
 800f908:	1a626331 	.word	0x1a626331
 800f90c:	3dd0b461 	.word	0x3dd0b461
 800f910:	1a600000 	.word	0x1a600000
 800f914:	3dd0b461 	.word	0x3dd0b461
 800f918:	2e037073 	.word	0x2e037073
 800f91c:	3ba3198a 	.word	0x3ba3198a
 800f920:	6dc9c883 	.word	0x6dc9c883
 800f924:	3fe45f30 	.word	0x3fe45f30
 800f928:	2e000000 	.word	0x2e000000
 800f92c:	3ba3198a 	.word	0x3ba3198a
 800f930:	252049c1 	.word	0x252049c1
 800f934:	397b839a 	.word	0x397b839a
 800f938:	3fe921fb 	.word	0x3fe921fb
 800f93c:	4002d97b 	.word	0x4002d97b
 800f940:	3ff921fb 	.word	0x3ff921fb
 800f944:	413921fb 	.word	0x413921fb
 800f948:	3fe00000 	.word	0x3fe00000
 800f94c:	08010f28 	.word	0x08010f28
 800f950:	7fefffff 	.word	0x7fefffff
 800f954:	ea4f 5428 	mov.w	r4, r8, asr #20
 800f958:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800f95c:	ee10 0a10 	vmov	r0, s0
 800f960:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800f964:	ee10 6a10 	vmov	r6, s0
 800f968:	460f      	mov	r7, r1
 800f96a:	f7f1 f8f5 	bl	8000b58 <__aeabi_d2iz>
 800f96e:	f7f0 fdd9 	bl	8000524 <__aeabi_i2d>
 800f972:	4602      	mov	r2, r0
 800f974:	460b      	mov	r3, r1
 800f976:	4630      	mov	r0, r6
 800f978:	4639      	mov	r1, r7
 800f97a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f97e:	f7f0 fc83 	bl	8000288 <__aeabi_dsub>
 800f982:	4b23      	ldr	r3, [pc, #140]	; (800fa10 <__ieee754_rem_pio2+0x410>)
 800f984:	2200      	movs	r2, #0
 800f986:	f7f0 fe37 	bl	80005f8 <__aeabi_dmul>
 800f98a:	460f      	mov	r7, r1
 800f98c:	4606      	mov	r6, r0
 800f98e:	f7f1 f8e3 	bl	8000b58 <__aeabi_d2iz>
 800f992:	f7f0 fdc7 	bl	8000524 <__aeabi_i2d>
 800f996:	4602      	mov	r2, r0
 800f998:	460b      	mov	r3, r1
 800f99a:	4630      	mov	r0, r6
 800f99c:	4639      	mov	r1, r7
 800f99e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f9a2:	f7f0 fc71 	bl	8000288 <__aeabi_dsub>
 800f9a6:	4b1a      	ldr	r3, [pc, #104]	; (800fa10 <__ieee754_rem_pio2+0x410>)
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	f7f0 fe25 	bl	80005f8 <__aeabi_dmul>
 800f9ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f9b2:	ad04      	add	r5, sp, #16
 800f9b4:	f04f 0803 	mov.w	r8, #3
 800f9b8:	46a9      	mov	r9, r5
 800f9ba:	2600      	movs	r6, #0
 800f9bc:	2700      	movs	r7, #0
 800f9be:	4632      	mov	r2, r6
 800f9c0:	463b      	mov	r3, r7
 800f9c2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800f9c6:	46c3      	mov	fp, r8
 800f9c8:	3d08      	subs	r5, #8
 800f9ca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800f9ce:	f7f1 f87b 	bl	8000ac8 <__aeabi_dcmpeq>
 800f9d2:	2800      	cmp	r0, #0
 800f9d4:	d1f3      	bne.n	800f9be <__ieee754_rem_pio2+0x3be>
 800f9d6:	4b0f      	ldr	r3, [pc, #60]	; (800fa14 <__ieee754_rem_pio2+0x414>)
 800f9d8:	9301      	str	r3, [sp, #4]
 800f9da:	2302      	movs	r3, #2
 800f9dc:	9300      	str	r3, [sp, #0]
 800f9de:	4622      	mov	r2, r4
 800f9e0:	465b      	mov	r3, fp
 800f9e2:	4651      	mov	r1, sl
 800f9e4:	4648      	mov	r0, r9
 800f9e6:	f000 f8cb 	bl	800fb80 <__kernel_rem_pio2>
 800f9ea:	9b02      	ldr	r3, [sp, #8]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	4683      	mov	fp, r0
 800f9f0:	f6bf ae46 	bge.w	800f680 <__ieee754_rem_pio2+0x80>
 800f9f4:	e9da 2100 	ldrd	r2, r1, [sl]
 800f9f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f9fc:	e9ca 2300 	strd	r2, r3, [sl]
 800fa00:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800fa04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa08:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800fa0c:	e73a      	b.n	800f884 <__ieee754_rem_pio2+0x284>
 800fa0e:	bf00      	nop
 800fa10:	41700000 	.word	0x41700000
 800fa14:	08010fa8 	.word	0x08010fa8

0800fa18 <__ieee754_sqrt>:
 800fa18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa1c:	ec55 4b10 	vmov	r4, r5, d0
 800fa20:	4e55      	ldr	r6, [pc, #340]	; (800fb78 <__ieee754_sqrt+0x160>)
 800fa22:	43ae      	bics	r6, r5
 800fa24:	ee10 0a10 	vmov	r0, s0
 800fa28:	ee10 3a10 	vmov	r3, s0
 800fa2c:	462a      	mov	r2, r5
 800fa2e:	4629      	mov	r1, r5
 800fa30:	d110      	bne.n	800fa54 <__ieee754_sqrt+0x3c>
 800fa32:	ee10 2a10 	vmov	r2, s0
 800fa36:	462b      	mov	r3, r5
 800fa38:	f7f0 fdde 	bl	80005f8 <__aeabi_dmul>
 800fa3c:	4602      	mov	r2, r0
 800fa3e:	460b      	mov	r3, r1
 800fa40:	4620      	mov	r0, r4
 800fa42:	4629      	mov	r1, r5
 800fa44:	f7f0 fc22 	bl	800028c <__adddf3>
 800fa48:	4604      	mov	r4, r0
 800fa4a:	460d      	mov	r5, r1
 800fa4c:	ec45 4b10 	vmov	d0, r4, r5
 800fa50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa54:	2d00      	cmp	r5, #0
 800fa56:	dc10      	bgt.n	800fa7a <__ieee754_sqrt+0x62>
 800fa58:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fa5c:	4330      	orrs	r0, r6
 800fa5e:	d0f5      	beq.n	800fa4c <__ieee754_sqrt+0x34>
 800fa60:	b15d      	cbz	r5, 800fa7a <__ieee754_sqrt+0x62>
 800fa62:	ee10 2a10 	vmov	r2, s0
 800fa66:	462b      	mov	r3, r5
 800fa68:	ee10 0a10 	vmov	r0, s0
 800fa6c:	f7f0 fc0c 	bl	8000288 <__aeabi_dsub>
 800fa70:	4602      	mov	r2, r0
 800fa72:	460b      	mov	r3, r1
 800fa74:	f7f0 feea 	bl	800084c <__aeabi_ddiv>
 800fa78:	e7e6      	b.n	800fa48 <__ieee754_sqrt+0x30>
 800fa7a:	1512      	asrs	r2, r2, #20
 800fa7c:	d074      	beq.n	800fb68 <__ieee754_sqrt+0x150>
 800fa7e:	07d4      	lsls	r4, r2, #31
 800fa80:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800fa84:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800fa88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800fa8c:	bf5e      	ittt	pl
 800fa8e:	0fda      	lsrpl	r2, r3, #31
 800fa90:	005b      	lslpl	r3, r3, #1
 800fa92:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800fa96:	2400      	movs	r4, #0
 800fa98:	0fda      	lsrs	r2, r3, #31
 800fa9a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800fa9e:	107f      	asrs	r7, r7, #1
 800faa0:	005b      	lsls	r3, r3, #1
 800faa2:	2516      	movs	r5, #22
 800faa4:	4620      	mov	r0, r4
 800faa6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800faaa:	1886      	adds	r6, r0, r2
 800faac:	428e      	cmp	r6, r1
 800faae:	bfde      	ittt	le
 800fab0:	1b89      	suble	r1, r1, r6
 800fab2:	18b0      	addle	r0, r6, r2
 800fab4:	18a4      	addle	r4, r4, r2
 800fab6:	0049      	lsls	r1, r1, #1
 800fab8:	3d01      	subs	r5, #1
 800faba:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800fabe:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800fac2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fac6:	d1f0      	bne.n	800faaa <__ieee754_sqrt+0x92>
 800fac8:	462a      	mov	r2, r5
 800faca:	f04f 0e20 	mov.w	lr, #32
 800face:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800fad2:	4281      	cmp	r1, r0
 800fad4:	eb06 0c05 	add.w	ip, r6, r5
 800fad8:	dc02      	bgt.n	800fae0 <__ieee754_sqrt+0xc8>
 800fada:	d113      	bne.n	800fb04 <__ieee754_sqrt+0xec>
 800fadc:	459c      	cmp	ip, r3
 800fade:	d811      	bhi.n	800fb04 <__ieee754_sqrt+0xec>
 800fae0:	f1bc 0f00 	cmp.w	ip, #0
 800fae4:	eb0c 0506 	add.w	r5, ip, r6
 800fae8:	da43      	bge.n	800fb72 <__ieee754_sqrt+0x15a>
 800faea:	2d00      	cmp	r5, #0
 800faec:	db41      	blt.n	800fb72 <__ieee754_sqrt+0x15a>
 800faee:	f100 0801 	add.w	r8, r0, #1
 800faf2:	1a09      	subs	r1, r1, r0
 800faf4:	459c      	cmp	ip, r3
 800faf6:	bf88      	it	hi
 800faf8:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800fafc:	eba3 030c 	sub.w	r3, r3, ip
 800fb00:	4432      	add	r2, r6
 800fb02:	4640      	mov	r0, r8
 800fb04:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800fb08:	f1be 0e01 	subs.w	lr, lr, #1
 800fb0c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800fb10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fb14:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800fb18:	d1db      	bne.n	800fad2 <__ieee754_sqrt+0xba>
 800fb1a:	430b      	orrs	r3, r1
 800fb1c:	d006      	beq.n	800fb2c <__ieee754_sqrt+0x114>
 800fb1e:	1c50      	adds	r0, r2, #1
 800fb20:	bf13      	iteet	ne
 800fb22:	3201      	addne	r2, #1
 800fb24:	3401      	addeq	r4, #1
 800fb26:	4672      	moveq	r2, lr
 800fb28:	f022 0201 	bicne.w	r2, r2, #1
 800fb2c:	1063      	asrs	r3, r4, #1
 800fb2e:	0852      	lsrs	r2, r2, #1
 800fb30:	07e1      	lsls	r1, r4, #31
 800fb32:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800fb36:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800fb3a:	bf48      	it	mi
 800fb3c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800fb40:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800fb44:	4614      	mov	r4, r2
 800fb46:	e781      	b.n	800fa4c <__ieee754_sqrt+0x34>
 800fb48:	0ad9      	lsrs	r1, r3, #11
 800fb4a:	3815      	subs	r0, #21
 800fb4c:	055b      	lsls	r3, r3, #21
 800fb4e:	2900      	cmp	r1, #0
 800fb50:	d0fa      	beq.n	800fb48 <__ieee754_sqrt+0x130>
 800fb52:	02cd      	lsls	r5, r1, #11
 800fb54:	d50a      	bpl.n	800fb6c <__ieee754_sqrt+0x154>
 800fb56:	f1c2 0420 	rsb	r4, r2, #32
 800fb5a:	fa23 f404 	lsr.w	r4, r3, r4
 800fb5e:	1e55      	subs	r5, r2, #1
 800fb60:	4093      	lsls	r3, r2
 800fb62:	4321      	orrs	r1, r4
 800fb64:	1b42      	subs	r2, r0, r5
 800fb66:	e78a      	b.n	800fa7e <__ieee754_sqrt+0x66>
 800fb68:	4610      	mov	r0, r2
 800fb6a:	e7f0      	b.n	800fb4e <__ieee754_sqrt+0x136>
 800fb6c:	0049      	lsls	r1, r1, #1
 800fb6e:	3201      	adds	r2, #1
 800fb70:	e7ef      	b.n	800fb52 <__ieee754_sqrt+0x13a>
 800fb72:	4680      	mov	r8, r0
 800fb74:	e7bd      	b.n	800faf2 <__ieee754_sqrt+0xda>
 800fb76:	bf00      	nop
 800fb78:	7ff00000 	.word	0x7ff00000
 800fb7c:	00000000 	.word	0x00000000

0800fb80 <__kernel_rem_pio2>:
 800fb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb84:	ed2d 8b02 	vpush	{d8}
 800fb88:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800fb8c:	f112 0f14 	cmn.w	r2, #20
 800fb90:	9308      	str	r3, [sp, #32]
 800fb92:	9101      	str	r1, [sp, #4]
 800fb94:	4bc4      	ldr	r3, [pc, #784]	; (800fea8 <__kernel_rem_pio2+0x328>)
 800fb96:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800fb98:	900b      	str	r0, [sp, #44]	; 0x2c
 800fb9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fb9e:	9302      	str	r3, [sp, #8]
 800fba0:	9b08      	ldr	r3, [sp, #32]
 800fba2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800fba6:	bfa8      	it	ge
 800fba8:	1ed4      	subge	r4, r2, #3
 800fbaa:	9306      	str	r3, [sp, #24]
 800fbac:	bfb2      	itee	lt
 800fbae:	2400      	movlt	r4, #0
 800fbb0:	2318      	movge	r3, #24
 800fbb2:	fb94 f4f3 	sdivge	r4, r4, r3
 800fbb6:	f06f 0317 	mvn.w	r3, #23
 800fbba:	fb04 3303 	mla	r3, r4, r3, r3
 800fbbe:	eb03 0a02 	add.w	sl, r3, r2
 800fbc2:	9b02      	ldr	r3, [sp, #8]
 800fbc4:	9a06      	ldr	r2, [sp, #24]
 800fbc6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800fe98 <__kernel_rem_pio2+0x318>
 800fbca:	eb03 0802 	add.w	r8, r3, r2
 800fbce:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800fbd0:	1aa7      	subs	r7, r4, r2
 800fbd2:	ae22      	add	r6, sp, #136	; 0x88
 800fbd4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800fbd8:	2500      	movs	r5, #0
 800fbda:	4545      	cmp	r5, r8
 800fbdc:	dd13      	ble.n	800fc06 <__kernel_rem_pio2+0x86>
 800fbde:	9b08      	ldr	r3, [sp, #32]
 800fbe0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800fe98 <__kernel_rem_pio2+0x318>
 800fbe4:	aa22      	add	r2, sp, #136	; 0x88
 800fbe6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800fbea:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800fbee:	f04f 0800 	mov.w	r8, #0
 800fbf2:	9b02      	ldr	r3, [sp, #8]
 800fbf4:	4598      	cmp	r8, r3
 800fbf6:	dc2f      	bgt.n	800fc58 <__kernel_rem_pio2+0xd8>
 800fbf8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800fbfc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800fc00:	462f      	mov	r7, r5
 800fc02:	2600      	movs	r6, #0
 800fc04:	e01b      	b.n	800fc3e <__kernel_rem_pio2+0xbe>
 800fc06:	42ef      	cmn	r7, r5
 800fc08:	d407      	bmi.n	800fc1a <__kernel_rem_pio2+0x9a>
 800fc0a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800fc0e:	f7f0 fc89 	bl	8000524 <__aeabi_i2d>
 800fc12:	e8e6 0102 	strd	r0, r1, [r6], #8
 800fc16:	3501      	adds	r5, #1
 800fc18:	e7df      	b.n	800fbda <__kernel_rem_pio2+0x5a>
 800fc1a:	ec51 0b18 	vmov	r0, r1, d8
 800fc1e:	e7f8      	b.n	800fc12 <__kernel_rem_pio2+0x92>
 800fc20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc24:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800fc28:	f7f0 fce6 	bl	80005f8 <__aeabi_dmul>
 800fc2c:	4602      	mov	r2, r0
 800fc2e:	460b      	mov	r3, r1
 800fc30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fc34:	f7f0 fb2a 	bl	800028c <__adddf3>
 800fc38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fc3c:	3601      	adds	r6, #1
 800fc3e:	9b06      	ldr	r3, [sp, #24]
 800fc40:	429e      	cmp	r6, r3
 800fc42:	f1a7 0708 	sub.w	r7, r7, #8
 800fc46:	ddeb      	ble.n	800fc20 <__kernel_rem_pio2+0xa0>
 800fc48:	ed9d 7b04 	vldr	d7, [sp, #16]
 800fc4c:	f108 0801 	add.w	r8, r8, #1
 800fc50:	ecab 7b02 	vstmia	fp!, {d7}
 800fc54:	3508      	adds	r5, #8
 800fc56:	e7cc      	b.n	800fbf2 <__kernel_rem_pio2+0x72>
 800fc58:	9b02      	ldr	r3, [sp, #8]
 800fc5a:	aa0e      	add	r2, sp, #56	; 0x38
 800fc5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fc60:	930d      	str	r3, [sp, #52]	; 0x34
 800fc62:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800fc64:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fc68:	9c02      	ldr	r4, [sp, #8]
 800fc6a:	930c      	str	r3, [sp, #48]	; 0x30
 800fc6c:	00e3      	lsls	r3, r4, #3
 800fc6e:	930a      	str	r3, [sp, #40]	; 0x28
 800fc70:	ab9a      	add	r3, sp, #616	; 0x268
 800fc72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fc76:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800fc7a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800fc7e:	ab72      	add	r3, sp, #456	; 0x1c8
 800fc80:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800fc84:	46c3      	mov	fp, r8
 800fc86:	46a1      	mov	r9, r4
 800fc88:	f1b9 0f00 	cmp.w	r9, #0
 800fc8c:	f1a5 0508 	sub.w	r5, r5, #8
 800fc90:	dc77      	bgt.n	800fd82 <__kernel_rem_pio2+0x202>
 800fc92:	ec47 6b10 	vmov	d0, r6, r7
 800fc96:	4650      	mov	r0, sl
 800fc98:	f000 fd92 	bl	80107c0 <scalbn>
 800fc9c:	ec57 6b10 	vmov	r6, r7, d0
 800fca0:	2200      	movs	r2, #0
 800fca2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800fca6:	ee10 0a10 	vmov	r0, s0
 800fcaa:	4639      	mov	r1, r7
 800fcac:	f7f0 fca4 	bl	80005f8 <__aeabi_dmul>
 800fcb0:	ec41 0b10 	vmov	d0, r0, r1
 800fcb4:	f000 fd04 	bl	80106c0 <floor>
 800fcb8:	4b7c      	ldr	r3, [pc, #496]	; (800feac <__kernel_rem_pio2+0x32c>)
 800fcba:	ec51 0b10 	vmov	r0, r1, d0
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	f7f0 fc9a 	bl	80005f8 <__aeabi_dmul>
 800fcc4:	4602      	mov	r2, r0
 800fcc6:	460b      	mov	r3, r1
 800fcc8:	4630      	mov	r0, r6
 800fcca:	4639      	mov	r1, r7
 800fccc:	f7f0 fadc 	bl	8000288 <__aeabi_dsub>
 800fcd0:	460f      	mov	r7, r1
 800fcd2:	4606      	mov	r6, r0
 800fcd4:	f7f0 ff40 	bl	8000b58 <__aeabi_d2iz>
 800fcd8:	9004      	str	r0, [sp, #16]
 800fcda:	f7f0 fc23 	bl	8000524 <__aeabi_i2d>
 800fcde:	4602      	mov	r2, r0
 800fce0:	460b      	mov	r3, r1
 800fce2:	4630      	mov	r0, r6
 800fce4:	4639      	mov	r1, r7
 800fce6:	f7f0 facf 	bl	8000288 <__aeabi_dsub>
 800fcea:	f1ba 0f00 	cmp.w	sl, #0
 800fcee:	4606      	mov	r6, r0
 800fcf0:	460f      	mov	r7, r1
 800fcf2:	dd6d      	ble.n	800fdd0 <__kernel_rem_pio2+0x250>
 800fcf4:	1e62      	subs	r2, r4, #1
 800fcf6:	ab0e      	add	r3, sp, #56	; 0x38
 800fcf8:	9d04      	ldr	r5, [sp, #16]
 800fcfa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800fcfe:	f1ca 0118 	rsb	r1, sl, #24
 800fd02:	fa40 f301 	asr.w	r3, r0, r1
 800fd06:	441d      	add	r5, r3
 800fd08:	408b      	lsls	r3, r1
 800fd0a:	1ac0      	subs	r0, r0, r3
 800fd0c:	ab0e      	add	r3, sp, #56	; 0x38
 800fd0e:	9504      	str	r5, [sp, #16]
 800fd10:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800fd14:	f1ca 0317 	rsb	r3, sl, #23
 800fd18:	fa40 fb03 	asr.w	fp, r0, r3
 800fd1c:	f1bb 0f00 	cmp.w	fp, #0
 800fd20:	dd65      	ble.n	800fdee <__kernel_rem_pio2+0x26e>
 800fd22:	9b04      	ldr	r3, [sp, #16]
 800fd24:	2200      	movs	r2, #0
 800fd26:	3301      	adds	r3, #1
 800fd28:	9304      	str	r3, [sp, #16]
 800fd2a:	4615      	mov	r5, r2
 800fd2c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800fd30:	4294      	cmp	r4, r2
 800fd32:	f300 809c 	bgt.w	800fe6e <__kernel_rem_pio2+0x2ee>
 800fd36:	f1ba 0f00 	cmp.w	sl, #0
 800fd3a:	dd07      	ble.n	800fd4c <__kernel_rem_pio2+0x1cc>
 800fd3c:	f1ba 0f01 	cmp.w	sl, #1
 800fd40:	f000 80c0 	beq.w	800fec4 <__kernel_rem_pio2+0x344>
 800fd44:	f1ba 0f02 	cmp.w	sl, #2
 800fd48:	f000 80c6 	beq.w	800fed8 <__kernel_rem_pio2+0x358>
 800fd4c:	f1bb 0f02 	cmp.w	fp, #2
 800fd50:	d14d      	bne.n	800fdee <__kernel_rem_pio2+0x26e>
 800fd52:	4632      	mov	r2, r6
 800fd54:	463b      	mov	r3, r7
 800fd56:	4956      	ldr	r1, [pc, #344]	; (800feb0 <__kernel_rem_pio2+0x330>)
 800fd58:	2000      	movs	r0, #0
 800fd5a:	f7f0 fa95 	bl	8000288 <__aeabi_dsub>
 800fd5e:	4606      	mov	r6, r0
 800fd60:	460f      	mov	r7, r1
 800fd62:	2d00      	cmp	r5, #0
 800fd64:	d043      	beq.n	800fdee <__kernel_rem_pio2+0x26e>
 800fd66:	4650      	mov	r0, sl
 800fd68:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800fea0 <__kernel_rem_pio2+0x320>
 800fd6c:	f000 fd28 	bl	80107c0 <scalbn>
 800fd70:	4630      	mov	r0, r6
 800fd72:	4639      	mov	r1, r7
 800fd74:	ec53 2b10 	vmov	r2, r3, d0
 800fd78:	f7f0 fa86 	bl	8000288 <__aeabi_dsub>
 800fd7c:	4606      	mov	r6, r0
 800fd7e:	460f      	mov	r7, r1
 800fd80:	e035      	b.n	800fdee <__kernel_rem_pio2+0x26e>
 800fd82:	4b4c      	ldr	r3, [pc, #304]	; (800feb4 <__kernel_rem_pio2+0x334>)
 800fd84:	2200      	movs	r2, #0
 800fd86:	4630      	mov	r0, r6
 800fd88:	4639      	mov	r1, r7
 800fd8a:	f7f0 fc35 	bl	80005f8 <__aeabi_dmul>
 800fd8e:	f7f0 fee3 	bl	8000b58 <__aeabi_d2iz>
 800fd92:	f7f0 fbc7 	bl	8000524 <__aeabi_i2d>
 800fd96:	4602      	mov	r2, r0
 800fd98:	460b      	mov	r3, r1
 800fd9a:	ec43 2b18 	vmov	d8, r2, r3
 800fd9e:	4b46      	ldr	r3, [pc, #280]	; (800feb8 <__kernel_rem_pio2+0x338>)
 800fda0:	2200      	movs	r2, #0
 800fda2:	f7f0 fc29 	bl	80005f8 <__aeabi_dmul>
 800fda6:	4602      	mov	r2, r0
 800fda8:	460b      	mov	r3, r1
 800fdaa:	4630      	mov	r0, r6
 800fdac:	4639      	mov	r1, r7
 800fdae:	f7f0 fa6b 	bl	8000288 <__aeabi_dsub>
 800fdb2:	f7f0 fed1 	bl	8000b58 <__aeabi_d2iz>
 800fdb6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fdba:	f84b 0b04 	str.w	r0, [fp], #4
 800fdbe:	ec51 0b18 	vmov	r0, r1, d8
 800fdc2:	f7f0 fa63 	bl	800028c <__adddf3>
 800fdc6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800fdca:	4606      	mov	r6, r0
 800fdcc:	460f      	mov	r7, r1
 800fdce:	e75b      	b.n	800fc88 <__kernel_rem_pio2+0x108>
 800fdd0:	d106      	bne.n	800fde0 <__kernel_rem_pio2+0x260>
 800fdd2:	1e63      	subs	r3, r4, #1
 800fdd4:	aa0e      	add	r2, sp, #56	; 0x38
 800fdd6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fdda:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800fdde:	e79d      	b.n	800fd1c <__kernel_rem_pio2+0x19c>
 800fde0:	4b36      	ldr	r3, [pc, #216]	; (800febc <__kernel_rem_pio2+0x33c>)
 800fde2:	2200      	movs	r2, #0
 800fde4:	f7f0 fe8e 	bl	8000b04 <__aeabi_dcmpge>
 800fde8:	2800      	cmp	r0, #0
 800fdea:	d13d      	bne.n	800fe68 <__kernel_rem_pio2+0x2e8>
 800fdec:	4683      	mov	fp, r0
 800fdee:	2200      	movs	r2, #0
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	4630      	mov	r0, r6
 800fdf4:	4639      	mov	r1, r7
 800fdf6:	f7f0 fe67 	bl	8000ac8 <__aeabi_dcmpeq>
 800fdfa:	2800      	cmp	r0, #0
 800fdfc:	f000 80c0 	beq.w	800ff80 <__kernel_rem_pio2+0x400>
 800fe00:	1e65      	subs	r5, r4, #1
 800fe02:	462b      	mov	r3, r5
 800fe04:	2200      	movs	r2, #0
 800fe06:	9902      	ldr	r1, [sp, #8]
 800fe08:	428b      	cmp	r3, r1
 800fe0a:	da6c      	bge.n	800fee6 <__kernel_rem_pio2+0x366>
 800fe0c:	2a00      	cmp	r2, #0
 800fe0e:	f000 8089 	beq.w	800ff24 <__kernel_rem_pio2+0x3a4>
 800fe12:	ab0e      	add	r3, sp, #56	; 0x38
 800fe14:	f1aa 0a18 	sub.w	sl, sl, #24
 800fe18:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	f000 80ad 	beq.w	800ff7c <__kernel_rem_pio2+0x3fc>
 800fe22:	4650      	mov	r0, sl
 800fe24:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800fea0 <__kernel_rem_pio2+0x320>
 800fe28:	f000 fcca 	bl	80107c0 <scalbn>
 800fe2c:	ab9a      	add	r3, sp, #616	; 0x268
 800fe2e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800fe32:	ec57 6b10 	vmov	r6, r7, d0
 800fe36:	00ec      	lsls	r4, r5, #3
 800fe38:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800fe3c:	46aa      	mov	sl, r5
 800fe3e:	f1ba 0f00 	cmp.w	sl, #0
 800fe42:	f280 80d6 	bge.w	800fff2 <__kernel_rem_pio2+0x472>
 800fe46:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800fe98 <__kernel_rem_pio2+0x318>
 800fe4a:	462e      	mov	r6, r5
 800fe4c:	2e00      	cmp	r6, #0
 800fe4e:	f2c0 8104 	blt.w	801005a <__kernel_rem_pio2+0x4da>
 800fe52:	ab72      	add	r3, sp, #456	; 0x1c8
 800fe54:	ed8d 8b06 	vstr	d8, [sp, #24]
 800fe58:	f8df a064 	ldr.w	sl, [pc, #100]	; 800fec0 <__kernel_rem_pio2+0x340>
 800fe5c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800fe60:	f04f 0800 	mov.w	r8, #0
 800fe64:	1baf      	subs	r7, r5, r6
 800fe66:	e0ea      	b.n	801003e <__kernel_rem_pio2+0x4be>
 800fe68:	f04f 0b02 	mov.w	fp, #2
 800fe6c:	e759      	b.n	800fd22 <__kernel_rem_pio2+0x1a2>
 800fe6e:	f8d8 3000 	ldr.w	r3, [r8]
 800fe72:	b955      	cbnz	r5, 800fe8a <__kernel_rem_pio2+0x30a>
 800fe74:	b123      	cbz	r3, 800fe80 <__kernel_rem_pio2+0x300>
 800fe76:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800fe7a:	f8c8 3000 	str.w	r3, [r8]
 800fe7e:	2301      	movs	r3, #1
 800fe80:	3201      	adds	r2, #1
 800fe82:	f108 0804 	add.w	r8, r8, #4
 800fe86:	461d      	mov	r5, r3
 800fe88:	e752      	b.n	800fd30 <__kernel_rem_pio2+0x1b0>
 800fe8a:	1acb      	subs	r3, r1, r3
 800fe8c:	f8c8 3000 	str.w	r3, [r8]
 800fe90:	462b      	mov	r3, r5
 800fe92:	e7f5      	b.n	800fe80 <__kernel_rem_pio2+0x300>
 800fe94:	f3af 8000 	nop.w
	...
 800fea4:	3ff00000 	.word	0x3ff00000
 800fea8:	080110f0 	.word	0x080110f0
 800feac:	40200000 	.word	0x40200000
 800feb0:	3ff00000 	.word	0x3ff00000
 800feb4:	3e700000 	.word	0x3e700000
 800feb8:	41700000 	.word	0x41700000
 800febc:	3fe00000 	.word	0x3fe00000
 800fec0:	080110b0 	.word	0x080110b0
 800fec4:	1e62      	subs	r2, r4, #1
 800fec6:	ab0e      	add	r3, sp, #56	; 0x38
 800fec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fecc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800fed0:	a90e      	add	r1, sp, #56	; 0x38
 800fed2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800fed6:	e739      	b.n	800fd4c <__kernel_rem_pio2+0x1cc>
 800fed8:	1e62      	subs	r2, r4, #1
 800feda:	ab0e      	add	r3, sp, #56	; 0x38
 800fedc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fee0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800fee4:	e7f4      	b.n	800fed0 <__kernel_rem_pio2+0x350>
 800fee6:	a90e      	add	r1, sp, #56	; 0x38
 800fee8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800feec:	3b01      	subs	r3, #1
 800feee:	430a      	orrs	r2, r1
 800fef0:	e789      	b.n	800fe06 <__kernel_rem_pio2+0x286>
 800fef2:	3301      	adds	r3, #1
 800fef4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800fef8:	2900      	cmp	r1, #0
 800fefa:	d0fa      	beq.n	800fef2 <__kernel_rem_pio2+0x372>
 800fefc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fefe:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800ff02:	446a      	add	r2, sp
 800ff04:	3a98      	subs	r2, #152	; 0x98
 800ff06:	920a      	str	r2, [sp, #40]	; 0x28
 800ff08:	9a08      	ldr	r2, [sp, #32]
 800ff0a:	18e3      	adds	r3, r4, r3
 800ff0c:	18a5      	adds	r5, r4, r2
 800ff0e:	aa22      	add	r2, sp, #136	; 0x88
 800ff10:	f104 0801 	add.w	r8, r4, #1
 800ff14:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800ff18:	9304      	str	r3, [sp, #16]
 800ff1a:	9b04      	ldr	r3, [sp, #16]
 800ff1c:	4543      	cmp	r3, r8
 800ff1e:	da04      	bge.n	800ff2a <__kernel_rem_pio2+0x3aa>
 800ff20:	461c      	mov	r4, r3
 800ff22:	e6a3      	b.n	800fc6c <__kernel_rem_pio2+0xec>
 800ff24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ff26:	2301      	movs	r3, #1
 800ff28:	e7e4      	b.n	800fef4 <__kernel_rem_pio2+0x374>
 800ff2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ff2c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ff30:	f7f0 faf8 	bl	8000524 <__aeabi_i2d>
 800ff34:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ff38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff3a:	46ab      	mov	fp, r5
 800ff3c:	461c      	mov	r4, r3
 800ff3e:	f04f 0900 	mov.w	r9, #0
 800ff42:	2600      	movs	r6, #0
 800ff44:	2700      	movs	r7, #0
 800ff46:	9b06      	ldr	r3, [sp, #24]
 800ff48:	4599      	cmp	r9, r3
 800ff4a:	dd06      	ble.n	800ff5a <__kernel_rem_pio2+0x3da>
 800ff4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff4e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ff52:	f108 0801 	add.w	r8, r8, #1
 800ff56:	930a      	str	r3, [sp, #40]	; 0x28
 800ff58:	e7df      	b.n	800ff1a <__kernel_rem_pio2+0x39a>
 800ff5a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ff5e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ff62:	f7f0 fb49 	bl	80005f8 <__aeabi_dmul>
 800ff66:	4602      	mov	r2, r0
 800ff68:	460b      	mov	r3, r1
 800ff6a:	4630      	mov	r0, r6
 800ff6c:	4639      	mov	r1, r7
 800ff6e:	f7f0 f98d 	bl	800028c <__adddf3>
 800ff72:	f109 0901 	add.w	r9, r9, #1
 800ff76:	4606      	mov	r6, r0
 800ff78:	460f      	mov	r7, r1
 800ff7a:	e7e4      	b.n	800ff46 <__kernel_rem_pio2+0x3c6>
 800ff7c:	3d01      	subs	r5, #1
 800ff7e:	e748      	b.n	800fe12 <__kernel_rem_pio2+0x292>
 800ff80:	ec47 6b10 	vmov	d0, r6, r7
 800ff84:	f1ca 0000 	rsb	r0, sl, #0
 800ff88:	f000 fc1a 	bl	80107c0 <scalbn>
 800ff8c:	ec57 6b10 	vmov	r6, r7, d0
 800ff90:	4ba0      	ldr	r3, [pc, #640]	; (8010214 <__kernel_rem_pio2+0x694>)
 800ff92:	ee10 0a10 	vmov	r0, s0
 800ff96:	2200      	movs	r2, #0
 800ff98:	4639      	mov	r1, r7
 800ff9a:	f7f0 fdb3 	bl	8000b04 <__aeabi_dcmpge>
 800ff9e:	b1f8      	cbz	r0, 800ffe0 <__kernel_rem_pio2+0x460>
 800ffa0:	4b9d      	ldr	r3, [pc, #628]	; (8010218 <__kernel_rem_pio2+0x698>)
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	4630      	mov	r0, r6
 800ffa6:	4639      	mov	r1, r7
 800ffa8:	f7f0 fb26 	bl	80005f8 <__aeabi_dmul>
 800ffac:	f7f0 fdd4 	bl	8000b58 <__aeabi_d2iz>
 800ffb0:	4680      	mov	r8, r0
 800ffb2:	f7f0 fab7 	bl	8000524 <__aeabi_i2d>
 800ffb6:	4b97      	ldr	r3, [pc, #604]	; (8010214 <__kernel_rem_pio2+0x694>)
 800ffb8:	2200      	movs	r2, #0
 800ffba:	f7f0 fb1d 	bl	80005f8 <__aeabi_dmul>
 800ffbe:	460b      	mov	r3, r1
 800ffc0:	4602      	mov	r2, r0
 800ffc2:	4639      	mov	r1, r7
 800ffc4:	4630      	mov	r0, r6
 800ffc6:	f7f0 f95f 	bl	8000288 <__aeabi_dsub>
 800ffca:	f7f0 fdc5 	bl	8000b58 <__aeabi_d2iz>
 800ffce:	1c65      	adds	r5, r4, #1
 800ffd0:	ab0e      	add	r3, sp, #56	; 0x38
 800ffd2:	f10a 0a18 	add.w	sl, sl, #24
 800ffd6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ffda:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ffde:	e720      	b.n	800fe22 <__kernel_rem_pio2+0x2a2>
 800ffe0:	4630      	mov	r0, r6
 800ffe2:	4639      	mov	r1, r7
 800ffe4:	f7f0 fdb8 	bl	8000b58 <__aeabi_d2iz>
 800ffe8:	ab0e      	add	r3, sp, #56	; 0x38
 800ffea:	4625      	mov	r5, r4
 800ffec:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800fff0:	e717      	b.n	800fe22 <__kernel_rem_pio2+0x2a2>
 800fff2:	ab0e      	add	r3, sp, #56	; 0x38
 800fff4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800fff8:	f7f0 fa94 	bl	8000524 <__aeabi_i2d>
 800fffc:	4632      	mov	r2, r6
 800fffe:	463b      	mov	r3, r7
 8010000:	f7f0 fafa 	bl	80005f8 <__aeabi_dmul>
 8010004:	4b84      	ldr	r3, [pc, #528]	; (8010218 <__kernel_rem_pio2+0x698>)
 8010006:	e968 0102 	strd	r0, r1, [r8, #-8]!
 801000a:	2200      	movs	r2, #0
 801000c:	4630      	mov	r0, r6
 801000e:	4639      	mov	r1, r7
 8010010:	f7f0 faf2 	bl	80005f8 <__aeabi_dmul>
 8010014:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010018:	4606      	mov	r6, r0
 801001a:	460f      	mov	r7, r1
 801001c:	e70f      	b.n	800fe3e <__kernel_rem_pio2+0x2be>
 801001e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8010022:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8010026:	f7f0 fae7 	bl	80005f8 <__aeabi_dmul>
 801002a:	4602      	mov	r2, r0
 801002c:	460b      	mov	r3, r1
 801002e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010032:	f7f0 f92b 	bl	800028c <__adddf3>
 8010036:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801003a:	f108 0801 	add.w	r8, r8, #1
 801003e:	9b02      	ldr	r3, [sp, #8]
 8010040:	4598      	cmp	r8, r3
 8010042:	dc01      	bgt.n	8010048 <__kernel_rem_pio2+0x4c8>
 8010044:	45b8      	cmp	r8, r7
 8010046:	ddea      	ble.n	801001e <__kernel_rem_pio2+0x49e>
 8010048:	ed9d 7b06 	vldr	d7, [sp, #24]
 801004c:	ab4a      	add	r3, sp, #296	; 0x128
 801004e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8010052:	ed87 7b00 	vstr	d7, [r7]
 8010056:	3e01      	subs	r6, #1
 8010058:	e6f8      	b.n	800fe4c <__kernel_rem_pio2+0x2cc>
 801005a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801005c:	2b02      	cmp	r3, #2
 801005e:	dc0b      	bgt.n	8010078 <__kernel_rem_pio2+0x4f8>
 8010060:	2b00      	cmp	r3, #0
 8010062:	dc35      	bgt.n	80100d0 <__kernel_rem_pio2+0x550>
 8010064:	d059      	beq.n	801011a <__kernel_rem_pio2+0x59a>
 8010066:	9b04      	ldr	r3, [sp, #16]
 8010068:	f003 0007 	and.w	r0, r3, #7
 801006c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8010070:	ecbd 8b02 	vpop	{d8}
 8010074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010078:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801007a:	2b03      	cmp	r3, #3
 801007c:	d1f3      	bne.n	8010066 <__kernel_rem_pio2+0x4e6>
 801007e:	ab4a      	add	r3, sp, #296	; 0x128
 8010080:	4423      	add	r3, r4
 8010082:	9306      	str	r3, [sp, #24]
 8010084:	461c      	mov	r4, r3
 8010086:	469a      	mov	sl, r3
 8010088:	9502      	str	r5, [sp, #8]
 801008a:	9b02      	ldr	r3, [sp, #8]
 801008c:	2b00      	cmp	r3, #0
 801008e:	f1aa 0a08 	sub.w	sl, sl, #8
 8010092:	dc6b      	bgt.n	801016c <__kernel_rem_pio2+0x5ec>
 8010094:	46aa      	mov	sl, r5
 8010096:	f1ba 0f01 	cmp.w	sl, #1
 801009a:	f1a4 0408 	sub.w	r4, r4, #8
 801009e:	f300 8085 	bgt.w	80101ac <__kernel_rem_pio2+0x62c>
 80100a2:	9c06      	ldr	r4, [sp, #24]
 80100a4:	2000      	movs	r0, #0
 80100a6:	3408      	adds	r4, #8
 80100a8:	2100      	movs	r1, #0
 80100aa:	2d01      	cmp	r5, #1
 80100ac:	f300 809d 	bgt.w	80101ea <__kernel_rem_pio2+0x66a>
 80100b0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80100b4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80100b8:	f1bb 0f00 	cmp.w	fp, #0
 80100bc:	f040 809b 	bne.w	80101f6 <__kernel_rem_pio2+0x676>
 80100c0:	9b01      	ldr	r3, [sp, #4]
 80100c2:	e9c3 5600 	strd	r5, r6, [r3]
 80100c6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80100ca:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80100ce:	e7ca      	b.n	8010066 <__kernel_rem_pio2+0x4e6>
 80100d0:	3408      	adds	r4, #8
 80100d2:	ab4a      	add	r3, sp, #296	; 0x128
 80100d4:	441c      	add	r4, r3
 80100d6:	462e      	mov	r6, r5
 80100d8:	2000      	movs	r0, #0
 80100da:	2100      	movs	r1, #0
 80100dc:	2e00      	cmp	r6, #0
 80100de:	da36      	bge.n	801014e <__kernel_rem_pio2+0x5ce>
 80100e0:	f1bb 0f00 	cmp.w	fp, #0
 80100e4:	d039      	beq.n	801015a <__kernel_rem_pio2+0x5da>
 80100e6:	4602      	mov	r2, r0
 80100e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80100ec:	9c01      	ldr	r4, [sp, #4]
 80100ee:	e9c4 2300 	strd	r2, r3, [r4]
 80100f2:	4602      	mov	r2, r0
 80100f4:	460b      	mov	r3, r1
 80100f6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80100fa:	f7f0 f8c5 	bl	8000288 <__aeabi_dsub>
 80100fe:	ae4c      	add	r6, sp, #304	; 0x130
 8010100:	2401      	movs	r4, #1
 8010102:	42a5      	cmp	r5, r4
 8010104:	da2c      	bge.n	8010160 <__kernel_rem_pio2+0x5e0>
 8010106:	f1bb 0f00 	cmp.w	fp, #0
 801010a:	d002      	beq.n	8010112 <__kernel_rem_pio2+0x592>
 801010c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010110:	4619      	mov	r1, r3
 8010112:	9b01      	ldr	r3, [sp, #4]
 8010114:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010118:	e7a5      	b.n	8010066 <__kernel_rem_pio2+0x4e6>
 801011a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 801011e:	eb0d 0403 	add.w	r4, sp, r3
 8010122:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8010126:	2000      	movs	r0, #0
 8010128:	2100      	movs	r1, #0
 801012a:	2d00      	cmp	r5, #0
 801012c:	da09      	bge.n	8010142 <__kernel_rem_pio2+0x5c2>
 801012e:	f1bb 0f00 	cmp.w	fp, #0
 8010132:	d002      	beq.n	801013a <__kernel_rem_pio2+0x5ba>
 8010134:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010138:	4619      	mov	r1, r3
 801013a:	9b01      	ldr	r3, [sp, #4]
 801013c:	e9c3 0100 	strd	r0, r1, [r3]
 8010140:	e791      	b.n	8010066 <__kernel_rem_pio2+0x4e6>
 8010142:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010146:	f7f0 f8a1 	bl	800028c <__adddf3>
 801014a:	3d01      	subs	r5, #1
 801014c:	e7ed      	b.n	801012a <__kernel_rem_pio2+0x5aa>
 801014e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010152:	f7f0 f89b 	bl	800028c <__adddf3>
 8010156:	3e01      	subs	r6, #1
 8010158:	e7c0      	b.n	80100dc <__kernel_rem_pio2+0x55c>
 801015a:	4602      	mov	r2, r0
 801015c:	460b      	mov	r3, r1
 801015e:	e7c5      	b.n	80100ec <__kernel_rem_pio2+0x56c>
 8010160:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8010164:	f7f0 f892 	bl	800028c <__adddf3>
 8010168:	3401      	adds	r4, #1
 801016a:	e7ca      	b.n	8010102 <__kernel_rem_pio2+0x582>
 801016c:	e9da 8900 	ldrd	r8, r9, [sl]
 8010170:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8010174:	9b02      	ldr	r3, [sp, #8]
 8010176:	3b01      	subs	r3, #1
 8010178:	9302      	str	r3, [sp, #8]
 801017a:	4632      	mov	r2, r6
 801017c:	463b      	mov	r3, r7
 801017e:	4640      	mov	r0, r8
 8010180:	4649      	mov	r1, r9
 8010182:	f7f0 f883 	bl	800028c <__adddf3>
 8010186:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801018a:	4602      	mov	r2, r0
 801018c:	460b      	mov	r3, r1
 801018e:	4640      	mov	r0, r8
 8010190:	4649      	mov	r1, r9
 8010192:	f7f0 f879 	bl	8000288 <__aeabi_dsub>
 8010196:	4632      	mov	r2, r6
 8010198:	463b      	mov	r3, r7
 801019a:	f7f0 f877 	bl	800028c <__adddf3>
 801019e:	ed9d 7b08 	vldr	d7, [sp, #32]
 80101a2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80101a6:	ed8a 7b00 	vstr	d7, [sl]
 80101aa:	e76e      	b.n	801008a <__kernel_rem_pio2+0x50a>
 80101ac:	e9d4 8900 	ldrd	r8, r9, [r4]
 80101b0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80101b4:	4640      	mov	r0, r8
 80101b6:	4632      	mov	r2, r6
 80101b8:	463b      	mov	r3, r7
 80101ba:	4649      	mov	r1, r9
 80101bc:	f7f0 f866 	bl	800028c <__adddf3>
 80101c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80101c4:	4602      	mov	r2, r0
 80101c6:	460b      	mov	r3, r1
 80101c8:	4640      	mov	r0, r8
 80101ca:	4649      	mov	r1, r9
 80101cc:	f7f0 f85c 	bl	8000288 <__aeabi_dsub>
 80101d0:	4632      	mov	r2, r6
 80101d2:	463b      	mov	r3, r7
 80101d4:	f7f0 f85a 	bl	800028c <__adddf3>
 80101d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80101dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80101e0:	ed84 7b00 	vstr	d7, [r4]
 80101e4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80101e8:	e755      	b.n	8010096 <__kernel_rem_pio2+0x516>
 80101ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80101ee:	f7f0 f84d 	bl	800028c <__adddf3>
 80101f2:	3d01      	subs	r5, #1
 80101f4:	e759      	b.n	80100aa <__kernel_rem_pio2+0x52a>
 80101f6:	9b01      	ldr	r3, [sp, #4]
 80101f8:	9a01      	ldr	r2, [sp, #4]
 80101fa:	601d      	str	r5, [r3, #0]
 80101fc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8010200:	605c      	str	r4, [r3, #4]
 8010202:	609f      	str	r7, [r3, #8]
 8010204:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8010208:	60d3      	str	r3, [r2, #12]
 801020a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801020e:	6110      	str	r0, [r2, #16]
 8010210:	6153      	str	r3, [r2, #20]
 8010212:	e728      	b.n	8010066 <__kernel_rem_pio2+0x4e6>
 8010214:	41700000 	.word	0x41700000
 8010218:	3e700000 	.word	0x3e700000
 801021c:	00000000 	.word	0x00000000

08010220 <__kernel_tan>:
 8010220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010224:	ed2d 8b06 	vpush	{d8-d10}
 8010228:	ec5b ab10 	vmov	sl, fp, d0
 801022c:	4be0      	ldr	r3, [pc, #896]	; (80105b0 <__kernel_tan+0x390>)
 801022e:	b083      	sub	sp, #12
 8010230:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8010234:	429f      	cmp	r7, r3
 8010236:	ec59 8b11 	vmov	r8, r9, d1
 801023a:	4606      	mov	r6, r0
 801023c:	f8cd b000 	str.w	fp, [sp]
 8010240:	dc61      	bgt.n	8010306 <__kernel_tan+0xe6>
 8010242:	ee10 0a10 	vmov	r0, s0
 8010246:	4659      	mov	r1, fp
 8010248:	f7f0 fc86 	bl	8000b58 <__aeabi_d2iz>
 801024c:	4605      	mov	r5, r0
 801024e:	2800      	cmp	r0, #0
 8010250:	f040 8083 	bne.w	801035a <__kernel_tan+0x13a>
 8010254:	1c73      	adds	r3, r6, #1
 8010256:	4652      	mov	r2, sl
 8010258:	4313      	orrs	r3, r2
 801025a:	433b      	orrs	r3, r7
 801025c:	d112      	bne.n	8010284 <__kernel_tan+0x64>
 801025e:	ec4b ab10 	vmov	d0, sl, fp
 8010262:	f000 fa17 	bl	8010694 <fabs>
 8010266:	49d3      	ldr	r1, [pc, #844]	; (80105b4 <__kernel_tan+0x394>)
 8010268:	ec53 2b10 	vmov	r2, r3, d0
 801026c:	2000      	movs	r0, #0
 801026e:	f7f0 faed 	bl	800084c <__aeabi_ddiv>
 8010272:	4682      	mov	sl, r0
 8010274:	468b      	mov	fp, r1
 8010276:	ec4b ab10 	vmov	d0, sl, fp
 801027a:	b003      	add	sp, #12
 801027c:	ecbd 8b06 	vpop	{d8-d10}
 8010280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010284:	2e01      	cmp	r6, #1
 8010286:	d0f6      	beq.n	8010276 <__kernel_tan+0x56>
 8010288:	4642      	mov	r2, r8
 801028a:	464b      	mov	r3, r9
 801028c:	4650      	mov	r0, sl
 801028e:	4659      	mov	r1, fp
 8010290:	f7ef fffc 	bl	800028c <__adddf3>
 8010294:	4602      	mov	r2, r0
 8010296:	460b      	mov	r3, r1
 8010298:	460f      	mov	r7, r1
 801029a:	2000      	movs	r0, #0
 801029c:	49c6      	ldr	r1, [pc, #792]	; (80105b8 <__kernel_tan+0x398>)
 801029e:	f7f0 fad5 	bl	800084c <__aeabi_ddiv>
 80102a2:	e9cd 0100 	strd	r0, r1, [sp]
 80102a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80102aa:	462e      	mov	r6, r5
 80102ac:	4652      	mov	r2, sl
 80102ae:	462c      	mov	r4, r5
 80102b0:	4630      	mov	r0, r6
 80102b2:	461d      	mov	r5, r3
 80102b4:	4639      	mov	r1, r7
 80102b6:	465b      	mov	r3, fp
 80102b8:	f7ef ffe6 	bl	8000288 <__aeabi_dsub>
 80102bc:	4602      	mov	r2, r0
 80102be:	460b      	mov	r3, r1
 80102c0:	4640      	mov	r0, r8
 80102c2:	4649      	mov	r1, r9
 80102c4:	f7ef ffe0 	bl	8000288 <__aeabi_dsub>
 80102c8:	4632      	mov	r2, r6
 80102ca:	462b      	mov	r3, r5
 80102cc:	f7f0 f994 	bl	80005f8 <__aeabi_dmul>
 80102d0:	4632      	mov	r2, r6
 80102d2:	4680      	mov	r8, r0
 80102d4:	4689      	mov	r9, r1
 80102d6:	462b      	mov	r3, r5
 80102d8:	4630      	mov	r0, r6
 80102da:	4639      	mov	r1, r7
 80102dc:	f7f0 f98c 	bl	80005f8 <__aeabi_dmul>
 80102e0:	4bb4      	ldr	r3, [pc, #720]	; (80105b4 <__kernel_tan+0x394>)
 80102e2:	2200      	movs	r2, #0
 80102e4:	f7ef ffd2 	bl	800028c <__adddf3>
 80102e8:	4602      	mov	r2, r0
 80102ea:	460b      	mov	r3, r1
 80102ec:	4640      	mov	r0, r8
 80102ee:	4649      	mov	r1, r9
 80102f0:	f7ef ffcc 	bl	800028c <__adddf3>
 80102f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80102f8:	f7f0 f97e 	bl	80005f8 <__aeabi_dmul>
 80102fc:	4622      	mov	r2, r4
 80102fe:	462b      	mov	r3, r5
 8010300:	f7ef ffc4 	bl	800028c <__adddf3>
 8010304:	e7b5      	b.n	8010272 <__kernel_tan+0x52>
 8010306:	4bad      	ldr	r3, [pc, #692]	; (80105bc <__kernel_tan+0x39c>)
 8010308:	429f      	cmp	r7, r3
 801030a:	dd26      	ble.n	801035a <__kernel_tan+0x13a>
 801030c:	9b00      	ldr	r3, [sp, #0]
 801030e:	2b00      	cmp	r3, #0
 8010310:	da09      	bge.n	8010326 <__kernel_tan+0x106>
 8010312:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010316:	469b      	mov	fp, r3
 8010318:	ee10 aa10 	vmov	sl, s0
 801031c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010320:	ee11 8a10 	vmov	r8, s2
 8010324:	4699      	mov	r9, r3
 8010326:	4652      	mov	r2, sl
 8010328:	465b      	mov	r3, fp
 801032a:	a183      	add	r1, pc, #524	; (adr r1, 8010538 <__kernel_tan+0x318>)
 801032c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010330:	f7ef ffaa 	bl	8000288 <__aeabi_dsub>
 8010334:	4642      	mov	r2, r8
 8010336:	464b      	mov	r3, r9
 8010338:	4604      	mov	r4, r0
 801033a:	460d      	mov	r5, r1
 801033c:	a180      	add	r1, pc, #512	; (adr r1, 8010540 <__kernel_tan+0x320>)
 801033e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010342:	f7ef ffa1 	bl	8000288 <__aeabi_dsub>
 8010346:	4622      	mov	r2, r4
 8010348:	462b      	mov	r3, r5
 801034a:	f7ef ff9f 	bl	800028c <__adddf3>
 801034e:	f04f 0800 	mov.w	r8, #0
 8010352:	4682      	mov	sl, r0
 8010354:	468b      	mov	fp, r1
 8010356:	f04f 0900 	mov.w	r9, #0
 801035a:	4652      	mov	r2, sl
 801035c:	465b      	mov	r3, fp
 801035e:	4650      	mov	r0, sl
 8010360:	4659      	mov	r1, fp
 8010362:	f7f0 f949 	bl	80005f8 <__aeabi_dmul>
 8010366:	4602      	mov	r2, r0
 8010368:	460b      	mov	r3, r1
 801036a:	ec43 2b18 	vmov	d8, r2, r3
 801036e:	f7f0 f943 	bl	80005f8 <__aeabi_dmul>
 8010372:	ec53 2b18 	vmov	r2, r3, d8
 8010376:	4604      	mov	r4, r0
 8010378:	460d      	mov	r5, r1
 801037a:	4650      	mov	r0, sl
 801037c:	4659      	mov	r1, fp
 801037e:	f7f0 f93b 	bl	80005f8 <__aeabi_dmul>
 8010382:	a371      	add	r3, pc, #452	; (adr r3, 8010548 <__kernel_tan+0x328>)
 8010384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010388:	ec41 0b19 	vmov	d9, r0, r1
 801038c:	4620      	mov	r0, r4
 801038e:	4629      	mov	r1, r5
 8010390:	f7f0 f932 	bl	80005f8 <__aeabi_dmul>
 8010394:	a36e      	add	r3, pc, #440	; (adr r3, 8010550 <__kernel_tan+0x330>)
 8010396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801039a:	f7ef ff77 	bl	800028c <__adddf3>
 801039e:	4622      	mov	r2, r4
 80103a0:	462b      	mov	r3, r5
 80103a2:	f7f0 f929 	bl	80005f8 <__aeabi_dmul>
 80103a6:	a36c      	add	r3, pc, #432	; (adr r3, 8010558 <__kernel_tan+0x338>)
 80103a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ac:	f7ef ff6e 	bl	800028c <__adddf3>
 80103b0:	4622      	mov	r2, r4
 80103b2:	462b      	mov	r3, r5
 80103b4:	f7f0 f920 	bl	80005f8 <__aeabi_dmul>
 80103b8:	a369      	add	r3, pc, #420	; (adr r3, 8010560 <__kernel_tan+0x340>)
 80103ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103be:	f7ef ff65 	bl	800028c <__adddf3>
 80103c2:	4622      	mov	r2, r4
 80103c4:	462b      	mov	r3, r5
 80103c6:	f7f0 f917 	bl	80005f8 <__aeabi_dmul>
 80103ca:	a367      	add	r3, pc, #412	; (adr r3, 8010568 <__kernel_tan+0x348>)
 80103cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103d0:	f7ef ff5c 	bl	800028c <__adddf3>
 80103d4:	4622      	mov	r2, r4
 80103d6:	462b      	mov	r3, r5
 80103d8:	f7f0 f90e 	bl	80005f8 <__aeabi_dmul>
 80103dc:	a364      	add	r3, pc, #400	; (adr r3, 8010570 <__kernel_tan+0x350>)
 80103de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e2:	f7ef ff53 	bl	800028c <__adddf3>
 80103e6:	ec53 2b18 	vmov	r2, r3, d8
 80103ea:	f7f0 f905 	bl	80005f8 <__aeabi_dmul>
 80103ee:	a362      	add	r3, pc, #392	; (adr r3, 8010578 <__kernel_tan+0x358>)
 80103f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103f4:	ec41 0b1a 	vmov	d10, r0, r1
 80103f8:	4620      	mov	r0, r4
 80103fa:	4629      	mov	r1, r5
 80103fc:	f7f0 f8fc 	bl	80005f8 <__aeabi_dmul>
 8010400:	a35f      	add	r3, pc, #380	; (adr r3, 8010580 <__kernel_tan+0x360>)
 8010402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010406:	f7ef ff41 	bl	800028c <__adddf3>
 801040a:	4622      	mov	r2, r4
 801040c:	462b      	mov	r3, r5
 801040e:	f7f0 f8f3 	bl	80005f8 <__aeabi_dmul>
 8010412:	a35d      	add	r3, pc, #372	; (adr r3, 8010588 <__kernel_tan+0x368>)
 8010414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010418:	f7ef ff38 	bl	800028c <__adddf3>
 801041c:	4622      	mov	r2, r4
 801041e:	462b      	mov	r3, r5
 8010420:	f7f0 f8ea 	bl	80005f8 <__aeabi_dmul>
 8010424:	a35a      	add	r3, pc, #360	; (adr r3, 8010590 <__kernel_tan+0x370>)
 8010426:	e9d3 2300 	ldrd	r2, r3, [r3]
 801042a:	f7ef ff2f 	bl	800028c <__adddf3>
 801042e:	4622      	mov	r2, r4
 8010430:	462b      	mov	r3, r5
 8010432:	f7f0 f8e1 	bl	80005f8 <__aeabi_dmul>
 8010436:	a358      	add	r3, pc, #352	; (adr r3, 8010598 <__kernel_tan+0x378>)
 8010438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801043c:	f7ef ff26 	bl	800028c <__adddf3>
 8010440:	4622      	mov	r2, r4
 8010442:	462b      	mov	r3, r5
 8010444:	f7f0 f8d8 	bl	80005f8 <__aeabi_dmul>
 8010448:	a355      	add	r3, pc, #340	; (adr r3, 80105a0 <__kernel_tan+0x380>)
 801044a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801044e:	f7ef ff1d 	bl	800028c <__adddf3>
 8010452:	4602      	mov	r2, r0
 8010454:	460b      	mov	r3, r1
 8010456:	ec51 0b1a 	vmov	r0, r1, d10
 801045a:	f7ef ff17 	bl	800028c <__adddf3>
 801045e:	ec53 2b19 	vmov	r2, r3, d9
 8010462:	f7f0 f8c9 	bl	80005f8 <__aeabi_dmul>
 8010466:	4642      	mov	r2, r8
 8010468:	464b      	mov	r3, r9
 801046a:	f7ef ff0f 	bl	800028c <__adddf3>
 801046e:	ec53 2b18 	vmov	r2, r3, d8
 8010472:	f7f0 f8c1 	bl	80005f8 <__aeabi_dmul>
 8010476:	4642      	mov	r2, r8
 8010478:	464b      	mov	r3, r9
 801047a:	f7ef ff07 	bl	800028c <__adddf3>
 801047e:	a34a      	add	r3, pc, #296	; (adr r3, 80105a8 <__kernel_tan+0x388>)
 8010480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010484:	4604      	mov	r4, r0
 8010486:	460d      	mov	r5, r1
 8010488:	ec51 0b19 	vmov	r0, r1, d9
 801048c:	f7f0 f8b4 	bl	80005f8 <__aeabi_dmul>
 8010490:	4622      	mov	r2, r4
 8010492:	462b      	mov	r3, r5
 8010494:	f7ef fefa 	bl	800028c <__adddf3>
 8010498:	460b      	mov	r3, r1
 801049a:	ec41 0b18 	vmov	d8, r0, r1
 801049e:	4602      	mov	r2, r0
 80104a0:	4659      	mov	r1, fp
 80104a2:	4650      	mov	r0, sl
 80104a4:	f7ef fef2 	bl	800028c <__adddf3>
 80104a8:	4b44      	ldr	r3, [pc, #272]	; (80105bc <__kernel_tan+0x39c>)
 80104aa:	429f      	cmp	r7, r3
 80104ac:	4604      	mov	r4, r0
 80104ae:	460d      	mov	r5, r1
 80104b0:	f340 8086 	ble.w	80105c0 <__kernel_tan+0x3a0>
 80104b4:	4630      	mov	r0, r6
 80104b6:	f7f0 f835 	bl	8000524 <__aeabi_i2d>
 80104ba:	4622      	mov	r2, r4
 80104bc:	4680      	mov	r8, r0
 80104be:	4689      	mov	r9, r1
 80104c0:	462b      	mov	r3, r5
 80104c2:	4620      	mov	r0, r4
 80104c4:	4629      	mov	r1, r5
 80104c6:	f7f0 f897 	bl	80005f8 <__aeabi_dmul>
 80104ca:	4642      	mov	r2, r8
 80104cc:	4606      	mov	r6, r0
 80104ce:	460f      	mov	r7, r1
 80104d0:	464b      	mov	r3, r9
 80104d2:	4620      	mov	r0, r4
 80104d4:	4629      	mov	r1, r5
 80104d6:	f7ef fed9 	bl	800028c <__adddf3>
 80104da:	4602      	mov	r2, r0
 80104dc:	460b      	mov	r3, r1
 80104de:	4630      	mov	r0, r6
 80104e0:	4639      	mov	r1, r7
 80104e2:	f7f0 f9b3 	bl	800084c <__aeabi_ddiv>
 80104e6:	ec53 2b18 	vmov	r2, r3, d8
 80104ea:	f7ef fecd 	bl	8000288 <__aeabi_dsub>
 80104ee:	4602      	mov	r2, r0
 80104f0:	460b      	mov	r3, r1
 80104f2:	4650      	mov	r0, sl
 80104f4:	4659      	mov	r1, fp
 80104f6:	f7ef fec7 	bl	8000288 <__aeabi_dsub>
 80104fa:	4602      	mov	r2, r0
 80104fc:	460b      	mov	r3, r1
 80104fe:	f7ef fec5 	bl	800028c <__adddf3>
 8010502:	4602      	mov	r2, r0
 8010504:	460b      	mov	r3, r1
 8010506:	4640      	mov	r0, r8
 8010508:	4649      	mov	r1, r9
 801050a:	f7ef febd 	bl	8000288 <__aeabi_dsub>
 801050e:	9b00      	ldr	r3, [sp, #0]
 8010510:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8010514:	f00a 0a02 	and.w	sl, sl, #2
 8010518:	4604      	mov	r4, r0
 801051a:	f1ca 0001 	rsb	r0, sl, #1
 801051e:	460d      	mov	r5, r1
 8010520:	f7f0 f800 	bl	8000524 <__aeabi_i2d>
 8010524:	4602      	mov	r2, r0
 8010526:	460b      	mov	r3, r1
 8010528:	4620      	mov	r0, r4
 801052a:	4629      	mov	r1, r5
 801052c:	f7f0 f864 	bl	80005f8 <__aeabi_dmul>
 8010530:	e69f      	b.n	8010272 <__kernel_tan+0x52>
 8010532:	bf00      	nop
 8010534:	f3af 8000 	nop.w
 8010538:	54442d18 	.word	0x54442d18
 801053c:	3fe921fb 	.word	0x3fe921fb
 8010540:	33145c07 	.word	0x33145c07
 8010544:	3c81a626 	.word	0x3c81a626
 8010548:	74bf7ad4 	.word	0x74bf7ad4
 801054c:	3efb2a70 	.word	0x3efb2a70
 8010550:	32f0a7e9 	.word	0x32f0a7e9
 8010554:	3f12b80f 	.word	0x3f12b80f
 8010558:	1a8d1068 	.word	0x1a8d1068
 801055c:	3f3026f7 	.word	0x3f3026f7
 8010560:	fee08315 	.word	0xfee08315
 8010564:	3f57dbc8 	.word	0x3f57dbc8
 8010568:	e96e8493 	.word	0xe96e8493
 801056c:	3f8226e3 	.word	0x3f8226e3
 8010570:	1bb341fe 	.word	0x1bb341fe
 8010574:	3faba1ba 	.word	0x3faba1ba
 8010578:	db605373 	.word	0xdb605373
 801057c:	bef375cb 	.word	0xbef375cb
 8010580:	a03792a6 	.word	0xa03792a6
 8010584:	3f147e88 	.word	0x3f147e88
 8010588:	f2f26501 	.word	0xf2f26501
 801058c:	3f4344d8 	.word	0x3f4344d8
 8010590:	c9560328 	.word	0xc9560328
 8010594:	3f6d6d22 	.word	0x3f6d6d22
 8010598:	8406d637 	.word	0x8406d637
 801059c:	3f9664f4 	.word	0x3f9664f4
 80105a0:	1110fe7a 	.word	0x1110fe7a
 80105a4:	3fc11111 	.word	0x3fc11111
 80105a8:	55555563 	.word	0x55555563
 80105ac:	3fd55555 	.word	0x3fd55555
 80105b0:	3e2fffff 	.word	0x3e2fffff
 80105b4:	3ff00000 	.word	0x3ff00000
 80105b8:	bff00000 	.word	0xbff00000
 80105bc:	3fe59427 	.word	0x3fe59427
 80105c0:	2e01      	cmp	r6, #1
 80105c2:	d02f      	beq.n	8010624 <__kernel_tan+0x404>
 80105c4:	460f      	mov	r7, r1
 80105c6:	4602      	mov	r2, r0
 80105c8:	460b      	mov	r3, r1
 80105ca:	4689      	mov	r9, r1
 80105cc:	2000      	movs	r0, #0
 80105ce:	4917      	ldr	r1, [pc, #92]	; (801062c <__kernel_tan+0x40c>)
 80105d0:	f7f0 f93c 	bl	800084c <__aeabi_ddiv>
 80105d4:	2600      	movs	r6, #0
 80105d6:	e9cd 0100 	strd	r0, r1, [sp]
 80105da:	4652      	mov	r2, sl
 80105dc:	465b      	mov	r3, fp
 80105de:	4630      	mov	r0, r6
 80105e0:	4639      	mov	r1, r7
 80105e2:	f7ef fe51 	bl	8000288 <__aeabi_dsub>
 80105e6:	e9dd 4500 	ldrd	r4, r5, [sp]
 80105ea:	4602      	mov	r2, r0
 80105ec:	460b      	mov	r3, r1
 80105ee:	ec51 0b18 	vmov	r0, r1, d8
 80105f2:	f7ef fe49 	bl	8000288 <__aeabi_dsub>
 80105f6:	4632      	mov	r2, r6
 80105f8:	462b      	mov	r3, r5
 80105fa:	f7ef fffd 	bl	80005f8 <__aeabi_dmul>
 80105fe:	46b0      	mov	r8, r6
 8010600:	460f      	mov	r7, r1
 8010602:	4642      	mov	r2, r8
 8010604:	462b      	mov	r3, r5
 8010606:	4634      	mov	r4, r6
 8010608:	4649      	mov	r1, r9
 801060a:	4606      	mov	r6, r0
 801060c:	4640      	mov	r0, r8
 801060e:	f7ef fff3 	bl	80005f8 <__aeabi_dmul>
 8010612:	4b07      	ldr	r3, [pc, #28]	; (8010630 <__kernel_tan+0x410>)
 8010614:	2200      	movs	r2, #0
 8010616:	f7ef fe39 	bl	800028c <__adddf3>
 801061a:	4602      	mov	r2, r0
 801061c:	460b      	mov	r3, r1
 801061e:	4630      	mov	r0, r6
 8010620:	4639      	mov	r1, r7
 8010622:	e665      	b.n	80102f0 <__kernel_tan+0xd0>
 8010624:	4682      	mov	sl, r0
 8010626:	468b      	mov	fp, r1
 8010628:	e625      	b.n	8010276 <__kernel_tan+0x56>
 801062a:	bf00      	nop
 801062c:	bff00000 	.word	0xbff00000
 8010630:	3ff00000 	.word	0x3ff00000

08010634 <with_errno>:
 8010634:	b570      	push	{r4, r5, r6, lr}
 8010636:	4604      	mov	r4, r0
 8010638:	460d      	mov	r5, r1
 801063a:	4616      	mov	r6, r2
 801063c:	f7f9 fd34 	bl	800a0a8 <__errno>
 8010640:	4629      	mov	r1, r5
 8010642:	6006      	str	r6, [r0, #0]
 8010644:	4620      	mov	r0, r4
 8010646:	bd70      	pop	{r4, r5, r6, pc}

08010648 <xflow>:
 8010648:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801064a:	4614      	mov	r4, r2
 801064c:	461d      	mov	r5, r3
 801064e:	b108      	cbz	r0, 8010654 <xflow+0xc>
 8010650:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010654:	e9cd 2300 	strd	r2, r3, [sp]
 8010658:	e9dd 2300 	ldrd	r2, r3, [sp]
 801065c:	4620      	mov	r0, r4
 801065e:	4629      	mov	r1, r5
 8010660:	f7ef ffca 	bl	80005f8 <__aeabi_dmul>
 8010664:	2222      	movs	r2, #34	; 0x22
 8010666:	b003      	add	sp, #12
 8010668:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801066c:	f7ff bfe2 	b.w	8010634 <with_errno>

08010670 <__math_uflow>:
 8010670:	b508      	push	{r3, lr}
 8010672:	2200      	movs	r2, #0
 8010674:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010678:	f7ff ffe6 	bl	8010648 <xflow>
 801067c:	ec41 0b10 	vmov	d0, r0, r1
 8010680:	bd08      	pop	{r3, pc}

08010682 <__math_oflow>:
 8010682:	b508      	push	{r3, lr}
 8010684:	2200      	movs	r2, #0
 8010686:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801068a:	f7ff ffdd 	bl	8010648 <xflow>
 801068e:	ec41 0b10 	vmov	d0, r0, r1
 8010692:	bd08      	pop	{r3, pc}

08010694 <fabs>:
 8010694:	ec51 0b10 	vmov	r0, r1, d0
 8010698:	ee10 2a10 	vmov	r2, s0
 801069c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80106a0:	ec43 2b10 	vmov	d0, r2, r3
 80106a4:	4770      	bx	lr

080106a6 <finite>:
 80106a6:	b082      	sub	sp, #8
 80106a8:	ed8d 0b00 	vstr	d0, [sp]
 80106ac:	9801      	ldr	r0, [sp, #4]
 80106ae:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80106b2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80106b6:	0fc0      	lsrs	r0, r0, #31
 80106b8:	b002      	add	sp, #8
 80106ba:	4770      	bx	lr
 80106bc:	0000      	movs	r0, r0
	...

080106c0 <floor>:
 80106c0:	ec51 0b10 	vmov	r0, r1, d0
 80106c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106c8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80106cc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80106d0:	2e13      	cmp	r6, #19
 80106d2:	ee10 5a10 	vmov	r5, s0
 80106d6:	ee10 8a10 	vmov	r8, s0
 80106da:	460c      	mov	r4, r1
 80106dc:	dc32      	bgt.n	8010744 <floor+0x84>
 80106de:	2e00      	cmp	r6, #0
 80106e0:	da14      	bge.n	801070c <floor+0x4c>
 80106e2:	a333      	add	r3, pc, #204	; (adr r3, 80107b0 <floor+0xf0>)
 80106e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106e8:	f7ef fdd0 	bl	800028c <__adddf3>
 80106ec:	2200      	movs	r2, #0
 80106ee:	2300      	movs	r3, #0
 80106f0:	f7f0 fa12 	bl	8000b18 <__aeabi_dcmpgt>
 80106f4:	b138      	cbz	r0, 8010706 <floor+0x46>
 80106f6:	2c00      	cmp	r4, #0
 80106f8:	da57      	bge.n	80107aa <floor+0xea>
 80106fa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80106fe:	431d      	orrs	r5, r3
 8010700:	d001      	beq.n	8010706 <floor+0x46>
 8010702:	4c2d      	ldr	r4, [pc, #180]	; (80107b8 <floor+0xf8>)
 8010704:	2500      	movs	r5, #0
 8010706:	4621      	mov	r1, r4
 8010708:	4628      	mov	r0, r5
 801070a:	e025      	b.n	8010758 <floor+0x98>
 801070c:	4f2b      	ldr	r7, [pc, #172]	; (80107bc <floor+0xfc>)
 801070e:	4137      	asrs	r7, r6
 8010710:	ea01 0307 	and.w	r3, r1, r7
 8010714:	4303      	orrs	r3, r0
 8010716:	d01f      	beq.n	8010758 <floor+0x98>
 8010718:	a325      	add	r3, pc, #148	; (adr r3, 80107b0 <floor+0xf0>)
 801071a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801071e:	f7ef fdb5 	bl	800028c <__adddf3>
 8010722:	2200      	movs	r2, #0
 8010724:	2300      	movs	r3, #0
 8010726:	f7f0 f9f7 	bl	8000b18 <__aeabi_dcmpgt>
 801072a:	2800      	cmp	r0, #0
 801072c:	d0eb      	beq.n	8010706 <floor+0x46>
 801072e:	2c00      	cmp	r4, #0
 8010730:	bfbe      	ittt	lt
 8010732:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8010736:	fa43 f606 	asrlt.w	r6, r3, r6
 801073a:	19a4      	addlt	r4, r4, r6
 801073c:	ea24 0407 	bic.w	r4, r4, r7
 8010740:	2500      	movs	r5, #0
 8010742:	e7e0      	b.n	8010706 <floor+0x46>
 8010744:	2e33      	cmp	r6, #51	; 0x33
 8010746:	dd0b      	ble.n	8010760 <floor+0xa0>
 8010748:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801074c:	d104      	bne.n	8010758 <floor+0x98>
 801074e:	ee10 2a10 	vmov	r2, s0
 8010752:	460b      	mov	r3, r1
 8010754:	f7ef fd9a 	bl	800028c <__adddf3>
 8010758:	ec41 0b10 	vmov	d0, r0, r1
 801075c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010760:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8010764:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010768:	fa23 f707 	lsr.w	r7, r3, r7
 801076c:	4207      	tst	r7, r0
 801076e:	d0f3      	beq.n	8010758 <floor+0x98>
 8010770:	a30f      	add	r3, pc, #60	; (adr r3, 80107b0 <floor+0xf0>)
 8010772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010776:	f7ef fd89 	bl	800028c <__adddf3>
 801077a:	2200      	movs	r2, #0
 801077c:	2300      	movs	r3, #0
 801077e:	f7f0 f9cb 	bl	8000b18 <__aeabi_dcmpgt>
 8010782:	2800      	cmp	r0, #0
 8010784:	d0bf      	beq.n	8010706 <floor+0x46>
 8010786:	2c00      	cmp	r4, #0
 8010788:	da02      	bge.n	8010790 <floor+0xd0>
 801078a:	2e14      	cmp	r6, #20
 801078c:	d103      	bne.n	8010796 <floor+0xd6>
 801078e:	3401      	adds	r4, #1
 8010790:	ea25 0507 	bic.w	r5, r5, r7
 8010794:	e7b7      	b.n	8010706 <floor+0x46>
 8010796:	2301      	movs	r3, #1
 8010798:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801079c:	fa03 f606 	lsl.w	r6, r3, r6
 80107a0:	4435      	add	r5, r6
 80107a2:	4545      	cmp	r5, r8
 80107a4:	bf38      	it	cc
 80107a6:	18e4      	addcc	r4, r4, r3
 80107a8:	e7f2      	b.n	8010790 <floor+0xd0>
 80107aa:	2500      	movs	r5, #0
 80107ac:	462c      	mov	r4, r5
 80107ae:	e7aa      	b.n	8010706 <floor+0x46>
 80107b0:	8800759c 	.word	0x8800759c
 80107b4:	7e37e43c 	.word	0x7e37e43c
 80107b8:	bff00000 	.word	0xbff00000
 80107bc:	000fffff 	.word	0x000fffff

080107c0 <scalbn>:
 80107c0:	b570      	push	{r4, r5, r6, lr}
 80107c2:	ec55 4b10 	vmov	r4, r5, d0
 80107c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80107ca:	4606      	mov	r6, r0
 80107cc:	462b      	mov	r3, r5
 80107ce:	b99a      	cbnz	r2, 80107f8 <scalbn+0x38>
 80107d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80107d4:	4323      	orrs	r3, r4
 80107d6:	d036      	beq.n	8010846 <scalbn+0x86>
 80107d8:	4b39      	ldr	r3, [pc, #228]	; (80108c0 <scalbn+0x100>)
 80107da:	4629      	mov	r1, r5
 80107dc:	ee10 0a10 	vmov	r0, s0
 80107e0:	2200      	movs	r2, #0
 80107e2:	f7ef ff09 	bl	80005f8 <__aeabi_dmul>
 80107e6:	4b37      	ldr	r3, [pc, #220]	; (80108c4 <scalbn+0x104>)
 80107e8:	429e      	cmp	r6, r3
 80107ea:	4604      	mov	r4, r0
 80107ec:	460d      	mov	r5, r1
 80107ee:	da10      	bge.n	8010812 <scalbn+0x52>
 80107f0:	a32b      	add	r3, pc, #172	; (adr r3, 80108a0 <scalbn+0xe0>)
 80107f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f6:	e03a      	b.n	801086e <scalbn+0xae>
 80107f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80107fc:	428a      	cmp	r2, r1
 80107fe:	d10c      	bne.n	801081a <scalbn+0x5a>
 8010800:	ee10 2a10 	vmov	r2, s0
 8010804:	4620      	mov	r0, r4
 8010806:	4629      	mov	r1, r5
 8010808:	f7ef fd40 	bl	800028c <__adddf3>
 801080c:	4604      	mov	r4, r0
 801080e:	460d      	mov	r5, r1
 8010810:	e019      	b.n	8010846 <scalbn+0x86>
 8010812:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010816:	460b      	mov	r3, r1
 8010818:	3a36      	subs	r2, #54	; 0x36
 801081a:	4432      	add	r2, r6
 801081c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010820:	428a      	cmp	r2, r1
 8010822:	dd08      	ble.n	8010836 <scalbn+0x76>
 8010824:	2d00      	cmp	r5, #0
 8010826:	a120      	add	r1, pc, #128	; (adr r1, 80108a8 <scalbn+0xe8>)
 8010828:	e9d1 0100 	ldrd	r0, r1, [r1]
 801082c:	da1c      	bge.n	8010868 <scalbn+0xa8>
 801082e:	a120      	add	r1, pc, #128	; (adr r1, 80108b0 <scalbn+0xf0>)
 8010830:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010834:	e018      	b.n	8010868 <scalbn+0xa8>
 8010836:	2a00      	cmp	r2, #0
 8010838:	dd08      	ble.n	801084c <scalbn+0x8c>
 801083a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801083e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010842:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010846:	ec45 4b10 	vmov	d0, r4, r5
 801084a:	bd70      	pop	{r4, r5, r6, pc}
 801084c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010850:	da19      	bge.n	8010886 <scalbn+0xc6>
 8010852:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010856:	429e      	cmp	r6, r3
 8010858:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801085c:	dd0a      	ble.n	8010874 <scalbn+0xb4>
 801085e:	a112      	add	r1, pc, #72	; (adr r1, 80108a8 <scalbn+0xe8>)
 8010860:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d1e2      	bne.n	801082e <scalbn+0x6e>
 8010868:	a30f      	add	r3, pc, #60	; (adr r3, 80108a8 <scalbn+0xe8>)
 801086a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801086e:	f7ef fec3 	bl	80005f8 <__aeabi_dmul>
 8010872:	e7cb      	b.n	801080c <scalbn+0x4c>
 8010874:	a10a      	add	r1, pc, #40	; (adr r1, 80108a0 <scalbn+0xe0>)
 8010876:	e9d1 0100 	ldrd	r0, r1, [r1]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d0b8      	beq.n	80107f0 <scalbn+0x30>
 801087e:	a10e      	add	r1, pc, #56	; (adr r1, 80108b8 <scalbn+0xf8>)
 8010880:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010884:	e7b4      	b.n	80107f0 <scalbn+0x30>
 8010886:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801088a:	3236      	adds	r2, #54	; 0x36
 801088c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010890:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010894:	4620      	mov	r0, r4
 8010896:	4b0c      	ldr	r3, [pc, #48]	; (80108c8 <scalbn+0x108>)
 8010898:	2200      	movs	r2, #0
 801089a:	e7e8      	b.n	801086e <scalbn+0xae>
 801089c:	f3af 8000 	nop.w
 80108a0:	c2f8f359 	.word	0xc2f8f359
 80108a4:	01a56e1f 	.word	0x01a56e1f
 80108a8:	8800759c 	.word	0x8800759c
 80108ac:	7e37e43c 	.word	0x7e37e43c
 80108b0:	8800759c 	.word	0x8800759c
 80108b4:	fe37e43c 	.word	0xfe37e43c
 80108b8:	c2f8f359 	.word	0xc2f8f359
 80108bc:	81a56e1f 	.word	0x81a56e1f
 80108c0:	43500000 	.word	0x43500000
 80108c4:	ffff3cb0 	.word	0xffff3cb0
 80108c8:	3c900000 	.word	0x3c900000

080108cc <_init>:
 80108cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108ce:	bf00      	nop
 80108d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108d2:	bc08      	pop	{r3}
 80108d4:	469e      	mov	lr, r3
 80108d6:	4770      	bx	lr

080108d8 <_fini>:
 80108d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108da:	bf00      	nop
 80108dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108de:	bc08      	pop	{r3}
 80108e0:	469e      	mov	lr, r3
 80108e2:	4770      	bx	lr
