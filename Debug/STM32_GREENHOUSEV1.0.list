
STM32_GREENHOUSEV1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f2dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000710  0800f470  0800f470  0001f470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb80  0800fb80  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb80  0800fb80  0001fb80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb88  0800fb88  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb88  0800fb88  0001fb88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fb8c  0800fb8c  0001fb8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800fb90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000078c  20000208  0800fd94  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000994  0800fd94  00020994  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a021  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035af  00000000  00000000  0003a255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001548  00000000  00000000  0003d808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d8  00000000  00000000  0003ed50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b530  00000000  00000000  00040128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b914  00000000  00000000  0006b658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001082e1  00000000  00000000  00086f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018f24d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007260  00000000  00000000  0018f2a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f454 	.word	0x0800f454

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0800f454 	.word	0x0800f454

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffe:	463b      	mov	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
 800100c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800100e:	4b29      	ldr	r3, [pc, #164]	; (80010b4 <MX_ADC2_Init+0xbc>)
 8001010:	4a29      	ldr	r2, [pc, #164]	; (80010b8 <MX_ADC2_Init+0xc0>)
 8001012:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001014:	4b27      	ldr	r3, [pc, #156]	; (80010b4 <MX_ADC2_Init+0xbc>)
 8001016:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800101a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 800101c:	4b25      	ldr	r3, [pc, #148]	; (80010b4 <MX_ADC2_Init+0xbc>)
 800101e:	2208      	movs	r2, #8
 8001020:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001022:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <MX_ADC2_Init+0xbc>)
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001028:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <MX_ADC2_Init+0xbc>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <MX_ADC2_Init+0xbc>)
 8001030:	2204      	movs	r2, #4
 8001032:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001034:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <MX_ADC2_Init+0xbc>)
 8001036:	2200      	movs	r2, #0
 8001038:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800103a:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <MX_ADC2_Init+0xbc>)
 800103c:	2200      	movs	r2, #0
 800103e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001040:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <MX_ADC2_Init+0xbc>)
 8001042:	2201      	movs	r2, #1
 8001044:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001046:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <MX_ADC2_Init+0xbc>)
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800104e:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <MX_ADC2_Init+0xbc>)
 8001050:	2200      	movs	r2, #0
 8001052:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001054:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <MX_ADC2_Init+0xbc>)
 8001056:	2200      	movs	r2, #0
 8001058:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800105a:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <MX_ADC2_Init+0xbc>)
 800105c:	2200      	movs	r2, #0
 800105e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <MX_ADC2_Init+0xbc>)
 8001064:	2200      	movs	r2, #0
 8001066:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <MX_ADC2_Init+0xbc>)
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001070:	4810      	ldr	r0, [pc, #64]	; (80010b4 <MX_ADC2_Init+0xbc>)
 8001072:	f002 f815 	bl	80030a0 <HAL_ADC_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 800107c:	f001 f8e0 	bl	8002240 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001080:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <MX_ADC2_Init+0xc4>)
 8001082:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001084:	2306      	movs	r3, #6
 8001086:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800108c:	237f      	movs	r3, #127	; 0x7f
 800108e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001090:	2304      	movs	r3, #4
 8001092:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001098:	463b      	mov	r3, r7
 800109a:	4619      	mov	r1, r3
 800109c:	4805      	ldr	r0, [pc, #20]	; (80010b4 <MX_ADC2_Init+0xbc>)
 800109e:	f002 fe8f 	bl	8003dc0 <HAL_ADC_ConfigChannel>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 80010a8:	f001 f8ca 	bl	8002240 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010ac:	bf00      	nop
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000224 	.word	0x20000224
 80010b8:	50040100 	.word	0x50040100
 80010bc:	3ef08000 	.word	0x3ef08000

080010c0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c6:	463b      	mov	r3, r7
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
 80010d4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80010d6:	4b29      	ldr	r3, [pc, #164]	; (800117c <MX_ADC3_Init+0xbc>)
 80010d8:	4a29      	ldr	r2, [pc, #164]	; (8001180 <MX_ADC3_Init+0xc0>)
 80010da:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80010dc:	4b27      	ldr	r3, [pc, #156]	; (800117c <MX_ADC3_Init+0xbc>)
 80010de:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010e2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 80010e4:	4b25      	ldr	r3, [pc, #148]	; (800117c <MX_ADC3_Init+0xbc>)
 80010e6:	2208      	movs	r2, #8
 80010e8:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ea:	4b24      	ldr	r3, [pc, #144]	; (800117c <MX_ADC3_Init+0xbc>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010f0:	4b22      	ldr	r3, [pc, #136]	; (800117c <MX_ADC3_Init+0xbc>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80010f6:	4b21      	ldr	r3, [pc, #132]	; (800117c <MX_ADC3_Init+0xbc>)
 80010f8:	2208      	movs	r2, #8
 80010fa:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80010fc:	4b1f      	ldr	r3, [pc, #124]	; (800117c <MX_ADC3_Init+0xbc>)
 80010fe:	2200      	movs	r2, #0
 8001100:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001102:	4b1e      	ldr	r3, [pc, #120]	; (800117c <MX_ADC3_Init+0xbc>)
 8001104:	2200      	movs	r2, #0
 8001106:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001108:	4b1c      	ldr	r3, [pc, #112]	; (800117c <MX_ADC3_Init+0xbc>)
 800110a:	2201      	movs	r2, #1
 800110c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800110e:	4b1b      	ldr	r3, [pc, #108]	; (800117c <MX_ADC3_Init+0xbc>)
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001116:	4b19      	ldr	r3, [pc, #100]	; (800117c <MX_ADC3_Init+0xbc>)
 8001118:	2200      	movs	r2, #0
 800111a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800111c:	4b17      	ldr	r3, [pc, #92]	; (800117c <MX_ADC3_Init+0xbc>)
 800111e:	2200      	movs	r2, #0
 8001120:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001122:	4b16      	ldr	r3, [pc, #88]	; (800117c <MX_ADC3_Init+0xbc>)
 8001124:	2200      	movs	r2, #0
 8001126:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <MX_ADC3_Init+0xbc>)
 800112c:	2200      	movs	r2, #0
 800112e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <MX_ADC3_Init+0xbc>)
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001138:	4810      	ldr	r0, [pc, #64]	; (800117c <MX_ADC3_Init+0xbc>)
 800113a:	f001 ffb1 	bl	80030a0 <HAL_ADC_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 8001144:	f001 f87c 	bl	8002240 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001148:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <MX_ADC3_Init+0xc4>)
 800114a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800114c:	2306      	movs	r3, #6
 800114e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001154:	237f      	movs	r3, #127	; 0x7f
 8001156:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001158:	2304      	movs	r3, #4
 800115a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001160:	463b      	mov	r3, r7
 8001162:	4619      	mov	r1, r3
 8001164:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_ADC3_Init+0xbc>)
 8001166:	f002 fe2b 	bl	8003dc0 <HAL_ADC_ConfigChannel>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8001170:	f001 f866 	bl	8002240 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001174:	bf00      	nop
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000288 	.word	0x20000288
 8001180:	50040200 	.word	0x50040200
 8001184:	08600004 	.word	0x08600004

08001188 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08c      	sub	sp, #48	; 0x30
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a3b      	ldr	r2, [pc, #236]	; (8001294 <HAL_ADC_MspInit+0x10c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d135      	bne.n	8001216 <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80011aa:	4b3b      	ldr	r3, [pc, #236]	; (8001298 <HAL_ADC_MspInit+0x110>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	3301      	adds	r3, #1
 80011b0:	4a39      	ldr	r2, [pc, #228]	; (8001298 <HAL_ADC_MspInit+0x110>)
 80011b2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80011b4:	4b38      	ldr	r3, [pc, #224]	; (8001298 <HAL_ADC_MspInit+0x110>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d10b      	bne.n	80011d4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80011bc:	4b37      	ldr	r3, [pc, #220]	; (800129c <HAL_ADC_MspInit+0x114>)
 80011be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c0:	4a36      	ldr	r2, [pc, #216]	; (800129c <HAL_ADC_MspInit+0x114>)
 80011c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c8:	4b34      	ldr	r3, [pc, #208]	; (800129c <HAL_ADC_MspInit+0x114>)
 80011ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011d0:	61bb      	str	r3, [r7, #24]
 80011d2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d4:	4b31      	ldr	r3, [pc, #196]	; (800129c <HAL_ADC_MspInit+0x114>)
 80011d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d8:	4a30      	ldr	r2, [pc, #192]	; (800129c <HAL_ADC_MspInit+0x114>)
 80011da:	f043 0302 	orr.w	r3, r3, #2
 80011de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e0:	4b2e      	ldr	r3, [pc, #184]	; (800129c <HAL_ADC_MspInit+0x114>)
 80011e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	697b      	ldr	r3, [r7, #20]
    /**ADC2 GPIO Configuration
    PB0     ------> ADC2_IN15
    */
    GPIO_InitStruct.Pin = PHOTORESISTOR_Pin;
 80011ec:	2301      	movs	r3, #1
 80011ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011f0:	230b      	movs	r3, #11
 80011f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PHOTORESISTOR_GPIO_Port, &GPIO_InitStruct);
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	4619      	mov	r1, r3
 80011fe:	4828      	ldr	r0, [pc, #160]	; (80012a0 <HAL_ADC_MspInit+0x118>)
 8001200:	f003 feec 	bl	8004fdc <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001204:	2200      	movs	r2, #0
 8001206:	2100      	movs	r1, #0
 8001208:	2012      	movs	r0, #18
 800120a:	f003 fc78 	bl	8004afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800120e:	2012      	movs	r0, #18
 8001210:	f003 fc91 	bl	8004b36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001214:	e039      	b.n	800128a <HAL_ADC_MspInit+0x102>
  else if(adcHandle->Instance==ADC3)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a22      	ldr	r2, [pc, #136]	; (80012a4 <HAL_ADC_MspInit+0x11c>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d134      	bne.n	800128a <HAL_ADC_MspInit+0x102>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001220:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <HAL_ADC_MspInit+0x110>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	3301      	adds	r3, #1
 8001226:	4a1c      	ldr	r2, [pc, #112]	; (8001298 <HAL_ADC_MspInit+0x110>)
 8001228:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800122a:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <HAL_ADC_MspInit+0x110>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d10b      	bne.n	800124a <HAL_ADC_MspInit+0xc2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001232:	4b1a      	ldr	r3, [pc, #104]	; (800129c <HAL_ADC_MspInit+0x114>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	4a19      	ldr	r2, [pc, #100]	; (800129c <HAL_ADC_MspInit+0x114>)
 8001238:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800123c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <HAL_ADC_MspInit+0x114>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <HAL_ADC_MspInit+0x114>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	4a13      	ldr	r2, [pc, #76]	; (800129c <HAL_ADC_MspInit+0x114>)
 8001250:	f043 0304 	orr.w	r3, r3, #4
 8001254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <HAL_ADC_MspInit+0x114>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	f003 0304 	and.w	r3, r3, #4
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EC_READ_Pin|PH_READ_Pin;
 8001262:	2306      	movs	r3, #6
 8001264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001266:	230b      	movs	r3, #11
 8001268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	4619      	mov	r1, r3
 8001274:	480c      	ldr	r0, [pc, #48]	; (80012a8 <HAL_ADC_MspInit+0x120>)
 8001276:	f003 feb1 	bl	8004fdc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	202f      	movs	r0, #47	; 0x2f
 8001280:	f003 fc3d 	bl	8004afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001284:	202f      	movs	r0, #47	; 0x2f
 8001286:	f003 fc56 	bl	8004b36 <HAL_NVIC_EnableIRQ>
}
 800128a:	bf00      	nop
 800128c:	3730      	adds	r7, #48	; 0x30
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	50040100 	.word	0x50040100
 8001298:	200002ec 	.word	0x200002ec
 800129c:	40021000 	.word	0x40021000
 80012a0:	48000400 	.word	0x48000400
 80012a4:	50040200 	.word	0x50040200
 80012a8:	48000800 	.word	0x48000800

080012ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <MX_DMA_Init+0x38>)
 80012b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012b6:	4a0b      	ldr	r2, [pc, #44]	; (80012e4 <MX_DMA_Init+0x38>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6493      	str	r3, [r2, #72]	; 0x48
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <MX_DMA_Init+0x38>)
 80012c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	200c      	movs	r0, #12
 80012d0:	f003 fc15 	bl	8004afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80012d4:	200c      	movs	r0, #12
 80012d6:	f003 fc2e 	bl	8004b36 <HAL_NVIC_EnableIRQ>

}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000

080012e8 <is_ec_initialized>:

extern long long int time_prev;


_Bool is_ec_initialized ()
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
	return ec_initialized;
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <is_ec_initialized+0x14>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	2000030d 	.word	0x2000030d

08001300 <reset_ec_initialized>:


void reset_ec_initialized ()
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
	ec_initialized = 0;
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <reset_ec_initialized+0x14>)
 8001306:	2200      	movs	r2, #0
 8001308:	701a      	strb	r2, [r3, #0]
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	2000030d 	.word	0x2000030d

08001318 <is_ec_value_readed>:
	adEC = adEC_val;
}


_Bool is_ec_value_readed ()
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
	return ec_value_readed;
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <is_ec_value_readed+0x1c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	bf14      	ite	ne
 8001324:	2301      	movne	r3, #1
 8001326:	2300      	moveq	r3, #0
 8001328:	b2db      	uxtb	r3, r3
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	20000310 	.word	0x20000310

08001338 <reset_is_ec_value_readed>:


void reset_is_ec_value_readed ()
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
	ec_value_readed = 0;
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <reset_is_ec_value_readed+0x14>)
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	20000310 	.word	0x20000310

08001350 <is_ph_value_readed>:
	adPH = adPH_val;
}


_Bool is_ph_value_readed ()
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
	return ph_value_readed;
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <is_ph_value_readed+0x14>)
 8001356:	781b      	ldrb	r3, [r3, #0]
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000314 	.word	0x20000314

08001368 <reset_is_ph_value_readed>:


void reset_is_ph_value_readed ()
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
	ph_value_readed = 0;
 800136c:	4b03      	ldr	r3, [pc, #12]	; (800137c <reset_is_ph_value_readed+0x14>)
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	20000314 	.word	0x20000314

08001380 <get_EC>:


float get_EC ()
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
	return EC;
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <get_EC+0x18>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	ee07 3a90 	vmov	s15, r3
}
 800138c:	eeb0 0a67 	vmov.f32	s0, s15
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	200002f0 	.word	0x200002f0

0800139c <get_PH>:


float get_PH ()
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
	return PH;
 80013a0:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <get_PH+0x18>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	ee07 3a90 	vmov	s15, r3
}
 80013a8:	eeb0 0a67 	vmov.f32	s0, s15
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	20000308 	.word	0x20000308

080013b8 <ec_init>:


void ec_init ()
{
 80013b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	if (is_counting_ec == 0)
 80013bc:	4e19      	ldr	r6, [pc, #100]	; (8001424 <ec_init+0x6c>)
 80013be:	7836      	ldrb	r6, [r6, #0]
 80013c0:	f086 0601 	eor.w	r6, r6, #1
 80013c4:	b2f6      	uxtb	r6, r6
 80013c6:	2e00      	cmp	r6, #0
 80013c8:	d012      	beq.n	80013f0 <ec_init+0x38>
	{
		time_prev = __HAL_TIM_GET_COUNTER(&htim2);
 80013ca:	4b17      	ldr	r3, [pc, #92]	; (8001428 <ec_init+0x70>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d0:	2200      	movs	r2, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	4611      	mov	r1, r2
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <ec_init+0x74>)
 80013d8:	e9c3 0100 	strd	r0, r1, [r3]
		is_counting_ec = 1;
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <ec_init+0x6c>)
 80013de:	2201      	movs	r2, #1
 80013e0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(EC_WRITE_GPIO_Port, EC_WRITE_Pin, GPIO_PIN_SET); // Imposto il pin ECPower(PC0 -> A5) a livello alto: 3.3v
 80013e2:	2201      	movs	r2, #1
 80013e4:	2180      	movs	r1, #128	; 0x80
 80013e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ea:	f003 ffa1 	bl	8005330 <HAL_GPIO_WritePin>
		{
			is_counting_ec = 0;
			ec_initialized = 1;
		}
	}
}
 80013ee:	e016      	b.n	800141e <ec_init+0x66>
		if (__HAL_TIM_GET_COUNTER(&htim2) - time_prev >= 6000000)
 80013f0:	490d      	ldr	r1, [pc, #52]	; (8001428 <ec_init+0x70>)
 80013f2:	6809      	ldr	r1, [r1, #0]
 80013f4:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80013f6:	2000      	movs	r0, #0
 80013f8:	460c      	mov	r4, r1
 80013fa:	4605      	mov	r5, r0
 80013fc:	490b      	ldr	r1, [pc, #44]	; (800142c <ec_init+0x74>)
 80013fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001402:	1a22      	subs	r2, r4, r0
 8001404:	eb65 0301 	sbc.w	r3, r5, r1
 8001408:	4909      	ldr	r1, [pc, #36]	; (8001430 <ec_init+0x78>)
 800140a:	428a      	cmp	r2, r1
 800140c:	f173 0300 	sbcs.w	r3, r3, #0
 8001410:	db05      	blt.n	800141e <ec_init+0x66>
			is_counting_ec = 0;
 8001412:	4b04      	ldr	r3, [pc, #16]	; (8001424 <ec_init+0x6c>)
 8001414:	2200      	movs	r2, #0
 8001416:	701a      	strb	r2, [r3, #0]
			ec_initialized = 1;
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <ec_init+0x7c>)
 800141a:	2201      	movs	r2, #1
 800141c:	701a      	strb	r2, [r3, #0]
}
 800141e:	bf00      	nop
 8001420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001422:	bf00      	nop
 8001424:	2000030c 	.word	0x2000030c
 8001428:	20000854 	.word	0x20000854
 800142c:	20000978 	.word	0x20000978
 8001430:	005b8d80 	.word	0x005b8d80
 8001434:	2000030d 	.word	0x2000030d

08001438 <ec_read>:
//	ec_value_readed = 1;
//}

// Funzionamento EC meter
void ec_read(ADC_HandleTypeDef *hadc)
{ //funzione dichiarata nel .h e chiamata dal main
 8001438:	b5b0      	push	{r4, r5, r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); //Imposto il pin ECPower(PC0 -> A5) a livello alto: 3.3v
//
//	HAL_Delay(6000); //Attendo che il PC0 si stabilizzi a 3.3v

	// Seleziona il canale ADC desiderato (CHANNEL2)
	set_ec_channel();
 8001440:	f000 fab8 	bl	80019b4 <set_ec_channel>

//	HAL_ADC_Start_IT(hadc);

	HAL_ADC_Start(&hadc3); // avvia la conversione ADC da EC_Read(PC1 -> A4)
 8001444:	4838      	ldr	r0, [pc, #224]	; (8001528 <ec_read+0xf0>)
 8001446:	f001 ff81 	bl	800334c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, 100); // attendi la fine della conversione
 800144a:	2164      	movs	r1, #100	; 0x64
 800144c:	4836      	ldr	r0, [pc, #216]	; (8001528 <ec_read+0xf0>)
 800144e:	f002 f837 	bl	80034c0 <HAL_ADC_PollForConversion>
	adEC = HAL_ADC_GetValue(&hadc3);//Leggo il valore analog
 8001452:	4835      	ldr	r0, [pc, #212]	; (8001528 <ec_read+0xf0>)
 8001454:	f002 fa79 	bl	800394a <HAL_ADC_GetValue>
 8001458:	ee07 0a90 	vmov	s15, r0
 800145c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001460:	4b32      	ldr	r3, [pc, #200]	; (800152c <ec_read+0xf4>)
 8001462:	edc3 7a00 	vstr	s15, [r3]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); //Imposto il pin ECPower(PC0 -> A5) a livello basso: 0v
 8001466:	2200      	movs	r2, #0
 8001468:	2180      	movs	r1, #128	; 0x80
 800146a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146e:	f003 ff5f 	bl	8005330 <HAL_GPIO_WritePin>

	VdropEC= (Vin *adEC) / 1024.0; //converto tot bit(adEC) in tensione(VdropEC) (precision_ADC = 2^10 -> = 1024)
 8001472:	4b2e      	ldr	r3, [pc, #184]	; (800152c <ec_read+0xf4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff f866 	bl	8000548 <__aeabi_f2d>
 800147c:	a328      	add	r3, pc, #160	; (adr r3, 8001520 <ec_read+0xe8>)
 800147e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001482:	f7ff f8b9 	bl	80005f8 <__aeabi_dmul>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	4b27      	ldr	r3, [pc, #156]	; (8001530 <ec_read+0xf8>)
 8001494:	f7ff f9da 	bl	800084c <__aeabi_ddiv>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	f7ff fba2 	bl	8000be8 <__aeabi_d2f>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4a23      	ldr	r2, [pc, #140]	; (8001534 <ec_read+0xfc>)
 80014a8:	6013      	str	r3, [r2, #0]
	RWater = (VdropEC*R1) / (Vin-VdropEC); // prova ad aumentare la precisione a 2^12
 80014aa:	4b22      	ldr	r3, [pc, #136]	; (8001534 <ec_read+0xfc>)
 80014ac:	edd3 7a00 	vldr	s15, [r3]
 80014b0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001538 <ec_read+0x100>
 80014b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b8:	ee17 0a90 	vmov	r0, s15
 80014bc:	f7ff f844 	bl	8000548 <__aeabi_f2d>
 80014c0:	4604      	mov	r4, r0
 80014c2:	460d      	mov	r5, r1
 80014c4:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <ec_read+0xfc>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff f83d 	bl	8000548 <__aeabi_f2d>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	a113      	add	r1, pc, #76	; (adr r1, 8001520 <ec_read+0xe8>)
 80014d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014d8:	f7fe fed6 	bl	8000288 <__aeabi_dsub>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4620      	mov	r0, r4
 80014e2:	4629      	mov	r1, r5
 80014e4:	f7ff f9b2 	bl	800084c <__aeabi_ddiv>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4610      	mov	r0, r2
 80014ee:	4619      	mov	r1, r3
 80014f0:	f7ff fb7a 	bl	8000be8 <__aeabi_d2f>
 80014f4:	4603      	mov	r3, r0
 80014f6:	4a11      	ldr	r2, [pc, #68]	; (800153c <ec_read+0x104>)
 80014f8:	6013      	str	r3, [r2, #0]
	EC = 1000/ (RWater*K1); //mS/cm
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <ec_read+0x104>)
 80014fc:	ed93 7a00 	vldr	s14, [r3]
 8001500:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001540 <ec_read+0x108>
 8001504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001508:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <ec_read+0x10c>)
 800150a:	edc3 7a00 	vstr	s15, [r3]
//	}
//
//	HAL_Delay(2000); // attendo che il PA7 si stabilizzi a 0v
//
//	return EC;
	ec_value_readed = 1;
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <ec_read+0x110>)
 8001510:	2201      	movs	r2, #1
 8001512:	601a      	str	r2, [r3, #0]
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bdb0      	pop	{r4, r5, r7, pc}
 800151c:	f3af 8000 	nop.w
 8001520:	66666666 	.word	0x66666666
 8001524:	400a6666 	.word	0x400a6666
 8001528:	20000288 	.word	0x20000288
 800152c:	200002f4 	.word	0x200002f4
 8001530:	40900000 	.word	0x40900000
 8001534:	200002f8 	.word	0x200002f8
 8001538:	43fa0000 	.word	0x43fa0000
 800153c:	200002fc 	.word	0x200002fc
 8001540:	447a0000 	.word	0x447a0000
 8001544:	200002f0 	.word	0x200002f0
 8001548:	20000310 	.word	0x20000310
 800154c:	00000000 	.word	0x00000000

08001550 <ph_read>:

void ph_read (ADC_HandleTypeDef *hadc)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	set_ph_channel();
 8001558:	f000 fa90 	bl	8001a7c <set_ph_channel>
//	reading_ec = 0;
//	reading_ph = 1;

//	HAL_ADC_Start_IT(hadc); // avvia la conversione ADC da EC_Read(PC1 -> A4)

	HAL_ADC_Start(&hadc3);
 800155c:	48a6      	ldr	r0, [pc, #664]	; (80017f8 <ph_read+0x2a8>)
 800155e:	f001 fef5 	bl	800334c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, 100);
 8001562:	2164      	movs	r1, #100	; 0x64
 8001564:	48a4      	ldr	r0, [pc, #656]	; (80017f8 <ph_read+0x2a8>)
 8001566:	f001 ffab 	bl	80034c0 <HAL_ADC_PollForConversion>
	adPH = HAL_ADC_GetValue(&hadc3);
 800156a:	48a3      	ldr	r0, [pc, #652]	; (80017f8 <ph_read+0x2a8>)
 800156c:	f002 f9ed 	bl	800394a <HAL_ADC_GetValue>
 8001570:	ee07 0a90 	vmov	s15, r0
 8001574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001578:	4ba0      	ldr	r3, [pc, #640]	; (80017fc <ph_read+0x2ac>)
 800157a:	edc3 7a00 	vstr	s15, [r3]
//	HAL_ADC_Stop(&hadc3);

	VdropPH = (Vin * adPH) / 1024.0; //converto bit(adPH) in tensione(VdropPH) (precision_ADC = 2^10 -> = 1024)
 800157e:	4b9f      	ldr	r3, [pc, #636]	; (80017fc <ph_read+0x2ac>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f7fe ffe0 	bl	8000548 <__aeabi_f2d>
 8001588:	a389      	add	r3, pc, #548	; (adr r3, 80017b0 <ph_read+0x260>)
 800158a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158e:	f7ff f833 	bl	80005f8 <__aeabi_dmul>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4610      	mov	r0, r2
 8001598:	4619      	mov	r1, r3
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	4b98      	ldr	r3, [pc, #608]	; (8001800 <ph_read+0x2b0>)
 80015a0:	f7ff f954 	bl	800084c <__aeabi_ddiv>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4610      	mov	r0, r2
 80015aa:	4619      	mov	r1, r3
 80015ac:	f7ff fb1c 	bl	8000be8 <__aeabi_d2f>
 80015b0:	4603      	mov	r3, r0
 80015b2:	4a94      	ldr	r2, [pc, #592]	; (8001804 <ph_read+0x2b4>)
 80015b4:	6013      	str	r3, [r2, #0]

	if (VdropPH == 0)
 80015b6:	4b93      	ldr	r3, [pc, #588]	; (8001804 <ph_read+0x2b4>)
 80015b8:	edd3 7a00 	vldr	s15, [r3]
 80015bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c4:	d104      	bne.n	80015d0 <ph_read+0x80>
		PH = 0;
 80015c6:	4b90      	ldr	r3, [pc, #576]	; (8001808 <ph_read+0x2b8>)
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	e1be      	b.n	800194e <ph_read+0x3fe>
	else if (VdropPH > 0 && VdropPH <= ph_interval)
 80015d0:	4b8c      	ldr	r3, [pc, #560]	; (8001804 <ph_read+0x2b4>)
 80015d2:	edd3 7a00 	vldr	s15, [r3]
 80015d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015de:	dd11      	ble.n	8001604 <ph_read+0xb4>
 80015e0:	4b88      	ldr	r3, [pc, #544]	; (8001804 <ph_read+0x2b4>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ffaf 	bl	8000548 <__aeabi_f2d>
 80015ea:	a373      	add	r3, pc, #460	; (adr r3, 80017b8 <ph_read+0x268>)
 80015ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f0:	f7ff fa7e 	bl	8000af0 <__aeabi_dcmple>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d004      	beq.n	8001604 <ph_read+0xb4>
		PH = 1;
 80015fa:	4b83      	ldr	r3, [pc, #524]	; (8001808 <ph_read+0x2b8>)
 80015fc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	e1a4      	b.n	800194e <ph_read+0x3fe>
	else if (VdropPH > ph_interval && VdropPH <= ph_interval*2)
 8001604:	4b7f      	ldr	r3, [pc, #508]	; (8001804 <ph_read+0x2b4>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f7fe ff9d 	bl	8000548 <__aeabi_f2d>
 800160e:	a36a      	add	r3, pc, #424	; (adr r3, 80017b8 <ph_read+0x268>)
 8001610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001614:	f7ff fa80 	bl	8000b18 <__aeabi_dcmpgt>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d011      	beq.n	8001642 <ph_read+0xf2>
 800161e:	4b79      	ldr	r3, [pc, #484]	; (8001804 <ph_read+0x2b4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe ff90 	bl	8000548 <__aeabi_f2d>
 8001628:	a365      	add	r3, pc, #404	; (adr r3, 80017c0 <ph_read+0x270>)
 800162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162e:	f7ff fa5f 	bl	8000af0 <__aeabi_dcmple>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d004      	beq.n	8001642 <ph_read+0xf2>
		PH = 2;
 8001638:	4b73      	ldr	r3, [pc, #460]	; (8001808 <ph_read+0x2b8>)
 800163a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	e185      	b.n	800194e <ph_read+0x3fe>
	else if (VdropPH > ph_interval*2 && VdropPH <= ph_interval*3)
 8001642:	4b70      	ldr	r3, [pc, #448]	; (8001804 <ph_read+0x2b4>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe ff7e 	bl	8000548 <__aeabi_f2d>
 800164c:	a35c      	add	r3, pc, #368	; (adr r3, 80017c0 <ph_read+0x270>)
 800164e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001652:	f7ff fa61 	bl	8000b18 <__aeabi_dcmpgt>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d010      	beq.n	800167e <ph_read+0x12e>
 800165c:	4b69      	ldr	r3, [pc, #420]	; (8001804 <ph_read+0x2b4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe ff71 	bl	8000548 <__aeabi_f2d>
 8001666:	a358      	add	r3, pc, #352	; (adr r3, 80017c8 <ph_read+0x278>)
 8001668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166c:	f7ff fa40 	bl	8000af0 <__aeabi_dcmple>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <ph_read+0x12e>
		PH = 3;
 8001676:	4b64      	ldr	r3, [pc, #400]	; (8001808 <ph_read+0x2b8>)
 8001678:	4a64      	ldr	r2, [pc, #400]	; (800180c <ph_read+0x2bc>)
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	e167      	b.n	800194e <ph_read+0x3fe>
	else if (VdropPH > ph_interval*3 && VdropPH <= ph_interval*4)
 800167e:	4b61      	ldr	r3, [pc, #388]	; (8001804 <ph_read+0x2b4>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe ff60 	bl	8000548 <__aeabi_f2d>
 8001688:	a34f      	add	r3, pc, #316	; (adr r3, 80017c8 <ph_read+0x278>)
 800168a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168e:	f7ff fa43 	bl	8000b18 <__aeabi_dcmpgt>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d011      	beq.n	80016bc <ph_read+0x16c>
 8001698:	4b5a      	ldr	r3, [pc, #360]	; (8001804 <ph_read+0x2b4>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe ff53 	bl	8000548 <__aeabi_f2d>
 80016a2:	a34b      	add	r3, pc, #300	; (adr r3, 80017d0 <ph_read+0x280>)
 80016a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a8:	f7ff fa22 	bl	8000af0 <__aeabi_dcmple>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d004      	beq.n	80016bc <ph_read+0x16c>
		PH = 4;
 80016b2:	4b55      	ldr	r3, [pc, #340]	; (8001808 <ph_read+0x2b8>)
 80016b4:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	e148      	b.n	800194e <ph_read+0x3fe>
	else if (VdropPH > ph_interval*4 && VdropPH <= ph_interval*5)
 80016bc:	4b51      	ldr	r3, [pc, #324]	; (8001804 <ph_read+0x2b4>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7fe ff41 	bl	8000548 <__aeabi_f2d>
 80016c6:	a342      	add	r3, pc, #264	; (adr r3, 80017d0 <ph_read+0x280>)
 80016c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016cc:	f7ff fa24 	bl	8000b18 <__aeabi_dcmpgt>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d010      	beq.n	80016f8 <ph_read+0x1a8>
 80016d6:	4b4b      	ldr	r3, [pc, #300]	; (8001804 <ph_read+0x2b4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe ff34 	bl	8000548 <__aeabi_f2d>
 80016e0:	a33d      	add	r3, pc, #244	; (adr r3, 80017d8 <ph_read+0x288>)
 80016e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e6:	f7ff fa03 	bl	8000af0 <__aeabi_dcmple>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d003      	beq.n	80016f8 <ph_read+0x1a8>
		PH = 5;
 80016f0:	4b45      	ldr	r3, [pc, #276]	; (8001808 <ph_read+0x2b8>)
 80016f2:	4a47      	ldr	r2, [pc, #284]	; (8001810 <ph_read+0x2c0>)
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	e12a      	b.n	800194e <ph_read+0x3fe>
	else if (VdropPH > ph_interval*5 && VdropPH <= ph_interval*6)
 80016f8:	4b42      	ldr	r3, [pc, #264]	; (8001804 <ph_read+0x2b4>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe ff23 	bl	8000548 <__aeabi_f2d>
 8001702:	a335      	add	r3, pc, #212	; (adr r3, 80017d8 <ph_read+0x288>)
 8001704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001708:	f7ff fa06 	bl	8000b18 <__aeabi_dcmpgt>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d010      	beq.n	8001734 <ph_read+0x1e4>
 8001712:	4b3c      	ldr	r3, [pc, #240]	; (8001804 <ph_read+0x2b4>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe ff16 	bl	8000548 <__aeabi_f2d>
 800171c:	a330      	add	r3, pc, #192	; (adr r3, 80017e0 <ph_read+0x290>)
 800171e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001722:	f7ff f9e5 	bl	8000af0 <__aeabi_dcmple>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <ph_read+0x1e4>
		PH = 6;
 800172c:	4b36      	ldr	r3, [pc, #216]	; (8001808 <ph_read+0x2b8>)
 800172e:	4a39      	ldr	r2, [pc, #228]	; (8001814 <ph_read+0x2c4>)
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	e10c      	b.n	800194e <ph_read+0x3fe>
	else if (VdropPH > ph_interval*6 && VdropPH <= ph_interval*7)
 8001734:	4b33      	ldr	r3, [pc, #204]	; (8001804 <ph_read+0x2b4>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe ff05 	bl	8000548 <__aeabi_f2d>
 800173e:	a328      	add	r3, pc, #160	; (adr r3, 80017e0 <ph_read+0x290>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7ff f9e8 	bl	8000b18 <__aeabi_dcmpgt>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d010      	beq.n	8001770 <ph_read+0x220>
 800174e:	4b2d      	ldr	r3, [pc, #180]	; (8001804 <ph_read+0x2b4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe fef8 	bl	8000548 <__aeabi_f2d>
 8001758:	a323      	add	r3, pc, #140	; (adr r3, 80017e8 <ph_read+0x298>)
 800175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175e:	f7ff f9c7 	bl	8000af0 <__aeabi_dcmple>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <ph_read+0x220>
		PH = 7;
 8001768:	4b27      	ldr	r3, [pc, #156]	; (8001808 <ph_read+0x2b8>)
 800176a:	4a2b      	ldr	r2, [pc, #172]	; (8001818 <ph_read+0x2c8>)
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	e0ee      	b.n	800194e <ph_read+0x3fe>
	else if (VdropPH > ph_interval*7 && VdropPH <= ph_interval*8)
 8001770:	4b24      	ldr	r3, [pc, #144]	; (8001804 <ph_read+0x2b4>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fee7 	bl	8000548 <__aeabi_f2d>
 800177a:	a31b      	add	r3, pc, #108	; (adr r3, 80017e8 <ph_read+0x298>)
 800177c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001780:	f7ff f9ca 	bl	8000b18 <__aeabi_dcmpgt>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d048      	beq.n	800181c <ph_read+0x2cc>
 800178a:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <ph_read+0x2b4>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe feda 	bl	8000548 <__aeabi_f2d>
 8001794:	a316      	add	r3, pc, #88	; (adr r3, 80017f0 <ph_read+0x2a0>)
 8001796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179a:	f7ff f9a9 	bl	8000af0 <__aeabi_dcmple>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d03b      	beq.n	800181c <ph_read+0x2cc>
		PH = 8;
 80017a4:	4b18      	ldr	r3, [pc, #96]	; (8001808 <ph_read+0x2b8>)
 80017a6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	e0cf      	b.n	800194e <ph_read+0x3fe>
 80017ae:	bf00      	nop
 80017b0:	66666666 	.word	0x66666666
 80017b4:	400a6666 	.word	0x400a6666
 80017b8:	e7d566cf 	.word	0xe7d566cf
 80017bc:	3fce2b6a 	.word	0x3fce2b6a
 80017c0:	e7d566cf 	.word	0xe7d566cf
 80017c4:	3fde2b6a 	.word	0x3fde2b6a
 80017c8:	2de00d1b 	.word	0x2de00d1b
 80017cc:	3fe6a090 	.word	0x3fe6a090
 80017d0:	e7d566cf 	.word	0xe7d566cf
 80017d4:	3fee2b6a 	.word	0x3fee2b6a
 80017d8:	d0e56041 	.word	0xd0e56041
 80017dc:	3ff2db22 	.word	0x3ff2db22
 80017e0:	2de00d1b 	.word	0x2de00d1b
 80017e4:	3ff6a090 	.word	0x3ff6a090
 80017e8:	8adab9f5 	.word	0x8adab9f5
 80017ec:	3ffa65fd 	.word	0x3ffa65fd
 80017f0:	e7d566cf 	.word	0xe7d566cf
 80017f4:	3ffe2b6a 	.word	0x3ffe2b6a
 80017f8:	20000288 	.word	0x20000288
 80017fc:	20000300 	.word	0x20000300
 8001800:	40900000 	.word	0x40900000
 8001804:	20000304 	.word	0x20000304
 8001808:	20000308 	.word	0x20000308
 800180c:	40400000 	.word	0x40400000
 8001810:	40a00000 	.word	0x40a00000
 8001814:	40c00000 	.word	0x40c00000
 8001818:	40e00000 	.word	0x40e00000
	else if (VdropPH > ph_interval*8 && VdropPH <= ph_interval*9)
 800181c:	4b5c      	ldr	r3, [pc, #368]	; (8001990 <ph_read+0x440>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe fe91 	bl	8000548 <__aeabi_f2d>
 8001826:	a34e      	add	r3, pc, #312	; (adr r3, 8001960 <ph_read+0x410>)
 8001828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182c:	f7ff f974 	bl	8000b18 <__aeabi_dcmpgt>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d010      	beq.n	8001858 <ph_read+0x308>
 8001836:	4b56      	ldr	r3, [pc, #344]	; (8001990 <ph_read+0x440>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe fe84 	bl	8000548 <__aeabi_f2d>
 8001840:	a349      	add	r3, pc, #292	; (adr r3, 8001968 <ph_read+0x418>)
 8001842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001846:	f7ff f953 	bl	8000af0 <__aeabi_dcmple>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <ph_read+0x308>
		PH = 9;
 8001850:	4b50      	ldr	r3, [pc, #320]	; (8001994 <ph_read+0x444>)
 8001852:	4a51      	ldr	r2, [pc, #324]	; (8001998 <ph_read+0x448>)
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	e07a      	b.n	800194e <ph_read+0x3fe>
	else if (VdropPH > ph_interval*9 && VdropPH <= ph_interval*10)
 8001858:	4b4d      	ldr	r3, [pc, #308]	; (8001990 <ph_read+0x440>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fe73 	bl	8000548 <__aeabi_f2d>
 8001862:	a341      	add	r3, pc, #260	; (adr r3, 8001968 <ph_read+0x418>)
 8001864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001868:	f7ff f956 	bl	8000b18 <__aeabi_dcmpgt>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d010      	beq.n	8001894 <ph_read+0x344>
 8001872:	4b47      	ldr	r3, [pc, #284]	; (8001990 <ph_read+0x440>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fe66 	bl	8000548 <__aeabi_f2d>
 800187c:	a33c      	add	r3, pc, #240	; (adr r3, 8001970 <ph_read+0x420>)
 800187e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001882:	f7ff f935 	bl	8000af0 <__aeabi_dcmple>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <ph_read+0x344>
		PH = 10;
 800188c:	4b41      	ldr	r3, [pc, #260]	; (8001994 <ph_read+0x444>)
 800188e:	4a43      	ldr	r2, [pc, #268]	; (800199c <ph_read+0x44c>)
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	e05c      	b.n	800194e <ph_read+0x3fe>
	else if (VdropPH > ph_interval*10 && VdropPH <= ph_interval*11)
 8001894:	4b3e      	ldr	r3, [pc, #248]	; (8001990 <ph_read+0x440>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fe55 	bl	8000548 <__aeabi_f2d>
 800189e:	a334      	add	r3, pc, #208	; (adr r3, 8001970 <ph_read+0x420>)
 80018a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a4:	f7ff f938 	bl	8000b18 <__aeabi_dcmpgt>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d010      	beq.n	80018d0 <ph_read+0x380>
 80018ae:	4b38      	ldr	r3, [pc, #224]	; (8001990 <ph_read+0x440>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe fe48 	bl	8000548 <__aeabi_f2d>
 80018b8:	a32f      	add	r3, pc, #188	; (adr r3, 8001978 <ph_read+0x428>)
 80018ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018be:	f7ff f917 	bl	8000af0 <__aeabi_dcmple>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <ph_read+0x380>
		PH = 11;
 80018c8:	4b32      	ldr	r3, [pc, #200]	; (8001994 <ph_read+0x444>)
 80018ca:	4a35      	ldr	r2, [pc, #212]	; (80019a0 <ph_read+0x450>)
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	e03e      	b.n	800194e <ph_read+0x3fe>
	else if (VdropPH > ph_interval*11 && VdropPH <= ph_interval*12)
 80018d0:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <ph_read+0x440>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fe37 	bl	8000548 <__aeabi_f2d>
 80018da:	a327      	add	r3, pc, #156	; (adr r3, 8001978 <ph_read+0x428>)
 80018dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e0:	f7ff f91a 	bl	8000b18 <__aeabi_dcmpgt>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d010      	beq.n	800190c <ph_read+0x3bc>
 80018ea:	4b29      	ldr	r3, [pc, #164]	; (8001990 <ph_read+0x440>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fe2a 	bl	8000548 <__aeabi_f2d>
 80018f4:	a322      	add	r3, pc, #136	; (adr r3, 8001980 <ph_read+0x430>)
 80018f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fa:	f7ff f8f9 	bl	8000af0 <__aeabi_dcmple>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <ph_read+0x3bc>
		PH = 12;
 8001904:	4b23      	ldr	r3, [pc, #140]	; (8001994 <ph_read+0x444>)
 8001906:	4a27      	ldr	r2, [pc, #156]	; (80019a4 <ph_read+0x454>)
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	e020      	b.n	800194e <ph_read+0x3fe>
	else if (VdropPH > ph_interval*12 && VdropPH <= ph_interval*13)
 800190c:	4b20      	ldr	r3, [pc, #128]	; (8001990 <ph_read+0x440>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fe19 	bl	8000548 <__aeabi_f2d>
 8001916:	a31a      	add	r3, pc, #104	; (adr r3, 8001980 <ph_read+0x430>)
 8001918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191c:	f7ff f8fc 	bl	8000b18 <__aeabi_dcmpgt>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d010      	beq.n	8001948 <ph_read+0x3f8>
 8001926:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <ph_read+0x440>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe fe0c 	bl	8000548 <__aeabi_f2d>
 8001930:	a315      	add	r3, pc, #84	; (adr r3, 8001988 <ph_read+0x438>)
 8001932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001936:	f7ff f8db 	bl	8000af0 <__aeabi_dcmple>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <ph_read+0x3f8>
		PH = 13;
 8001940:	4b14      	ldr	r3, [pc, #80]	; (8001994 <ph_read+0x444>)
 8001942:	4a19      	ldr	r2, [pc, #100]	; (80019a8 <ph_read+0x458>)
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	e002      	b.n	800194e <ph_read+0x3fe>
	else
	{
		PH = 14;
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <ph_read+0x444>)
 800194a:	4a18      	ldr	r2, [pc, #96]	; (80019ac <ph_read+0x45c>)
 800194c:	601a      	str	r2, [r3, #0]
	}

	ph_value_readed = 1;
 800194e:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <ph_read+0x460>)
 8001950:	2201      	movs	r2, #1
 8001952:	701a      	strb	r2, [r3, #0]
}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	f3af 8000 	nop.w
 8001960:	e7d566cf 	.word	0xe7d566cf
 8001964:	3ffe2b6a 	.word	0x3ffe2b6a
 8001968:	226809d4 	.word	0x226809d4
 800196c:	4000f86c 	.word	0x4000f86c
 8001970:	d0e56041 	.word	0xd0e56041
 8001974:	4002db22 	.word	0x4002db22
 8001978:	7f62b6ae 	.word	0x7f62b6ae
 800197c:	4004bdd9 	.word	0x4004bdd9
 8001980:	2de00d1b 	.word	0x2de00d1b
 8001984:	4006a090 	.word	0x4006a090
 8001988:	dc5d6388 	.word	0xdc5d6388
 800198c:	40088346 	.word	0x40088346
 8001990:	20000304 	.word	0x20000304
 8001994:	20000308 	.word	0x20000308
 8001998:	41100000 	.word	0x41100000
 800199c:	41200000 	.word	0x41200000
 80019a0:	41300000 	.word	0x41300000
 80019a4:	41400000 	.word	0x41400000
 80019a8:	41500000 	.word	0x41500000
 80019ac:	41600000 	.word	0x41600000
 80019b0:	20000314 	.word	0x20000314

080019b4 <set_ec_channel>:

void set_ec_channel ()
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019ba:	463b      	mov	r3, r7
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
 80019c8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80019ca:	4b29      	ldr	r3, [pc, #164]	; (8001a70 <set_ec_channel+0xbc>)
 80019cc:	4a29      	ldr	r2, [pc, #164]	; (8001a74 <set_ec_channel+0xc0>)
 80019ce:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80019d0:	4b27      	ldr	r3, [pc, #156]	; (8001a70 <set_ec_channel+0xbc>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 80019d6:	4b26      	ldr	r3, [pc, #152]	; (8001a70 <set_ec_channel+0xbc>)
 80019d8:	2208      	movs	r2, #8
 80019da:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019dc:	4b24      	ldr	r3, [pc, #144]	; (8001a70 <set_ec_channel+0xbc>)
 80019de:	2200      	movs	r2, #0
 80019e0:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019e2:	4b23      	ldr	r3, [pc, #140]	; (8001a70 <set_ec_channel+0xbc>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80019e8:	4b21      	ldr	r3, [pc, #132]	; (8001a70 <set_ec_channel+0xbc>)
 80019ea:	2208      	movs	r2, #8
 80019ec:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80019ee:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <set_ec_channel+0xbc>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80019f4:	4b1e      	ldr	r3, [pc, #120]	; (8001a70 <set_ec_channel+0xbc>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80019fa:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <set_ec_channel+0xbc>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001a00:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <set_ec_channel+0xbc>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a08:	4b19      	ldr	r3, [pc, #100]	; (8001a70 <set_ec_channel+0xbc>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a0e:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <set_ec_channel+0xbc>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001a14:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <set_ec_channel+0xbc>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <set_ec_channel+0xbc>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001a22:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <set_ec_channel+0xbc>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001a2a:	4811      	ldr	r0, [pc, #68]	; (8001a70 <set_ec_channel+0xbc>)
 8001a2c:	f001 fb38 	bl	80030a0 <HAL_ADC_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <set_ec_channel+0x86>
  {
    Error_Handler();
 8001a36:	f000 fc03 	bl	8002240 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001a3a:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <set_ec_channel+0xc4>)
 8001a3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a3e:	2306      	movs	r3, #6
 8001a40:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a46:	237f      	movs	r3, #127	; 0x7f
 8001a48:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a4a:	2304      	movs	r3, #4
 8001a4c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a52:	463b      	mov	r3, r7
 8001a54:	4619      	mov	r1, r3
 8001a56:	4806      	ldr	r0, [pc, #24]	; (8001a70 <set_ec_channel+0xbc>)
 8001a58:	f002 f9b2 	bl	8003dc0 <HAL_ADC_ConfigChannel>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <set_ec_channel+0xb2>
  {
    Error_Handler();
 8001a62:	f000 fbed 	bl	8002240 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001a66:	bf00      	nop
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000288 	.word	0x20000288
 8001a74:	50040200 	.word	0x50040200
 8001a78:	08600004 	.word	0x08600004

08001a7c <set_ph_channel>:

void set_ph_channel()
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a82:	463b      	mov	r3, r7
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
 8001a90:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001a92:	4b29      	ldr	r3, [pc, #164]	; (8001b38 <set_ph_channel+0xbc>)
 8001a94:	4a29      	ldr	r2, [pc, #164]	; (8001b3c <set_ph_channel+0xc0>)
 8001a96:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001a98:	4b27      	ldr	r3, [pc, #156]	; (8001b38 <set_ph_channel+0xbc>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 8001a9e:	4b26      	ldr	r3, [pc, #152]	; (8001b38 <set_ph_channel+0xbc>)
 8001aa0:	2208      	movs	r2, #8
 8001aa2:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001aa4:	4b24      	ldr	r3, [pc, #144]	; (8001b38 <set_ph_channel+0xbc>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001aaa:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <set_ph_channel+0xbc>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001ab0:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <set_ph_channel+0xbc>)
 8001ab2:	2208      	movs	r2, #8
 8001ab4:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001ab6:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <set_ph_channel+0xbc>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001abc:	4b1e      	ldr	r3, [pc, #120]	; (8001b38 <set_ph_channel+0xbc>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <set_ph_channel+0xbc>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <set_ph_channel+0xbc>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ad0:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <set_ph_channel+0xbc>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ad6:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <set_ph_channel+0xbc>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001adc:	4b16      	ldr	r3, [pc, #88]	; (8001b38 <set_ph_channel+0xbc>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ae4:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <set_ph_channel+0xbc>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001aea:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <set_ph_channel+0xbc>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001af2:	4811      	ldr	r0, [pc, #68]	; (8001b38 <set_ph_channel+0xbc>)
 8001af4:	f001 fad4 	bl	80030a0 <HAL_ADC_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <set_ph_channel+0x86>
  {
    Error_Handler();
 8001afe:	f000 fb9f 	bl	8002240 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001b02:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <set_ph_channel+0xc4>)
 8001b04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b06:	2306      	movs	r3, #6
 8001b08:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b0e:	237f      	movs	r3, #127	; 0x7f
 8001b10:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b12:	2304      	movs	r3, #4
 8001b14:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001b1a:	463b      	mov	r3, r7
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4806      	ldr	r0, [pc, #24]	; (8001b38 <set_ph_channel+0xbc>)
 8001b20:	f002 f94e 	bl	8003dc0 <HAL_ADC_ConfigChannel>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <set_ph_channel+0xb2>
  {
    Error_Handler();
 8001b2a:	f000 fb89 	bl	8002240 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001b2e:	bf00      	nop
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000288 	.word	0x20000288
 8001b3c:	50040200 	.word	0x50040200
 8001b40:	0c900008 	.word	0x0c900008

08001b44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	; 0x28
 8001b48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4a:	f107 0314 	add.w	r3, r7, #20
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	60da      	str	r2, [r3, #12]
 8001b58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b5a:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <MX_GPIO_Init+0xc4>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5e:	4a2a      	ldr	r2, [pc, #168]	; (8001c08 <MX_GPIO_Init+0xc4>)
 8001b60:	f043 0304 	orr.w	r3, r3, #4
 8001b64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b66:	4b28      	ldr	r3, [pc, #160]	; (8001c08 <MX_GPIO_Init+0xc4>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b72:	4b25      	ldr	r3, [pc, #148]	; (8001c08 <MX_GPIO_Init+0xc4>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b76:	4a24      	ldr	r2, [pc, #144]	; (8001c08 <MX_GPIO_Init+0xc4>)
 8001b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7e:	4b22      	ldr	r3, [pc, #136]	; (8001c08 <MX_GPIO_Init+0xc4>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8a:	4b1f      	ldr	r3, [pc, #124]	; (8001c08 <MX_GPIO_Init+0xc4>)
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8e:	4a1e      	ldr	r2, [pc, #120]	; (8001c08 <MX_GPIO_Init+0xc4>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b96:	4b1c      	ldr	r3, [pc, #112]	; (8001c08 <MX_GPIO_Init+0xc4>)
 8001b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba2:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <MX_GPIO_Init+0xc4>)
 8001ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba6:	4a18      	ldr	r2, [pc, #96]	; (8001c08 <MX_GPIO_Init+0xc4>)
 8001ba8:	f043 0302 	orr.w	r3, r3, #2
 8001bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bae:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <MX_GPIO_Init+0xc4>)
 8001bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|EC_WRITE_Pin, GPIO_PIN_RESET);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	21a0      	movs	r1, #160	; 0xa0
 8001bbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc2:	f003 fbb5 	bl	8005330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bcc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bd6:	f107 0314 	add.w	r3, r7, #20
 8001bda:	4619      	mov	r1, r3
 8001bdc:	480b      	ldr	r0, [pc, #44]	; (8001c0c <MX_GPIO_Init+0xc8>)
 8001bde:	f003 f9fd 	bl	8004fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|EC_WRITE_Pin;
 8001be2:	23a0      	movs	r3, #160	; 0xa0
 8001be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be6:	2301      	movs	r3, #1
 8001be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf2:	f107 0314 	add.w	r3, r7, #20
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bfc:	f003 f9ee 	bl	8004fdc <HAL_GPIO_Init>

}
 8001c00:	bf00      	nop
 8001c02:	3728      	adds	r7, #40	; 0x28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	48000800 	.word	0x48000800

08001c10 <readNaturalLight>:
// Violet 400nm light #8300b5 ---> (131, 0, 181)
// Red 680nm light ---> (255, 0, 0)
// whiteBlue 460nm light #007bff --> (0, 123, 255)


void readNaturalLight(){
 8001c10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c14:	ed2d 8b02 	vpush	{d8}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0

	int rRef = 10000;
 8001c1c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001c20:	607b      	str	r3, [r7, #4]

	HAL_ADC_Start_IT(&hadc2);
 8001c22:	484d      	ldr	r0, [pc, #308]	; (8001d58 <readNaturalLight+0x148>)
 8001c24:	f001 fd24 	bl	8003670 <HAL_ADC_Start_IT>

	voltageValue = get_lights_voltage_value();
 8001c28:	f000 fe70 	bl	800290c <get_lights_voltage_value>
 8001c2c:	eef0 7a40 	vmov.f32	s15, s0
 8001c30:	4b4a      	ldr	r3, [pc, #296]	; (8001d5c <readNaturalLight+0x14c>)
 8001c32:	edc3 7a00 	vstr	s15, [r3]

	voltageValue = voltageValue*voltageSource/1024;
 8001c36:	4b49      	ldr	r3, [pc, #292]	; (8001d5c <readNaturalLight+0x14c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fc84 	bl	8000548 <__aeabi_f2d>
 8001c40:	a343      	add	r3, pc, #268	; (adr r3, 8001d50 <readNaturalLight+0x140>)
 8001c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c46:	f7fe fcd7 	bl	80005f8 <__aeabi_dmul>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	4b42      	ldr	r3, [pc, #264]	; (8001d60 <readNaturalLight+0x150>)
 8001c58:	f7fe fdf8 	bl	800084c <__aeabi_ddiv>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4610      	mov	r0, r2
 8001c62:	4619      	mov	r1, r3
 8001c64:	f7fe ffc0 	bl	8000be8 <__aeabi_d2f>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4a3c      	ldr	r2, [pc, #240]	; (8001d5c <readNaturalLight+0x14c>)
 8001c6c:	6013      	str	r3, [r2, #0]
	float lightValue = B * pow((voltageSource/voltageValue - 1)  * rRef, m);
 8001c6e:	4b3d      	ldr	r3, [pc, #244]	; (8001d64 <readNaturalLight+0x154>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fc68 	bl	8000548 <__aeabi_f2d>
 8001c78:	4604      	mov	r4, r0
 8001c7a:	460d      	mov	r5, r1
 8001c7c:	4b37      	ldr	r3, [pc, #220]	; (8001d5c <readNaturalLight+0x14c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe fc61 	bl	8000548 <__aeabi_f2d>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	a131      	add	r1, pc, #196	; (adr r1, 8001d50 <readNaturalLight+0x140>)
 8001c8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c90:	f7fe fddc 	bl	800084c <__aeabi_ddiv>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4610      	mov	r0, r2
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	4b31      	ldr	r3, [pc, #196]	; (8001d68 <readNaturalLight+0x158>)
 8001ca2:	f7fe faf1 	bl	8000288 <__aeabi_dsub>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4690      	mov	r8, r2
 8001cac:	4699      	mov	r9, r3
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7fe fc38 	bl	8000524 <__aeabi_i2d>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4640      	mov	r0, r8
 8001cba:	4649      	mov	r1, r9
 8001cbc:	f7fe fc9c 	bl	80005f8 <__aeabi_dmul>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	ec43 2b18 	vmov	d8, r2, r3
 8001cc8:	4b28      	ldr	r3, [pc, #160]	; (8001d6c <readNaturalLight+0x15c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fc3b 	bl	8000548 <__aeabi_f2d>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	ec43 2b11 	vmov	d1, r2, r3
 8001cda:	eeb0 0a48 	vmov.f32	s0, s16
 8001cde:	eef0 0a68 	vmov.f32	s1, s17
 8001ce2:	f00b fcb1 	bl	800d648 <pow>
 8001ce6:	ec53 2b10 	vmov	r2, r3, d0
 8001cea:	4620      	mov	r0, r4
 8001cec:	4629      	mov	r1, r5
 8001cee:	f7fe fc83 	bl	80005f8 <__aeabi_dmul>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f7fe ff75 	bl	8000be8 <__aeabi_d2f>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	603b      	str	r3, [r7, #0]

	if (lightValue < LOW_LIGHT_THREESHOLD){
 8001d02:	edd7 7a00 	vldr	s15, [r7]
 8001d06:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001d70 <readNaturalLight+0x160>
 8001d0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d12:	d503      	bpl.n	8001d1c <readNaturalLight+0x10c>
			naturalLightLevel = Low;
 8001d14:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <readNaturalLight+0x164>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	701a      	strb	r2, [r3, #0]
		}
	else {
		naturalLightLevel = Med;
	}

}
 8001d1a:	e00f      	b.n	8001d3c <readNaturalLight+0x12c>
	else if (lightValue > HIGH_LIGHT_THREESHOLD){
 8001d1c:	edd7 7a00 	vldr	s15, [r7]
 8001d20:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001d78 <readNaturalLight+0x168>
 8001d24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2c:	dd03      	ble.n	8001d36 <readNaturalLight+0x126>
		naturalLightLevel = High;
 8001d2e:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <readNaturalLight+0x164>)
 8001d30:	2202      	movs	r2, #2
 8001d32:	701a      	strb	r2, [r3, #0]
}
 8001d34:	e002      	b.n	8001d3c <readNaturalLight+0x12c>
		naturalLightLevel = Med;
 8001d36:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <readNaturalLight+0x164>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	701a      	strb	r2, [r3, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	ecbd 8b02 	vpop	{d8}
 8001d46:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d4a:	bf00      	nop
 8001d4c:	f3af 8000 	nop.w
 8001d50:	66666666 	.word	0x66666666
 8001d54:	400a6666 	.word	0x400a6666
 8001d58:	20000224 	.word	0x20000224
 8001d5c:	20000318 	.word	0x20000318
 8001d60:	40900000 	.word	0x40900000
 8001d64:	20000000 	.word	0x20000000
 8001d68:	3ff00000 	.word	0x3ff00000
 8001d6c:	20000004 	.word	0x20000004
 8001d70:	42c80000 	.word	0x42c80000
 8001d74:	20000315 	.word	0x20000315
 8001d78:	43480000 	.word	0x43480000

08001d7c <setLed>:

/*
 * With SetLed function we store data G,R,B data for each LED (row)
 */

void setLed (int LEDnum, int color[3]){
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]

	LED_Data[LEDnum][0]= LEDnum;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	b2d9      	uxtb	r1, r3
 8001d8a:	4a13      	ldr	r2, [pc, #76]	; (8001dd8 <setLed+0x5c>)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1]= color[1];
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	3304      	adds	r3, #4
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	b2d9      	uxtb	r1, r3
 8001d9a:	4a0f      	ldr	r2, [pc, #60]	; (8001dd8 <setLed+0x5c>)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	460a      	mov	r2, r1
 8001da4:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2]= color[0];
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	b2d9      	uxtb	r1, r3
 8001dac:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <setLed+0x5c>)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	460a      	mov	r2, r1
 8001db6:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3]= color[2];
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	3308      	adds	r3, #8
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	b2d9      	uxtb	r1, r3
 8001dc0:	4a05      	ldr	r2, [pc, #20]	; (8001dd8 <setLed+0x5c>)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	460a      	mov	r2, r1
 8001dca:	70da      	strb	r2, [r3, #3]

}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	2000031c 	.word	0x2000031c
 8001ddc:	00000000 	.word	0x00000000

08001de0 <setBrightness>:
/*
 * With SetBrightness function we store data B,G,R,B data for each LED (row)
 */

void setBrightness (int brightness)
{
 8001de0:	b5b0      	push	{r4, r5, r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	if (USE_BRIGHTNESS){
		if(brightness > 45) brightness = 45; //If call value exceed limits
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b2d      	cmp	r3, #45	; 0x2d
 8001dec:	dd01      	ble.n	8001df2 <setBrightness+0x12>
 8001dee:	232d      	movs	r3, #45	; 0x2d
 8001df0:	607b      	str	r3, [r7, #4]
		for (int i =0; i < LEDUsed; i++){
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	e060      	b.n	8001eba <setBrightness+0xda>
			LED_Mode[i][0] = LED_Data[i][0];
 8001df8:	4a37      	ldr	r2, [pc, #220]	; (8001ed8 <setBrightness+0xf8>)
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8001e00:	4a36      	ldr	r2, [pc, #216]	; (8001edc <setBrightness+0xfc>)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
			for(int j=1; j<4; j++){
 8001e08:	2301      	movs	r3, #1
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	e04f      	b.n	8001eae <setBrightness+0xce>
				float angle = 90-brightness;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8001e14:	ee07 3a90 	vmov	s15, r3
 8001e18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e1c:	edc7 7a03 	vstr	s15, [r7, #12]
				angle = angle *PI/180;
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f7fe fb91 	bl	8000548 <__aeabi_f2d>
 8001e26:	a32a      	add	r3, pc, #168	; (adr r3, 8001ed0 <setBrightness+0xf0>)
 8001e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2c:	f7fe fbe4 	bl	80005f8 <__aeabi_dmul>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4610      	mov	r0, r2
 8001e36:	4619      	mov	r1, r3
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	4b28      	ldr	r3, [pc, #160]	; (8001ee0 <setBrightness+0x100>)
 8001e3e:	f7fe fd05 	bl	800084c <__aeabi_ddiv>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4610      	mov	r0, r2
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f7fe fecd 	bl	8000be8 <__aeabi_d2f>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	60fb      	str	r3, [r7, #12]
//				angle = -0.02 * angle + 1.0;
				LED_Mode[i][j]=(LED_Data[i][j])/(tan(angle)); //use tan to increase linearity of lights' control
 8001e52:	4a21      	ldr	r2, [pc, #132]	; (8001ed8 <setBrightness+0xf8>)
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	441a      	add	r2, r3
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe fb5f 	bl	8000524 <__aeabi_i2d>
 8001e66:	4604      	mov	r4, r0
 8001e68:	460d      	mov	r5, r1
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f7fe fb6c 	bl	8000548 <__aeabi_f2d>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	ec43 2b10 	vmov	d0, r2, r3
 8001e78:	f00b fbb2 	bl	800d5e0 <tan>
 8001e7c:	ec53 2b10 	vmov	r2, r3, d0
 8001e80:	4620      	mov	r0, r4
 8001e82:	4629      	mov	r1, r5
 8001e84:	f7fe fce2 	bl	800084c <__aeabi_ddiv>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f7fe fe8a 	bl	8000ba8 <__aeabi_d2uiz>
 8001e94:	4603      	mov	r3, r0
 8001e96:	b2d9      	uxtb	r1, r3
 8001e98:	4a10      	ldr	r2, [pc, #64]	; (8001edc <setBrightness+0xfc>)
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	441a      	add	r2, r3
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	460a      	mov	r2, r1
 8001ea6:	701a      	strb	r2, [r3, #0]
			for(int j=1; j<4; j++){
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	2b03      	cmp	r3, #3
 8001eb2:	ddac      	ble.n	8001e0e <setBrightness+0x2e>
		for (int i =0; i < LEDUsed; i++){
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	2b09      	cmp	r3, #9
 8001ebe:	dd9b      	ble.n	8001df8 <setBrightness+0x18>
			}
		}
	}
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bdb0      	pop	{r4, r5, r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	f3af 8000 	nop.w
 8001ed0:	51eb851f 	.word	0x51eb851f
 8001ed4:	40091eb8 	.word	0x40091eb8
 8001ed8:	2000031c 	.word	0x2000031c
 8001edc:	20000344 	.word	0x20000344
 8001ee0:	40668000 	.word	0x40668000

08001ee4 <ws2812SendData>:
 */

uint32_t pwmData[(24*LEDUsed)+50]; //24-bit wide communication per each LED

void ws2812SendData (void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]

/*
 * Check if we need to use Brightness values or noBrightness values set color of each led
 * as a 24 bit wide string format of bit FOR EACH LED USED
 */
	for (int i= 0; i<LEDUsed; i++){
 8001eee:	2300      	movs	r3, #0
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	e036      	b.n	8001f62 <ws2812SendData+0x7e>

		if (USE_BRIGHTNESS)
				color = ((LED_Mode[i][1]<<16) | (LED_Mode[i][2]<<8) | (LED_Mode[i][3]));
 8001ef4:	4a2e      	ldr	r2, [pc, #184]	; (8001fb0 <ws2812SendData+0xcc>)
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	785b      	ldrb	r3, [r3, #1]
 8001efe:	041a      	lsls	r2, r3, #16
 8001f00:	492b      	ldr	r1, [pc, #172]	; (8001fb0 <ws2812SendData+0xcc>)
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	440b      	add	r3, r1
 8001f08:	789b      	ldrb	r3, [r3, #2]
 8001f0a:	021b      	lsls	r3, r3, #8
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	4928      	ldr	r1, [pc, #160]	; (8001fb0 <ws2812SendData+0xcc>)
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	78db      	ldrb	r3, [r3, #3]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	607b      	str	r3, [r7, #4]
		else //If we don't use Brightness we can go over
				color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));


		for (int i=23; i>=0; i--) //need to start from LSB on MSB - DataSheet
 8001f1c:	2317      	movs	r3, #23
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	e019      	b.n	8001f56 <ws2812SendData+0x72>
		{
			if (color&(1<<i)){
 8001f22:	2201      	movs	r2, #1
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d005      	beq.n	8001f40 <ws2812SendData+0x5c>
				pwmData[indx] = 60; // 2/3 of 90 duty cycle to write 1
 8001f34:	4a1f      	ldr	r2, [pc, #124]	; (8001fb4 <ws2812SendData+0xd0>)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	213c      	movs	r1, #60	; 0x3c
 8001f3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001f3e:	e004      	b.n	8001f4a <ws2812SendData+0x66>
			}
			else pwmData[indx] = 30;  // 1/3 of 90 duty cycle to write 0
 8001f40:	4a1c      	ldr	r2, [pc, #112]	; (8001fb4 <ws2812SendData+0xd0>)
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	211e      	movs	r1, #30
 8001f46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		indx++;
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--) //need to start from LSB on MSB - DataSheet
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	dae2      	bge.n	8001f22 <ws2812SendData+0x3e>
	for (int i= 0; i<LEDUsed; i++){
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	2b09      	cmp	r3, #9
 8001f66:	ddc5      	ble.n	8001ef4 <ws2812SendData+0x10>
		}
	}

	//Then i need to store 50 pwm signal ->1.25us*50 = 62.5us>50 us for sure to 0 before as close communication singal - DataSheet WS2812
	for (int i=0; i<50; i++){
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60bb      	str	r3, [r7, #8]
 8001f6c:	e00a      	b.n	8001f84 <ws2812SendData+0xa0>

		pwmData[indx] = 0;
 8001f6e:	4a11      	ldr	r2, [pc, #68]	; (8001fb4 <ws2812SendData+0xd0>)
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	2100      	movs	r1, #0
 8001f74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		indx++;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++){
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	3301      	adds	r3, #1
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	2b31      	cmp	r3, #49	; 0x31
 8001f88:	ddf1      	ble.n	8001f6e <ws2812SendData+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, (24*LEDUsed)+50);
 8001f8a:	f44f 7391 	mov.w	r3, #290	; 0x122
 8001f8e:	4a09      	ldr	r2, [pc, #36]	; (8001fb4 <ws2812SendData+0xd0>)
 8001f90:	2100      	movs	r1, #0
 8001f92:	4809      	ldr	r0, [pc, #36]	; (8001fb8 <ws2812SendData+0xd4>)
 8001f94:	f004 fe26 	bl	8006be4 <HAL_TIM_PWM_Start_DMA>
	while (!dataSentFlag){}; //Giving time to callback function to stop and set datasentflag to 1
 8001f98:	bf00      	nop
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <ws2812SendData+0xd8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0fb      	beq.n	8001f9a <ws2812SendData+0xb6>

	dataSentFlag = 0; //To eventually being called another time
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <ws2812SendData+0xd8>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]

}
 8001fa8:	bf00      	nop
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000344 	.word	0x20000344
 8001fb4:	2000037c 	.word	0x2000037c
 8001fb8:	20000808 	.word	0x20000808
 8001fbc:	20000378 	.word	0x20000378

08001fc0 <HAL_TIM_PWM_PulseFinishedCallback>:

//Function to be used to end writing the same data on pwm stream data line
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]

	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8001fc8:	2100      	movs	r1, #0
 8001fca:	4805      	ldr	r0, [pc, #20]	; (8001fe0 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001fcc:	f005 f82a 	bl	8007024 <HAL_TIM_PWM_Stop_DMA>
	dataSentFlag = 1;
 8001fd0:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]

}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000808 	.word	0x20000808
 8001fe4:	20000378 	.word	0x20000378

08001fe8 <setLight>:

void setLight(int check){
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
	if (check == 1){
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d155      	bne.n	80020a2 <setLight+0xba>

		for(int i = 0; i<LEDUsed; i++){
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	e04e      	b.n	800209a <setLight+0xb2>
			switch(i){
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2b09      	cmp	r3, #9
 8002000:	d848      	bhi.n	8002094 <setLight+0xac>
 8002002:	a201      	add	r2, pc, #4	; (adr r2, 8002008 <setLight+0x20>)
 8002004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002008:	08002031 	.word	0x08002031
 800200c:	0800203b 	.word	0x0800203b
 8002010:	08002045 	.word	0x08002045
 8002014:	0800204f 	.word	0x0800204f
 8002018:	08002059 	.word	0x08002059
 800201c:	08002063 	.word	0x08002063
 8002020:	0800206d 	.word	0x0800206d
 8002024:	08002077 	.word	0x08002077
 8002028:	08002081 	.word	0x08002081
 800202c:	0800208b 	.word	0x0800208b
			case(0):
				setLed(i, violetColor400);
 8002030:	4932      	ldr	r1, [pc, #200]	; (80020fc <setLight+0x114>)
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f7ff fea2 	bl	8001d7c <setLed>
//				setBrightness(brightness);
				break;
 8002038:	e02c      	b.n	8002094 <setLight+0xac>
			case(1):
				setLed(i, redColor680);
 800203a:	4931      	ldr	r1, [pc, #196]	; (8002100 <setLight+0x118>)
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f7ff fe9d 	bl	8001d7c <setLed>
//				setBrightness(brightness);
				break;
 8002042:	e027      	b.n	8002094 <setLight+0xac>
			case(2):
				setLed(i, redColor680);
 8002044:	492e      	ldr	r1, [pc, #184]	; (8002100 <setLight+0x118>)
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f7ff fe98 	bl	8001d7c <setLed>
//				setBrightness(brightness);
				break;
 800204c:	e022      	b.n	8002094 <setLight+0xac>
			case(3):
				setLed(i, redColor680);
 800204e:	492c      	ldr	r1, [pc, #176]	; (8002100 <setLight+0x118>)
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f7ff fe93 	bl	8001d7c <setLed>
//				setBrightness(brightness);
				break;
 8002056:	e01d      	b.n	8002094 <setLight+0xac>
			case(4):
				setLed(i, violetColor400);
 8002058:	4928      	ldr	r1, [pc, #160]	; (80020fc <setLight+0x114>)
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f7ff fe8e 	bl	8001d7c <setLed>
//				setBrightness(brightness);
				break;
 8002060:	e018      	b.n	8002094 <setLight+0xac>
			case(5):
				setLed(i, violetColor400);
 8002062:	4926      	ldr	r1, [pc, #152]	; (80020fc <setLight+0x114>)
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f7ff fe89 	bl	8001d7c <setLed>
//				setBrightness(brightness);
				break;
 800206a:	e013      	b.n	8002094 <setLight+0xac>
			case(6):
				setLed(i, redColor680);
 800206c:	4924      	ldr	r1, [pc, #144]	; (8002100 <setLight+0x118>)
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f7ff fe84 	bl	8001d7c <setLed>
//				setBrightness(brightness);
				break;
 8002074:	e00e      	b.n	8002094 <setLight+0xac>
			case(7):
				setLed(i, redColor680);
 8002076:	4922      	ldr	r1, [pc, #136]	; (8002100 <setLight+0x118>)
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f7ff fe7f 	bl	8001d7c <setLed>
//				setBrightness(brightness);
				break;
 800207e:	e009      	b.n	8002094 <setLight+0xac>
			case(8):
				setLed(i, redColor680);
 8002080:	491f      	ldr	r1, [pc, #124]	; (8002100 <setLight+0x118>)
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f7ff fe7a 	bl	8001d7c <setLed>
//				setBrightness(brightness);
				break;
 8002088:	e004      	b.n	8002094 <setLight+0xac>
			case(9):
				setLed(i, violetColor400);
 800208a:	491c      	ldr	r1, [pc, #112]	; (80020fc <setLight+0x114>)
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f7ff fe75 	bl	8001d7c <setLed>
//				setBrightness(brightness);
				break;
 8002092:	bf00      	nop
		for(int i = 0; i<LEDUsed; i++){
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	3301      	adds	r3, #1
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2b09      	cmp	r3, #9
 800209e:	ddad      	ble.n	8001ffc <setLight+0x14>
 80020a0:	e00c      	b.n	80020bc <setLight+0xd4>
			}

		}
	}
	else  {
		for(int i=0; i<LEDUsed; i++){
 80020a2:	2300      	movs	r3, #0
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	e006      	b.n	80020b6 <setLight+0xce>

			setLed(i, nullColor);
 80020a8:	4916      	ldr	r1, [pc, #88]	; (8002104 <setLight+0x11c>)
 80020aa:	68b8      	ldr	r0, [r7, #8]
 80020ac:	f7ff fe66 	bl	8001d7c <setLed>
		for(int i=0; i<LEDUsed; i++){
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	3301      	adds	r3, #1
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2b09      	cmp	r3, #9
 80020ba:	ddf5      	ble.n	80020a8 <setLight+0xc0>
		}
	}

	//Reading natural light level value threshold and save it to naturalLightLevel
	readNaturalLight();
 80020bc:	f7ff fda8 	bl	8001c10 <readNaturalLight>

	switch(naturalLightLevel){
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <setLight+0x120>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d00e      	beq.n	80020e6 <setLight+0xfe>
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	dc10      	bgt.n	80020ee <setLight+0x106>
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <setLight+0xee>
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d004      	beq.n	80020de <setLight+0xf6>
 80020d4:	e00b      	b.n	80020ee <setLight+0x106>
		case (Low):
			setBrightness(45);
 80020d6:	202d      	movs	r0, #45	; 0x2d
 80020d8:	f7ff fe82 	bl	8001de0 <setBrightness>
			break;
 80020dc:	e007      	b.n	80020ee <setLight+0x106>
		case(Med):
			setBrightness(25);
 80020de:	2019      	movs	r0, #25
 80020e0:	f7ff fe7e 	bl	8001de0 <setBrightness>
			break;
 80020e4:	e003      	b.n	80020ee <setLight+0x106>
		case(High):
			setBrightness(1);
 80020e6:	2001      	movs	r0, #1
 80020e8:	f7ff fe7a 	bl	8001de0 <setBrightness>
			break;
 80020ec:	bf00      	nop
	}
	//Once data has been defined, send the data to ledStripe
	ws2812SendData();
 80020ee:	f7ff fef9 	bl	8001ee4 <ws2812SendData>
}
 80020f2:	bf00      	nop
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000008 	.word	0x20000008
 8002100:	20000014 	.word	0x20000014
 8002104:	2000036c 	.word	0x2000036c
 8002108:	20000315 	.word	0x20000315

0800210c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002110:	f000 fd06 	bl	8002b20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002114:	f000 f818 	bl	8002148 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002118:	f000 f867 	bl	80021ea <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800211c:	f7ff fd12 	bl	8001b44 <MX_GPIO_Init>
  MX_DMA_Init();
 8002120:	f7ff f8c4 	bl	80012ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002124:	f000 fb66 	bl	80027f4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002128:	f000 f9d4 	bl	80024d4 <MX_TIM1_Init>
  MX_ADC2_Init();
 800212c:	f7fe ff64 	bl	8000ff8 <MX_ADC2_Init>
  MX_ADC3_Init();
 8002130:	f7fe ffc6 	bl	80010c0 <MX_ADC3_Init>
  MX_TIM2_Init();
 8002134:	f000 fa7a 	bl	800262c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8002138:	4802      	ldr	r0, [pc, #8]	; (8002144 <main+0x38>)
 800213a:	f004 fc89 	bl	8006a50 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  virtual_main();
 800213e:	f000 fc11 	bl	8002964 <virtual_main>
 8002142:	e7fc      	b.n	800213e <main+0x32>
 8002144:	20000854 	.word	0x20000854

08002148 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b096      	sub	sp, #88	; 0x58
 800214c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800214e:	f107 0314 	add.w	r3, r7, #20
 8002152:	2244      	movs	r2, #68	; 0x44
 8002154:	2100      	movs	r1, #0
 8002156:	4618      	mov	r0, r3
 8002158:	f006 fdc8 	bl	8008cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800215c:	463b      	mov	r3, r7
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	609a      	str	r2, [r3, #8]
 8002166:	60da      	str	r2, [r3, #12]
 8002168:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800216a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800216e:	f003 f905 	bl	800537c <HAL_PWREx_ControlVoltageScaling>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002178:	f000 f862 	bl	8002240 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800217c:	2302      	movs	r3, #2
 800217e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002180:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002184:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002186:	2310      	movs	r3, #16
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800218a:	2302      	movs	r3, #2
 800218c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800218e:	2302      	movs	r3, #2
 8002190:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002192:	2301      	movs	r3, #1
 8002194:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 9;
 8002196:	2309      	movs	r3, #9
 8002198:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800219a:	2307      	movs	r3, #7
 800219c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800219e:	2302      	movs	r3, #2
 80021a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80021a2:	2302      	movs	r3, #2
 80021a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021a6:	f107 0314 	add.w	r3, r7, #20
 80021aa:	4618      	mov	r0, r3
 80021ac:	f003 f93c 	bl	8005428 <HAL_RCC_OscConfig>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <SystemClock_Config+0x72>
  {
    Error_Handler();
 80021b6:	f000 f843 	bl	8002240 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021ba:	230f      	movs	r3, #15
 80021bc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021be:	2303      	movs	r3, #3
 80021c0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80021ce:	463b      	mov	r3, r7
 80021d0:	2104      	movs	r1, #4
 80021d2:	4618      	mov	r0, r3
 80021d4:	f003 fd04 	bl	8005be0 <HAL_RCC_ClockConfig>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80021de:	f000 f82f 	bl	8002240 <Error_Handler>
  }
}
 80021e2:	bf00      	nop
 80021e4:	3758      	adds	r7, #88	; 0x58
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b0a2      	sub	sp, #136	; 0x88
 80021ee:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021f0:	463b      	mov	r3, r7
 80021f2:	2288      	movs	r2, #136	; 0x88
 80021f4:	2100      	movs	r1, #0
 80021f6:	4618      	mov	r0, r3
 80021f8:	f006 fd78 	bl	8008cec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80021fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002200:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002202:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002206:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8002208:	2302      	movs	r3, #2
 800220a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800220c:	2301      	movs	r3, #1
 800220e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002210:	2308      	movs	r3, #8
 8002212:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002214:	2307      	movs	r3, #7
 8002216:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002218:	2302      	movs	r3, #2
 800221a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800221c:	2302      	movs	r3, #2
 800221e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002220:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002224:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002226:	463b      	mov	r3, r7
 8002228:	4618      	mov	r0, r3
 800222a:	f003 fefd 	bl	8006028 <HAL_RCCEx_PeriphCLKConfig>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8002234:	f000 f804 	bl	8002240 <Error_Handler>
  }
}
 8002238:	bf00      	nop
 800223a:	3788      	adds	r7, #136	; 0x88
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002244:	b672      	cpsid	i
}
 8002246:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002248:	e7fe      	b.n	8002248 <Error_Handler+0x8>
	...

0800224c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002252:	4b0f      	ldr	r3, [pc, #60]	; (8002290 <HAL_MspInit+0x44>)
 8002254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002256:	4a0e      	ldr	r2, [pc, #56]	; (8002290 <HAL_MspInit+0x44>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	6613      	str	r3, [r2, #96]	; 0x60
 800225e:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <HAL_MspInit+0x44>)
 8002260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	607b      	str	r3, [r7, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800226a:	4b09      	ldr	r3, [pc, #36]	; (8002290 <HAL_MspInit+0x44>)
 800226c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226e:	4a08      	ldr	r2, [pc, #32]	; (8002290 <HAL_MspInit+0x44>)
 8002270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002274:	6593      	str	r3, [r2, #88]	; 0x58
 8002276:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_MspInit+0x44>)
 8002278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227e:	603b      	str	r3, [r7, #0]
 8002280:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40021000 	.word	0x40021000

08002294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002298:	e7fe      	b.n	8002298 <NMI_Handler+0x4>

0800229a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800229e:	e7fe      	b.n	800229e <HardFault_Handler+0x4>

080022a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <MemManage_Handler+0x4>

080022a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022aa:	e7fe      	b.n	80022aa <BusFault_Handler+0x4>

080022ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <UsageFault_Handler+0x4>

080022b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ce:	b480      	push	{r7}
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022e0:	f000 fc7a 	bl	8002bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80022ec:	4802      	ldr	r0, [pc, #8]	; (80022f8 <DMA1_Channel2_IRQHandler+0x10>)
 80022ee:	f002 fd96 	bl	8004e1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	200008a0 	.word	0x200008a0

080022fc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8002300:	4802      	ldr	r0, [pc, #8]	; (800230c <ADC1_2_IRQHandler+0x10>)
 8002302:	f001 fb2f 	bl	8003964 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000224 	.word	0x20000224

08002310 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002314:	4802      	ldr	r0, [pc, #8]	; (8002320 <ADC3_IRQHandler+0x10>)
 8002316:	f001 fb25 	bl	8003964 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000288 	.word	0x20000288

08002324 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  return 1;
 8002328:	2301      	movs	r3, #1
}
 800232a:	4618      	mov	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <_kill>:

int _kill(int pid, int sig)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800233e:	f006 fcab 	bl	8008c98 <__errno>
 8002342:	4603      	mov	r3, r0
 8002344:	2216      	movs	r2, #22
 8002346:	601a      	str	r2, [r3, #0]
  return -1;
 8002348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800234c:	4618      	mov	r0, r3
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <_exit>:

void _exit (int status)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800235c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7ff ffe7 	bl	8002334 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002366:	e7fe      	b.n	8002366 <_exit+0x12>

08002368 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	e00a      	b.n	8002390 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800237a:	f3af 8000 	nop.w
 800237e:	4601      	mov	r1, r0
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	60ba      	str	r2, [r7, #8]
 8002386:	b2ca      	uxtb	r2, r1
 8002388:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	3301      	adds	r3, #1
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	429a      	cmp	r2, r3
 8002396:	dbf0      	blt.n	800237a <_read+0x12>
  }

  return len;
 8002398:	687b      	ldr	r3, [r7, #4]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b086      	sub	sp, #24
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	60f8      	str	r0, [r7, #12]
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	e009      	b.n	80023c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	1c5a      	adds	r2, r3, #1
 80023b8:	60ba      	str	r2, [r7, #8]
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	3301      	adds	r3, #1
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	dbf1      	blt.n	80023b4 <_write+0x12>
  }
  return len;
 80023d0:	687b      	ldr	r3, [r7, #4]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <_close>:

int _close(int file)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002402:	605a      	str	r2, [r3, #4]
  return 0;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <_isatty>:

int _isatty(int file)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800241a:	2301      	movs	r3, #1
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800244c:	4a14      	ldr	r2, [pc, #80]	; (80024a0 <_sbrk+0x5c>)
 800244e:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <_sbrk+0x60>)
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002458:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <_sbrk+0x64>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d102      	bne.n	8002466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <_sbrk+0x64>)
 8002462:	4a12      	ldr	r2, [pc, #72]	; (80024ac <_sbrk+0x68>)
 8002464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002466:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <_sbrk+0x64>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4413      	add	r3, r2
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	429a      	cmp	r2, r3
 8002472:	d207      	bcs.n	8002484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002474:	f006 fc10 	bl	8008c98 <__errno>
 8002478:	4603      	mov	r3, r0
 800247a:	220c      	movs	r2, #12
 800247c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800247e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002482:	e009      	b.n	8002498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002484:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <_sbrk+0x64>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800248a:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <_sbrk+0x64>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4413      	add	r3, r2
 8002492:	4a05      	ldr	r2, [pc, #20]	; (80024a8 <_sbrk+0x64>)
 8002494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002496:	68fb      	ldr	r3, [r7, #12]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20018000 	.word	0x20018000
 80024a4:	00000400 	.word	0x00000400
 80024a8:	20000804 	.word	0x20000804
 80024ac:	20000998 	.word	0x20000998

080024b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <SystemInit+0x20>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ba:	4a05      	ldr	r2, [pc, #20]	; (80024d0 <SystemInit+0x20>)
 80024bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b09a      	sub	sp, #104	; 0x68
 80024d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	605a      	str	r2, [r3, #4]
 80024e4:	609a      	str	r2, [r3, #8]
 80024e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	60da      	str	r2, [r3, #12]
 8002502:	611a      	str	r2, [r3, #16]
 8002504:	615a      	str	r2, [r3, #20]
 8002506:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002508:	1d3b      	adds	r3, r7, #4
 800250a:	222c      	movs	r2, #44	; 0x2c
 800250c:	2100      	movs	r1, #0
 800250e:	4618      	mov	r0, r3
 8002510:	f006 fbec 	bl	8008cec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002514:	4b43      	ldr	r3, [pc, #268]	; (8002624 <MX_TIM1_Init+0x150>)
 8002516:	4a44      	ldr	r2, [pc, #272]	; (8002628 <MX_TIM1_Init+0x154>)
 8002518:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800251a:	4b42      	ldr	r3, [pc, #264]	; (8002624 <MX_TIM1_Init+0x150>)
 800251c:	2200      	movs	r2, #0
 800251e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002520:	4b40      	ldr	r3, [pc, #256]	; (8002624 <MX_TIM1_Init+0x150>)
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8002526:	4b3f      	ldr	r3, [pc, #252]	; (8002624 <MX_TIM1_Init+0x150>)
 8002528:	2259      	movs	r2, #89	; 0x59
 800252a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800252c:	4b3d      	ldr	r3, [pc, #244]	; (8002624 <MX_TIM1_Init+0x150>)
 800252e:	2200      	movs	r2, #0
 8002530:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002532:	4b3c      	ldr	r3, [pc, #240]	; (8002624 <MX_TIM1_Init+0x150>)
 8002534:	2200      	movs	r2, #0
 8002536:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002538:	4b3a      	ldr	r3, [pc, #232]	; (8002624 <MX_TIM1_Init+0x150>)
 800253a:	2200      	movs	r2, #0
 800253c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800253e:	4839      	ldr	r0, [pc, #228]	; (8002624 <MX_TIM1_Init+0x150>)
 8002540:	f004 fa2e 	bl	80069a0 <HAL_TIM_Base_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800254a:	f7ff fe79 	bl	8002240 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800254e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002552:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002554:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002558:	4619      	mov	r1, r3
 800255a:	4832      	ldr	r0, [pc, #200]	; (8002624 <MX_TIM1_Init+0x150>)
 800255c:	f004 ff6e 	bl	800743c <HAL_TIM_ConfigClockSource>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002566:	f7ff fe6b 	bl	8002240 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800256a:	482e      	ldr	r0, [pc, #184]	; (8002624 <MX_TIM1_Init+0x150>)
 800256c:	f004 fad8 	bl	8006b20 <HAL_TIM_PWM_Init>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002576:	f7ff fe63 	bl	8002240 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800257a:	2300      	movs	r3, #0
 800257c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800257e:	2300      	movs	r3, #0
 8002580:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002582:	2300      	movs	r3, #0
 8002584:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002586:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800258a:	4619      	mov	r1, r3
 800258c:	4825      	ldr	r0, [pc, #148]	; (8002624 <MX_TIM1_Init+0x150>)
 800258e:	f005 fd33 	bl	8007ff8 <HAL_TIMEx_MasterConfigSynchronization>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8002598:	f7ff fe52 	bl	8002240 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800259c:	2360      	movs	r3, #96	; 0x60
 800259e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 54;
 80025a0:	2336      	movs	r3, #54	; 0x36
 80025a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025a4:	2300      	movs	r3, #0
 80025a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025a8:	2300      	movs	r3, #0
 80025aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025ac:	2300      	movs	r3, #0
 80025ae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025b0:	2300      	movs	r3, #0
 80025b2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025b4:	2300      	movs	r3, #0
 80025b6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025bc:	2200      	movs	r2, #0
 80025be:	4619      	mov	r1, r3
 80025c0:	4818      	ldr	r0, [pc, #96]	; (8002624 <MX_TIM1_Init+0x150>)
 80025c2:	f004 fe27 	bl	8007214 <HAL_TIM_PWM_ConfigChannel>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80025cc:	f7ff fe38 	bl	8002240 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025d0:	2300      	movs	r3, #0
 80025d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80025f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025fc:	2300      	movs	r3, #0
 80025fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002600:	1d3b      	adds	r3, r7, #4
 8002602:	4619      	mov	r1, r3
 8002604:	4807      	ldr	r0, [pc, #28]	; (8002624 <MX_TIM1_Init+0x150>)
 8002606:	f005 fd7f 	bl	8008108 <HAL_TIMEx_ConfigBreakDeadTime>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002610:	f7ff fe16 	bl	8002240 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002614:	4803      	ldr	r0, [pc, #12]	; (8002624 <MX_TIM1_Init+0x150>)
 8002616:	f000 f8b5 	bl	8002784 <HAL_TIM_MspPostInit>

}
 800261a:	bf00      	nop
 800261c:	3768      	adds	r7, #104	; 0x68
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20000808 	.word	0x20000808
 8002628:	40012c00 	.word	0x40012c00

0800262c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002632:	f107 0310 	add.w	r3, r7, #16
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	605a      	str	r2, [r3, #4]
 800263c:	609a      	str	r2, [r3, #8]
 800263e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002640:	1d3b      	adds	r3, r7, #4
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	605a      	str	r2, [r3, #4]
 8002648:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800264a:	4b1e      	ldr	r3, [pc, #120]	; (80026c4 <MX_TIM2_Init+0x98>)
 800264c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002650:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8002652:	4b1c      	ldr	r3, [pc, #112]	; (80026c4 <MX_TIM2_Init+0x98>)
 8002654:	2247      	movs	r2, #71	; 0x47
 8002656:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002658:	4b1a      	ldr	r3, [pc, #104]	; (80026c4 <MX_TIM2_Init+0x98>)
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800265e:	4b19      	ldr	r3, [pc, #100]	; (80026c4 <MX_TIM2_Init+0x98>)
 8002660:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002664:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002666:	4b17      	ldr	r3, [pc, #92]	; (80026c4 <MX_TIM2_Init+0x98>)
 8002668:	2200      	movs	r2, #0
 800266a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800266c:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <MX_TIM2_Init+0x98>)
 800266e:	2200      	movs	r2, #0
 8002670:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002672:	4814      	ldr	r0, [pc, #80]	; (80026c4 <MX_TIM2_Init+0x98>)
 8002674:	f004 f994 	bl	80069a0 <HAL_TIM_Base_Init>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800267e:	f7ff fddf 	bl	8002240 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002686:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002688:	f107 0310 	add.w	r3, r7, #16
 800268c:	4619      	mov	r1, r3
 800268e:	480d      	ldr	r0, [pc, #52]	; (80026c4 <MX_TIM2_Init+0x98>)
 8002690:	f004 fed4 	bl	800743c <HAL_TIM_ConfigClockSource>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800269a:	f7ff fdd1 	bl	8002240 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800269e:	2300      	movs	r3, #0
 80026a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	4619      	mov	r1, r3
 80026aa:	4806      	ldr	r0, [pc, #24]	; (80026c4 <MX_TIM2_Init+0x98>)
 80026ac:	f005 fca4 	bl	8007ff8 <HAL_TIMEx_MasterConfigSynchronization>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80026b6:	f7ff fdc3 	bl	8002240 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80026ba:	bf00      	nop
 80026bc:	3720      	adds	r7, #32
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	20000854 	.word	0x20000854

080026c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a27      	ldr	r2, [pc, #156]	; (8002774 <HAL_TIM_Base_MspInit+0xac>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d137      	bne.n	800274a <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026da:	4b27      	ldr	r3, [pc, #156]	; (8002778 <HAL_TIM_Base_MspInit+0xb0>)
 80026dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026de:	4a26      	ldr	r2, [pc, #152]	; (8002778 <HAL_TIM_Base_MspInit+0xb0>)
 80026e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026e4:	6613      	str	r3, [r2, #96]	; 0x60
 80026e6:	4b24      	ldr	r3, [pc, #144]	; (8002778 <HAL_TIM_Base_MspInit+0xb0>)
 80026e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80026f2:	4b22      	ldr	r3, [pc, #136]	; (800277c <HAL_TIM_Base_MspInit+0xb4>)
 80026f4:	4a22      	ldr	r2, [pc, #136]	; (8002780 <HAL_TIM_Base_MspInit+0xb8>)
 80026f6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 80026f8:	4b20      	ldr	r3, [pc, #128]	; (800277c <HAL_TIM_Base_MspInit+0xb4>)
 80026fa:	2207      	movs	r2, #7
 80026fc:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026fe:	4b1f      	ldr	r3, [pc, #124]	; (800277c <HAL_TIM_Base_MspInit+0xb4>)
 8002700:	2210      	movs	r2, #16
 8002702:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002704:	4b1d      	ldr	r3, [pc, #116]	; (800277c <HAL_TIM_Base_MspInit+0xb4>)
 8002706:	2200      	movs	r2, #0
 8002708:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800270a:	4b1c      	ldr	r3, [pc, #112]	; (800277c <HAL_TIM_Base_MspInit+0xb4>)
 800270c:	2280      	movs	r2, #128	; 0x80
 800270e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002710:	4b1a      	ldr	r3, [pc, #104]	; (800277c <HAL_TIM_Base_MspInit+0xb4>)
 8002712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002716:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002718:	4b18      	ldr	r3, [pc, #96]	; (800277c <HAL_TIM_Base_MspInit+0xb4>)
 800271a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800271e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8002720:	4b16      	ldr	r3, [pc, #88]	; (800277c <HAL_TIM_Base_MspInit+0xb4>)
 8002722:	2200      	movs	r2, #0
 8002724:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002726:	4b15      	ldr	r3, [pc, #84]	; (800277c <HAL_TIM_Base_MspInit+0xb4>)
 8002728:	2200      	movs	r2, #0
 800272a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800272c:	4813      	ldr	r0, [pc, #76]	; (800277c <HAL_TIM_Base_MspInit+0xb4>)
 800272e:	f002 fa1d 	bl	8004b6c <HAL_DMA_Init>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8002738:	f7ff fd82 	bl	8002240 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a0f      	ldr	r2, [pc, #60]	; (800277c <HAL_TIM_Base_MspInit+0xb4>)
 8002740:	625a      	str	r2, [r3, #36]	; 0x24
 8002742:	4a0e      	ldr	r2, [pc, #56]	; (800277c <HAL_TIM_Base_MspInit+0xb4>)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002748:	e010      	b.n	800276c <HAL_TIM_Base_MspInit+0xa4>
  else if(tim_baseHandle->Instance==TIM2)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002752:	d10b      	bne.n	800276c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <HAL_TIM_Base_MspInit+0xb0>)
 8002756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002758:	4a07      	ldr	r2, [pc, #28]	; (8002778 <HAL_TIM_Base_MspInit+0xb0>)
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	6593      	str	r3, [r2, #88]	; 0x58
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <HAL_TIM_Base_MspInit+0xb0>)
 8002762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	68bb      	ldr	r3, [r7, #8]
}
 800276c:	bf00      	nop
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40012c00 	.word	0x40012c00
 8002778:	40021000 	.word	0x40021000
 800277c:	200008a0 	.word	0x200008a0
 8002780:	4002001c 	.word	0x4002001c

08002784 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b088      	sub	sp, #32
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278c:	f107 030c 	add.w	r3, r7, #12
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a12      	ldr	r2, [pc, #72]	; (80027ec <HAL_TIM_MspPostInit+0x68>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d11d      	bne.n	80027e2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a6:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <HAL_TIM_MspPostInit+0x6c>)
 80027a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027aa:	4a11      	ldr	r2, [pc, #68]	; (80027f0 <HAL_TIM_MspPostInit+0x6c>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027b2:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <HAL_TIM_MspPostInit+0x6c>)
 80027b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	60bb      	str	r3, [r7, #8]
 80027bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = LIGHTS_PWM_Pin;
 80027be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c4:	2302      	movs	r3, #2
 80027c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027cc:	2300      	movs	r3, #0
 80027ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80027d0:	2301      	movs	r3, #1
 80027d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LIGHTS_PWM_GPIO_Port, &GPIO_InitStruct);
 80027d4:	f107 030c 	add.w	r3, r7, #12
 80027d8:	4619      	mov	r1, r3
 80027da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027de:	f002 fbfd 	bl	8004fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80027e2:	bf00      	nop
 80027e4:	3720      	adds	r7, #32
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40012c00 	.word	0x40012c00
 80027f0:	40021000 	.word	0x40021000

080027f4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027f8:	4b14      	ldr	r3, [pc, #80]	; (800284c <MX_USART2_UART_Init+0x58>)
 80027fa:	4a15      	ldr	r2, [pc, #84]	; (8002850 <MX_USART2_UART_Init+0x5c>)
 80027fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027fe:	4b13      	ldr	r3, [pc, #76]	; (800284c <MX_USART2_UART_Init+0x58>)
 8002800:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002804:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002806:	4b11      	ldr	r3, [pc, #68]	; (800284c <MX_USART2_UART_Init+0x58>)
 8002808:	2200      	movs	r2, #0
 800280a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800280c:	4b0f      	ldr	r3, [pc, #60]	; (800284c <MX_USART2_UART_Init+0x58>)
 800280e:	2200      	movs	r2, #0
 8002810:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002812:	4b0e      	ldr	r3, [pc, #56]	; (800284c <MX_USART2_UART_Init+0x58>)
 8002814:	2200      	movs	r2, #0
 8002816:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <MX_USART2_UART_Init+0x58>)
 800281a:	220c      	movs	r2, #12
 800281c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800281e:	4b0b      	ldr	r3, [pc, #44]	; (800284c <MX_USART2_UART_Init+0x58>)
 8002820:	2200      	movs	r2, #0
 8002822:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002824:	4b09      	ldr	r3, [pc, #36]	; (800284c <MX_USART2_UART_Init+0x58>)
 8002826:	2200      	movs	r2, #0
 8002828:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800282a:	4b08      	ldr	r3, [pc, #32]	; (800284c <MX_USART2_UART_Init+0x58>)
 800282c:	2200      	movs	r2, #0
 800282e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <MX_USART2_UART_Init+0x58>)
 8002832:	2200      	movs	r2, #0
 8002834:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002836:	4805      	ldr	r0, [pc, #20]	; (800284c <MX_USART2_UART_Init+0x58>)
 8002838:	f005 fce4 	bl	8008204 <HAL_UART_Init>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002842:	f7ff fcfd 	bl	8002240 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	200008e8 	.word	0x200008e8
 8002850:	40004400 	.word	0x40004400

08002854 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b0ac      	sub	sp, #176	; 0xb0
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	605a      	str	r2, [r3, #4]
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	60da      	str	r2, [r3, #12]
 800286a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800286c:	f107 0314 	add.w	r3, r7, #20
 8002870:	2288      	movs	r2, #136	; 0x88
 8002872:	2100      	movs	r1, #0
 8002874:	4618      	mov	r0, r3
 8002876:	f006 fa39 	bl	8008cec <memset>
  if(uartHandle->Instance==USART2)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a21      	ldr	r2, [pc, #132]	; (8002904 <HAL_UART_MspInit+0xb0>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d13b      	bne.n	80028fc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002884:	2302      	movs	r3, #2
 8002886:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002888:	2300      	movs	r3, #0
 800288a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800288c:	f107 0314 	add.w	r3, r7, #20
 8002890:	4618      	mov	r0, r3
 8002892:	f003 fbc9 	bl	8006028 <HAL_RCCEx_PeriphCLKConfig>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800289c:	f7ff fcd0 	bl	8002240 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028a0:	4b19      	ldr	r3, [pc, #100]	; (8002908 <HAL_UART_MspInit+0xb4>)
 80028a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a4:	4a18      	ldr	r2, [pc, #96]	; (8002908 <HAL_UART_MspInit+0xb4>)
 80028a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028aa:	6593      	str	r3, [r2, #88]	; 0x58
 80028ac:	4b16      	ldr	r3, [pc, #88]	; (8002908 <HAL_UART_MspInit+0xb4>)
 80028ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b8:	4b13      	ldr	r3, [pc, #76]	; (8002908 <HAL_UART_MspInit+0xb4>)
 80028ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028bc:	4a12      	ldr	r2, [pc, #72]	; (8002908 <HAL_UART_MspInit+0xb4>)
 80028be:	f043 0301 	orr.w	r3, r3, #1
 80028c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028c4:	4b10      	ldr	r3, [pc, #64]	; (8002908 <HAL_UART_MspInit+0xb4>)
 80028c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80028d0:	230c      	movs	r3, #12
 80028d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d6:	2302      	movs	r3, #2
 80028d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e2:	2303      	movs	r3, #3
 80028e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028e8:	2307      	movs	r3, #7
 80028ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80028f2:	4619      	mov	r1, r3
 80028f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028f8:	f002 fb70 	bl	8004fdc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80028fc:	bf00      	nop
 80028fe:	37b0      	adds	r7, #176	; 0xb0
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40004400 	.word	0x40004400
 8002908:	40021000 	.word	0x40021000

0800290c <get_lights_voltage_value>:
{
	return acquired_value_ADC_volt;
}

float get_lights_voltage_value ()
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
	return voltage_value;
 8002910:	4b04      	ldr	r3, [pc, #16]	; (8002924 <get_lights_voltage_value+0x18>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	ee07 3a90 	vmov	s15, r3
}
 8002918:	eeb0 0a67 	vmov.f32	s0, s15
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	2000096c 	.word	0x2000096c

08002928 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
//		acquired_value_ADC_volt = (float) acquired_value_ADC_count / 4095 * 3.3;
//
//		water_reading = 1;
//
//	}
	if (hadc == &hadc2)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a0a      	ldr	r2, [pc, #40]	; (800295c <HAL_ADC_ConvCpltCallback+0x34>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d10c      	bne.n	8002952 <HAL_ADC_ConvCpltCallback+0x2a>
	{
		// LIGHTS PROCEDURE
		// READ FROM THE PHOTORESISTENCE
		HAL_ADC_Stop_IT(hadc);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 ffcb 	bl	80038d4 <HAL_ADC_Stop_IT>
		voltage_value = HAL_ADC_GetValue(hadc);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f001 f803 	bl	800394a <HAL_ADC_GetValue>
 8002944:	ee07 0a90 	vmov	s15, r0
 8002948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800294c:	4b04      	ldr	r3, [pc, #16]	; (8002960 <HAL_ADC_ConvCpltCallback+0x38>)
 800294e:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000224 	.word	0x20000224
 8002960:	2000096c 	.word	0x2000096c

08002964 <virtual_main>:

// IMPLEMENTARE UN TIMER GLOBALE!


void virtual_main()
{
 8002964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002968:	b090      	sub	sp, #64	; 0x40
 800296a:	af00      	add	r7, sp, #0
	switch(state)
 800296c:	4b4e      	ldr	r3, [pc, #312]	; (8002aa8 <virtual_main+0x144>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b03      	cmp	r3, #3
 8002972:	d003      	beq.n	800297c <virtual_main+0x18>
 8002974:	2b07      	cmp	r3, #7
 8002976:	f000 8089 	beq.w	8002a8c <virtual_main+0x128>
 800297a:	e08b      	b.n	8002a94 <virtual_main+0x130>
//				}
//			}
//
	case(ECPH_PROCEDURE):

			if (!is_ec_initialized())
 800297c:	f7fe fcb4 	bl	80012e8 <is_ec_initialized>
 8002980:	4603      	mov	r3, r0
 8002982:	f083 0301 	eor.w	r3, r3, #1
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d002      	beq.n	8002992 <virtual_main+0x2e>
			{
				ec_init();
 800298c:	f7fe fd14 	bl	80013b8 <ec_init>

						}
					}
				}
			}
			break;
 8002990:	e084      	b.n	8002a9c <virtual_main+0x138>
				if (!is_ec_value_readed())
 8002992:	f7fe fcc1 	bl	8001318 <is_ec_value_readed>
 8002996:	4603      	mov	r3, r0
 8002998:	f083 0301 	eor.w	r3, r3, #1
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <virtual_main+0x46>
					ec_read(&hadc3);
 80029a2:	4842      	ldr	r0, [pc, #264]	; (8002aac <virtual_main+0x148>)
 80029a4:	f7fe fd48 	bl	8001438 <ec_read>
			break;
 80029a8:	e078      	b.n	8002a9c <virtual_main+0x138>
					if (!is_counting)
 80029aa:	4b41      	ldr	r3, [pc, #260]	; (8002ab0 <virtual_main+0x14c>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	f083 0301 	eor.w	r3, r3, #1
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00c      	beq.n	80029d2 <virtual_main+0x6e>
						is_counting = 1;
 80029b8:	4b3d      	ldr	r3, [pc, #244]	; (8002ab0 <virtual_main+0x14c>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	701a      	strb	r2, [r3, #0]
						time_prev = __HAL_TIM_GET_COUNTER(&htim2);
 80029be:	4b3d      	ldr	r3, [pc, #244]	; (8002ab4 <virtual_main+0x150>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	2200      	movs	r2, #0
 80029c6:	469a      	mov	sl, r3
 80029c8:	4693      	mov	fp, r2
 80029ca:	4b3b      	ldr	r3, [pc, #236]	; (8002ab8 <virtual_main+0x154>)
 80029cc:	e9c3 ab00 	strd	sl, fp, [r3]
			break;
 80029d0:	e064      	b.n	8002a9c <virtual_main+0x138>
						if (__HAL_TIM_GET_COUNTER(&htim2) - time_prev >= 2000000)
 80029d2:	4b38      	ldr	r3, [pc, #224]	; (8002ab4 <virtual_main+0x150>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	2200      	movs	r2, #0
 80029da:	4698      	mov	r8, r3
 80029dc:	4691      	mov	r9, r2
 80029de:	4b36      	ldr	r3, [pc, #216]	; (8002ab8 <virtual_main+0x154>)
 80029e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e4:	ebb8 0402 	subs.w	r4, r8, r2
 80029e8:	eb69 0503 	sbc.w	r5, r9, r3
 80029ec:	4b33      	ldr	r3, [pc, #204]	; (8002abc <virtual_main+0x158>)
 80029ee:	429c      	cmp	r4, r3
 80029f0:	f175 0300 	sbcs.w	r3, r5, #0
 80029f4:	db52      	blt.n	8002a9c <virtual_main+0x138>
							sprintf(data2, "EC: %f \n\r", get_EC());
 80029f6:	f7fe fcc3 	bl	8001380 <get_EC>
 80029fa:	ee10 3a10 	vmov	r3, s0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fd fda2 	bl	8000548 <__aeabi_f2d>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4638      	mov	r0, r7
 8002a0a:	492d      	ldr	r1, [pc, #180]	; (8002ac0 <virtual_main+0x15c>)
 8002a0c:	f006 fff6 	bl	80099fc <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)data2, strlen(data2), HAL_MAX_DELAY);
 8002a10:	463b      	mov	r3, r7
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fd fbdc 	bl	80001d0 <strlen>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	4639      	mov	r1, r7
 8002a1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a22:	4828      	ldr	r0, [pc, #160]	; (8002ac4 <virtual_main+0x160>)
 8002a24:	f005 fc3c 	bl	80082a0 <HAL_UART_Transmit>
							if (!is_ph_value_readed())
 8002a28:	f7fe fc92 	bl	8001350 <is_ph_value_readed>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	f083 0301 	eor.w	r3, r3, #1
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <virtual_main+0xdc>
								ph_read(&hadc3);
 8002a38:	481c      	ldr	r0, [pc, #112]	; (8002aac <virtual_main+0x148>)
 8002a3a:	f7fe fd89 	bl	8001550 <ph_read>
			break;
 8002a3e:	e02d      	b.n	8002a9c <virtual_main+0x138>
								sprintf(data1, "PH: %f \n\r", get_PH());
 8002a40:	f7fe fcac 	bl	800139c <get_PH>
 8002a44:	ee10 3a10 	vmov	r3, s0
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fd fd7d 	bl	8000548 <__aeabi_f2d>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	f107 0020 	add.w	r0, r7, #32
 8002a56:	491c      	ldr	r1, [pc, #112]	; (8002ac8 <virtual_main+0x164>)
 8002a58:	f006 ffd0 	bl	80099fc <siprintf>
								HAL_UART_Transmit(&huart2, (uint8_t*)data1, strlen(data1), HAL_MAX_DELAY);
 8002a5c:	f107 0320 	add.w	r3, r7, #32
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fd fbb5 	bl	80001d0 <strlen>
 8002a66:	4603      	mov	r3, r0
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	f107 0120 	add.w	r1, r7, #32
 8002a6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a72:	4814      	ldr	r0, [pc, #80]	; (8002ac4 <virtual_main+0x160>)
 8002a74:	f005 fc14 	bl	80082a0 <HAL_UART_Transmit>
								reset_ec_initialized();
 8002a78:	f7fe fc42 	bl	8001300 <reset_ec_initialized>
								reset_is_ec_value_readed();
 8002a7c:	f7fe fc5c 	bl	8001338 <reset_is_ec_value_readed>
								reset_is_ph_value_readed();
 8002a80:	f7fe fc72 	bl	8001368 <reset_is_ph_value_readed>
								is_counting = 0;
 8002a84:	4b0a      	ldr	r3, [pc, #40]	; (8002ab0 <virtual_main+0x14c>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	701a      	strb	r2, [r3, #0]
			break;
 8002a8a:	e007      	b.n	8002a9c <virtual_main+0x138>
//	case(DATASEND_PROCEDURE):
//			break;
	case(LIGHTS_PROCEDURE):
			// STATUS = 1 - LIGHTS ON
			// STATUS = 0 - LIGHTS OFF
			setLight(1);
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	f7ff faab 	bl	8001fe8 <setLight>
			break;
 8002a92:	e004      	b.n	8002a9e <virtual_main+0x13a>
//		// CHECK WATER STATUS
//		is_default_check = 1;
//		state = ECPH_PROCEDURE;

		// LIGHTS OFF
		setLight(0);
 8002a94:	2000      	movs	r0, #0
 8002a96:	f7ff faa7 	bl	8001fe8 <setLight>
		break;
 8002a9a:	e000      	b.n	8002a9e <virtual_main+0x13a>
			break;
 8002a9c:	bf00      	nop
	}
}
 8002a9e:	bf00      	nop
 8002aa0:	3740      	adds	r7, #64	; 0x40
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aa8:	20000024 	.word	0x20000024
 8002aac:	20000288 	.word	0x20000288
 8002ab0:	20000970 	.word	0x20000970
 8002ab4:	20000854 	.word	0x20000854
 8002ab8:	20000978 	.word	0x20000978
 8002abc:	001e8480 	.word	0x001e8480
 8002ac0:	0800f470 	.word	0x0800f470
 8002ac4:	200008e8 	.word	0x200008e8
 8002ac8:	0800f47c 	.word	0x0800f47c

08002acc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002acc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ad0:	f7ff fcee 	bl	80024b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ad4:	480c      	ldr	r0, [pc, #48]	; (8002b08 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ad6:	490d      	ldr	r1, [pc, #52]	; (8002b0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ad8:	4a0d      	ldr	r2, [pc, #52]	; (8002b10 <LoopForever+0xe>)
  movs r3, #0
 8002ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002adc:	e002      	b.n	8002ae4 <LoopCopyDataInit>

08002ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ae2:	3304      	adds	r3, #4

08002ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ae8:	d3f9      	bcc.n	8002ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aea:	4a0a      	ldr	r2, [pc, #40]	; (8002b14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002aec:	4c0a      	ldr	r4, [pc, #40]	; (8002b18 <LoopForever+0x16>)
  movs r3, #0
 8002aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002af0:	e001      	b.n	8002af6 <LoopFillZerobss>

08002af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002af4:	3204      	adds	r2, #4

08002af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002af8:	d3fb      	bcc.n	8002af2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002afa:	f006 f8d3 	bl	8008ca4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002afe:	f7ff fb05 	bl	800210c <main>

08002b02 <LoopForever>:

LoopForever:
    b LoopForever
 8002b02:	e7fe      	b.n	8002b02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002b04:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b0c:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8002b10:	0800fb90 	.word	0x0800fb90
  ldr r2, =_sbss
 8002b14:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8002b18:	20000994 	.word	0x20000994

08002b1c <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b1c:	e7fe      	b.n	8002b1c <CAN1_RX0_IRQHandler>
	...

08002b20 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b2a:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <HAL_Init+0x3c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a0b      	ldr	r2, [pc, #44]	; (8002b5c <HAL_Init+0x3c>)
 8002b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b34:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b36:	2003      	movs	r0, #3
 8002b38:	f001 ffd6 	bl	8004ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	f000 f80f 	bl	8002b60 <HAL_InitTick>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d002      	beq.n	8002b4e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	71fb      	strb	r3, [r7, #7]
 8002b4c:	e001      	b.n	8002b52 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b4e:	f7ff fb7d 	bl	800224c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b52:	79fb      	ldrb	r3, [r7, #7]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40022000 	.word	0x40022000

08002b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002b6c:	4b17      	ldr	r3, [pc, #92]	; (8002bcc <HAL_InitTick+0x6c>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d023      	beq.n	8002bbc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002b74:	4b16      	ldr	r3, [pc, #88]	; (8002bd0 <HAL_InitTick+0x70>)
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	4b14      	ldr	r3, [pc, #80]	; (8002bcc <HAL_InitTick+0x6c>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f001 ffe1 	bl	8004b52 <HAL_SYSTICK_Config>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10f      	bne.n	8002bb6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b0f      	cmp	r3, #15
 8002b9a:	d809      	bhi.n	8002bb0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ba4:	f001 ffab 	bl	8004afe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ba8:	4a0a      	ldr	r2, [pc, #40]	; (8002bd4 <HAL_InitTick+0x74>)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	e007      	b.n	8002bc0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	73fb      	strb	r3, [r7, #15]
 8002bb4:	e004      	b.n	8002bc0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	73fb      	strb	r3, [r7, #15]
 8002bba:	e001      	b.n	8002bc0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	2000002c 	.word	0x2000002c
 8002bd0:	20000020 	.word	0x20000020
 8002bd4:	20000028 	.word	0x20000028

08002bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002bdc:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <HAL_IncTick+0x20>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	461a      	mov	r2, r3
 8002be2:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <HAL_IncTick+0x24>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4413      	add	r3, r2
 8002be8:	4a04      	ldr	r2, [pc, #16]	; (8002bfc <HAL_IncTick+0x24>)
 8002bea:	6013      	str	r3, [r2, #0]
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	2000002c 	.word	0x2000002c
 8002bfc:	20000980 	.word	0x20000980

08002c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  return uwTick;
 8002c04:	4b03      	ldr	r3, [pc, #12]	; (8002c14 <HAL_GetTick+0x14>)
 8002c06:	681b      	ldr	r3, [r3, #0]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	20000980 	.word	0x20000980

08002c18 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	609a      	str	r2, [r3, #8]
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	609a      	str	r2, [r3, #8]
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
 8002c8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	3360      	adds	r3, #96	; 0x60
 8002c92:	461a      	mov	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <LL_ADC_SetOffset+0x44>)
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002cb8:	bf00      	nop
 8002cba:	371c      	adds	r7, #28
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	03fff000 	.word	0x03fff000

08002cc8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	3360      	adds	r3, #96	; 0x60
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b087      	sub	sp, #28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	3360      	adds	r3, #96	; 0x60
 8002d04:	461a      	mov	r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002d1e:	bf00      	nop
 8002d20:	371c      	adds	r7, #28
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	3330      	adds	r3, #48	; 0x30
 8002d60:	461a      	mov	r2, r3
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	0a1b      	lsrs	r3, r3, #8
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	f003 030c 	and.w	r3, r3, #12
 8002d6c:	4413      	add	r3, r2
 8002d6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f003 031f 	and.w	r3, r3, #31
 8002d7a:	211f      	movs	r1, #31
 8002d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d80:	43db      	mvns	r3, r3
 8002d82:	401a      	ands	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	0e9b      	lsrs	r3, r3, #26
 8002d88:	f003 011f 	and.w	r1, r3, #31
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f003 031f 	and.w	r3, r3, #31
 8002d92:	fa01 f303 	lsl.w	r3, r1, r3
 8002d96:	431a      	orrs	r2, r3
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002d9c:	bf00      	nop
 8002d9e:	371c      	adds	r7, #28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e000      	b.n	8002dc2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b087      	sub	sp, #28
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	3314      	adds	r3, #20
 8002dde:	461a      	mov	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	0e5b      	lsrs	r3, r3, #25
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	4413      	add	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	0d1b      	lsrs	r3, r3, #20
 8002df6:	f003 031f 	and.w	r3, r3, #31
 8002dfa:	2107      	movs	r1, #7
 8002dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	401a      	ands	r2, r3
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	0d1b      	lsrs	r3, r3, #20
 8002e08:	f003 031f 	and.w	r3, r3, #31
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e12:	431a      	orrs	r2, r3
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e18:	bf00      	nop
 8002e1a:	371c      	adds	r7, #28
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	401a      	ands	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f003 0318 	and.w	r3, r3, #24
 8002e46:	4908      	ldr	r1, [pc, #32]	; (8002e68 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002e48:	40d9      	lsrs	r1, r3
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	400b      	ands	r3, r1
 8002e4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e52:	431a      	orrs	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002e5a:	bf00      	nop
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	0007ffff 	.word	0x0007ffff

08002e6c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f003 031f 	and.w	r3, r3, #31
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002eb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6093      	str	r3, [r2, #8]
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ed8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002edc:	d101      	bne.n	8002ee2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002f00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f2c:	d101      	bne.n	8002f32 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f54:	f043 0201 	orr.w	r2, r3, #1
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f7c:	f043 0202 	orr.w	r2, r3, #2
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d101      	bne.n	8002fa8 <LL_ADC_IsEnabled+0x18>
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e000      	b.n	8002faa <LL_ADC_IsEnabled+0x1a>
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d101      	bne.n	8002fce <LL_ADC_IsDisableOngoing+0x18>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <LL_ADC_IsDisableOngoing+0x1a>
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ff0:	f043 0204 	orr.w	r2, r3, #4
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003014:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003018:	f043 0210 	orr.w	r2, r3, #16
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b04      	cmp	r3, #4
 800303e:	d101      	bne.n	8003044 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003040:	2301      	movs	r3, #1
 8003042:	e000      	b.n	8003046 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003062:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003066:	f043 0220 	orr.w	r2, r3, #32
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b08      	cmp	r3, #8
 800308c:	d101      	bne.n	8003092 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030a0:	b590      	push	{r4, r7, lr}
 80030a2:	b089      	sub	sp, #36	; 0x24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e136      	b.n	8003328 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d109      	bne.n	80030dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7fe f85d 	bl	8001188 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff fef1 	bl	8002ec8 <LL_ADC_IsDeepPowerDownEnabled>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d004      	beq.n	80030f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fed7 	bl	8002ea4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff ff0c 	bl	8002f18 <LL_ADC_IsInternalRegulatorEnabled>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d115      	bne.n	8003132 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff fef0 	bl	8002ef0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003110:	4b87      	ldr	r3, [pc, #540]	; (8003330 <HAL_ADC_Init+0x290>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	099b      	lsrs	r3, r3, #6
 8003116:	4a87      	ldr	r2, [pc, #540]	; (8003334 <HAL_ADC_Init+0x294>)
 8003118:	fba2 2303 	umull	r2, r3, r2, r3
 800311c:	099b      	lsrs	r3, r3, #6
 800311e:	3301      	adds	r3, #1
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003124:	e002      	b.n	800312c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	3b01      	subs	r3, #1
 800312a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f9      	bne.n	8003126 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff feee 	bl	8002f18 <LL_ADC_IsInternalRegulatorEnabled>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10d      	bne.n	800315e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003146:	f043 0210 	orr.w	r2, r3, #16
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003152:	f043 0201 	orr.w	r2, r3, #1
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff ff62 	bl	800302c <LL_ADC_REG_IsConversionOngoing>
 8003168:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316e:	f003 0310 	and.w	r3, r3, #16
 8003172:	2b00      	cmp	r3, #0
 8003174:	f040 80cf 	bne.w	8003316 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	2b00      	cmp	r3, #0
 800317c:	f040 80cb 	bne.w	8003316 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003184:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003188:	f043 0202 	orr.w	r2, r3, #2
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff fefb 	bl	8002f90 <LL_ADC_IsEnabled>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d115      	bne.n	80031cc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031a0:	4865      	ldr	r0, [pc, #404]	; (8003338 <HAL_ADC_Init+0x298>)
 80031a2:	f7ff fef5 	bl	8002f90 <LL_ADC_IsEnabled>
 80031a6:	4604      	mov	r4, r0
 80031a8:	4864      	ldr	r0, [pc, #400]	; (800333c <HAL_ADC_Init+0x29c>)
 80031aa:	f7ff fef1 	bl	8002f90 <LL_ADC_IsEnabled>
 80031ae:	4603      	mov	r3, r0
 80031b0:	431c      	orrs	r4, r3
 80031b2:	4863      	ldr	r0, [pc, #396]	; (8003340 <HAL_ADC_Init+0x2a0>)
 80031b4:	f7ff feec 	bl	8002f90 <LL_ADC_IsEnabled>
 80031b8:	4603      	mov	r3, r0
 80031ba:	4323      	orrs	r3, r4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d105      	bne.n	80031cc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	4619      	mov	r1, r3
 80031c6:	485f      	ldr	r0, [pc, #380]	; (8003344 <HAL_ADC_Init+0x2a4>)
 80031c8:	f7ff fd26 	bl	8002c18 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	7e5b      	ldrb	r3, [r3, #25]
 80031d0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031d6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80031dc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80031e2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031ea:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d106      	bne.n	8003208 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	3b01      	subs	r3, #1
 8003200:	045b      	lsls	r3, r3, #17
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4313      	orrs	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320c:	2b00      	cmp	r3, #0
 800320e:	d009      	beq.n	8003224 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003214:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4313      	orrs	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	4b47      	ldr	r3, [pc, #284]	; (8003348 <HAL_ADC_Init+0x2a8>)
 800322c:	4013      	ands	r3, r2
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6812      	ldr	r2, [r2, #0]
 8003232:	69b9      	ldr	r1, [r7, #24]
 8003234:	430b      	orrs	r3, r1
 8003236:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff fef5 	bl	800302c <LL_ADC_REG_IsConversionOngoing>
 8003242:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff ff16 	bl	800307a <LL_ADC_INJ_IsConversionOngoing>
 800324e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d13d      	bne.n	80032d2 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d13a      	bne.n	80032d2 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003260:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003268:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800326a:	4313      	orrs	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003278:	f023 0302 	bic.w	r3, r3, #2
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6812      	ldr	r2, [r2, #0]
 8003280:	69b9      	ldr	r1, [r7, #24]
 8003282:	430b      	orrs	r3, r1
 8003284:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800328c:	2b01      	cmp	r3, #1
 800328e:	d118      	bne.n	80032c2 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800329a:	f023 0304 	bic.w	r3, r3, #4
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032a6:	4311      	orrs	r1, r2
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80032ac:	4311      	orrs	r1, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80032b2:	430a      	orrs	r2, r1
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0201 	orr.w	r2, r2, #1
 80032be:	611a      	str	r2, [r3, #16]
 80032c0:	e007      	b.n	80032d2 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	691a      	ldr	r2, [r3, #16]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0201 	bic.w	r2, r2, #1
 80032d0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d10c      	bne.n	80032f4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	f023 010f 	bic.w	r1, r3, #15
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	1e5a      	subs	r2, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	631a      	str	r2, [r3, #48]	; 0x30
 80032f2:	e007      	b.n	8003304 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 020f 	bic.w	r2, r2, #15
 8003302:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003308:	f023 0303 	bic.w	r3, r3, #3
 800330c:	f043 0201 	orr.w	r2, r3, #1
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	655a      	str	r2, [r3, #84]	; 0x54
 8003314:	e007      	b.n	8003326 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331a:	f043 0210 	orr.w	r2, r3, #16
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003326:	7ffb      	ldrb	r3, [r7, #31]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3724      	adds	r7, #36	; 0x24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd90      	pop	{r4, r7, pc}
 8003330:	20000020 	.word	0x20000020
 8003334:	053e2d63 	.word	0x053e2d63
 8003338:	50040000 	.word	0x50040000
 800333c:	50040100 	.word	0x50040100
 8003340:	50040200 	.word	0x50040200
 8003344:	50040300 	.word	0x50040300
 8003348:	fff0c007 	.word	0xfff0c007

0800334c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003354:	4857      	ldr	r0, [pc, #348]	; (80034b4 <HAL_ADC_Start+0x168>)
 8003356:	f7ff fd89 	bl	8002e6c <LL_ADC_GetMultimode>
 800335a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff fe63 	bl	800302c <LL_ADC_REG_IsConversionOngoing>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	f040 809c 	bne.w	80034a6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003374:	2b01      	cmp	r3, #1
 8003376:	d101      	bne.n	800337c <HAL_ADC_Start+0x30>
 8003378:	2302      	movs	r3, #2
 800337a:	e097      	b.n	80034ac <HAL_ADC_Start+0x160>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f001 f9c7 	bl	8004718 <ADC_Enable>
 800338a:	4603      	mov	r3, r0
 800338c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800338e:	7dfb      	ldrb	r3, [r7, #23]
 8003390:	2b00      	cmp	r3, #0
 8003392:	f040 8083 	bne.w	800349c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800339e:	f023 0301 	bic.w	r3, r3, #1
 80033a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a42      	ldr	r2, [pc, #264]	; (80034b8 <HAL_ADC_Start+0x16c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d002      	beq.n	80033ba <HAL_ADC_Start+0x6e>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	e000      	b.n	80033bc <HAL_ADC_Start+0x70>
 80033ba:	4b40      	ldr	r3, [pc, #256]	; (80034bc <HAL_ADC_Start+0x170>)
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6812      	ldr	r2, [r2, #0]
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d002      	beq.n	80033ca <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d105      	bne.n	80033d6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e2:	d106      	bne.n	80033f2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e8:	f023 0206 	bic.w	r2, r3, #6
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	659a      	str	r2, [r3, #88]	; 0x58
 80033f0:	e002      	b.n	80033f8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	221c      	movs	r2, #28
 80033fe:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a2a      	ldr	r2, [pc, #168]	; (80034b8 <HAL_ADC_Start+0x16c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d002      	beq.n	8003418 <HAL_ADC_Start+0xcc>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	e000      	b.n	800341a <HAL_ADC_Start+0xce>
 8003418:	4b28      	ldr	r3, [pc, #160]	; (80034bc <HAL_ADC_Start+0x170>)
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6812      	ldr	r2, [r2, #0]
 800341e:	4293      	cmp	r3, r2
 8003420:	d008      	beq.n	8003434 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	2b05      	cmp	r3, #5
 800342c:	d002      	beq.n	8003434 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	2b09      	cmp	r3, #9
 8003432:	d114      	bne.n	800345e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d007      	beq.n	8003452 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003446:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800344a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff fdc0 	bl	8002fdc <LL_ADC_REG_StartConversion>
 800345c:	e025      	b.n	80034aa <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003462:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a12      	ldr	r2, [pc, #72]	; (80034b8 <HAL_ADC_Start+0x16c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d002      	beq.n	800347a <HAL_ADC_Start+0x12e>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	e000      	b.n	800347c <HAL_ADC_Start+0x130>
 800347a:	4b10      	ldr	r3, [pc, #64]	; (80034bc <HAL_ADC_Start+0x170>)
 800347c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00f      	beq.n	80034aa <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003492:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	655a      	str	r2, [r3, #84]	; 0x54
 800349a:	e006      	b.n	80034aa <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80034a4:	e001      	b.n	80034aa <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80034a6:	2302      	movs	r3, #2
 80034a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80034aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	50040300 	.word	0x50040300
 80034b8:	50040100 	.word	0x50040100
 80034bc:	50040000 	.word	0x50040000

080034c0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034ca:	4866      	ldr	r0, [pc, #408]	; (8003664 <HAL_ADC_PollForConversion+0x1a4>)
 80034cc:	f7ff fcce 	bl	8002e6c <LL_ADC_GetMultimode>
 80034d0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d102      	bne.n	80034e0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80034da:	2308      	movs	r3, #8
 80034dc:	61fb      	str	r3, [r7, #28]
 80034de:	e02a      	b.n	8003536 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d005      	beq.n	80034f2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2b05      	cmp	r3, #5
 80034ea:	d002      	beq.n	80034f2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	2b09      	cmp	r3, #9
 80034f0:	d111      	bne.n	8003516 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d007      	beq.n	8003510 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003504:	f043 0220 	orr.w	r2, r3, #32
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0a4      	b.n	800365a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003510:	2304      	movs	r3, #4
 8003512:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003514:	e00f      	b.n	8003536 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003516:	4853      	ldr	r0, [pc, #332]	; (8003664 <HAL_ADC_PollForConversion+0x1a4>)
 8003518:	f7ff fcb6 	bl	8002e88 <LL_ADC_GetMultiDMATransfer>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d007      	beq.n	8003532 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003526:	f043 0220 	orr.w	r2, r3, #32
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e093      	b.n	800365a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003532:	2304      	movs	r3, #4
 8003534:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003536:	f7ff fb63 	bl	8002c00 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800353c:	e021      	b.n	8003582 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003544:	d01d      	beq.n	8003582 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003546:	f7ff fb5b 	bl	8002c00 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d302      	bcc.n	800355c <HAL_ADC_PollForConversion+0x9c>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d112      	bne.n	8003582 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	4013      	ands	r3, r2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10b      	bne.n	8003582 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356e:	f043 0204 	orr.w	r2, r3, #4
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e06b      	b.n	800365a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	4013      	ands	r3, r2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0d6      	beq.n	800353e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003594:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff fbc2 	bl	8002d2a <LL_ADC_REG_IsTriggerSourceSWStart>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d01c      	beq.n	80035e6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	7e5b      	ldrb	r3, [r3, #25]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d118      	bne.n	80035e6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0308 	and.w	r3, r3, #8
 80035be:	2b08      	cmp	r3, #8
 80035c0:	d111      	bne.n	80035e6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d105      	bne.n	80035e6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035de:	f043 0201 	orr.w	r2, r3, #1
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a1f      	ldr	r2, [pc, #124]	; (8003668 <HAL_ADC_PollForConversion+0x1a8>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d002      	beq.n	80035f6 <HAL_ADC_PollForConversion+0x136>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	e000      	b.n	80035f8 <HAL_ADC_PollForConversion+0x138>
 80035f6:	4b1d      	ldr	r3, [pc, #116]	; (800366c <HAL_ADC_PollForConversion+0x1ac>)
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6812      	ldr	r2, [r2, #0]
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d008      	beq.n	8003612 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d005      	beq.n	8003612 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2b05      	cmp	r3, #5
 800360a:	d002      	beq.n	8003612 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	2b09      	cmp	r3, #9
 8003610:	d104      	bne.n	800361c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	61bb      	str	r3, [r7, #24]
 800361a:	e00c      	b.n	8003636 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a11      	ldr	r2, [pc, #68]	; (8003668 <HAL_ADC_PollForConversion+0x1a8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d002      	beq.n	800362c <HAL_ADC_PollForConversion+0x16c>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	e000      	b.n	800362e <HAL_ADC_PollForConversion+0x16e>
 800362c:	4b0f      	ldr	r3, [pc, #60]	; (800366c <HAL_ADC_PollForConversion+0x1ac>)
 800362e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	2b08      	cmp	r3, #8
 800363a:	d104      	bne.n	8003646 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2208      	movs	r2, #8
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	e008      	b.n	8003658 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d103      	bne.n	8003658 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	220c      	movs	r2, #12
 8003656:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3720      	adds	r7, #32
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	50040300 	.word	0x50040300
 8003668:	50040100 	.word	0x50040100
 800366c:	50040000 	.word	0x50040000

08003670 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003678:	4893      	ldr	r0, [pc, #588]	; (80038c8 <HAL_ADC_Start_IT+0x258>)
 800367a:	f7ff fbf7 	bl	8002e6c <LL_ADC_GetMultimode>
 800367e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff fcd1 	bl	800302c <LL_ADC_REG_IsConversionOngoing>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	f040 8111 	bne.w	80038b4 <HAL_ADC_Start_IT+0x244>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <HAL_ADC_Start_IT+0x30>
 800369c:	2302      	movs	r3, #2
 800369e:	e10e      	b.n	80038be <HAL_ADC_Start_IT+0x24e>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f001 f835 	bl	8004718 <ADC_Enable>
 80036ae:	4603      	mov	r3, r0
 80036b0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80036b2:	7dfb      	ldrb	r3, [r7, #23]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f040 80f8 	bne.w	80038aa <HAL_ADC_Start_IT+0x23a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036be:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036c2:	f023 0301 	bic.w	r3, r3, #1
 80036c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a7e      	ldr	r2, [pc, #504]	; (80038cc <HAL_ADC_Start_IT+0x25c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d002      	beq.n	80036de <HAL_ADC_Start_IT+0x6e>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	e000      	b.n	80036e0 <HAL_ADC_Start_IT+0x70>
 80036de:	4b7c      	ldr	r3, [pc, #496]	; (80038d0 <HAL_ADC_Start_IT+0x260>)
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d002      	beq.n	80036ee <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d105      	bne.n	80036fa <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d006      	beq.n	8003714 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370a:	f023 0206 	bic.w	r2, r3, #6
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	659a      	str	r2, [r3, #88]	; 0x58
 8003712:	e002      	b.n	800371a <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	221c      	movs	r2, #28
 8003720:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 021c 	bic.w	r2, r2, #28
 8003738:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	2b08      	cmp	r3, #8
 8003740:	d108      	bne.n	8003754 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f042 0208 	orr.w	r2, r2, #8
 8003750:	605a      	str	r2, [r3, #4]
          break;
 8003752:	e008      	b.n	8003766 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0204 	orr.w	r2, r2, #4
 8003762:	605a      	str	r2, [r3, #4]
          break;
 8003764:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800376a:	2b00      	cmp	r3, #0
 800376c:	d107      	bne.n	800377e <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f042 0210 	orr.w	r2, r2, #16
 800377c:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a52      	ldr	r2, [pc, #328]	; (80038cc <HAL_ADC_Start_IT+0x25c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d002      	beq.n	800378e <HAL_ADC_Start_IT+0x11e>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	e000      	b.n	8003790 <HAL_ADC_Start_IT+0x120>
 800378e:	4b50      	ldr	r3, [pc, #320]	; (80038d0 <HAL_ADC_Start_IT+0x260>)
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	4293      	cmp	r3, r2
 8003796:	d008      	beq.n	80037aa <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d005      	beq.n	80037aa <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	2b05      	cmp	r3, #5
 80037a2:	d002      	beq.n	80037aa <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	2b09      	cmp	r3, #9
 80037a8:	d13b      	bne.n	8003822 <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d02d      	beq.n	8003814 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d110      	bne.n	80037f2 <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0220 	bic.w	r2, r2, #32
 80037de:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037ee:	605a      	str	r2, [r3, #4]
              break;
 80037f0:	e011      	b.n	8003816 <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003800:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0220 	orr.w	r2, r2, #32
 8003810:	605a      	str	r2, [r3, #4]
              break;
 8003812:	e000      	b.n	8003816 <HAL_ADC_Start_IT+0x1a6>
          }
        }
 8003814:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff fbde 	bl	8002fdc <LL_ADC_REG_StartConversion>
 8003820:	e04c      	b.n	80038bc <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003826:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a26      	ldr	r2, [pc, #152]	; (80038cc <HAL_ADC_Start_IT+0x25c>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d002      	beq.n	800383e <HAL_ADC_Start_IT+0x1ce>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	e000      	b.n	8003840 <HAL_ADC_Start_IT+0x1d0>
 800383e:	4b24      	ldr	r3, [pc, #144]	; (80038d0 <HAL_ADC_Start_IT+0x260>)
 8003840:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d035      	beq.n	80038ba <HAL_ADC_Start_IT+0x24a>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003852:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003856:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	2b08      	cmp	r3, #8
 8003864:	d110      	bne.n	8003888 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0220 	bic.w	r2, r2, #32
 8003874:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003884:	605a      	str	r2, [r3, #4]
              break;
 8003886:	e019      	b.n	80038bc <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003896:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0220 	orr.w	r2, r2, #32
 80038a6:	605a      	str	r2, [r3, #4]
              break;
 80038a8:	e008      	b.n	80038bc <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80038b2:	e003      	b.n	80038bc <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80038b4:	2302      	movs	r3, #2
 80038b6:	75fb      	strb	r3, [r7, #23]
 80038b8:	e000      	b.n	80038bc <HAL_ADC_Start_IT+0x24c>
        }
 80038ba:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 80038bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3718      	adds	r7, #24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	50040300 	.word	0x50040300
 80038cc:	50040100 	.word	0x50040100
 80038d0:	50040000 	.word	0x50040000

080038d4 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d101      	bne.n	80038ea <HAL_ADC_Stop_IT+0x16>
 80038e6:	2302      	movs	r3, #2
 80038e8:	e02b      	b.n	8003942 <HAL_ADC_Stop_IT+0x6e>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80038f2:	2103      	movs	r1, #3
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fe53 	bl	80045a0 <ADC_ConversionStop>
 80038fa:	4603      	mov	r3, r0
 80038fc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80038fe:	7bfb      	ldrb	r3, [r7, #15]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d119      	bne.n	8003938 <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 021c 	bic.w	r2, r2, #28
 8003912:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 ff85 	bl	8004824 <ADC_Disable>
 800391a:	4603      	mov	r3, r0
 800391c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d109      	bne.n	8003938 <HAL_ADC_Stop_IT+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003928:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800392c:	f023 0301 	bic.w	r3, r3, #1
 8003930:	f043 0201 	orr.w	r2, r3, #1
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003940:	7bfb      	ldrb	r3, [r7, #15]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003958:	4618      	mov	r0, r3
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b08a      	sub	sp, #40	; 0x28
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800396c:	2300      	movs	r3, #0
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003980:	4882      	ldr	r0, [pc, #520]	; (8003b8c <HAL_ADC_IRQHandler+0x228>)
 8003982:	f7ff fa73 	bl	8002e6c <LL_ADC_GetMultimode>
 8003986:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d017      	beq.n	80039c2 <HAL_ADC_IRQHandler+0x5e>
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d012      	beq.n	80039c2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a0:	f003 0310 	and.w	r3, r3, #16
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d105      	bne.n	80039b4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ac:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 ffbc 	bl	8004932 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2202      	movs	r2, #2
 80039c0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d004      	beq.n	80039d6 <HAL_ADC_IRQHandler+0x72>
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	f003 0304 	and.w	r3, r3, #4
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10a      	bne.n	80039ec <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 8083 	beq.w	8003ae8 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d07d      	beq.n	8003ae8 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f0:	f003 0310 	and.w	r3, r3, #16
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d105      	bne.n	8003a04 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff f98e 	bl	8002d2a <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d062      	beq.n	8003ada <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a5d      	ldr	r2, [pc, #372]	; (8003b90 <HAL_ADC_IRQHandler+0x22c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d002      	beq.n	8003a24 <HAL_ADC_IRQHandler+0xc0>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	e000      	b.n	8003a26 <HAL_ADC_IRQHandler+0xc2>
 8003a24:	4b5b      	ldr	r3, [pc, #364]	; (8003b94 <HAL_ADC_IRQHandler+0x230>)
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6812      	ldr	r2, [r2, #0]
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d008      	beq.n	8003a40 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	2b05      	cmp	r3, #5
 8003a38:	d002      	beq.n	8003a40 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2b09      	cmp	r3, #9
 8003a3e:	d104      	bne.n	8003a4a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	623b      	str	r3, [r7, #32]
 8003a48:	e00c      	b.n	8003a64 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a50      	ldr	r2, [pc, #320]	; (8003b90 <HAL_ADC_IRQHandler+0x22c>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d002      	beq.n	8003a5a <HAL_ADC_IRQHandler+0xf6>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	e000      	b.n	8003a5c <HAL_ADC_IRQHandler+0xf8>
 8003a5a:	4b4e      	ldr	r3, [pc, #312]	; (8003b94 <HAL_ADC_IRQHandler+0x230>)
 8003a5c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003a64:	6a3b      	ldr	r3, [r7, #32]
 8003a66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d135      	bne.n	8003ada <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0308 	and.w	r3, r3, #8
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d12e      	bne.n	8003ada <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff fad3 	bl	800302c <LL_ADC_REG_IsConversionOngoing>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d11a      	bne.n	8003ac2 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 020c 	bic.w	r2, r2, #12
 8003a9a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d112      	bne.n	8003ada <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab8:	f043 0201 	orr.w	r2, r3, #1
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	655a      	str	r2, [r3, #84]	; 0x54
 8003ac0:	e00b      	b.n	8003ada <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac6:	f043 0210 	orr.w	r2, r3, #16
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad2:	f043 0201 	orr.w	r2, r3, #1
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7fe ff24 	bl	8002928 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	220c      	movs	r2, #12
 8003ae6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f003 0320 	and.w	r3, r3, #32
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d004      	beq.n	8003afc <HAL_ADC_IRQHandler+0x198>
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	f003 0320 	and.w	r3, r3, #32
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10b      	bne.n	8003b14 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 809f 	beq.w	8003c46 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 8099 	beq.w	8003c46 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b18:	f003 0310 	and.w	r3, r3, #16
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d105      	bne.n	8003b2c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b24:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff f939 	bl	8002da8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003b36:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff f8f4 	bl	8002d2a <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b42:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a11      	ldr	r2, [pc, #68]	; (8003b90 <HAL_ADC_IRQHandler+0x22c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d002      	beq.n	8003b54 <HAL_ADC_IRQHandler+0x1f0>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	e000      	b.n	8003b56 <HAL_ADC_IRQHandler+0x1f2>
 8003b54:	4b0f      	ldr	r3, [pc, #60]	; (8003b94 <HAL_ADC_IRQHandler+0x230>)
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	6812      	ldr	r2, [r2, #0]
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d008      	beq.n	8003b70 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d005      	beq.n	8003b70 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	2b06      	cmp	r3, #6
 8003b68:	d002      	beq.n	8003b70 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2b07      	cmp	r3, #7
 8003b6e:	d104      	bne.n	8003b7a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	623b      	str	r3, [r7, #32]
 8003b78:	e013      	b.n	8003ba2 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a04      	ldr	r2, [pc, #16]	; (8003b90 <HAL_ADC_IRQHandler+0x22c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d009      	beq.n	8003b98 <HAL_ADC_IRQHandler+0x234>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	e007      	b.n	8003b9a <HAL_ADC_IRQHandler+0x236>
 8003b8a:	bf00      	nop
 8003b8c:	50040300 	.word	0x50040300
 8003b90:	50040100 	.word	0x50040100
 8003b94:	50040000 	.word	0x50040000
 8003b98:	4b7d      	ldr	r3, [pc, #500]	; (8003d90 <HAL_ADC_IRQHandler+0x42c>)
 8003b9a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d047      	beq.n	8003c38 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
 8003baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d007      	beq.n	8003bc2 <HAL_ADC_IRQHandler+0x25e>
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d03f      	beq.n	8003c38 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003bb8:	6a3b      	ldr	r3, [r7, #32]
 8003bba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d13a      	bne.n	8003c38 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bcc:	2b40      	cmp	r3, #64	; 0x40
 8003bce:	d133      	bne.n	8003c38 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d12e      	bne.n	8003c38 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7ff fa4b 	bl	800307a <LL_ADC_INJ_IsConversionOngoing>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d11a      	bne.n	8003c20 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bf8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d112      	bne.n	8003c38 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c16:	f043 0201 	orr.w	r2, r3, #1
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	655a      	str	r2, [r3, #84]	; 0x54
 8003c1e:	e00b      	b.n	8003c38 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c24:	f043 0210 	orr.w	r2, r3, #16
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c30:	f043 0201 	orr.w	r2, r3, #1
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 fe52 	bl	80048e2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2260      	movs	r2, #96	; 0x60
 8003c44:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d011      	beq.n	8003c74 <HAL_ADC_IRQHandler+0x310>
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00c      	beq.n	8003c74 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f896 	bl	8003d98 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2280      	movs	r2, #128	; 0x80
 8003c72:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d012      	beq.n	8003ca4 <HAL_ADC_IRQHandler+0x340>
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00d      	beq.n	8003ca4 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 fe38 	bl	800490a <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ca2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d012      	beq.n	8003cd4 <HAL_ADC_IRQHandler+0x370>
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00d      	beq.n	8003cd4 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cbc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fe2a 	bl	800491e <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cd2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f003 0310 	and.w	r3, r3, #16
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d036      	beq.n	8003d4c <HAL_ADC_IRQHandler+0x3e8>
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	f003 0310 	and.w	r3, r3, #16
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d031      	beq.n	8003d4c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d102      	bne.n	8003cf6 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf4:	e014      	b.n	8003d20 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d008      	beq.n	8003d0e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003cfc:	4825      	ldr	r0, [pc, #148]	; (8003d94 <HAL_ADC_IRQHandler+0x430>)
 8003cfe:	f7ff f8c3 	bl	8002e88 <LL_ADC_GetMultiDMATransfer>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00b      	beq.n	8003d20 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d0c:	e008      	b.n	8003d20 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d10e      	bne.n	8003d44 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d36:	f043 0202 	orr.w	r2, r3, #2
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f834 	bl	8003dac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2210      	movs	r2, #16
 8003d4a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d018      	beq.n	8003d88 <HAL_ADC_IRQHandler+0x424>
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d013      	beq.n	8003d88 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d64:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d70:	f043 0208 	orr.w	r2, r3, #8
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d80:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 fdb7 	bl	80048f6 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003d88:	bf00      	nop
 8003d8a:	3728      	adds	r7, #40	; 0x28
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	50040000 	.word	0x50040000
 8003d94:	50040300 	.word	0x50040300

08003d98 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b0b6      	sub	sp, #216	; 0xd8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d101      	bne.n	8003de2 <HAL_ADC_ConfigChannel+0x22>
 8003dde:	2302      	movs	r3, #2
 8003de0:	e3c7      	b.n	8004572 <HAL_ADC_ConfigChannel+0x7b2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff f91c 	bl	800302c <LL_ADC_REG_IsConversionOngoing>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f040 83a8 	bne.w	800454c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	2b05      	cmp	r3, #5
 8003e02:	d824      	bhi.n	8003e4e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	3b02      	subs	r3, #2
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	d81b      	bhi.n	8003e46 <HAL_ADC_ConfigChannel+0x86>
 8003e0e:	a201      	add	r2, pc, #4	; (adr r2, 8003e14 <HAL_ADC_ConfigChannel+0x54>)
 8003e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e14:	08003e25 	.word	0x08003e25
 8003e18:	08003e2d 	.word	0x08003e2d
 8003e1c:	08003e35 	.word	0x08003e35
 8003e20:	08003e3d 	.word	0x08003e3d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	220c      	movs	r2, #12
 8003e28:	605a      	str	r2, [r3, #4]
          break;
 8003e2a:	e011      	b.n	8003e50 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	2212      	movs	r2, #18
 8003e30:	605a      	str	r2, [r3, #4]
          break;
 8003e32:	e00d      	b.n	8003e50 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	2218      	movs	r2, #24
 8003e38:	605a      	str	r2, [r3, #4]
          break;
 8003e3a:	e009      	b.n	8003e50 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e42:	605a      	str	r2, [r3, #4]
          break;
 8003e44:	e004      	b.n	8003e50 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2206      	movs	r2, #6
 8003e4a:	605a      	str	r2, [r3, #4]
          break;
 8003e4c:	e000      	b.n	8003e50 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003e4e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6818      	ldr	r0, [r3, #0]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	6859      	ldr	r1, [r3, #4]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	f7fe ff77 	bl	8002d50 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7ff f8e0 	bl	800302c <LL_ADC_REG_IsConversionOngoing>
 8003e6c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff f900 	bl	800307a <LL_ADC_INJ_IsConversionOngoing>
 8003e7a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e7e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f040 81a6 	bne.w	80041d4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f040 81a1 	bne.w	80041d4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6818      	ldr	r0, [r3, #0]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	6819      	ldr	r1, [r3, #0]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	f7fe ff95 	bl	8002dce <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	695a      	ldr	r2, [r3, #20]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	08db      	lsrs	r3, r3, #3
 8003eb0:	f003 0303 	and.w	r3, r3, #3
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d00a      	beq.n	8003edc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6818      	ldr	r0, [r3, #0]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	6919      	ldr	r1, [r3, #16]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ed6:	f7fe fed3 	bl	8002c80 <LL_ADC_SetOffset>
 8003eda:	e17b      	b.n	80041d4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fe fef0 	bl	8002cc8 <LL_ADC_GetOffsetChannel>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10a      	bne.n	8003f08 <HAL_ADC_ConfigChannel+0x148>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fe fee5 	bl	8002cc8 <LL_ADC_GetOffsetChannel>
 8003efe:	4603      	mov	r3, r0
 8003f00:	0e9b      	lsrs	r3, r3, #26
 8003f02:	f003 021f 	and.w	r2, r3, #31
 8003f06:	e01e      	b.n	8003f46 <HAL_ADC_ConfigChannel+0x186>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fe feda 	bl	8002cc8 <LL_ADC_GetOffsetChannel>
 8003f14:	4603      	mov	r3, r0
 8003f16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003f1e:	fa93 f3a3 	rbit	r3, r3
 8003f22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003f2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003f36:	2320      	movs	r3, #32
 8003f38:	e004      	b.n	8003f44 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003f3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f3e:	fab3 f383 	clz	r3, r3
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d105      	bne.n	8003f5e <HAL_ADC_ConfigChannel+0x19e>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	0e9b      	lsrs	r3, r3, #26
 8003f58:	f003 031f 	and.w	r3, r3, #31
 8003f5c:	e018      	b.n	8003f90 <HAL_ADC_ConfigChannel+0x1d0>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f6a:	fa93 f3a3 	rbit	r3, r3
 8003f6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003f72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003f7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003f82:	2320      	movs	r3, #32
 8003f84:	e004      	b.n	8003f90 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003f86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f8a:	fab3 f383 	clz	r3, r3
 8003f8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d106      	bne.n	8003fa2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fe fea9 	bl	8002cf4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7fe fe8d 	bl	8002cc8 <LL_ADC_GetOffsetChannel>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10a      	bne.n	8003fce <HAL_ADC_ConfigChannel+0x20e>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fe fe82 	bl	8002cc8 <LL_ADC_GetOffsetChannel>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	0e9b      	lsrs	r3, r3, #26
 8003fc8:	f003 021f 	and.w	r2, r3, #31
 8003fcc:	e01e      	b.n	800400c <HAL_ADC_ConfigChannel+0x24c>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fe fe77 	bl	8002cc8 <LL_ADC_GetOffsetChannel>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003fe4:	fa93 f3a3 	rbit	r3, r3
 8003fe8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003fec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ff0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003ff4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003ffc:	2320      	movs	r3, #32
 8003ffe:	e004      	b.n	800400a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004000:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004004:	fab3 f383 	clz	r3, r3
 8004008:	b2db      	uxtb	r3, r3
 800400a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004014:	2b00      	cmp	r3, #0
 8004016:	d105      	bne.n	8004024 <HAL_ADC_ConfigChannel+0x264>
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	0e9b      	lsrs	r3, r3, #26
 800401e:	f003 031f 	and.w	r3, r3, #31
 8004022:	e018      	b.n	8004056 <HAL_ADC_ConfigChannel+0x296>
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004030:	fa93 f3a3 	rbit	r3, r3
 8004034:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004038:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800403c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004040:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004048:	2320      	movs	r3, #32
 800404a:	e004      	b.n	8004056 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800404c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004050:	fab3 f383 	clz	r3, r3
 8004054:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004056:	429a      	cmp	r2, r3
 8004058:	d106      	bne.n	8004068 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2200      	movs	r2, #0
 8004060:	2101      	movs	r1, #1
 8004062:	4618      	mov	r0, r3
 8004064:	f7fe fe46 	bl	8002cf4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2102      	movs	r1, #2
 800406e:	4618      	mov	r0, r3
 8004070:	f7fe fe2a 	bl	8002cc8 <LL_ADC_GetOffsetChannel>
 8004074:	4603      	mov	r3, r0
 8004076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10a      	bne.n	8004094 <HAL_ADC_ConfigChannel+0x2d4>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2102      	movs	r1, #2
 8004084:	4618      	mov	r0, r3
 8004086:	f7fe fe1f 	bl	8002cc8 <LL_ADC_GetOffsetChannel>
 800408a:	4603      	mov	r3, r0
 800408c:	0e9b      	lsrs	r3, r3, #26
 800408e:	f003 021f 	and.w	r2, r3, #31
 8004092:	e01e      	b.n	80040d2 <HAL_ADC_ConfigChannel+0x312>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2102      	movs	r1, #2
 800409a:	4618      	mov	r0, r3
 800409c:	f7fe fe14 	bl	8002cc8 <LL_ADC_GetOffsetChannel>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040aa:	fa93 f3a3 	rbit	r3, r3
 80040ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80040b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80040ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80040c2:	2320      	movs	r3, #32
 80040c4:	e004      	b.n	80040d0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80040c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80040ca:	fab3 f383 	clz	r3, r3
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d105      	bne.n	80040ea <HAL_ADC_ConfigChannel+0x32a>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	0e9b      	lsrs	r3, r3, #26
 80040e4:	f003 031f 	and.w	r3, r3, #31
 80040e8:	e016      	b.n	8004118 <HAL_ADC_ConfigChannel+0x358>
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040f6:	fa93 f3a3 	rbit	r3, r3
 80040fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80040fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004102:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800410a:	2320      	movs	r3, #32
 800410c:	e004      	b.n	8004118 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800410e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004112:	fab3 f383 	clz	r3, r3
 8004116:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004118:	429a      	cmp	r2, r3
 800411a:	d106      	bne.n	800412a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2200      	movs	r2, #0
 8004122:	2102      	movs	r1, #2
 8004124:	4618      	mov	r0, r3
 8004126:	f7fe fde5 	bl	8002cf4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2103      	movs	r1, #3
 8004130:	4618      	mov	r0, r3
 8004132:	f7fe fdc9 	bl	8002cc8 <LL_ADC_GetOffsetChannel>
 8004136:	4603      	mov	r3, r0
 8004138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10a      	bne.n	8004156 <HAL_ADC_ConfigChannel+0x396>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2103      	movs	r1, #3
 8004146:	4618      	mov	r0, r3
 8004148:	f7fe fdbe 	bl	8002cc8 <LL_ADC_GetOffsetChannel>
 800414c:	4603      	mov	r3, r0
 800414e:	0e9b      	lsrs	r3, r3, #26
 8004150:	f003 021f 	and.w	r2, r3, #31
 8004154:	e017      	b.n	8004186 <HAL_ADC_ConfigChannel+0x3c6>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2103      	movs	r1, #3
 800415c:	4618      	mov	r0, r3
 800415e:	f7fe fdb3 	bl	8002cc8 <LL_ADC_GetOffsetChannel>
 8004162:	4603      	mov	r3, r0
 8004164:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004166:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004168:	fa93 f3a3 	rbit	r3, r3
 800416c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800416e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004170:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004172:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004178:	2320      	movs	r3, #32
 800417a:	e003      	b.n	8004184 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800417c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800417e:	fab3 f383 	clz	r3, r3
 8004182:	b2db      	uxtb	r3, r3
 8004184:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800418e:	2b00      	cmp	r3, #0
 8004190:	d105      	bne.n	800419e <HAL_ADC_ConfigChannel+0x3de>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	0e9b      	lsrs	r3, r3, #26
 8004198:	f003 031f 	and.w	r3, r3, #31
 800419c:	e011      	b.n	80041c2 <HAL_ADC_ConfigChannel+0x402>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041a6:	fa93 f3a3 	rbit	r3, r3
 80041aa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80041ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80041b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80041b6:	2320      	movs	r3, #32
 80041b8:	e003      	b.n	80041c2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80041ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041bc:	fab3 f383 	clz	r3, r3
 80041c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d106      	bne.n	80041d4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2200      	movs	r2, #0
 80041cc:	2103      	movs	r1, #3
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fe fd90 	bl	8002cf4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4618      	mov	r0, r3
 80041da:	f7fe fed9 	bl	8002f90 <LL_ADC_IsEnabled>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f040 813f 	bne.w	8004464 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6818      	ldr	r0, [r3, #0]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	6819      	ldr	r1, [r3, #0]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	461a      	mov	r2, r3
 80041f4:	f7fe fe16 	bl	8002e24 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	4a8e      	ldr	r2, [pc, #568]	; (8004438 <HAL_ADC_ConfigChannel+0x678>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	f040 8130 	bne.w	8004464 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10b      	bne.n	800422c <HAL_ADC_ConfigChannel+0x46c>
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	0e9b      	lsrs	r3, r3, #26
 800421a:	3301      	adds	r3, #1
 800421c:	f003 031f 	and.w	r3, r3, #31
 8004220:	2b09      	cmp	r3, #9
 8004222:	bf94      	ite	ls
 8004224:	2301      	movls	r3, #1
 8004226:	2300      	movhi	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	e019      	b.n	8004260 <HAL_ADC_ConfigChannel+0x4a0>
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004234:	fa93 f3a3 	rbit	r3, r3
 8004238:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800423a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800423c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800423e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004244:	2320      	movs	r3, #32
 8004246:	e003      	b.n	8004250 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004248:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800424a:	fab3 f383 	clz	r3, r3
 800424e:	b2db      	uxtb	r3, r3
 8004250:	3301      	adds	r3, #1
 8004252:	f003 031f 	and.w	r3, r3, #31
 8004256:	2b09      	cmp	r3, #9
 8004258:	bf94      	ite	ls
 800425a:	2301      	movls	r3, #1
 800425c:	2300      	movhi	r3, #0
 800425e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004260:	2b00      	cmp	r3, #0
 8004262:	d079      	beq.n	8004358 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800426c:	2b00      	cmp	r3, #0
 800426e:	d107      	bne.n	8004280 <HAL_ADC_ConfigChannel+0x4c0>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	0e9b      	lsrs	r3, r3, #26
 8004276:	3301      	adds	r3, #1
 8004278:	069b      	lsls	r3, r3, #26
 800427a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800427e:	e015      	b.n	80042ac <HAL_ADC_ConfigChannel+0x4ec>
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004288:	fa93 f3a3 	rbit	r3, r3
 800428c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800428e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004290:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004298:	2320      	movs	r3, #32
 800429a:	e003      	b.n	80042a4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800429c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800429e:	fab3 f383 	clz	r3, r3
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	3301      	adds	r3, #1
 80042a6:	069b      	lsls	r3, r3, #26
 80042a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d109      	bne.n	80042cc <HAL_ADC_ConfigChannel+0x50c>
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	0e9b      	lsrs	r3, r3, #26
 80042be:	3301      	adds	r3, #1
 80042c0:	f003 031f 	and.w	r3, r3, #31
 80042c4:	2101      	movs	r1, #1
 80042c6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ca:	e017      	b.n	80042fc <HAL_ADC_ConfigChannel+0x53c>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042d4:	fa93 f3a3 	rbit	r3, r3
 80042d8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80042da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042dc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80042de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80042e4:	2320      	movs	r3, #32
 80042e6:	e003      	b.n	80042f0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80042e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042ea:	fab3 f383 	clz	r3, r3
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	3301      	adds	r3, #1
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	2101      	movs	r1, #1
 80042f8:	fa01 f303 	lsl.w	r3, r1, r3
 80042fc:	ea42 0103 	orr.w	r1, r2, r3
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10a      	bne.n	8004322 <HAL_ADC_ConfigChannel+0x562>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	0e9b      	lsrs	r3, r3, #26
 8004312:	3301      	adds	r3, #1
 8004314:	f003 021f 	and.w	r2, r3, #31
 8004318:	4613      	mov	r3, r2
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	4413      	add	r3, r2
 800431e:	051b      	lsls	r3, r3, #20
 8004320:	e018      	b.n	8004354 <HAL_ADC_ConfigChannel+0x594>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432a:	fa93 f3a3 	rbit	r3, r3
 800432e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004332:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800433a:	2320      	movs	r3, #32
 800433c:	e003      	b.n	8004346 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800433e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004340:	fab3 f383 	clz	r3, r3
 8004344:	b2db      	uxtb	r3, r3
 8004346:	3301      	adds	r3, #1
 8004348:	f003 021f 	and.w	r2, r3, #31
 800434c:	4613      	mov	r3, r2
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	4413      	add	r3, r2
 8004352:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004354:	430b      	orrs	r3, r1
 8004356:	e080      	b.n	800445a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004360:	2b00      	cmp	r3, #0
 8004362:	d107      	bne.n	8004374 <HAL_ADC_ConfigChannel+0x5b4>
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	0e9b      	lsrs	r3, r3, #26
 800436a:	3301      	adds	r3, #1
 800436c:	069b      	lsls	r3, r3, #26
 800436e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004372:	e015      	b.n	80043a0 <HAL_ADC_ConfigChannel+0x5e0>
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437c:	fa93 f3a3 	rbit	r3, r3
 8004380:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004384:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800438c:	2320      	movs	r3, #32
 800438e:	e003      	b.n	8004398 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004392:	fab3 f383 	clz	r3, r3
 8004396:	b2db      	uxtb	r3, r3
 8004398:	3301      	adds	r3, #1
 800439a:	069b      	lsls	r3, r3, #26
 800439c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d109      	bne.n	80043c0 <HAL_ADC_ConfigChannel+0x600>
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	0e9b      	lsrs	r3, r3, #26
 80043b2:	3301      	adds	r3, #1
 80043b4:	f003 031f 	and.w	r3, r3, #31
 80043b8:	2101      	movs	r1, #1
 80043ba:	fa01 f303 	lsl.w	r3, r1, r3
 80043be:	e017      	b.n	80043f0 <HAL_ADC_ConfigChannel+0x630>
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	fa93 f3a3 	rbit	r3, r3
 80043cc:	61fb      	str	r3, [r7, #28]
  return result;
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80043d8:	2320      	movs	r3, #32
 80043da:	e003      	b.n	80043e4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043de:	fab3 f383 	clz	r3, r3
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	3301      	adds	r3, #1
 80043e6:	f003 031f 	and.w	r3, r3, #31
 80043ea:	2101      	movs	r1, #1
 80043ec:	fa01 f303 	lsl.w	r3, r1, r3
 80043f0:	ea42 0103 	orr.w	r1, r2, r3
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10d      	bne.n	800441c <HAL_ADC_ConfigChannel+0x65c>
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	0e9b      	lsrs	r3, r3, #26
 8004406:	3301      	adds	r3, #1
 8004408:	f003 021f 	and.w	r2, r3, #31
 800440c:	4613      	mov	r3, r2
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	4413      	add	r3, r2
 8004412:	3b1e      	subs	r3, #30
 8004414:	051b      	lsls	r3, r3, #20
 8004416:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800441a:	e01d      	b.n	8004458 <HAL_ADC_ConfigChannel+0x698>
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	fa93 f3a3 	rbit	r3, r3
 8004428:	613b      	str	r3, [r7, #16]
  return result;
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d103      	bne.n	800443c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004434:	2320      	movs	r3, #32
 8004436:	e005      	b.n	8004444 <HAL_ADC_ConfigChannel+0x684>
 8004438:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	fab3 f383 	clz	r3, r3
 8004442:	b2db      	uxtb	r3, r3
 8004444:	3301      	adds	r3, #1
 8004446:	f003 021f 	and.w	r2, r3, #31
 800444a:	4613      	mov	r3, r2
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	4413      	add	r3, r2
 8004450:	3b1e      	subs	r3, #30
 8004452:	051b      	lsls	r3, r3, #20
 8004454:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004458:	430b      	orrs	r3, r1
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	6892      	ldr	r2, [r2, #8]
 800445e:	4619      	mov	r1, r3
 8004460:	f7fe fcb5 	bl	8002dce <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	4b44      	ldr	r3, [pc, #272]	; (800457c <HAL_ADC_ConfigChannel+0x7bc>)
 800446a:	4013      	ands	r3, r2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d07a      	beq.n	8004566 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004470:	4843      	ldr	r0, [pc, #268]	; (8004580 <HAL_ADC_ConfigChannel+0x7c0>)
 8004472:	f7fe fbf7 	bl	8002c64 <LL_ADC_GetCommonPathInternalCh>
 8004476:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a41      	ldr	r2, [pc, #260]	; (8004584 <HAL_ADC_ConfigChannel+0x7c4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d12c      	bne.n	80044de <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004484:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004488:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d126      	bne.n	80044de <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a3c      	ldr	r2, [pc, #240]	; (8004588 <HAL_ADC_ConfigChannel+0x7c8>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d004      	beq.n	80044a4 <HAL_ADC_ConfigChannel+0x6e4>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a3b      	ldr	r2, [pc, #236]	; (800458c <HAL_ADC_ConfigChannel+0x7cc>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d15d      	bne.n	8004560 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80044ac:	4619      	mov	r1, r3
 80044ae:	4834      	ldr	r0, [pc, #208]	; (8004580 <HAL_ADC_ConfigChannel+0x7c0>)
 80044b0:	f7fe fbc5 	bl	8002c3e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044b4:	4b36      	ldr	r3, [pc, #216]	; (8004590 <HAL_ADC_ConfigChannel+0x7d0>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	099b      	lsrs	r3, r3, #6
 80044ba:	4a36      	ldr	r2, [pc, #216]	; (8004594 <HAL_ADC_ConfigChannel+0x7d4>)
 80044bc:	fba2 2303 	umull	r2, r3, r2, r3
 80044c0:	099b      	lsrs	r3, r3, #6
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	4613      	mov	r3, r2
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	4413      	add	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80044ce:	e002      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1f9      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044dc:	e040      	b.n	8004560 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a2d      	ldr	r2, [pc, #180]	; (8004598 <HAL_ADC_ConfigChannel+0x7d8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d118      	bne.n	800451a <HAL_ADC_ConfigChannel+0x75a>
 80044e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d112      	bne.n	800451a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a23      	ldr	r2, [pc, #140]	; (8004588 <HAL_ADC_ConfigChannel+0x7c8>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d004      	beq.n	8004508 <HAL_ADC_ConfigChannel+0x748>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a22      	ldr	r2, [pc, #136]	; (800458c <HAL_ADC_ConfigChannel+0x7cc>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d12d      	bne.n	8004564 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004508:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800450c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004510:	4619      	mov	r1, r3
 8004512:	481b      	ldr	r0, [pc, #108]	; (8004580 <HAL_ADC_ConfigChannel+0x7c0>)
 8004514:	f7fe fb93 	bl	8002c3e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004518:	e024      	b.n	8004564 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a1f      	ldr	r2, [pc, #124]	; (800459c <HAL_ADC_ConfigChannel+0x7dc>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d120      	bne.n	8004566 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004524:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004528:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d11a      	bne.n	8004566 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a14      	ldr	r2, [pc, #80]	; (8004588 <HAL_ADC_ConfigChannel+0x7c8>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d115      	bne.n	8004566 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800453a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800453e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004542:	4619      	mov	r1, r3
 8004544:	480e      	ldr	r0, [pc, #56]	; (8004580 <HAL_ADC_ConfigChannel+0x7c0>)
 8004546:	f7fe fb7a 	bl	8002c3e <LL_ADC_SetCommonPathInternalCh>
 800454a:	e00c      	b.n	8004566 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004550:	f043 0220 	orr.w	r2, r3, #32
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800455e:	e002      	b.n	8004566 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004560:	bf00      	nop
 8004562:	e000      	b.n	8004566 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004564:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800456e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004572:	4618      	mov	r0, r3
 8004574:	37d8      	adds	r7, #216	; 0xd8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	80080000 	.word	0x80080000
 8004580:	50040300 	.word	0x50040300
 8004584:	c7520000 	.word	0xc7520000
 8004588:	50040000 	.word	0x50040000
 800458c:	50040200 	.word	0x50040200
 8004590:	20000020 	.word	0x20000020
 8004594:	053e2d63 	.word	0x053e2d63
 8004598:	cb840000 	.word	0xcb840000
 800459c:	80000001 	.word	0x80000001

080045a0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80045aa:	2300      	movs	r3, #0
 80045ac:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fe fd38 	bl	800302c <LL_ADC_REG_IsConversionOngoing>
 80045bc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fe fd59 	bl	800307a <LL_ADC_INJ_IsConversionOngoing>
 80045c8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d103      	bne.n	80045d8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 8098 	beq.w	8004708 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d02a      	beq.n	800463c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	7e5b      	ldrb	r3, [r3, #25]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d126      	bne.n	800463c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	7e1b      	ldrb	r3, [r3, #24]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d122      	bne.n	800463c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80045f6:	2301      	movs	r3, #1
 80045f8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80045fa:	e014      	b.n	8004626 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	4a45      	ldr	r2, [pc, #276]	; (8004714 <ADC_ConversionStop+0x174>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d90d      	bls.n	8004620 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004608:	f043 0210 	orr.w	r2, r3, #16
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004614:	f043 0201 	orr.w	r2, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e074      	b.n	800470a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	3301      	adds	r3, #1
 8004624:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004630:	2b40      	cmp	r3, #64	; 0x40
 8004632:	d1e3      	bne.n	80045fc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2240      	movs	r2, #64	; 0x40
 800463a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	2b02      	cmp	r3, #2
 8004640:	d014      	beq.n	800466c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f7fe fcf0 	bl	800302c <LL_ADC_REG_IsConversionOngoing>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00c      	beq.n	800466c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f7fe fcad 	bl	8002fb6 <LL_ADC_IsDisableOngoing>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d104      	bne.n	800466c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f7fe fccc 	bl	8003004 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d014      	beq.n	800469c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f7fe fcff 	bl	800307a <LL_ADC_INJ_IsConversionOngoing>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00c      	beq.n	800469c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f7fe fc95 	bl	8002fb6 <LL_ADC_IsDisableOngoing>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d104      	bne.n	800469c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4618      	mov	r0, r3
 8004698:	f7fe fcdb 	bl	8003052 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d005      	beq.n	80046ae <ADC_ConversionStop+0x10e>
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	2b03      	cmp	r3, #3
 80046a6:	d105      	bne.n	80046b4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80046a8:	230c      	movs	r3, #12
 80046aa:	617b      	str	r3, [r7, #20]
        break;
 80046ac:	e005      	b.n	80046ba <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80046ae:	2308      	movs	r3, #8
 80046b0:	617b      	str	r3, [r7, #20]
        break;
 80046b2:	e002      	b.n	80046ba <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80046b4:	2304      	movs	r3, #4
 80046b6:	617b      	str	r3, [r7, #20]
        break;
 80046b8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80046ba:	f7fe faa1 	bl	8002c00 <HAL_GetTick>
 80046be:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80046c0:	e01b      	b.n	80046fa <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80046c2:	f7fe fa9d 	bl	8002c00 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b05      	cmp	r3, #5
 80046ce:	d914      	bls.n	80046fa <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	4013      	ands	r3, r2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00d      	beq.n	80046fa <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e2:	f043 0210 	orr.w	r2, r3, #16
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ee:	f043 0201 	orr.w	r2, r3, #1
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e007      	b.n	800470a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	4013      	ands	r3, r2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1dc      	bne.n	80046c2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3720      	adds	r7, #32
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	a33fffff 	.word	0xa33fffff

08004718 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004720:	2300      	movs	r3, #0
 8004722:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4618      	mov	r0, r3
 800472a:	f7fe fc31 	bl	8002f90 <LL_ADC_IsEnabled>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d169      	bne.n	8004808 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689a      	ldr	r2, [r3, #8]
 800473a:	4b36      	ldr	r3, [pc, #216]	; (8004814 <ADC_Enable+0xfc>)
 800473c:	4013      	ands	r3, r2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00d      	beq.n	800475e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004746:	f043 0210 	orr.w	r2, r3, #16
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004752:	f043 0201 	orr.w	r2, r3, #1
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e055      	b.n	800480a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f7fe fbec 	bl	8002f40 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004768:	482b      	ldr	r0, [pc, #172]	; (8004818 <ADC_Enable+0x100>)
 800476a:	f7fe fa7b 	bl	8002c64 <LL_ADC_GetCommonPathInternalCh>
 800476e:	4603      	mov	r3, r0
 8004770:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d013      	beq.n	80047a0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004778:	4b28      	ldr	r3, [pc, #160]	; (800481c <ADC_Enable+0x104>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	099b      	lsrs	r3, r3, #6
 800477e:	4a28      	ldr	r2, [pc, #160]	; (8004820 <ADC_Enable+0x108>)
 8004780:	fba2 2303 	umull	r2, r3, r2, r3
 8004784:	099b      	lsrs	r3, r3, #6
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	4613      	mov	r3, r2
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	4413      	add	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004792:	e002      	b.n	800479a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	3b01      	subs	r3, #1
 8004798:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1f9      	bne.n	8004794 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80047a0:	f7fe fa2e 	bl	8002c00 <HAL_GetTick>
 80047a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047a6:	e028      	b.n	80047fa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7fe fbef 	bl	8002f90 <LL_ADC_IsEnabled>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d104      	bne.n	80047c2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fe fbbf 	bl	8002f40 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80047c2:	f7fe fa1d 	bl	8002c00 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d914      	bls.n	80047fa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d00d      	beq.n	80047fa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e2:	f043 0210 	orr.w	r2, r3, #16
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ee:	f043 0201 	orr.w	r2, r3, #1
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e007      	b.n	800480a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b01      	cmp	r3, #1
 8004806:	d1cf      	bne.n	80047a8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	8000003f 	.word	0x8000003f
 8004818:	50040300 	.word	0x50040300
 800481c:	20000020 	.word	0x20000020
 8004820:	053e2d63 	.word	0x053e2d63

08004824 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	f7fe fbc0 	bl	8002fb6 <LL_ADC_IsDisableOngoing>
 8004836:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4618      	mov	r0, r3
 800483e:	f7fe fba7 	bl	8002f90 <LL_ADC_IsEnabled>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d047      	beq.n	80048d8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d144      	bne.n	80048d8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 030d 	and.w	r3, r3, #13
 8004858:	2b01      	cmp	r3, #1
 800485a:	d10c      	bne.n	8004876 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4618      	mov	r0, r3
 8004862:	f7fe fb81 	bl	8002f68 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2203      	movs	r2, #3
 800486c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800486e:	f7fe f9c7 	bl	8002c00 <HAL_GetTick>
 8004872:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004874:	e029      	b.n	80048ca <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487a:	f043 0210 	orr.w	r2, r3, #16
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004886:	f043 0201 	orr.w	r2, r3, #1
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e023      	b.n	80048da <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004892:	f7fe f9b5 	bl	8002c00 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d914      	bls.n	80048ca <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00d      	beq.n	80048ca <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b2:	f043 0210 	orr.w	r2, r3, #16
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048be:	f043 0201 	orr.w	r2, r3, #1
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e007      	b.n	80048da <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1dc      	bne.n	8004892 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800491e:	b480      	push	{r7}
 8004920:	b083      	sub	sp, #12
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
	...

08004948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f003 0307 	and.w	r3, r3, #7
 8004956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004958:	4b0c      	ldr	r3, [pc, #48]	; (800498c <__NVIC_SetPriorityGrouping+0x44>)
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004964:	4013      	ands	r3, r2
 8004966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800497a:	4a04      	ldr	r2, [pc, #16]	; (800498c <__NVIC_SetPriorityGrouping+0x44>)
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	60d3      	str	r3, [r2, #12]
}
 8004980:	bf00      	nop
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	e000ed00 	.word	0xe000ed00

08004990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004994:	4b04      	ldr	r3, [pc, #16]	; (80049a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	0a1b      	lsrs	r3, r3, #8
 800499a:	f003 0307 	and.w	r3, r3, #7
}
 800499e:	4618      	mov	r0, r3
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	e000ed00 	.word	0xe000ed00

080049ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	4603      	mov	r3, r0
 80049b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	db0b      	blt.n	80049d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049be:	79fb      	ldrb	r3, [r7, #7]
 80049c0:	f003 021f 	and.w	r2, r3, #31
 80049c4:	4907      	ldr	r1, [pc, #28]	; (80049e4 <__NVIC_EnableIRQ+0x38>)
 80049c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ca:	095b      	lsrs	r3, r3, #5
 80049cc:	2001      	movs	r0, #1
 80049ce:	fa00 f202 	lsl.w	r2, r0, r2
 80049d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	e000e100 	.word	0xe000e100

080049e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	4603      	mov	r3, r0
 80049f0:	6039      	str	r1, [r7, #0]
 80049f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	db0a      	blt.n	8004a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	490c      	ldr	r1, [pc, #48]	; (8004a34 <__NVIC_SetPriority+0x4c>)
 8004a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a06:	0112      	lsls	r2, r2, #4
 8004a08:	b2d2      	uxtb	r2, r2
 8004a0a:	440b      	add	r3, r1
 8004a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a10:	e00a      	b.n	8004a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	4908      	ldr	r1, [pc, #32]	; (8004a38 <__NVIC_SetPriority+0x50>)
 8004a18:	79fb      	ldrb	r3, [r7, #7]
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	3b04      	subs	r3, #4
 8004a20:	0112      	lsls	r2, r2, #4
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	440b      	add	r3, r1
 8004a26:	761a      	strb	r2, [r3, #24]
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	e000e100 	.word	0xe000e100
 8004a38:	e000ed00 	.word	0xe000ed00

08004a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b089      	sub	sp, #36	; 0x24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f003 0307 	and.w	r3, r3, #7
 8004a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	f1c3 0307 	rsb	r3, r3, #7
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	bf28      	it	cs
 8004a5a:	2304      	movcs	r3, #4
 8004a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	3304      	adds	r3, #4
 8004a62:	2b06      	cmp	r3, #6
 8004a64:	d902      	bls.n	8004a6c <NVIC_EncodePriority+0x30>
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	3b03      	subs	r3, #3
 8004a6a:	e000      	b.n	8004a6e <NVIC_EncodePriority+0x32>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7a:	43da      	mvns	r2, r3
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	401a      	ands	r2, r3
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8e:	43d9      	mvns	r1, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a94:	4313      	orrs	r3, r2
         );
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3724      	adds	r7, #36	; 0x24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
	...

08004aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ab4:	d301      	bcc.n	8004aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e00f      	b.n	8004ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004aba:	4a0a      	ldr	r2, [pc, #40]	; (8004ae4 <SysTick_Config+0x40>)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ac2:	210f      	movs	r1, #15
 8004ac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ac8:	f7ff ff8e 	bl	80049e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004acc:	4b05      	ldr	r3, [pc, #20]	; (8004ae4 <SysTick_Config+0x40>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ad2:	4b04      	ldr	r3, [pc, #16]	; (8004ae4 <SysTick_Config+0x40>)
 8004ad4:	2207      	movs	r2, #7
 8004ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	e000e010 	.word	0xe000e010

08004ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f7ff ff29 	bl	8004948 <__NVIC_SetPriorityGrouping>
}
 8004af6:	bf00      	nop
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b086      	sub	sp, #24
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	4603      	mov	r3, r0
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	607a      	str	r2, [r7, #4]
 8004b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b10:	f7ff ff3e 	bl	8004990 <__NVIC_GetPriorityGrouping>
 8004b14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	6978      	ldr	r0, [r7, #20]
 8004b1c:	f7ff ff8e 	bl	8004a3c <NVIC_EncodePriority>
 8004b20:	4602      	mov	r2, r0
 8004b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b26:	4611      	mov	r1, r2
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7ff ff5d 	bl	80049e8 <__NVIC_SetPriority>
}
 8004b2e:	bf00      	nop
 8004b30:	3718      	adds	r7, #24
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b082      	sub	sp, #8
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff ff31 	bl	80049ac <__NVIC_EnableIRQ>
}
 8004b4a:	bf00      	nop
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b082      	sub	sp, #8
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7ff ffa2 	bl	8004aa4 <SysTick_Config>
 8004b60:	4603      	mov	r3, r0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
	...

08004b6c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e098      	b.n	8004cb0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	461a      	mov	r2, r3
 8004b84:	4b4d      	ldr	r3, [pc, #308]	; (8004cbc <HAL_DMA_Init+0x150>)
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d80f      	bhi.n	8004baa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	4b4b      	ldr	r3, [pc, #300]	; (8004cc0 <HAL_DMA_Init+0x154>)
 8004b92:	4413      	add	r3, r2
 8004b94:	4a4b      	ldr	r2, [pc, #300]	; (8004cc4 <HAL_DMA_Init+0x158>)
 8004b96:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9a:	091b      	lsrs	r3, r3, #4
 8004b9c:	009a      	lsls	r2, r3, #2
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a48      	ldr	r2, [pc, #288]	; (8004cc8 <HAL_DMA_Init+0x15c>)
 8004ba6:	641a      	str	r2, [r3, #64]	; 0x40
 8004ba8:	e00e      	b.n	8004bc8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	4b46      	ldr	r3, [pc, #280]	; (8004ccc <HAL_DMA_Init+0x160>)
 8004bb2:	4413      	add	r3, r2
 8004bb4:	4a43      	ldr	r2, [pc, #268]	; (8004cc4 <HAL_DMA_Init+0x158>)
 8004bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bba:	091b      	lsrs	r3, r3, #4
 8004bbc:	009a      	lsls	r2, r3, #2
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a42      	ldr	r2, [pc, #264]	; (8004cd0 <HAL_DMA_Init+0x164>)
 8004bc6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004bec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c22:	d039      	beq.n	8004c98 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c28:	4a27      	ldr	r2, [pc, #156]	; (8004cc8 <HAL_DMA_Init+0x15c>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d11a      	bne.n	8004c64 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004c2e:	4b29      	ldr	r3, [pc, #164]	; (8004cd4 <HAL_DMA_Init+0x168>)
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c36:	f003 031c 	and.w	r3, r3, #28
 8004c3a:	210f      	movs	r1, #15
 8004c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c40:	43db      	mvns	r3, r3
 8004c42:	4924      	ldr	r1, [pc, #144]	; (8004cd4 <HAL_DMA_Init+0x168>)
 8004c44:	4013      	ands	r3, r2
 8004c46:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004c48:	4b22      	ldr	r3, [pc, #136]	; (8004cd4 <HAL_DMA_Init+0x168>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6859      	ldr	r1, [r3, #4]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c54:	f003 031c 	and.w	r3, r3, #28
 8004c58:	fa01 f303 	lsl.w	r3, r1, r3
 8004c5c:	491d      	ldr	r1, [pc, #116]	; (8004cd4 <HAL_DMA_Init+0x168>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	600b      	str	r3, [r1, #0]
 8004c62:	e019      	b.n	8004c98 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004c64:	4b1c      	ldr	r3, [pc, #112]	; (8004cd8 <HAL_DMA_Init+0x16c>)
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6c:	f003 031c 	and.w	r3, r3, #28
 8004c70:	210f      	movs	r1, #15
 8004c72:	fa01 f303 	lsl.w	r3, r1, r3
 8004c76:	43db      	mvns	r3, r3
 8004c78:	4917      	ldr	r1, [pc, #92]	; (8004cd8 <HAL_DMA_Init+0x16c>)
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004c7e:	4b16      	ldr	r3, [pc, #88]	; (8004cd8 <HAL_DMA_Init+0x16c>)
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6859      	ldr	r1, [r3, #4]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8a:	f003 031c 	and.w	r3, r3, #28
 8004c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c92:	4911      	ldr	r1, [pc, #68]	; (8004cd8 <HAL_DMA_Init+0x16c>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	40020407 	.word	0x40020407
 8004cc0:	bffdfff8 	.word	0xbffdfff8
 8004cc4:	cccccccd 	.word	0xcccccccd
 8004cc8:	40020000 	.word	0x40020000
 8004ccc:	bffdfbf8 	.word	0xbffdfbf8
 8004cd0:	40020400 	.word	0x40020400
 8004cd4:	400200a8 	.word	0x400200a8
 8004cd8:	400204a8 	.word	0x400204a8

08004cdc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
 8004ce8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cea:	2300      	movs	r3, #0
 8004cec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d101      	bne.n	8004cfc <HAL_DMA_Start_IT+0x20>
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	e04b      	b.n	8004d94 <HAL_DMA_Start_IT+0xb8>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d13a      	bne.n	8004d86 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2202      	movs	r2, #2
 8004d14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 0201 	bic.w	r2, r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	68b9      	ldr	r1, [r7, #8]
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f000 f921 	bl	8004f7c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d008      	beq.n	8004d54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f042 020e 	orr.w	r2, r2, #14
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	e00f      	b.n	8004d74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0204 	bic.w	r2, r2, #4
 8004d62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 020a 	orr.w	r2, r2, #10
 8004d72:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f042 0201 	orr.w	r2, r2, #1
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	e005      	b.n	8004d92 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004d8e:	2302      	movs	r3, #2
 8004d90:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3718      	adds	r7, #24
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004da4:	2300      	movs	r3, #0
 8004da6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d005      	beq.n	8004dc0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2204      	movs	r2, #4
 8004db8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	73fb      	strb	r3, [r7, #15]
 8004dbe:	e029      	b.n	8004e14 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 020e 	bic.w	r2, r2, #14
 8004dce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0201 	bic.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de4:	f003 021c 	and.w	r2, r3, #28
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	2101      	movs	r1, #1
 8004dee:	fa01 f202 	lsl.w	r2, r1, r2
 8004df2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	4798      	blx	r3
    }
  }
  return status;
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b084      	sub	sp, #16
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3a:	f003 031c 	and.w	r3, r3, #28
 8004e3e:	2204      	movs	r2, #4
 8004e40:	409a      	lsls	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	4013      	ands	r3, r2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d026      	beq.n	8004e98 <HAL_DMA_IRQHandler+0x7a>
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	f003 0304 	and.w	r3, r3, #4
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d021      	beq.n	8004e98 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0320 	and.w	r3, r3, #32
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d107      	bne.n	8004e72 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0204 	bic.w	r2, r2, #4
 8004e70:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e76:	f003 021c 	and.w	r2, r3, #28
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	2104      	movs	r1, #4
 8004e80:	fa01 f202 	lsl.w	r2, r1, r2
 8004e84:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d071      	beq.n	8004f72 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004e96:	e06c      	b.n	8004f72 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9c:	f003 031c 	and.w	r3, r3, #28
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	409a      	lsls	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d02e      	beq.n	8004f0a <HAL_DMA_IRQHandler+0xec>
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d029      	beq.n	8004f0a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0320 	and.w	r3, r3, #32
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10b      	bne.n	8004edc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 020a 	bic.w	r2, r2, #10
 8004ed2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee0:	f003 021c 	and.w	r2, r3, #28
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee8:	2102      	movs	r1, #2
 8004eea:	fa01 f202 	lsl.w	r2, r1, r2
 8004eee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d038      	beq.n	8004f72 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004f08:	e033      	b.n	8004f72 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0e:	f003 031c 	and.w	r3, r3, #28
 8004f12:	2208      	movs	r2, #8
 8004f14:	409a      	lsls	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d02a      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x156>
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	f003 0308 	and.w	r3, r3, #8
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d025      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 020e 	bic.w	r2, r2, #14
 8004f36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f3c:	f003 021c 	and.w	r2, r3, #28
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f44:	2101      	movs	r1, #1
 8004f46:	fa01 f202 	lsl.w	r2, r1, r2
 8004f4a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d004      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004f72:	bf00      	nop
 8004f74:	bf00      	nop
}
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
 8004f88:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f8e:	f003 021c 	and.w	r2, r3, #28
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	2101      	movs	r1, #1
 8004f98:	fa01 f202 	lsl.w	r2, r1, r2
 8004f9c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	2b10      	cmp	r3, #16
 8004fac:	d108      	bne.n	8004fc0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004fbe:	e007      	b.n	8004fd0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	60da      	str	r2, [r3, #12]
}
 8004fd0:	bf00      	nop
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fea:	e17f      	b.n	80052ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 8171 	beq.w	80052e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f003 0303 	and.w	r3, r3, #3
 800500c:	2b01      	cmp	r3, #1
 800500e:	d005      	beq.n	800501c <HAL_GPIO_Init+0x40>
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f003 0303 	and.w	r3, r3, #3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d130      	bne.n	800507e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	2203      	movs	r2, #3
 8005028:	fa02 f303 	lsl.w	r3, r2, r3
 800502c:	43db      	mvns	r3, r3
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	4013      	ands	r3, r2
 8005032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	68da      	ldr	r2, [r3, #12]
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	005b      	lsls	r3, r3, #1
 800503c:	fa02 f303 	lsl.w	r3, r2, r3
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	4313      	orrs	r3, r2
 8005044:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005052:	2201      	movs	r2, #1
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	fa02 f303 	lsl.w	r3, r2, r3
 800505a:	43db      	mvns	r3, r3
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	4013      	ands	r3, r2
 8005060:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	091b      	lsrs	r3, r3, #4
 8005068:	f003 0201 	and.w	r2, r3, #1
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	fa02 f303 	lsl.w	r3, r2, r3
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	4313      	orrs	r3, r2
 8005076:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f003 0303 	and.w	r3, r3, #3
 8005086:	2b03      	cmp	r3, #3
 8005088:	d118      	bne.n	80050bc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005090:	2201      	movs	r2, #1
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	fa02 f303 	lsl.w	r3, r2, r3
 8005098:	43db      	mvns	r3, r3
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	4013      	ands	r3, r2
 800509e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	08db      	lsrs	r3, r3, #3
 80050a6:	f003 0201 	and.w	r2, r3, #1
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	fa02 f303 	lsl.w	r3, r2, r3
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f003 0303 	and.w	r3, r3, #3
 80050c4:	2b03      	cmp	r3, #3
 80050c6:	d017      	beq.n	80050f8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	005b      	lsls	r3, r3, #1
 80050d2:	2203      	movs	r2, #3
 80050d4:	fa02 f303 	lsl.w	r3, r2, r3
 80050d8:	43db      	mvns	r3, r3
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	4013      	ands	r3, r2
 80050de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	005b      	lsls	r3, r3, #1
 80050e8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f003 0303 	and.w	r3, r3, #3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d123      	bne.n	800514c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	08da      	lsrs	r2, r3, #3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3208      	adds	r2, #8
 800510c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005110:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	220f      	movs	r2, #15
 800511c:	fa02 f303 	lsl.w	r3, r2, r3
 8005120:	43db      	mvns	r3, r3
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	4013      	ands	r3, r2
 8005126:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	691a      	ldr	r2, [r3, #16]
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f003 0307 	and.w	r3, r3, #7
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	4313      	orrs	r3, r2
 800513c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	08da      	lsrs	r2, r3, #3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3208      	adds	r2, #8
 8005146:	6939      	ldr	r1, [r7, #16]
 8005148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	2203      	movs	r2, #3
 8005158:	fa02 f303 	lsl.w	r3, r2, r3
 800515c:	43db      	mvns	r3, r3
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	4013      	ands	r3, r2
 8005162:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f003 0203 	and.w	r2, r3, #3
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4313      	orrs	r3, r2
 8005178:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 80ac 	beq.w	80052e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800518e:	4b5f      	ldr	r3, [pc, #380]	; (800530c <HAL_GPIO_Init+0x330>)
 8005190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005192:	4a5e      	ldr	r2, [pc, #376]	; (800530c <HAL_GPIO_Init+0x330>)
 8005194:	f043 0301 	orr.w	r3, r3, #1
 8005198:	6613      	str	r3, [r2, #96]	; 0x60
 800519a:	4b5c      	ldr	r3, [pc, #368]	; (800530c <HAL_GPIO_Init+0x330>)
 800519c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	60bb      	str	r3, [r7, #8]
 80051a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80051a6:	4a5a      	ldr	r2, [pc, #360]	; (8005310 <HAL_GPIO_Init+0x334>)
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	089b      	lsrs	r3, r3, #2
 80051ac:	3302      	adds	r3, #2
 80051ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f003 0303 	and.w	r3, r3, #3
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	220f      	movs	r2, #15
 80051be:	fa02 f303 	lsl.w	r3, r2, r3
 80051c2:	43db      	mvns	r3, r3
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	4013      	ands	r3, r2
 80051c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80051d0:	d025      	beq.n	800521e <HAL_GPIO_Init+0x242>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a4f      	ldr	r2, [pc, #316]	; (8005314 <HAL_GPIO_Init+0x338>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d01f      	beq.n	800521a <HAL_GPIO_Init+0x23e>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a4e      	ldr	r2, [pc, #312]	; (8005318 <HAL_GPIO_Init+0x33c>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d019      	beq.n	8005216 <HAL_GPIO_Init+0x23a>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a4d      	ldr	r2, [pc, #308]	; (800531c <HAL_GPIO_Init+0x340>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d013      	beq.n	8005212 <HAL_GPIO_Init+0x236>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a4c      	ldr	r2, [pc, #304]	; (8005320 <HAL_GPIO_Init+0x344>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d00d      	beq.n	800520e <HAL_GPIO_Init+0x232>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a4b      	ldr	r2, [pc, #300]	; (8005324 <HAL_GPIO_Init+0x348>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d007      	beq.n	800520a <HAL_GPIO_Init+0x22e>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a4a      	ldr	r2, [pc, #296]	; (8005328 <HAL_GPIO_Init+0x34c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d101      	bne.n	8005206 <HAL_GPIO_Init+0x22a>
 8005202:	2306      	movs	r3, #6
 8005204:	e00c      	b.n	8005220 <HAL_GPIO_Init+0x244>
 8005206:	2307      	movs	r3, #7
 8005208:	e00a      	b.n	8005220 <HAL_GPIO_Init+0x244>
 800520a:	2305      	movs	r3, #5
 800520c:	e008      	b.n	8005220 <HAL_GPIO_Init+0x244>
 800520e:	2304      	movs	r3, #4
 8005210:	e006      	b.n	8005220 <HAL_GPIO_Init+0x244>
 8005212:	2303      	movs	r3, #3
 8005214:	e004      	b.n	8005220 <HAL_GPIO_Init+0x244>
 8005216:	2302      	movs	r3, #2
 8005218:	e002      	b.n	8005220 <HAL_GPIO_Init+0x244>
 800521a:	2301      	movs	r3, #1
 800521c:	e000      	b.n	8005220 <HAL_GPIO_Init+0x244>
 800521e:	2300      	movs	r3, #0
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	f002 0203 	and.w	r2, r2, #3
 8005226:	0092      	lsls	r2, r2, #2
 8005228:	4093      	lsls	r3, r2
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	4313      	orrs	r3, r2
 800522e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005230:	4937      	ldr	r1, [pc, #220]	; (8005310 <HAL_GPIO_Init+0x334>)
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	089b      	lsrs	r3, r3, #2
 8005236:	3302      	adds	r3, #2
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800523e:	4b3b      	ldr	r3, [pc, #236]	; (800532c <HAL_GPIO_Init+0x350>)
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	43db      	mvns	r3, r3
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	4013      	ands	r3, r2
 800524c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	4313      	orrs	r3, r2
 8005260:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005262:	4a32      	ldr	r2, [pc, #200]	; (800532c <HAL_GPIO_Init+0x350>)
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005268:	4b30      	ldr	r3, [pc, #192]	; (800532c <HAL_GPIO_Init+0x350>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	43db      	mvns	r3, r3
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	4013      	ands	r3, r2
 8005276:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d003      	beq.n	800528c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	4313      	orrs	r3, r2
 800528a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800528c:	4a27      	ldr	r2, [pc, #156]	; (800532c <HAL_GPIO_Init+0x350>)
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005292:	4b26      	ldr	r3, [pc, #152]	; (800532c <HAL_GPIO_Init+0x350>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	43db      	mvns	r3, r3
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	4013      	ands	r3, r2
 80052a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80052b6:	4a1d      	ldr	r2, [pc, #116]	; (800532c <HAL_GPIO_Init+0x350>)
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80052bc:	4b1b      	ldr	r3, [pc, #108]	; (800532c <HAL_GPIO_Init+0x350>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	43db      	mvns	r3, r3
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	4013      	ands	r3, r2
 80052ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d003      	beq.n	80052e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	4313      	orrs	r3, r2
 80052de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80052e0:	4a12      	ldr	r2, [pc, #72]	; (800532c <HAL_GPIO_Init+0x350>)
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	3301      	adds	r3, #1
 80052ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	fa22 f303 	lsr.w	r3, r2, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f47f ae78 	bne.w	8004fec <HAL_GPIO_Init+0x10>
  }
}
 80052fc:	bf00      	nop
 80052fe:	bf00      	nop
 8005300:	371c      	adds	r7, #28
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	40021000 	.word	0x40021000
 8005310:	40010000 	.word	0x40010000
 8005314:	48000400 	.word	0x48000400
 8005318:	48000800 	.word	0x48000800
 800531c:	48000c00 	.word	0x48000c00
 8005320:	48001000 	.word	0x48001000
 8005324:	48001400 	.word	0x48001400
 8005328:	48001800 	.word	0x48001800
 800532c:	40010400 	.word	0x40010400

08005330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	460b      	mov	r3, r1
 800533a:	807b      	strh	r3, [r7, #2]
 800533c:	4613      	mov	r3, r2
 800533e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005340:	787b      	ldrb	r3, [r7, #1]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005346:	887a      	ldrh	r2, [r7, #2]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800534c:	e002      	b.n	8005354 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800534e:	887a      	ldrh	r2, [r7, #2]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005364:	4b04      	ldr	r3, [pc, #16]	; (8005378 <HAL_PWREx_GetVoltageRange+0x18>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800536c:	4618      	mov	r0, r3
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40007000 	.word	0x40007000

0800537c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800538a:	d130      	bne.n	80053ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800538c:	4b23      	ldr	r3, [pc, #140]	; (800541c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005398:	d038      	beq.n	800540c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800539a:	4b20      	ldr	r3, [pc, #128]	; (800541c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80053a2:	4a1e      	ldr	r2, [pc, #120]	; (800541c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80053aa:	4b1d      	ldr	r3, [pc, #116]	; (8005420 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2232      	movs	r2, #50	; 0x32
 80053b0:	fb02 f303 	mul.w	r3, r2, r3
 80053b4:	4a1b      	ldr	r2, [pc, #108]	; (8005424 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80053b6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ba:	0c9b      	lsrs	r3, r3, #18
 80053bc:	3301      	adds	r3, #1
 80053be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053c0:	e002      	b.n	80053c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	3b01      	subs	r3, #1
 80053c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053c8:	4b14      	ldr	r3, [pc, #80]	; (800541c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053d4:	d102      	bne.n	80053dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1f2      	bne.n	80053c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80053dc:	4b0f      	ldr	r3, [pc, #60]	; (800541c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053e8:	d110      	bne.n	800540c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e00f      	b.n	800540e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80053ee:	4b0b      	ldr	r3, [pc, #44]	; (800541c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80053f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053fa:	d007      	beq.n	800540c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80053fc:	4b07      	ldr	r3, [pc, #28]	; (800541c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005404:	4a05      	ldr	r2, [pc, #20]	; (800541c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005406:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800540a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3714      	adds	r7, #20
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	40007000 	.word	0x40007000
 8005420:	20000020 	.word	0x20000020
 8005424:	431bde83 	.word	0x431bde83

08005428 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b088      	sub	sp, #32
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e3ca      	b.n	8005bd0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800543a:	4b97      	ldr	r3, [pc, #604]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f003 030c 	and.w	r3, r3, #12
 8005442:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005444:	4b94      	ldr	r3, [pc, #592]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f003 0303 	and.w	r3, r3, #3
 800544c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0310 	and.w	r3, r3, #16
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 80e4 	beq.w	8005624 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d007      	beq.n	8005472 <HAL_RCC_OscConfig+0x4a>
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	2b0c      	cmp	r3, #12
 8005466:	f040 808b 	bne.w	8005580 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2b01      	cmp	r3, #1
 800546e:	f040 8087 	bne.w	8005580 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005472:	4b89      	ldr	r3, [pc, #548]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d005      	beq.n	800548a <HAL_RCC_OscConfig+0x62>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e3a2      	b.n	8005bd0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1a      	ldr	r2, [r3, #32]
 800548e:	4b82      	ldr	r3, [pc, #520]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0308 	and.w	r3, r3, #8
 8005496:	2b00      	cmp	r3, #0
 8005498:	d004      	beq.n	80054a4 <HAL_RCC_OscConfig+0x7c>
 800549a:	4b7f      	ldr	r3, [pc, #508]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054a2:	e005      	b.n	80054b0 <HAL_RCC_OscConfig+0x88>
 80054a4:	4b7c      	ldr	r3, [pc, #496]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 80054a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054aa:	091b      	lsrs	r3, r3, #4
 80054ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d223      	bcs.n	80054fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f000 fd55 	bl	8005f68 <RCC_SetFlashLatencyFromMSIRange>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d001      	beq.n	80054c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e383      	b.n	8005bd0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054c8:	4b73      	ldr	r3, [pc, #460]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a72      	ldr	r2, [pc, #456]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 80054ce:	f043 0308 	orr.w	r3, r3, #8
 80054d2:	6013      	str	r3, [r2, #0]
 80054d4:	4b70      	ldr	r3, [pc, #448]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a1b      	ldr	r3, [r3, #32]
 80054e0:	496d      	ldr	r1, [pc, #436]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054e6:	4b6c      	ldr	r3, [pc, #432]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	021b      	lsls	r3, r3, #8
 80054f4:	4968      	ldr	r1, [pc, #416]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	604b      	str	r3, [r1, #4]
 80054fa:	e025      	b.n	8005548 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054fc:	4b66      	ldr	r3, [pc, #408]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a65      	ldr	r2, [pc, #404]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 8005502:	f043 0308 	orr.w	r3, r3, #8
 8005506:	6013      	str	r3, [r2, #0]
 8005508:	4b63      	ldr	r3, [pc, #396]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a1b      	ldr	r3, [r3, #32]
 8005514:	4960      	ldr	r1, [pc, #384]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 8005516:	4313      	orrs	r3, r2
 8005518:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800551a:	4b5f      	ldr	r3, [pc, #380]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	021b      	lsls	r3, r3, #8
 8005528:	495b      	ldr	r1, [pc, #364]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 800552a:	4313      	orrs	r3, r2
 800552c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d109      	bne.n	8005548 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	4618      	mov	r0, r3
 800553a:	f000 fd15 	bl	8005f68 <RCC_SetFlashLatencyFromMSIRange>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d001      	beq.n	8005548 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e343      	b.n	8005bd0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005548:	f000 fc4a 	bl	8005de0 <HAL_RCC_GetSysClockFreq>
 800554c:	4602      	mov	r2, r0
 800554e:	4b52      	ldr	r3, [pc, #328]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	091b      	lsrs	r3, r3, #4
 8005554:	f003 030f 	and.w	r3, r3, #15
 8005558:	4950      	ldr	r1, [pc, #320]	; (800569c <HAL_RCC_OscConfig+0x274>)
 800555a:	5ccb      	ldrb	r3, [r1, r3]
 800555c:	f003 031f 	and.w	r3, r3, #31
 8005560:	fa22 f303 	lsr.w	r3, r2, r3
 8005564:	4a4e      	ldr	r2, [pc, #312]	; (80056a0 <HAL_RCC_OscConfig+0x278>)
 8005566:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005568:	4b4e      	ldr	r3, [pc, #312]	; (80056a4 <HAL_RCC_OscConfig+0x27c>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4618      	mov	r0, r3
 800556e:	f7fd faf7 	bl	8002b60 <HAL_InitTick>
 8005572:	4603      	mov	r3, r0
 8005574:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005576:	7bfb      	ldrb	r3, [r7, #15]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d052      	beq.n	8005622 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800557c:	7bfb      	ldrb	r3, [r7, #15]
 800557e:	e327      	b.n	8005bd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d032      	beq.n	80055ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005588:	4b43      	ldr	r3, [pc, #268]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a42      	ldr	r2, [pc, #264]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 800558e:	f043 0301 	orr.w	r3, r3, #1
 8005592:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005594:	f7fd fb34 	bl	8002c00 <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800559c:	f7fd fb30 	bl	8002c00 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e310      	b.n	8005bd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055ae:	4b3a      	ldr	r3, [pc, #232]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d0f0      	beq.n	800559c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055ba:	4b37      	ldr	r3, [pc, #220]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a36      	ldr	r2, [pc, #216]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 80055c0:	f043 0308 	orr.w	r3, r3, #8
 80055c4:	6013      	str	r3, [r2, #0]
 80055c6:	4b34      	ldr	r3, [pc, #208]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	4931      	ldr	r1, [pc, #196]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055d8:	4b2f      	ldr	r3, [pc, #188]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	021b      	lsls	r3, r3, #8
 80055e6:	492c      	ldr	r1, [pc, #176]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	604b      	str	r3, [r1, #4]
 80055ec:	e01a      	b.n	8005624 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80055ee:	4b2a      	ldr	r3, [pc, #168]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a29      	ldr	r2, [pc, #164]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 80055f4:	f023 0301 	bic.w	r3, r3, #1
 80055f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80055fa:	f7fd fb01 	bl	8002c00 <HAL_GetTick>
 80055fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005600:	e008      	b.n	8005614 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005602:	f7fd fafd 	bl	8002c00 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d901      	bls.n	8005614 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e2dd      	b.n	8005bd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005614:	4b20      	ldr	r3, [pc, #128]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0302 	and.w	r3, r3, #2
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1f0      	bne.n	8005602 <HAL_RCC_OscConfig+0x1da>
 8005620:	e000      	b.n	8005624 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005622:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b00      	cmp	r3, #0
 800562e:	d074      	beq.n	800571a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	2b08      	cmp	r3, #8
 8005634:	d005      	beq.n	8005642 <HAL_RCC_OscConfig+0x21a>
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	2b0c      	cmp	r3, #12
 800563a:	d10e      	bne.n	800565a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	2b03      	cmp	r3, #3
 8005640:	d10b      	bne.n	800565a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005642:	4b15      	ldr	r3, [pc, #84]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d064      	beq.n	8005718 <HAL_RCC_OscConfig+0x2f0>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d160      	bne.n	8005718 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e2ba      	b.n	8005bd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005662:	d106      	bne.n	8005672 <HAL_RCC_OscConfig+0x24a>
 8005664:	4b0c      	ldr	r3, [pc, #48]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a0b      	ldr	r2, [pc, #44]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 800566a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800566e:	6013      	str	r3, [r2, #0]
 8005670:	e026      	b.n	80056c0 <HAL_RCC_OscConfig+0x298>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800567a:	d115      	bne.n	80056a8 <HAL_RCC_OscConfig+0x280>
 800567c:	4b06      	ldr	r3, [pc, #24]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a05      	ldr	r2, [pc, #20]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 8005682:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005686:	6013      	str	r3, [r2, #0]
 8005688:	4b03      	ldr	r3, [pc, #12]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a02      	ldr	r2, [pc, #8]	; (8005698 <HAL_RCC_OscConfig+0x270>)
 800568e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005692:	6013      	str	r3, [r2, #0]
 8005694:	e014      	b.n	80056c0 <HAL_RCC_OscConfig+0x298>
 8005696:	bf00      	nop
 8005698:	40021000 	.word	0x40021000
 800569c:	0800f488 	.word	0x0800f488
 80056a0:	20000020 	.word	0x20000020
 80056a4:	20000028 	.word	0x20000028
 80056a8:	4ba0      	ldr	r3, [pc, #640]	; (800592c <HAL_RCC_OscConfig+0x504>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a9f      	ldr	r2, [pc, #636]	; (800592c <HAL_RCC_OscConfig+0x504>)
 80056ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056b2:	6013      	str	r3, [r2, #0]
 80056b4:	4b9d      	ldr	r3, [pc, #628]	; (800592c <HAL_RCC_OscConfig+0x504>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a9c      	ldr	r2, [pc, #624]	; (800592c <HAL_RCC_OscConfig+0x504>)
 80056ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d013      	beq.n	80056f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c8:	f7fd fa9a 	bl	8002c00 <HAL_GetTick>
 80056cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056ce:	e008      	b.n	80056e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056d0:	f7fd fa96 	bl	8002c00 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b64      	cmp	r3, #100	; 0x64
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e276      	b.n	8005bd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056e2:	4b92      	ldr	r3, [pc, #584]	; (800592c <HAL_RCC_OscConfig+0x504>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0f0      	beq.n	80056d0 <HAL_RCC_OscConfig+0x2a8>
 80056ee:	e014      	b.n	800571a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f0:	f7fd fa86 	bl	8002c00 <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056f8:	f7fd fa82 	bl	8002c00 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b64      	cmp	r3, #100	; 0x64
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e262      	b.n	8005bd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800570a:	4b88      	ldr	r3, [pc, #544]	; (800592c <HAL_RCC_OscConfig+0x504>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1f0      	bne.n	80056f8 <HAL_RCC_OscConfig+0x2d0>
 8005716:	e000      	b.n	800571a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d060      	beq.n	80057e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	2b04      	cmp	r3, #4
 800572a:	d005      	beq.n	8005738 <HAL_RCC_OscConfig+0x310>
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	2b0c      	cmp	r3, #12
 8005730:	d119      	bne.n	8005766 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2b02      	cmp	r3, #2
 8005736:	d116      	bne.n	8005766 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005738:	4b7c      	ldr	r3, [pc, #496]	; (800592c <HAL_RCC_OscConfig+0x504>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005740:	2b00      	cmp	r3, #0
 8005742:	d005      	beq.n	8005750 <HAL_RCC_OscConfig+0x328>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e23f      	b.n	8005bd0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005750:	4b76      	ldr	r3, [pc, #472]	; (800592c <HAL_RCC_OscConfig+0x504>)
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	061b      	lsls	r3, r3, #24
 800575e:	4973      	ldr	r1, [pc, #460]	; (800592c <HAL_RCC_OscConfig+0x504>)
 8005760:	4313      	orrs	r3, r2
 8005762:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005764:	e040      	b.n	80057e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d023      	beq.n	80057b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800576e:	4b6f      	ldr	r3, [pc, #444]	; (800592c <HAL_RCC_OscConfig+0x504>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a6e      	ldr	r2, [pc, #440]	; (800592c <HAL_RCC_OscConfig+0x504>)
 8005774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577a:	f7fd fa41 	bl	8002c00 <HAL_GetTick>
 800577e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005780:	e008      	b.n	8005794 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005782:	f7fd fa3d 	bl	8002c00 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	2b02      	cmp	r3, #2
 800578e:	d901      	bls.n	8005794 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e21d      	b.n	8005bd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005794:	4b65      	ldr	r3, [pc, #404]	; (800592c <HAL_RCC_OscConfig+0x504>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800579c:	2b00      	cmp	r3, #0
 800579e:	d0f0      	beq.n	8005782 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057a0:	4b62      	ldr	r3, [pc, #392]	; (800592c <HAL_RCC_OscConfig+0x504>)
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	061b      	lsls	r3, r3, #24
 80057ae:	495f      	ldr	r1, [pc, #380]	; (800592c <HAL_RCC_OscConfig+0x504>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	604b      	str	r3, [r1, #4]
 80057b4:	e018      	b.n	80057e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057b6:	4b5d      	ldr	r3, [pc, #372]	; (800592c <HAL_RCC_OscConfig+0x504>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a5c      	ldr	r2, [pc, #368]	; (800592c <HAL_RCC_OscConfig+0x504>)
 80057bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c2:	f7fd fa1d 	bl	8002c00 <HAL_GetTick>
 80057c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057c8:	e008      	b.n	80057dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057ca:	f7fd fa19 	bl	8002c00 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d901      	bls.n	80057dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e1f9      	b.n	8005bd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057dc:	4b53      	ldr	r3, [pc, #332]	; (800592c <HAL_RCC_OscConfig+0x504>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1f0      	bne.n	80057ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0308 	and.w	r3, r3, #8
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d03c      	beq.n	800586e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d01c      	beq.n	8005836 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057fc:	4b4b      	ldr	r3, [pc, #300]	; (800592c <HAL_RCC_OscConfig+0x504>)
 80057fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005802:	4a4a      	ldr	r2, [pc, #296]	; (800592c <HAL_RCC_OscConfig+0x504>)
 8005804:	f043 0301 	orr.w	r3, r3, #1
 8005808:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800580c:	f7fd f9f8 	bl	8002c00 <HAL_GetTick>
 8005810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005812:	e008      	b.n	8005826 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005814:	f7fd f9f4 	bl	8002c00 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b02      	cmp	r3, #2
 8005820:	d901      	bls.n	8005826 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e1d4      	b.n	8005bd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005826:	4b41      	ldr	r3, [pc, #260]	; (800592c <HAL_RCC_OscConfig+0x504>)
 8005828:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800582c:	f003 0302 	and.w	r3, r3, #2
 8005830:	2b00      	cmp	r3, #0
 8005832:	d0ef      	beq.n	8005814 <HAL_RCC_OscConfig+0x3ec>
 8005834:	e01b      	b.n	800586e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005836:	4b3d      	ldr	r3, [pc, #244]	; (800592c <HAL_RCC_OscConfig+0x504>)
 8005838:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800583c:	4a3b      	ldr	r2, [pc, #236]	; (800592c <HAL_RCC_OscConfig+0x504>)
 800583e:	f023 0301 	bic.w	r3, r3, #1
 8005842:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005846:	f7fd f9db 	bl	8002c00 <HAL_GetTick>
 800584a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800584c:	e008      	b.n	8005860 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800584e:	f7fd f9d7 	bl	8002c00 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d901      	bls.n	8005860 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e1b7      	b.n	8005bd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005860:	4b32      	ldr	r3, [pc, #200]	; (800592c <HAL_RCC_OscConfig+0x504>)
 8005862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1ef      	bne.n	800584e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0304 	and.w	r3, r3, #4
 8005876:	2b00      	cmp	r3, #0
 8005878:	f000 80a6 	beq.w	80059c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800587c:	2300      	movs	r3, #0
 800587e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005880:	4b2a      	ldr	r3, [pc, #168]	; (800592c <HAL_RCC_OscConfig+0x504>)
 8005882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10d      	bne.n	80058a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800588c:	4b27      	ldr	r3, [pc, #156]	; (800592c <HAL_RCC_OscConfig+0x504>)
 800588e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005890:	4a26      	ldr	r2, [pc, #152]	; (800592c <HAL_RCC_OscConfig+0x504>)
 8005892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005896:	6593      	str	r3, [r2, #88]	; 0x58
 8005898:	4b24      	ldr	r3, [pc, #144]	; (800592c <HAL_RCC_OscConfig+0x504>)
 800589a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800589c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058a0:	60bb      	str	r3, [r7, #8]
 80058a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058a4:	2301      	movs	r3, #1
 80058a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058a8:	4b21      	ldr	r3, [pc, #132]	; (8005930 <HAL_RCC_OscConfig+0x508>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d118      	bne.n	80058e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058b4:	4b1e      	ldr	r3, [pc, #120]	; (8005930 <HAL_RCC_OscConfig+0x508>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a1d      	ldr	r2, [pc, #116]	; (8005930 <HAL_RCC_OscConfig+0x508>)
 80058ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058c0:	f7fd f99e 	bl	8002c00 <HAL_GetTick>
 80058c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058c6:	e008      	b.n	80058da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058c8:	f7fd f99a 	bl	8002c00 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d901      	bls.n	80058da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e17a      	b.n	8005bd0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058da:	4b15      	ldr	r3, [pc, #84]	; (8005930 <HAL_RCC_OscConfig+0x508>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d0f0      	beq.n	80058c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d108      	bne.n	8005900 <HAL_RCC_OscConfig+0x4d8>
 80058ee:	4b0f      	ldr	r3, [pc, #60]	; (800592c <HAL_RCC_OscConfig+0x504>)
 80058f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f4:	4a0d      	ldr	r2, [pc, #52]	; (800592c <HAL_RCC_OscConfig+0x504>)
 80058f6:	f043 0301 	orr.w	r3, r3, #1
 80058fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058fe:	e029      	b.n	8005954 <HAL_RCC_OscConfig+0x52c>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	2b05      	cmp	r3, #5
 8005906:	d115      	bne.n	8005934 <HAL_RCC_OscConfig+0x50c>
 8005908:	4b08      	ldr	r3, [pc, #32]	; (800592c <HAL_RCC_OscConfig+0x504>)
 800590a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800590e:	4a07      	ldr	r2, [pc, #28]	; (800592c <HAL_RCC_OscConfig+0x504>)
 8005910:	f043 0304 	orr.w	r3, r3, #4
 8005914:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005918:	4b04      	ldr	r3, [pc, #16]	; (800592c <HAL_RCC_OscConfig+0x504>)
 800591a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800591e:	4a03      	ldr	r2, [pc, #12]	; (800592c <HAL_RCC_OscConfig+0x504>)
 8005920:	f043 0301 	orr.w	r3, r3, #1
 8005924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005928:	e014      	b.n	8005954 <HAL_RCC_OscConfig+0x52c>
 800592a:	bf00      	nop
 800592c:	40021000 	.word	0x40021000
 8005930:	40007000 	.word	0x40007000
 8005934:	4b9c      	ldr	r3, [pc, #624]	; (8005ba8 <HAL_RCC_OscConfig+0x780>)
 8005936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593a:	4a9b      	ldr	r2, [pc, #620]	; (8005ba8 <HAL_RCC_OscConfig+0x780>)
 800593c:	f023 0301 	bic.w	r3, r3, #1
 8005940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005944:	4b98      	ldr	r3, [pc, #608]	; (8005ba8 <HAL_RCC_OscConfig+0x780>)
 8005946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800594a:	4a97      	ldr	r2, [pc, #604]	; (8005ba8 <HAL_RCC_OscConfig+0x780>)
 800594c:	f023 0304 	bic.w	r3, r3, #4
 8005950:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d016      	beq.n	800598a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800595c:	f7fd f950 	bl	8002c00 <HAL_GetTick>
 8005960:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005962:	e00a      	b.n	800597a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005964:	f7fd f94c 	bl	8002c00 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005972:	4293      	cmp	r3, r2
 8005974:	d901      	bls.n	800597a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e12a      	b.n	8005bd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800597a:	4b8b      	ldr	r3, [pc, #556]	; (8005ba8 <HAL_RCC_OscConfig+0x780>)
 800597c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d0ed      	beq.n	8005964 <HAL_RCC_OscConfig+0x53c>
 8005988:	e015      	b.n	80059b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800598a:	f7fd f939 	bl	8002c00 <HAL_GetTick>
 800598e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005990:	e00a      	b.n	80059a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005992:	f7fd f935 	bl	8002c00 <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	f241 3288 	movw	r2, #5000	; 0x1388
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d901      	bls.n	80059a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e113      	b.n	8005bd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059a8:	4b7f      	ldr	r3, [pc, #508]	; (8005ba8 <HAL_RCC_OscConfig+0x780>)
 80059aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1ed      	bne.n	8005992 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059b6:	7ffb      	ldrb	r3, [r7, #31]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d105      	bne.n	80059c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059bc:	4b7a      	ldr	r3, [pc, #488]	; (8005ba8 <HAL_RCC_OscConfig+0x780>)
 80059be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c0:	4a79      	ldr	r2, [pc, #484]	; (8005ba8 <HAL_RCC_OscConfig+0x780>)
 80059c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059c6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 80fe 	beq.w	8005bce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	f040 80d0 	bne.w	8005b7c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80059dc:	4b72      	ldr	r3, [pc, #456]	; (8005ba8 <HAL_RCC_OscConfig+0x780>)
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f003 0203 	and.w	r2, r3, #3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d130      	bne.n	8005a52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fa:	3b01      	subs	r3, #1
 80059fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d127      	bne.n	8005a52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d11f      	bne.n	8005a52 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a1c:	2a07      	cmp	r2, #7
 8005a1e:	bf14      	ite	ne
 8005a20:	2201      	movne	r2, #1
 8005a22:	2200      	moveq	r2, #0
 8005a24:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d113      	bne.n	8005a52 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a34:	085b      	lsrs	r3, r3, #1
 8005a36:	3b01      	subs	r3, #1
 8005a38:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d109      	bne.n	8005a52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a48:	085b      	lsrs	r3, r3, #1
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d06e      	beq.n	8005b30 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	2b0c      	cmp	r3, #12
 8005a56:	d069      	beq.n	8005b2c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005a58:	4b53      	ldr	r3, [pc, #332]	; (8005ba8 <HAL_RCC_OscConfig+0x780>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d105      	bne.n	8005a70 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005a64:	4b50      	ldr	r3, [pc, #320]	; (8005ba8 <HAL_RCC_OscConfig+0x780>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e0ad      	b.n	8005bd0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005a74:	4b4c      	ldr	r3, [pc, #304]	; (8005ba8 <HAL_RCC_OscConfig+0x780>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a4b      	ldr	r2, [pc, #300]	; (8005ba8 <HAL_RCC_OscConfig+0x780>)
 8005a7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a7e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a80:	f7fd f8be 	bl	8002c00 <HAL_GetTick>
 8005a84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a86:	e008      	b.n	8005a9a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a88:	f7fd f8ba 	bl	8002c00 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d901      	bls.n	8005a9a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e09a      	b.n	8005bd0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a9a:	4b43      	ldr	r3, [pc, #268]	; (8005ba8 <HAL_RCC_OscConfig+0x780>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1f0      	bne.n	8005a88 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005aa6:	4b40      	ldr	r3, [pc, #256]	; (8005ba8 <HAL_RCC_OscConfig+0x780>)
 8005aa8:	68da      	ldr	r2, [r3, #12]
 8005aaa:	4b40      	ldr	r3, [pc, #256]	; (8005bac <HAL_RCC_OscConfig+0x784>)
 8005aac:	4013      	ands	r3, r2
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005ab6:	3a01      	subs	r2, #1
 8005ab8:	0112      	lsls	r2, r2, #4
 8005aba:	4311      	orrs	r1, r2
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ac0:	0212      	lsls	r2, r2, #8
 8005ac2:	4311      	orrs	r1, r2
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005ac8:	0852      	lsrs	r2, r2, #1
 8005aca:	3a01      	subs	r2, #1
 8005acc:	0552      	lsls	r2, r2, #21
 8005ace:	4311      	orrs	r1, r2
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005ad4:	0852      	lsrs	r2, r2, #1
 8005ad6:	3a01      	subs	r2, #1
 8005ad8:	0652      	lsls	r2, r2, #25
 8005ada:	4311      	orrs	r1, r2
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ae0:	0912      	lsrs	r2, r2, #4
 8005ae2:	0452      	lsls	r2, r2, #17
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	4930      	ldr	r1, [pc, #192]	; (8005ba8 <HAL_RCC_OscConfig+0x780>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005aec:	4b2e      	ldr	r3, [pc, #184]	; (8005ba8 <HAL_RCC_OscConfig+0x780>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a2d      	ldr	r2, [pc, #180]	; (8005ba8 <HAL_RCC_OscConfig+0x780>)
 8005af2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005af6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005af8:	4b2b      	ldr	r3, [pc, #172]	; (8005ba8 <HAL_RCC_OscConfig+0x780>)
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	4a2a      	ldr	r2, [pc, #168]	; (8005ba8 <HAL_RCC_OscConfig+0x780>)
 8005afe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b04:	f7fd f87c 	bl	8002c00 <HAL_GetTick>
 8005b08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b0a:	e008      	b.n	8005b1e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b0c:	f7fd f878 	bl	8002c00 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e058      	b.n	8005bd0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b1e:	4b22      	ldr	r3, [pc, #136]	; (8005ba8 <HAL_RCC_OscConfig+0x780>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d0f0      	beq.n	8005b0c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b2a:	e050      	b.n	8005bce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e04f      	b.n	8005bd0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b30:	4b1d      	ldr	r3, [pc, #116]	; (8005ba8 <HAL_RCC_OscConfig+0x780>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d148      	bne.n	8005bce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005b3c:	4b1a      	ldr	r3, [pc, #104]	; (8005ba8 <HAL_RCC_OscConfig+0x780>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a19      	ldr	r2, [pc, #100]	; (8005ba8 <HAL_RCC_OscConfig+0x780>)
 8005b42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b48:	4b17      	ldr	r3, [pc, #92]	; (8005ba8 <HAL_RCC_OscConfig+0x780>)
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	4a16      	ldr	r2, [pc, #88]	; (8005ba8 <HAL_RCC_OscConfig+0x780>)
 8005b4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b54:	f7fd f854 	bl	8002c00 <HAL_GetTick>
 8005b58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b5a:	e008      	b.n	8005b6e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b5c:	f7fd f850 	bl	8002c00 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d901      	bls.n	8005b6e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e030      	b.n	8005bd0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b6e:	4b0e      	ldr	r3, [pc, #56]	; (8005ba8 <HAL_RCC_OscConfig+0x780>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d0f0      	beq.n	8005b5c <HAL_RCC_OscConfig+0x734>
 8005b7a:	e028      	b.n	8005bce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	2b0c      	cmp	r3, #12
 8005b80:	d023      	beq.n	8005bca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b82:	4b09      	ldr	r3, [pc, #36]	; (8005ba8 <HAL_RCC_OscConfig+0x780>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a08      	ldr	r2, [pc, #32]	; (8005ba8 <HAL_RCC_OscConfig+0x780>)
 8005b88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b8e:	f7fd f837 	bl	8002c00 <HAL_GetTick>
 8005b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b94:	e00c      	b.n	8005bb0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b96:	f7fd f833 	bl	8002c00 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d905      	bls.n	8005bb0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e013      	b.n	8005bd0 <HAL_RCC_OscConfig+0x7a8>
 8005ba8:	40021000 	.word	0x40021000
 8005bac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bb0:	4b09      	ldr	r3, [pc, #36]	; (8005bd8 <HAL_RCC_OscConfig+0x7b0>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1ec      	bne.n	8005b96 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005bbc:	4b06      	ldr	r3, [pc, #24]	; (8005bd8 <HAL_RCC_OscConfig+0x7b0>)
 8005bbe:	68da      	ldr	r2, [r3, #12]
 8005bc0:	4905      	ldr	r1, [pc, #20]	; (8005bd8 <HAL_RCC_OscConfig+0x7b0>)
 8005bc2:	4b06      	ldr	r3, [pc, #24]	; (8005bdc <HAL_RCC_OscConfig+0x7b4>)
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	60cb      	str	r3, [r1, #12]
 8005bc8:	e001      	b.n	8005bce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e000      	b.n	8005bd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3720      	adds	r7, #32
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	40021000 	.word	0x40021000
 8005bdc:	feeefffc 	.word	0xfeeefffc

08005be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d101      	bne.n	8005bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e0e7      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bf4:	4b75      	ldr	r3, [pc, #468]	; (8005dcc <HAL_RCC_ClockConfig+0x1ec>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0307 	and.w	r3, r3, #7
 8005bfc:	683a      	ldr	r2, [r7, #0]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d910      	bls.n	8005c24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c02:	4b72      	ldr	r3, [pc, #456]	; (8005dcc <HAL_RCC_ClockConfig+0x1ec>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f023 0207 	bic.w	r2, r3, #7
 8005c0a:	4970      	ldr	r1, [pc, #448]	; (8005dcc <HAL_RCC_ClockConfig+0x1ec>)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c12:	4b6e      	ldr	r3, [pc, #440]	; (8005dcc <HAL_RCC_ClockConfig+0x1ec>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0307 	and.w	r3, r3, #7
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d001      	beq.n	8005c24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e0cf      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d010      	beq.n	8005c52 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689a      	ldr	r2, [r3, #8]
 8005c34:	4b66      	ldr	r3, [pc, #408]	; (8005dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d908      	bls.n	8005c52 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c40:	4b63      	ldr	r3, [pc, #396]	; (8005dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	4960      	ldr	r1, [pc, #384]	; (8005dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d04c      	beq.n	8005cf8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	2b03      	cmp	r3, #3
 8005c64:	d107      	bne.n	8005c76 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c66:	4b5a      	ldr	r3, [pc, #360]	; (8005dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d121      	bne.n	8005cb6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e0a6      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d107      	bne.n	8005c8e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c7e:	4b54      	ldr	r3, [pc, #336]	; (8005dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d115      	bne.n	8005cb6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e09a      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d107      	bne.n	8005ca6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c96:	4b4e      	ldr	r3, [pc, #312]	; (8005dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d109      	bne.n	8005cb6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e08e      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ca6:	4b4a      	ldr	r3, [pc, #296]	; (8005dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e086      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005cb6:	4b46      	ldr	r3, [pc, #280]	; (8005dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f023 0203 	bic.w	r2, r3, #3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	4943      	ldr	r1, [pc, #268]	; (8005dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cc8:	f7fc ff9a 	bl	8002c00 <HAL_GetTick>
 8005ccc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cce:	e00a      	b.n	8005ce6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cd0:	f7fc ff96 	bl	8002c00 <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e06e      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ce6:	4b3a      	ldr	r3, [pc, #232]	; (8005dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f003 020c 	and.w	r2, r3, #12
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d1eb      	bne.n	8005cd0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0302 	and.w	r3, r3, #2
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d010      	beq.n	8005d26 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689a      	ldr	r2, [r3, #8]
 8005d08:	4b31      	ldr	r3, [pc, #196]	; (8005dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d208      	bcs.n	8005d26 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d14:	4b2e      	ldr	r3, [pc, #184]	; (8005dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	492b      	ldr	r1, [pc, #172]	; (8005dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d26:	4b29      	ldr	r3, [pc, #164]	; (8005dcc <HAL_RCC_ClockConfig+0x1ec>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0307 	and.w	r3, r3, #7
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d210      	bcs.n	8005d56 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d34:	4b25      	ldr	r3, [pc, #148]	; (8005dcc <HAL_RCC_ClockConfig+0x1ec>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f023 0207 	bic.w	r2, r3, #7
 8005d3c:	4923      	ldr	r1, [pc, #140]	; (8005dcc <HAL_RCC_ClockConfig+0x1ec>)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d44:	4b21      	ldr	r3, [pc, #132]	; (8005dcc <HAL_RCC_ClockConfig+0x1ec>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0307 	and.w	r3, r3, #7
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d001      	beq.n	8005d56 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e036      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0304 	and.w	r3, r3, #4
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d008      	beq.n	8005d74 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d62:	4b1b      	ldr	r3, [pc, #108]	; (8005dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	4918      	ldr	r1, [pc, #96]	; (8005dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0308 	and.w	r3, r3, #8
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d009      	beq.n	8005d94 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d80:	4b13      	ldr	r3, [pc, #76]	; (8005dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	00db      	lsls	r3, r3, #3
 8005d8e:	4910      	ldr	r1, [pc, #64]	; (8005dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d94:	f000 f824 	bl	8005de0 <HAL_RCC_GetSysClockFreq>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	4b0d      	ldr	r3, [pc, #52]	; (8005dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	091b      	lsrs	r3, r3, #4
 8005da0:	f003 030f 	and.w	r3, r3, #15
 8005da4:	490b      	ldr	r1, [pc, #44]	; (8005dd4 <HAL_RCC_ClockConfig+0x1f4>)
 8005da6:	5ccb      	ldrb	r3, [r1, r3]
 8005da8:	f003 031f 	and.w	r3, r3, #31
 8005dac:	fa22 f303 	lsr.w	r3, r2, r3
 8005db0:	4a09      	ldr	r2, [pc, #36]	; (8005dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8005db2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005db4:	4b09      	ldr	r3, [pc, #36]	; (8005ddc <HAL_RCC_ClockConfig+0x1fc>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7fc fed1 	bl	8002b60 <HAL_InitTick>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	72fb      	strb	r3, [r7, #11]

  return status;
 8005dc2:	7afb      	ldrb	r3, [r7, #11]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	40022000 	.word	0x40022000
 8005dd0:	40021000 	.word	0x40021000
 8005dd4:	0800f488 	.word	0x0800f488
 8005dd8:	20000020 	.word	0x20000020
 8005ddc:	20000028 	.word	0x20000028

08005de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b089      	sub	sp, #36	; 0x24
 8005de4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005de6:	2300      	movs	r3, #0
 8005de8:	61fb      	str	r3, [r7, #28]
 8005dea:	2300      	movs	r3, #0
 8005dec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dee:	4b3e      	ldr	r3, [pc, #248]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f003 030c 	and.w	r3, r3, #12
 8005df6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005df8:	4b3b      	ldr	r3, [pc, #236]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	f003 0303 	and.w	r3, r3, #3
 8005e00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d005      	beq.n	8005e14 <HAL_RCC_GetSysClockFreq+0x34>
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	2b0c      	cmp	r3, #12
 8005e0c:	d121      	bne.n	8005e52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d11e      	bne.n	8005e52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005e14:	4b34      	ldr	r3, [pc, #208]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0308 	and.w	r3, r3, #8
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d107      	bne.n	8005e30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005e20:	4b31      	ldr	r3, [pc, #196]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e26:	0a1b      	lsrs	r3, r3, #8
 8005e28:	f003 030f 	and.w	r3, r3, #15
 8005e2c:	61fb      	str	r3, [r7, #28]
 8005e2e:	e005      	b.n	8005e3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005e30:	4b2d      	ldr	r3, [pc, #180]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	091b      	lsrs	r3, r3, #4
 8005e36:	f003 030f 	and.w	r3, r3, #15
 8005e3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005e3c:	4a2b      	ldr	r2, [pc, #172]	; (8005eec <HAL_RCC_GetSysClockFreq+0x10c>)
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10d      	bne.n	8005e68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e50:	e00a      	b.n	8005e68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	2b04      	cmp	r3, #4
 8005e56:	d102      	bne.n	8005e5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e58:	4b25      	ldr	r3, [pc, #148]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e5a:	61bb      	str	r3, [r7, #24]
 8005e5c:	e004      	b.n	8005e68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	d101      	bne.n	8005e68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e64:	4b23      	ldr	r3, [pc, #140]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005e66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	2b0c      	cmp	r3, #12
 8005e6c:	d134      	bne.n	8005ed8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e6e:	4b1e      	ldr	r3, [pc, #120]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	f003 0303 	and.w	r3, r3, #3
 8005e76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d003      	beq.n	8005e86 <HAL_RCC_GetSysClockFreq+0xa6>
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	2b03      	cmp	r3, #3
 8005e82:	d003      	beq.n	8005e8c <HAL_RCC_GetSysClockFreq+0xac>
 8005e84:	e005      	b.n	8005e92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005e86:	4b1a      	ldr	r3, [pc, #104]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e88:	617b      	str	r3, [r7, #20]
      break;
 8005e8a:	e005      	b.n	8005e98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005e8c:	4b19      	ldr	r3, [pc, #100]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005e8e:	617b      	str	r3, [r7, #20]
      break;
 8005e90:	e002      	b.n	8005e98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	617b      	str	r3, [r7, #20]
      break;
 8005e96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e98:	4b13      	ldr	r3, [pc, #76]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	091b      	lsrs	r3, r3, #4
 8005e9e:	f003 0307 	and.w	r3, r3, #7
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005ea6:	4b10      	ldr	r3, [pc, #64]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	0a1b      	lsrs	r3, r3, #8
 8005eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	fb03 f202 	mul.w	r2, r3, r2
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ebc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ebe:	4b0a      	ldr	r3, [pc, #40]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	0e5b      	lsrs	r3, r3, #25
 8005ec4:	f003 0303 	and.w	r3, r3, #3
 8005ec8:	3301      	adds	r3, #1
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005ed8:	69bb      	ldr	r3, [r7, #24]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3724      	adds	r7, #36	; 0x24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	40021000 	.word	0x40021000
 8005eec:	0800f4a0 	.word	0x0800f4a0
 8005ef0:	00f42400 	.word	0x00f42400
 8005ef4:	007a1200 	.word	0x007a1200

08005ef8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005efc:	4b03      	ldr	r3, [pc, #12]	; (8005f0c <HAL_RCC_GetHCLKFreq+0x14>)
 8005efe:	681b      	ldr	r3, [r3, #0]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	20000020 	.word	0x20000020

08005f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005f14:	f7ff fff0 	bl	8005ef8 <HAL_RCC_GetHCLKFreq>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	4b06      	ldr	r3, [pc, #24]	; (8005f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	0a1b      	lsrs	r3, r3, #8
 8005f20:	f003 0307 	and.w	r3, r3, #7
 8005f24:	4904      	ldr	r1, [pc, #16]	; (8005f38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f26:	5ccb      	ldrb	r3, [r1, r3]
 8005f28:	f003 031f 	and.w	r3, r3, #31
 8005f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	40021000 	.word	0x40021000
 8005f38:	0800f498 	.word	0x0800f498

08005f3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f40:	f7ff ffda 	bl	8005ef8 <HAL_RCC_GetHCLKFreq>
 8005f44:	4602      	mov	r2, r0
 8005f46:	4b06      	ldr	r3, [pc, #24]	; (8005f60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	0adb      	lsrs	r3, r3, #11
 8005f4c:	f003 0307 	and.w	r3, r3, #7
 8005f50:	4904      	ldr	r1, [pc, #16]	; (8005f64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f52:	5ccb      	ldrb	r3, [r1, r3]
 8005f54:	f003 031f 	and.w	r3, r3, #31
 8005f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40021000 	.word	0x40021000
 8005f64:	0800f498 	.word	0x0800f498

08005f68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005f70:	2300      	movs	r3, #0
 8005f72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005f74:	4b2a      	ldr	r3, [pc, #168]	; (8006020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d003      	beq.n	8005f88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005f80:	f7ff f9ee 	bl	8005360 <HAL_PWREx_GetVoltageRange>
 8005f84:	6178      	str	r0, [r7, #20]
 8005f86:	e014      	b.n	8005fb2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f88:	4b25      	ldr	r3, [pc, #148]	; (8006020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f8c:	4a24      	ldr	r2, [pc, #144]	; (8006020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f92:	6593      	str	r3, [r2, #88]	; 0x58
 8005f94:	4b22      	ldr	r3, [pc, #136]	; (8006020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f9c:	60fb      	str	r3, [r7, #12]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005fa0:	f7ff f9de 	bl	8005360 <HAL_PWREx_GetVoltageRange>
 8005fa4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005fa6:	4b1e      	ldr	r3, [pc, #120]	; (8006020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005faa:	4a1d      	ldr	r2, [pc, #116]	; (8006020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fb0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fb8:	d10b      	bne.n	8005fd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2b80      	cmp	r3, #128	; 0x80
 8005fbe:	d919      	bls.n	8005ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2ba0      	cmp	r3, #160	; 0xa0
 8005fc4:	d902      	bls.n	8005fcc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	613b      	str	r3, [r7, #16]
 8005fca:	e013      	b.n	8005ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005fcc:	2301      	movs	r3, #1
 8005fce:	613b      	str	r3, [r7, #16]
 8005fd0:	e010      	b.n	8005ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b80      	cmp	r3, #128	; 0x80
 8005fd6:	d902      	bls.n	8005fde <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005fd8:	2303      	movs	r3, #3
 8005fda:	613b      	str	r3, [r7, #16]
 8005fdc:	e00a      	b.n	8005ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b80      	cmp	r3, #128	; 0x80
 8005fe2:	d102      	bne.n	8005fea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	613b      	str	r3, [r7, #16]
 8005fe8:	e004      	b.n	8005ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2b70      	cmp	r3, #112	; 0x70
 8005fee:	d101      	bne.n	8005ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005ff4:	4b0b      	ldr	r3, [pc, #44]	; (8006024 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f023 0207 	bic.w	r2, r3, #7
 8005ffc:	4909      	ldr	r1, [pc, #36]	; (8006024 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	4313      	orrs	r3, r2
 8006002:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006004:	4b07      	ldr	r3, [pc, #28]	; (8006024 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0307 	and.w	r3, r3, #7
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	429a      	cmp	r2, r3
 8006010:	d001      	beq.n	8006016 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e000      	b.n	8006018 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3718      	adds	r7, #24
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	40021000 	.word	0x40021000
 8006024:	40022000 	.word	0x40022000

08006028 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006030:	2300      	movs	r3, #0
 8006032:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006034:	2300      	movs	r3, #0
 8006036:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006040:	2b00      	cmp	r3, #0
 8006042:	d041      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006048:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800604c:	d02a      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800604e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006052:	d824      	bhi.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006054:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006058:	d008      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800605a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800605e:	d81e      	bhi.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00a      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006064:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006068:	d010      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800606a:	e018      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800606c:	4b86      	ldr	r3, [pc, #536]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	4a85      	ldr	r2, [pc, #532]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006076:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006078:	e015      	b.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	3304      	adds	r3, #4
 800607e:	2100      	movs	r1, #0
 8006080:	4618      	mov	r0, r3
 8006082:	f000 fabb 	bl	80065fc <RCCEx_PLLSAI1_Config>
 8006086:	4603      	mov	r3, r0
 8006088:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800608a:	e00c      	b.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	3320      	adds	r3, #32
 8006090:	2100      	movs	r1, #0
 8006092:	4618      	mov	r0, r3
 8006094:	f000 fba6 	bl	80067e4 <RCCEx_PLLSAI2_Config>
 8006098:	4603      	mov	r3, r0
 800609a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800609c:	e003      	b.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	74fb      	strb	r3, [r7, #19]
      break;
 80060a2:	e000      	b.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80060a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060a6:	7cfb      	ldrb	r3, [r7, #19]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d10b      	bne.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060ac:	4b76      	ldr	r3, [pc, #472]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060ba:	4973      	ldr	r1, [pc, #460]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80060c2:	e001      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c4:	7cfb      	ldrb	r3, [r7, #19]
 80060c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d041      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80060dc:	d02a      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80060de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80060e2:	d824      	bhi.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80060e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060e8:	d008      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80060ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060ee:	d81e      	bhi.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00a      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80060f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060f8:	d010      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80060fa:	e018      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80060fc:	4b62      	ldr	r3, [pc, #392]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	4a61      	ldr	r2, [pc, #388]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006106:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006108:	e015      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	3304      	adds	r3, #4
 800610e:	2100      	movs	r1, #0
 8006110:	4618      	mov	r0, r3
 8006112:	f000 fa73 	bl	80065fc <RCCEx_PLLSAI1_Config>
 8006116:	4603      	mov	r3, r0
 8006118:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800611a:	e00c      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	3320      	adds	r3, #32
 8006120:	2100      	movs	r1, #0
 8006122:	4618      	mov	r0, r3
 8006124:	f000 fb5e 	bl	80067e4 <RCCEx_PLLSAI2_Config>
 8006128:	4603      	mov	r3, r0
 800612a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800612c:	e003      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	74fb      	strb	r3, [r7, #19]
      break;
 8006132:	e000      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006134:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006136:	7cfb      	ldrb	r3, [r7, #19]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10b      	bne.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800613c:	4b52      	ldr	r3, [pc, #328]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800613e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006142:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800614a:	494f      	ldr	r1, [pc, #316]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800614c:	4313      	orrs	r3, r2
 800614e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006152:	e001      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006154:	7cfb      	ldrb	r3, [r7, #19]
 8006156:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 80a0 	beq.w	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006166:	2300      	movs	r3, #0
 8006168:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800616a:	4b47      	ldr	r3, [pc, #284]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800616c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800616e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006176:	2301      	movs	r3, #1
 8006178:	e000      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800617a:	2300      	movs	r3, #0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00d      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006180:	4b41      	ldr	r3, [pc, #260]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006184:	4a40      	ldr	r2, [pc, #256]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800618a:	6593      	str	r3, [r2, #88]	; 0x58
 800618c:	4b3e      	ldr	r3, [pc, #248]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800618e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006194:	60bb      	str	r3, [r7, #8]
 8006196:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006198:	2301      	movs	r3, #1
 800619a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800619c:	4b3b      	ldr	r3, [pc, #236]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a3a      	ldr	r2, [pc, #232]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80061a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061a8:	f7fc fd2a 	bl	8002c00 <HAL_GetTick>
 80061ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80061ae:	e009      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061b0:	f7fc fd26 	bl	8002c00 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d902      	bls.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	74fb      	strb	r3, [r7, #19]
        break;
 80061c2:	e005      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80061c4:	4b31      	ldr	r3, [pc, #196]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d0ef      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80061d0:	7cfb      	ldrb	r3, [r7, #19]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d15c      	bne.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80061d6:	4b2c      	ldr	r3, [pc, #176]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d01f      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d019      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80061f4:	4b24      	ldr	r3, [pc, #144]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006200:	4b21      	ldr	r3, [pc, #132]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006206:	4a20      	ldr	r2, [pc, #128]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800620c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006210:	4b1d      	ldr	r3, [pc, #116]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006216:	4a1c      	ldr	r2, [pc, #112]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800621c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006220:	4a19      	ldr	r2, [pc, #100]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	2b00      	cmp	r3, #0
 8006230:	d016      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006232:	f7fc fce5 	bl	8002c00 <HAL_GetTick>
 8006236:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006238:	e00b      	b.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800623a:	f7fc fce1 	bl	8002c00 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	f241 3288 	movw	r2, #5000	; 0x1388
 8006248:	4293      	cmp	r3, r2
 800624a:	d902      	bls.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	74fb      	strb	r3, [r7, #19]
            break;
 8006250:	e006      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006252:	4b0d      	ldr	r3, [pc, #52]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006258:	f003 0302 	and.w	r3, r3, #2
 800625c:	2b00      	cmp	r3, #0
 800625e:	d0ec      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006260:	7cfb      	ldrb	r3, [r7, #19]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10c      	bne.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006266:	4b08      	ldr	r3, [pc, #32]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800626c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006276:	4904      	ldr	r1, [pc, #16]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006278:	4313      	orrs	r3, r2
 800627a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800627e:	e009      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006280:	7cfb      	ldrb	r3, [r7, #19]
 8006282:	74bb      	strb	r3, [r7, #18]
 8006284:	e006      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006286:	bf00      	nop
 8006288:	40021000 	.word	0x40021000
 800628c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006290:	7cfb      	ldrb	r3, [r7, #19]
 8006292:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006294:	7c7b      	ldrb	r3, [r7, #17]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d105      	bne.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800629a:	4b9e      	ldr	r3, [pc, #632]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800629c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800629e:	4a9d      	ldr	r2, [pc, #628]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00a      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062b2:	4b98      	ldr	r3, [pc, #608]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b8:	f023 0203 	bic.w	r2, r3, #3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c0:	4994      	ldr	r1, [pc, #592]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00a      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062d4:	4b8f      	ldr	r3, [pc, #572]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062da:	f023 020c 	bic.w	r2, r3, #12
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e2:	498c      	ldr	r1, [pc, #560]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0304 	and.w	r3, r3, #4
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00a      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80062f6:	4b87      	ldr	r3, [pc, #540]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006304:	4983      	ldr	r1, [pc, #524]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006306:	4313      	orrs	r3, r2
 8006308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0308 	and.w	r3, r3, #8
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00a      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006318:	4b7e      	ldr	r3, [pc, #504]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800631a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800631e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006326:	497b      	ldr	r1, [pc, #492]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006328:	4313      	orrs	r3, r2
 800632a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0310 	and.w	r3, r3, #16
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00a      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800633a:	4b76      	ldr	r3, [pc, #472]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800633c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006340:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006348:	4972      	ldr	r1, [pc, #456]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800634a:	4313      	orrs	r3, r2
 800634c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0320 	and.w	r3, r3, #32
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00a      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800635c:	4b6d      	ldr	r3, [pc, #436]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800635e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006362:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800636a:	496a      	ldr	r1, [pc, #424]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800636c:	4313      	orrs	r3, r2
 800636e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00a      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800637e:	4b65      	ldr	r3, [pc, #404]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006384:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800638c:	4961      	ldr	r1, [pc, #388]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800638e:	4313      	orrs	r3, r2
 8006390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00a      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063a0:	4b5c      	ldr	r3, [pc, #368]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ae:	4959      	ldr	r1, [pc, #356]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00a      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063c2:	4b54      	ldr	r3, [pc, #336]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d0:	4950      	ldr	r1, [pc, #320]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063d2:	4313      	orrs	r3, r2
 80063d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00a      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80063e4:	4b4b      	ldr	r3, [pc, #300]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f2:	4948      	ldr	r1, [pc, #288]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00a      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006406:	4b43      	ldr	r3, [pc, #268]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800640c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006414:	493f      	ldr	r1, [pc, #252]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006416:	4313      	orrs	r3, r2
 8006418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d028      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006428:	4b3a      	ldr	r3, [pc, #232]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800642a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800642e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006436:	4937      	ldr	r1, [pc, #220]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006438:	4313      	orrs	r3, r2
 800643a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006442:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006446:	d106      	bne.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006448:	4b32      	ldr	r3, [pc, #200]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	4a31      	ldr	r2, [pc, #196]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800644e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006452:	60d3      	str	r3, [r2, #12]
 8006454:	e011      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800645a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800645e:	d10c      	bne.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	3304      	adds	r3, #4
 8006464:	2101      	movs	r1, #1
 8006466:	4618      	mov	r0, r3
 8006468:	f000 f8c8 	bl	80065fc <RCCEx_PLLSAI1_Config>
 800646c:	4603      	mov	r3, r0
 800646e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006470:	7cfb      	ldrb	r3, [r7, #19]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006476:	7cfb      	ldrb	r3, [r7, #19]
 8006478:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d028      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006486:	4b23      	ldr	r3, [pc, #140]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800648c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006494:	491f      	ldr	r1, [pc, #124]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006496:	4313      	orrs	r3, r2
 8006498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064a4:	d106      	bne.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064a6:	4b1b      	ldr	r3, [pc, #108]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	4a1a      	ldr	r2, [pc, #104]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064b0:	60d3      	str	r3, [r2, #12]
 80064b2:	e011      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064bc:	d10c      	bne.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	3304      	adds	r3, #4
 80064c2:	2101      	movs	r1, #1
 80064c4:	4618      	mov	r0, r3
 80064c6:	f000 f899 	bl	80065fc <RCCEx_PLLSAI1_Config>
 80064ca:	4603      	mov	r3, r0
 80064cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064ce:	7cfb      	ldrb	r3, [r7, #19]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d001      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80064d4:	7cfb      	ldrb	r3, [r7, #19]
 80064d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d02b      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064e4:	4b0b      	ldr	r3, [pc, #44]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064f2:	4908      	ldr	r1, [pc, #32]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064f4:	4313      	orrs	r3, r2
 80064f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006502:	d109      	bne.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006504:	4b03      	ldr	r3, [pc, #12]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	4a02      	ldr	r2, [pc, #8]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800650a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800650e:	60d3      	str	r3, [r2, #12]
 8006510:	e014      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006512:	bf00      	nop
 8006514:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800651c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006520:	d10c      	bne.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	3304      	adds	r3, #4
 8006526:	2101      	movs	r1, #1
 8006528:	4618      	mov	r0, r3
 800652a:	f000 f867 	bl	80065fc <RCCEx_PLLSAI1_Config>
 800652e:	4603      	mov	r3, r0
 8006530:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006532:	7cfb      	ldrb	r3, [r7, #19]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d001      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006538:	7cfb      	ldrb	r3, [r7, #19]
 800653a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d02f      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006548:	4b2b      	ldr	r3, [pc, #172]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800654a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006556:	4928      	ldr	r1, [pc, #160]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006558:	4313      	orrs	r3, r2
 800655a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006562:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006566:	d10d      	bne.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	3304      	adds	r3, #4
 800656c:	2102      	movs	r1, #2
 800656e:	4618      	mov	r0, r3
 8006570:	f000 f844 	bl	80065fc <RCCEx_PLLSAI1_Config>
 8006574:	4603      	mov	r3, r0
 8006576:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006578:	7cfb      	ldrb	r3, [r7, #19]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d014      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800657e:	7cfb      	ldrb	r3, [r7, #19]
 8006580:	74bb      	strb	r3, [r7, #18]
 8006582:	e011      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800658c:	d10c      	bne.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	3320      	adds	r3, #32
 8006592:	2102      	movs	r1, #2
 8006594:	4618      	mov	r0, r3
 8006596:	f000 f925 	bl	80067e4 <RCCEx_PLLSAI2_Config>
 800659a:	4603      	mov	r3, r0
 800659c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800659e:	7cfb      	ldrb	r3, [r7, #19]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d001      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80065a4:	7cfb      	ldrb	r3, [r7, #19]
 80065a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00a      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80065b4:	4b10      	ldr	r3, [pc, #64]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80065b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065c2:	490d      	ldr	r1, [pc, #52]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00b      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80065d6:	4b08      	ldr	r3, [pc, #32]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80065d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065e6:	4904      	ldr	r1, [pc, #16]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80065e8:	4313      	orrs	r3, r2
 80065ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80065ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3718      	adds	r7, #24
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	40021000 	.word	0x40021000

080065fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800660a:	4b75      	ldr	r3, [pc, #468]	; (80067e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	f003 0303 	and.w	r3, r3, #3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d018      	beq.n	8006648 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006616:	4b72      	ldr	r3, [pc, #456]	; (80067e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	f003 0203 	and.w	r2, r3, #3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	429a      	cmp	r2, r3
 8006624:	d10d      	bne.n	8006642 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
       ||
 800662a:	2b00      	cmp	r3, #0
 800662c:	d009      	beq.n	8006642 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800662e:	4b6c      	ldr	r3, [pc, #432]	; (80067e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	091b      	lsrs	r3, r3, #4
 8006634:	f003 0307 	and.w	r3, r3, #7
 8006638:	1c5a      	adds	r2, r3, #1
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
       ||
 800663e:	429a      	cmp	r2, r3
 8006640:	d047      	beq.n	80066d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	73fb      	strb	r3, [r7, #15]
 8006646:	e044      	b.n	80066d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b03      	cmp	r3, #3
 800664e:	d018      	beq.n	8006682 <RCCEx_PLLSAI1_Config+0x86>
 8006650:	2b03      	cmp	r3, #3
 8006652:	d825      	bhi.n	80066a0 <RCCEx_PLLSAI1_Config+0xa4>
 8006654:	2b01      	cmp	r3, #1
 8006656:	d002      	beq.n	800665e <RCCEx_PLLSAI1_Config+0x62>
 8006658:	2b02      	cmp	r3, #2
 800665a:	d009      	beq.n	8006670 <RCCEx_PLLSAI1_Config+0x74>
 800665c:	e020      	b.n	80066a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800665e:	4b60      	ldr	r3, [pc, #384]	; (80067e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0302 	and.w	r3, r3, #2
 8006666:	2b00      	cmp	r3, #0
 8006668:	d11d      	bne.n	80066a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800666e:	e01a      	b.n	80066a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006670:	4b5b      	ldr	r3, [pc, #364]	; (80067e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006678:	2b00      	cmp	r3, #0
 800667a:	d116      	bne.n	80066aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006680:	e013      	b.n	80066aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006682:	4b57      	ldr	r3, [pc, #348]	; (80067e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10f      	bne.n	80066ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800668e:	4b54      	ldr	r3, [pc, #336]	; (80067e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d109      	bne.n	80066ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800669e:	e006      	b.n	80066ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	73fb      	strb	r3, [r7, #15]
      break;
 80066a4:	e004      	b.n	80066b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80066a6:	bf00      	nop
 80066a8:	e002      	b.n	80066b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80066aa:	bf00      	nop
 80066ac:	e000      	b.n	80066b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80066ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80066b0:	7bfb      	ldrb	r3, [r7, #15]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10d      	bne.n	80066d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80066b6:	4b4a      	ldr	r3, [pc, #296]	; (80067e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6819      	ldr	r1, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	3b01      	subs	r3, #1
 80066c8:	011b      	lsls	r3, r3, #4
 80066ca:	430b      	orrs	r3, r1
 80066cc:	4944      	ldr	r1, [pc, #272]	; (80067e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80066d2:	7bfb      	ldrb	r3, [r7, #15]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d17d      	bne.n	80067d4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80066d8:	4b41      	ldr	r3, [pc, #260]	; (80067e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a40      	ldr	r2, [pc, #256]	; (80067e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80066e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066e4:	f7fc fa8c 	bl	8002c00 <HAL_GetTick>
 80066e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80066ea:	e009      	b.n	8006700 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066ec:	f7fc fa88 	bl	8002c00 <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d902      	bls.n	8006700 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	73fb      	strb	r3, [r7, #15]
        break;
 80066fe:	e005      	b.n	800670c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006700:	4b37      	ldr	r3, [pc, #220]	; (80067e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1ef      	bne.n	80066ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800670c:	7bfb      	ldrb	r3, [r7, #15]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d160      	bne.n	80067d4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d111      	bne.n	800673c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006718:	4b31      	ldr	r3, [pc, #196]	; (80067e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	6892      	ldr	r2, [r2, #8]
 8006728:	0211      	lsls	r1, r2, #8
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	68d2      	ldr	r2, [r2, #12]
 800672e:	0912      	lsrs	r2, r2, #4
 8006730:	0452      	lsls	r2, r2, #17
 8006732:	430a      	orrs	r2, r1
 8006734:	492a      	ldr	r1, [pc, #168]	; (80067e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006736:	4313      	orrs	r3, r2
 8006738:	610b      	str	r3, [r1, #16]
 800673a:	e027      	b.n	800678c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d112      	bne.n	8006768 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006742:	4b27      	ldr	r3, [pc, #156]	; (80067e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800674a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	6892      	ldr	r2, [r2, #8]
 8006752:	0211      	lsls	r1, r2, #8
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	6912      	ldr	r2, [r2, #16]
 8006758:	0852      	lsrs	r2, r2, #1
 800675a:	3a01      	subs	r2, #1
 800675c:	0552      	lsls	r2, r2, #21
 800675e:	430a      	orrs	r2, r1
 8006760:	491f      	ldr	r1, [pc, #124]	; (80067e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006762:	4313      	orrs	r3, r2
 8006764:	610b      	str	r3, [r1, #16]
 8006766:	e011      	b.n	800678c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006768:	4b1d      	ldr	r3, [pc, #116]	; (80067e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006770:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	6892      	ldr	r2, [r2, #8]
 8006778:	0211      	lsls	r1, r2, #8
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	6952      	ldr	r2, [r2, #20]
 800677e:	0852      	lsrs	r2, r2, #1
 8006780:	3a01      	subs	r2, #1
 8006782:	0652      	lsls	r2, r2, #25
 8006784:	430a      	orrs	r2, r1
 8006786:	4916      	ldr	r1, [pc, #88]	; (80067e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006788:	4313      	orrs	r3, r2
 800678a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800678c:	4b14      	ldr	r3, [pc, #80]	; (80067e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a13      	ldr	r2, [pc, #76]	; (80067e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006792:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006796:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006798:	f7fc fa32 	bl	8002c00 <HAL_GetTick>
 800679c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800679e:	e009      	b.n	80067b4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80067a0:	f7fc fa2e 	bl	8002c00 <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d902      	bls.n	80067b4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	73fb      	strb	r3, [r7, #15]
          break;
 80067b2:	e005      	b.n	80067c0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80067b4:	4b0a      	ldr	r3, [pc, #40]	; (80067e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d0ef      	beq.n	80067a0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80067c0:	7bfb      	ldrb	r3, [r7, #15]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d106      	bne.n	80067d4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80067c6:	4b06      	ldr	r3, [pc, #24]	; (80067e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067c8:	691a      	ldr	r2, [r3, #16]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	4904      	ldr	r1, [pc, #16]	; (80067e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067d0:	4313      	orrs	r3, r2
 80067d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80067d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	40021000 	.word	0x40021000

080067e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80067f2:	4b6a      	ldr	r3, [pc, #424]	; (800699c <RCCEx_PLLSAI2_Config+0x1b8>)
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	f003 0303 	and.w	r3, r3, #3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d018      	beq.n	8006830 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80067fe:	4b67      	ldr	r3, [pc, #412]	; (800699c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	f003 0203 	and.w	r2, r3, #3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	429a      	cmp	r2, r3
 800680c:	d10d      	bne.n	800682a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
       ||
 8006812:	2b00      	cmp	r3, #0
 8006814:	d009      	beq.n	800682a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006816:	4b61      	ldr	r3, [pc, #388]	; (800699c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	091b      	lsrs	r3, r3, #4
 800681c:	f003 0307 	and.w	r3, r3, #7
 8006820:	1c5a      	adds	r2, r3, #1
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
       ||
 8006826:	429a      	cmp	r2, r3
 8006828:	d047      	beq.n	80068ba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	73fb      	strb	r3, [r7, #15]
 800682e:	e044      	b.n	80068ba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b03      	cmp	r3, #3
 8006836:	d018      	beq.n	800686a <RCCEx_PLLSAI2_Config+0x86>
 8006838:	2b03      	cmp	r3, #3
 800683a:	d825      	bhi.n	8006888 <RCCEx_PLLSAI2_Config+0xa4>
 800683c:	2b01      	cmp	r3, #1
 800683e:	d002      	beq.n	8006846 <RCCEx_PLLSAI2_Config+0x62>
 8006840:	2b02      	cmp	r3, #2
 8006842:	d009      	beq.n	8006858 <RCCEx_PLLSAI2_Config+0x74>
 8006844:	e020      	b.n	8006888 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006846:	4b55      	ldr	r3, [pc, #340]	; (800699c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0302 	and.w	r3, r3, #2
 800684e:	2b00      	cmp	r3, #0
 8006850:	d11d      	bne.n	800688e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006856:	e01a      	b.n	800688e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006858:	4b50      	ldr	r3, [pc, #320]	; (800699c <RCCEx_PLLSAI2_Config+0x1b8>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006860:	2b00      	cmp	r3, #0
 8006862:	d116      	bne.n	8006892 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006868:	e013      	b.n	8006892 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800686a:	4b4c      	ldr	r3, [pc, #304]	; (800699c <RCCEx_PLLSAI2_Config+0x1b8>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10f      	bne.n	8006896 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006876:	4b49      	ldr	r3, [pc, #292]	; (800699c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d109      	bne.n	8006896 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006886:	e006      	b.n	8006896 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	73fb      	strb	r3, [r7, #15]
      break;
 800688c:	e004      	b.n	8006898 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800688e:	bf00      	nop
 8006890:	e002      	b.n	8006898 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006892:	bf00      	nop
 8006894:	e000      	b.n	8006898 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006896:	bf00      	nop
    }

    if(status == HAL_OK)
 8006898:	7bfb      	ldrb	r3, [r7, #15]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10d      	bne.n	80068ba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800689e:	4b3f      	ldr	r3, [pc, #252]	; (800699c <RCCEx_PLLSAI2_Config+0x1b8>)
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6819      	ldr	r1, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	3b01      	subs	r3, #1
 80068b0:	011b      	lsls	r3, r3, #4
 80068b2:	430b      	orrs	r3, r1
 80068b4:	4939      	ldr	r1, [pc, #228]	; (800699c <RCCEx_PLLSAI2_Config+0x1b8>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80068ba:	7bfb      	ldrb	r3, [r7, #15]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d167      	bne.n	8006990 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80068c0:	4b36      	ldr	r3, [pc, #216]	; (800699c <RCCEx_PLLSAI2_Config+0x1b8>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a35      	ldr	r2, [pc, #212]	; (800699c <RCCEx_PLLSAI2_Config+0x1b8>)
 80068c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068cc:	f7fc f998 	bl	8002c00 <HAL_GetTick>
 80068d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80068d2:	e009      	b.n	80068e8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80068d4:	f7fc f994 	bl	8002c00 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d902      	bls.n	80068e8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	73fb      	strb	r3, [r7, #15]
        break;
 80068e6:	e005      	b.n	80068f4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80068e8:	4b2c      	ldr	r3, [pc, #176]	; (800699c <RCCEx_PLLSAI2_Config+0x1b8>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1ef      	bne.n	80068d4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80068f4:	7bfb      	ldrb	r3, [r7, #15]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d14a      	bne.n	8006990 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d111      	bne.n	8006924 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006900:	4b26      	ldr	r3, [pc, #152]	; (800699c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	6892      	ldr	r2, [r2, #8]
 8006910:	0211      	lsls	r1, r2, #8
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	68d2      	ldr	r2, [r2, #12]
 8006916:	0912      	lsrs	r2, r2, #4
 8006918:	0452      	lsls	r2, r2, #17
 800691a:	430a      	orrs	r2, r1
 800691c:	491f      	ldr	r1, [pc, #124]	; (800699c <RCCEx_PLLSAI2_Config+0x1b8>)
 800691e:	4313      	orrs	r3, r2
 8006920:	614b      	str	r3, [r1, #20]
 8006922:	e011      	b.n	8006948 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006924:	4b1d      	ldr	r3, [pc, #116]	; (800699c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800692c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	6892      	ldr	r2, [r2, #8]
 8006934:	0211      	lsls	r1, r2, #8
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	6912      	ldr	r2, [r2, #16]
 800693a:	0852      	lsrs	r2, r2, #1
 800693c:	3a01      	subs	r2, #1
 800693e:	0652      	lsls	r2, r2, #25
 8006940:	430a      	orrs	r2, r1
 8006942:	4916      	ldr	r1, [pc, #88]	; (800699c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006944:	4313      	orrs	r3, r2
 8006946:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006948:	4b14      	ldr	r3, [pc, #80]	; (800699c <RCCEx_PLLSAI2_Config+0x1b8>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a13      	ldr	r2, [pc, #76]	; (800699c <RCCEx_PLLSAI2_Config+0x1b8>)
 800694e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006952:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006954:	f7fc f954 	bl	8002c00 <HAL_GetTick>
 8006958:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800695a:	e009      	b.n	8006970 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800695c:	f7fc f950 	bl	8002c00 <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	2b02      	cmp	r3, #2
 8006968:	d902      	bls.n	8006970 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	73fb      	strb	r3, [r7, #15]
          break;
 800696e:	e005      	b.n	800697c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006970:	4b0a      	ldr	r3, [pc, #40]	; (800699c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006978:	2b00      	cmp	r3, #0
 800697a:	d0ef      	beq.n	800695c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800697c:	7bfb      	ldrb	r3, [r7, #15]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d106      	bne.n	8006990 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006982:	4b06      	ldr	r3, [pc, #24]	; (800699c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006984:	695a      	ldr	r2, [r3, #20]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	4904      	ldr	r1, [pc, #16]	; (800699c <RCCEx_PLLSAI2_Config+0x1b8>)
 800698c:	4313      	orrs	r3, r2
 800698e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006990:	7bfb      	ldrb	r3, [r7, #15]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	40021000 	.word	0x40021000

080069a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e049      	b.n	8006a46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d106      	bne.n	80069cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7fb fe7e 	bl	80026c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2202      	movs	r2, #2
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	3304      	adds	r3, #4
 80069dc:	4619      	mov	r1, r3
 80069de:	4610      	mov	r0, r2
 80069e0:	f000 feda 	bl	8007798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3708      	adds	r7, #8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
	...

08006a50 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d001      	beq.n	8006a68 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e047      	b.n	8006af8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a23      	ldr	r2, [pc, #140]	; (8006b04 <HAL_TIM_Base_Start+0xb4>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d01d      	beq.n	8006ab6 <HAL_TIM_Base_Start+0x66>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a82:	d018      	beq.n	8006ab6 <HAL_TIM_Base_Start+0x66>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a1f      	ldr	r2, [pc, #124]	; (8006b08 <HAL_TIM_Base_Start+0xb8>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d013      	beq.n	8006ab6 <HAL_TIM_Base_Start+0x66>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a1e      	ldr	r2, [pc, #120]	; (8006b0c <HAL_TIM_Base_Start+0xbc>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d00e      	beq.n	8006ab6 <HAL_TIM_Base_Start+0x66>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a1c      	ldr	r2, [pc, #112]	; (8006b10 <HAL_TIM_Base_Start+0xc0>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d009      	beq.n	8006ab6 <HAL_TIM_Base_Start+0x66>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a1b      	ldr	r2, [pc, #108]	; (8006b14 <HAL_TIM_Base_Start+0xc4>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d004      	beq.n	8006ab6 <HAL_TIM_Base_Start+0x66>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a19      	ldr	r2, [pc, #100]	; (8006b18 <HAL_TIM_Base_Start+0xc8>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d115      	bne.n	8006ae2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	689a      	ldr	r2, [r3, #8]
 8006abc:	4b17      	ldr	r3, [pc, #92]	; (8006b1c <HAL_TIM_Base_Start+0xcc>)
 8006abe:	4013      	ands	r3, r2
 8006ac0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2b06      	cmp	r3, #6
 8006ac6:	d015      	beq.n	8006af4 <HAL_TIM_Base_Start+0xa4>
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ace:	d011      	beq.n	8006af4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f042 0201 	orr.w	r2, r2, #1
 8006ade:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ae0:	e008      	b.n	8006af4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f042 0201 	orr.w	r2, r2, #1
 8006af0:	601a      	str	r2, [r3, #0]
 8006af2:	e000      	b.n	8006af6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006af4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3714      	adds	r7, #20
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr
 8006b04:	40012c00 	.word	0x40012c00
 8006b08:	40000400 	.word	0x40000400
 8006b0c:	40000800 	.word	0x40000800
 8006b10:	40000c00 	.word	0x40000c00
 8006b14:	40013400 	.word	0x40013400
 8006b18:	40014000 	.word	0x40014000
 8006b1c:	00010007 	.word	0x00010007

08006b20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e049      	b.n	8006bc6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d106      	bne.n	8006b4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f841 	bl	8006bce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	3304      	adds	r3, #4
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	4610      	mov	r0, r2
 8006b60:	f000 fe1a 	bl	8007798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b083      	sub	sp, #12
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006bd6:	bf00      	nop
 8006bd8:	370c      	adds	r7, #12
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
	...

08006be4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b086      	sub	sp, #24
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
 8006bf0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d109      	bne.n	8006c10 <HAL_TIM_PWM_Start_DMA+0x2c>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	bf0c      	ite	eq
 8006c08:	2301      	moveq	r3, #1
 8006c0a:	2300      	movne	r3, #0
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	e03c      	b.n	8006c8a <HAL_TIM_PWM_Start_DMA+0xa6>
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	2b04      	cmp	r3, #4
 8006c14:	d109      	bne.n	8006c2a <HAL_TIM_PWM_Start_DMA+0x46>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	bf0c      	ite	eq
 8006c22:	2301      	moveq	r3, #1
 8006c24:	2300      	movne	r3, #0
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	e02f      	b.n	8006c8a <HAL_TIM_PWM_Start_DMA+0xa6>
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2b08      	cmp	r3, #8
 8006c2e:	d109      	bne.n	8006c44 <HAL_TIM_PWM_Start_DMA+0x60>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	bf0c      	ite	eq
 8006c3c:	2301      	moveq	r3, #1
 8006c3e:	2300      	movne	r3, #0
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	e022      	b.n	8006c8a <HAL_TIM_PWM_Start_DMA+0xa6>
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2b0c      	cmp	r3, #12
 8006c48:	d109      	bne.n	8006c5e <HAL_TIM_PWM_Start_DMA+0x7a>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	bf0c      	ite	eq
 8006c56:	2301      	moveq	r3, #1
 8006c58:	2300      	movne	r3, #0
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	e015      	b.n	8006c8a <HAL_TIM_PWM_Start_DMA+0xa6>
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	2b10      	cmp	r3, #16
 8006c62:	d109      	bne.n	8006c78 <HAL_TIM_PWM_Start_DMA+0x94>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	bf0c      	ite	eq
 8006c70:	2301      	moveq	r3, #1
 8006c72:	2300      	movne	r3, #0
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	e008      	b.n	8006c8a <HAL_TIM_PWM_Start_DMA+0xa6>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	bf0c      	ite	eq
 8006c84:	2301      	moveq	r3, #1
 8006c86:	2300      	movne	r3, #0
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d001      	beq.n	8006c92 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8006c8e:	2302      	movs	r3, #2
 8006c90:	e1ab      	b.n	8006fea <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d109      	bne.n	8006cac <HAL_TIM_PWM_Start_DMA+0xc8>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	bf0c      	ite	eq
 8006ca4:	2301      	moveq	r3, #1
 8006ca6:	2300      	movne	r3, #0
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	e03c      	b.n	8006d26 <HAL_TIM_PWM_Start_DMA+0x142>
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	2b04      	cmp	r3, #4
 8006cb0:	d109      	bne.n	8006cc6 <HAL_TIM_PWM_Start_DMA+0xe2>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	bf0c      	ite	eq
 8006cbe:	2301      	moveq	r3, #1
 8006cc0:	2300      	movne	r3, #0
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	e02f      	b.n	8006d26 <HAL_TIM_PWM_Start_DMA+0x142>
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2b08      	cmp	r3, #8
 8006cca:	d109      	bne.n	8006ce0 <HAL_TIM_PWM_Start_DMA+0xfc>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	bf0c      	ite	eq
 8006cd8:	2301      	moveq	r3, #1
 8006cda:	2300      	movne	r3, #0
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	e022      	b.n	8006d26 <HAL_TIM_PWM_Start_DMA+0x142>
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	2b0c      	cmp	r3, #12
 8006ce4:	d109      	bne.n	8006cfa <HAL_TIM_PWM_Start_DMA+0x116>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	bf0c      	ite	eq
 8006cf2:	2301      	moveq	r3, #1
 8006cf4:	2300      	movne	r3, #0
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	e015      	b.n	8006d26 <HAL_TIM_PWM_Start_DMA+0x142>
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	2b10      	cmp	r3, #16
 8006cfe:	d109      	bne.n	8006d14 <HAL_TIM_PWM_Start_DMA+0x130>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	bf0c      	ite	eq
 8006d0c:	2301      	moveq	r3, #1
 8006d0e:	2300      	movne	r3, #0
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	e008      	b.n	8006d26 <HAL_TIM_PWM_Start_DMA+0x142>
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	bf0c      	ite	eq
 8006d20:	2301      	moveq	r3, #1
 8006d22:	2300      	movne	r3, #0
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d034      	beq.n	8006d94 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d002      	beq.n	8006d36 <HAL_TIM_PWM_Start_DMA+0x152>
 8006d30:	887b      	ldrh	r3, [r7, #2]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d101      	bne.n	8006d3a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e157      	b.n	8006fea <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d104      	bne.n	8006d4a <HAL_TIM_PWM_Start_DMA+0x166>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2202      	movs	r2, #2
 8006d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d48:	e026      	b.n	8006d98 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	2b04      	cmp	r3, #4
 8006d4e:	d104      	bne.n	8006d5a <HAL_TIM_PWM_Start_DMA+0x176>
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2202      	movs	r2, #2
 8006d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d58:	e01e      	b.n	8006d98 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	2b08      	cmp	r3, #8
 8006d5e:	d104      	bne.n	8006d6a <HAL_TIM_PWM_Start_DMA+0x186>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2202      	movs	r2, #2
 8006d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d68:	e016      	b.n	8006d98 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	2b0c      	cmp	r3, #12
 8006d6e:	d104      	bne.n	8006d7a <HAL_TIM_PWM_Start_DMA+0x196>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2202      	movs	r2, #2
 8006d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d78:	e00e      	b.n	8006d98 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	2b10      	cmp	r3, #16
 8006d7e:	d104      	bne.n	8006d8a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2202      	movs	r2, #2
 8006d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d88:	e006      	b.n	8006d98 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d92:	e001      	b.n	8006d98 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e128      	b.n	8006fea <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	2b0c      	cmp	r3, #12
 8006d9c:	f200 80ae 	bhi.w	8006efc <HAL_TIM_PWM_Start_DMA+0x318>
 8006da0:	a201      	add	r2, pc, #4	; (adr r2, 8006da8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8006da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da6:	bf00      	nop
 8006da8:	08006ddd 	.word	0x08006ddd
 8006dac:	08006efd 	.word	0x08006efd
 8006db0:	08006efd 	.word	0x08006efd
 8006db4:	08006efd 	.word	0x08006efd
 8006db8:	08006e25 	.word	0x08006e25
 8006dbc:	08006efd 	.word	0x08006efd
 8006dc0:	08006efd 	.word	0x08006efd
 8006dc4:	08006efd 	.word	0x08006efd
 8006dc8:	08006e6d 	.word	0x08006e6d
 8006dcc:	08006efd 	.word	0x08006efd
 8006dd0:	08006efd 	.word	0x08006efd
 8006dd4:	08006efd 	.word	0x08006efd
 8006dd8:	08006eb5 	.word	0x08006eb5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de0:	4a84      	ldr	r2, [pc, #528]	; (8006ff4 <HAL_TIM_PWM_Start_DMA+0x410>)
 8006de2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de8:	4a83      	ldr	r2, [pc, #524]	; (8006ff8 <HAL_TIM_PWM_Start_DMA+0x414>)
 8006dea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df0:	4a82      	ldr	r2, [pc, #520]	; (8006ffc <HAL_TIM_PWM_Start_DMA+0x418>)
 8006df2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006df8:	6879      	ldr	r1, [r7, #4]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	3334      	adds	r3, #52	; 0x34
 8006e00:	461a      	mov	r2, r3
 8006e02:	887b      	ldrh	r3, [r7, #2]
 8006e04:	f7fd ff6a 	bl	8004cdc <HAL_DMA_Start_IT>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e0eb      	b.n	8006fea <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68da      	ldr	r2, [r3, #12]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e20:	60da      	str	r2, [r3, #12]
      break;
 8006e22:	e06e      	b.n	8006f02 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e28:	4a72      	ldr	r2, [pc, #456]	; (8006ff4 <HAL_TIM_PWM_Start_DMA+0x410>)
 8006e2a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e30:	4a71      	ldr	r2, [pc, #452]	; (8006ff8 <HAL_TIM_PWM_Start_DMA+0x414>)
 8006e32:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e38:	4a70      	ldr	r2, [pc, #448]	; (8006ffc <HAL_TIM_PWM_Start_DMA+0x418>)
 8006e3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006e40:	6879      	ldr	r1, [r7, #4]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	3338      	adds	r3, #56	; 0x38
 8006e48:	461a      	mov	r2, r3
 8006e4a:	887b      	ldrh	r3, [r7, #2]
 8006e4c:	f7fd ff46 	bl	8004cdc <HAL_DMA_Start_IT>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d001      	beq.n	8006e5a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e0c7      	b.n	8006fea <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68da      	ldr	r2, [r3, #12]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e68:	60da      	str	r2, [r3, #12]
      break;
 8006e6a:	e04a      	b.n	8006f02 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e70:	4a60      	ldr	r2, [pc, #384]	; (8006ff4 <HAL_TIM_PWM_Start_DMA+0x410>)
 8006e72:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e78:	4a5f      	ldr	r2, [pc, #380]	; (8006ff8 <HAL_TIM_PWM_Start_DMA+0x414>)
 8006e7a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e80:	4a5e      	ldr	r2, [pc, #376]	; (8006ffc <HAL_TIM_PWM_Start_DMA+0x418>)
 8006e82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006e88:	6879      	ldr	r1, [r7, #4]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	333c      	adds	r3, #60	; 0x3c
 8006e90:	461a      	mov	r2, r3
 8006e92:	887b      	ldrh	r3, [r7, #2]
 8006e94:	f7fd ff22 	bl	8004cdc <HAL_DMA_Start_IT>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d001      	beq.n	8006ea2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e0a3      	b.n	8006fea <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68da      	ldr	r2, [r3, #12]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006eb0:	60da      	str	r2, [r3, #12]
      break;
 8006eb2:	e026      	b.n	8006f02 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb8:	4a4e      	ldr	r2, [pc, #312]	; (8006ff4 <HAL_TIM_PWM_Start_DMA+0x410>)
 8006eba:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec0:	4a4d      	ldr	r2, [pc, #308]	; (8006ff8 <HAL_TIM_PWM_Start_DMA+0x414>)
 8006ec2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec8:	4a4c      	ldr	r2, [pc, #304]	; (8006ffc <HAL_TIM_PWM_Start_DMA+0x418>)
 8006eca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006ed0:	6879      	ldr	r1, [r7, #4]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3340      	adds	r3, #64	; 0x40
 8006ed8:	461a      	mov	r2, r3
 8006eda:	887b      	ldrh	r3, [r7, #2]
 8006edc:	f7fd fefe 	bl	8004cdc <HAL_DMA_Start_IT>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e07f      	b.n	8006fea <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68da      	ldr	r2, [r3, #12]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ef8:	60da      	str	r2, [r3, #12]
      break;
 8006efa:	e002      	b.n	8006f02 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	75fb      	strb	r3, [r7, #23]
      break;
 8006f00:	bf00      	nop
  }

  if (status == HAL_OK)
 8006f02:	7dfb      	ldrb	r3, [r7, #23]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d16f      	bne.n	8006fe8 <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	68b9      	ldr	r1, [r7, #8]
 8006f10:	4618      	mov	r0, r3
 8006f12:	f001 f84b 	bl	8007fac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a39      	ldr	r2, [pc, #228]	; (8007000 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d013      	beq.n	8006f48 <HAL_TIM_PWM_Start_DMA+0x364>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a37      	ldr	r2, [pc, #220]	; (8007004 <HAL_TIM_PWM_Start_DMA+0x420>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d00e      	beq.n	8006f48 <HAL_TIM_PWM_Start_DMA+0x364>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a36      	ldr	r2, [pc, #216]	; (8007008 <HAL_TIM_PWM_Start_DMA+0x424>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d009      	beq.n	8006f48 <HAL_TIM_PWM_Start_DMA+0x364>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a34      	ldr	r2, [pc, #208]	; (800700c <HAL_TIM_PWM_Start_DMA+0x428>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d004      	beq.n	8006f48 <HAL_TIM_PWM_Start_DMA+0x364>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a33      	ldr	r2, [pc, #204]	; (8007010 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d101      	bne.n	8006f4c <HAL_TIM_PWM_Start_DMA+0x368>
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e000      	b.n	8006f4e <HAL_TIM_PWM_Start_DMA+0x36a>
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d007      	beq.n	8006f62 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a26      	ldr	r2, [pc, #152]	; (8007000 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d01d      	beq.n	8006fa8 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f74:	d018      	beq.n	8006fa8 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a26      	ldr	r2, [pc, #152]	; (8007014 <HAL_TIM_PWM_Start_DMA+0x430>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d013      	beq.n	8006fa8 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a24      	ldr	r2, [pc, #144]	; (8007018 <HAL_TIM_PWM_Start_DMA+0x434>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d00e      	beq.n	8006fa8 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a23      	ldr	r2, [pc, #140]	; (800701c <HAL_TIM_PWM_Start_DMA+0x438>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d009      	beq.n	8006fa8 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a1a      	ldr	r2, [pc, #104]	; (8007004 <HAL_TIM_PWM_Start_DMA+0x420>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d004      	beq.n	8006fa8 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a19      	ldr	r2, [pc, #100]	; (8007008 <HAL_TIM_PWM_Start_DMA+0x424>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d115      	bne.n	8006fd4 <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689a      	ldr	r2, [r3, #8]
 8006fae:	4b1c      	ldr	r3, [pc, #112]	; (8007020 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	2b06      	cmp	r3, #6
 8006fb8:	d015      	beq.n	8006fe6 <HAL_TIM_PWM_Start_DMA+0x402>
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fc0:	d011      	beq.n	8006fe6 <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f042 0201 	orr.w	r2, r2, #1
 8006fd0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fd2:	e008      	b.n	8006fe6 <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f042 0201 	orr.w	r2, r2, #1
 8006fe2:	601a      	str	r2, [r3, #0]
 8006fe4:	e000      	b.n	8006fe8 <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fe6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3718      	adds	r7, #24
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	08007689 	.word	0x08007689
 8006ff8:	08007731 	.word	0x08007731
 8006ffc:	080075f7 	.word	0x080075f7
 8007000:	40012c00 	.word	0x40012c00
 8007004:	40013400 	.word	0x40013400
 8007008:	40014000 	.word	0x40014000
 800700c:	40014400 	.word	0x40014400
 8007010:	40014800 	.word	0x40014800
 8007014:	40000400 	.word	0x40000400
 8007018:	40000800 	.word	0x40000800
 800701c:	40000c00 	.word	0x40000c00
 8007020:	00010007 	.word	0x00010007

08007024 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800702e:	2300      	movs	r3, #0
 8007030:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2b0c      	cmp	r3, #12
 8007036:	d855      	bhi.n	80070e4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8007038:	a201      	add	r2, pc, #4	; (adr r2, 8007040 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800703a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703e:	bf00      	nop
 8007040:	08007075 	.word	0x08007075
 8007044:	080070e5 	.word	0x080070e5
 8007048:	080070e5 	.word	0x080070e5
 800704c:	080070e5 	.word	0x080070e5
 8007050:	08007091 	.word	0x08007091
 8007054:	080070e5 	.word	0x080070e5
 8007058:	080070e5 	.word	0x080070e5
 800705c:	080070e5 	.word	0x080070e5
 8007060:	080070ad 	.word	0x080070ad
 8007064:	080070e5 	.word	0x080070e5
 8007068:	080070e5 	.word	0x080070e5
 800706c:	080070e5 	.word	0x080070e5
 8007070:	080070c9 	.word	0x080070c9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68da      	ldr	r2, [r3, #12]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007082:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007088:	4618      	mov	r0, r3
 800708a:	f7fd fe87 	bl	8004d9c <HAL_DMA_Abort_IT>
      break;
 800708e:	e02c      	b.n	80070ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68da      	ldr	r2, [r3, #12]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800709e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7fd fe79 	bl	8004d9c <HAL_DMA_Abort_IT>
      break;
 80070aa:	e01e      	b.n	80070ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68da      	ldr	r2, [r3, #12]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070ba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7fd fe6b 	bl	8004d9c <HAL_DMA_Abort_IT>
      break;
 80070c6:	e010      	b.n	80070ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68da      	ldr	r2, [r3, #12]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80070d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070dc:	4618      	mov	r0, r3
 80070de:	f7fd fe5d 	bl	8004d9c <HAL_DMA_Abort_IT>
      break;
 80070e2:	e002      	b.n	80070ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	73fb      	strb	r3, [r7, #15]
      break;
 80070e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80070ea:	7bfb      	ldrb	r3, [r7, #15]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f040 8081 	bne.w	80071f4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2200      	movs	r2, #0
 80070f8:	6839      	ldr	r1, [r7, #0]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f000 ff56 	bl	8007fac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a3e      	ldr	r2, [pc, #248]	; (8007200 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d013      	beq.n	8007132 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a3d      	ldr	r2, [pc, #244]	; (8007204 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d00e      	beq.n	8007132 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a3b      	ldr	r2, [pc, #236]	; (8007208 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d009      	beq.n	8007132 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a3a      	ldr	r2, [pc, #232]	; (800720c <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d004      	beq.n	8007132 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a38      	ldr	r2, [pc, #224]	; (8007210 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d101      	bne.n	8007136 <HAL_TIM_PWM_Stop_DMA+0x112>
 8007132:	2301      	movs	r3, #1
 8007134:	e000      	b.n	8007138 <HAL_TIM_PWM_Stop_DMA+0x114>
 8007136:	2300      	movs	r3, #0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d017      	beq.n	800716c <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	6a1a      	ldr	r2, [r3, #32]
 8007142:	f241 1311 	movw	r3, #4369	; 0x1111
 8007146:	4013      	ands	r3, r2
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10f      	bne.n	800716c <HAL_TIM_PWM_Stop_DMA+0x148>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6a1a      	ldr	r2, [r3, #32]
 8007152:	f240 4344 	movw	r3, #1092	; 0x444
 8007156:	4013      	ands	r3, r2
 8007158:	2b00      	cmp	r3, #0
 800715a:	d107      	bne.n	800716c <HAL_TIM_PWM_Stop_DMA+0x148>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800716a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6a1a      	ldr	r2, [r3, #32]
 8007172:	f241 1311 	movw	r3, #4369	; 0x1111
 8007176:	4013      	ands	r3, r2
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10f      	bne.n	800719c <HAL_TIM_PWM_Stop_DMA+0x178>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6a1a      	ldr	r2, [r3, #32]
 8007182:	f240 4344 	movw	r3, #1092	; 0x444
 8007186:	4013      	ands	r3, r2
 8007188:	2b00      	cmp	r3, #0
 800718a:	d107      	bne.n	800719c <HAL_TIM_PWM_Stop_DMA+0x178>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f022 0201 	bic.w	r2, r2, #1
 800719a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d104      	bne.n	80071ac <HAL_TIM_PWM_Stop_DMA+0x188>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071aa:	e023      	b.n	80071f4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	2b04      	cmp	r3, #4
 80071b0:	d104      	bne.n	80071bc <HAL_TIM_PWM_Stop_DMA+0x198>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071ba:	e01b      	b.n	80071f4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	2b08      	cmp	r3, #8
 80071c0:	d104      	bne.n	80071cc <HAL_TIM_PWM_Stop_DMA+0x1a8>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071ca:	e013      	b.n	80071f4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	2b0c      	cmp	r3, #12
 80071d0:	d104      	bne.n	80071dc <HAL_TIM_PWM_Stop_DMA+0x1b8>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071da:	e00b      	b.n	80071f4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	2b10      	cmp	r3, #16
 80071e0:	d104      	bne.n	80071ec <HAL_TIM_PWM_Stop_DMA+0x1c8>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071ea:	e003      	b.n	80071f4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80071f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	40012c00 	.word	0x40012c00
 8007204:	40013400 	.word	0x40013400
 8007208:	40014000 	.word	0x40014000
 800720c:	40014400 	.word	0x40014400
 8007210:	40014800 	.word	0x40014800

08007214 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007220:	2300      	movs	r3, #0
 8007222:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800722a:	2b01      	cmp	r3, #1
 800722c:	d101      	bne.n	8007232 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800722e:	2302      	movs	r3, #2
 8007230:	e0ff      	b.n	8007432 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2b14      	cmp	r3, #20
 800723e:	f200 80f0 	bhi.w	8007422 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007242:	a201      	add	r2, pc, #4	; (adr r2, 8007248 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007248:	0800729d 	.word	0x0800729d
 800724c:	08007423 	.word	0x08007423
 8007250:	08007423 	.word	0x08007423
 8007254:	08007423 	.word	0x08007423
 8007258:	080072dd 	.word	0x080072dd
 800725c:	08007423 	.word	0x08007423
 8007260:	08007423 	.word	0x08007423
 8007264:	08007423 	.word	0x08007423
 8007268:	0800731f 	.word	0x0800731f
 800726c:	08007423 	.word	0x08007423
 8007270:	08007423 	.word	0x08007423
 8007274:	08007423 	.word	0x08007423
 8007278:	0800735f 	.word	0x0800735f
 800727c:	08007423 	.word	0x08007423
 8007280:	08007423 	.word	0x08007423
 8007284:	08007423 	.word	0x08007423
 8007288:	080073a1 	.word	0x080073a1
 800728c:	08007423 	.word	0x08007423
 8007290:	08007423 	.word	0x08007423
 8007294:	08007423 	.word	0x08007423
 8007298:	080073e1 	.word	0x080073e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68b9      	ldr	r1, [r7, #8]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f000 fb12 	bl	80078cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	699a      	ldr	r2, [r3, #24]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f042 0208 	orr.w	r2, r2, #8
 80072b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	699a      	ldr	r2, [r3, #24]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f022 0204 	bic.w	r2, r2, #4
 80072c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6999      	ldr	r1, [r3, #24]
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	691a      	ldr	r2, [r3, #16]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	430a      	orrs	r2, r1
 80072d8:	619a      	str	r2, [r3, #24]
      break;
 80072da:	e0a5      	b.n	8007428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	68b9      	ldr	r1, [r7, #8]
 80072e2:	4618      	mov	r0, r3
 80072e4:	f000 fb82 	bl	80079ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	699a      	ldr	r2, [r3, #24]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	699a      	ldr	r2, [r3, #24]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6999      	ldr	r1, [r3, #24]
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	021a      	lsls	r2, r3, #8
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	430a      	orrs	r2, r1
 800731a:	619a      	str	r2, [r3, #24]
      break;
 800731c:	e084      	b.n	8007428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68b9      	ldr	r1, [r7, #8]
 8007324:	4618      	mov	r0, r3
 8007326:	f000 fbeb 	bl	8007b00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	69da      	ldr	r2, [r3, #28]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f042 0208 	orr.w	r2, r2, #8
 8007338:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	69da      	ldr	r2, [r3, #28]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f022 0204 	bic.w	r2, r2, #4
 8007348:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	69d9      	ldr	r1, [r3, #28]
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	691a      	ldr	r2, [r3, #16]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	430a      	orrs	r2, r1
 800735a:	61da      	str	r2, [r3, #28]
      break;
 800735c:	e064      	b.n	8007428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68b9      	ldr	r1, [r7, #8]
 8007364:	4618      	mov	r0, r3
 8007366:	f000 fc53 	bl	8007c10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	69da      	ldr	r2, [r3, #28]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007378:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	69da      	ldr	r2, [r3, #28]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	69d9      	ldr	r1, [r3, #28]
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	021a      	lsls	r2, r3, #8
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	430a      	orrs	r2, r1
 800739c:	61da      	str	r2, [r3, #28]
      break;
 800739e:	e043      	b.n	8007428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68b9      	ldr	r1, [r7, #8]
 80073a6:	4618      	mov	r0, r3
 80073a8:	f000 fc9c 	bl	8007ce4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f042 0208 	orr.w	r2, r2, #8
 80073ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f022 0204 	bic.w	r2, r2, #4
 80073ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	691a      	ldr	r2, [r3, #16]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	430a      	orrs	r2, r1
 80073dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80073de:	e023      	b.n	8007428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68b9      	ldr	r1, [r7, #8]
 80073e6:	4618      	mov	r0, r3
 80073e8:	f000 fce0 	bl	8007dac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800740a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	021a      	lsls	r2, r3, #8
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	430a      	orrs	r2, r1
 800741e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007420:	e002      	b.n	8007428 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	75fb      	strb	r3, [r7, #23]
      break;
 8007426:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2200      	movs	r2, #0
 800742c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007430:	7dfb      	ldrb	r3, [r7, #23]
}
 8007432:	4618      	mov	r0, r3
 8007434:	3718      	adds	r7, #24
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop

0800743c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007446:	2300      	movs	r3, #0
 8007448:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007450:	2b01      	cmp	r3, #1
 8007452:	d101      	bne.n	8007458 <HAL_TIM_ConfigClockSource+0x1c>
 8007454:	2302      	movs	r3, #2
 8007456:	e0b6      	b.n	80075c6 <HAL_TIM_ConfigClockSource+0x18a>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2202      	movs	r2, #2
 8007464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007476:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800747a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007482:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68ba      	ldr	r2, [r7, #8]
 800748a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007494:	d03e      	beq.n	8007514 <HAL_TIM_ConfigClockSource+0xd8>
 8007496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800749a:	f200 8087 	bhi.w	80075ac <HAL_TIM_ConfigClockSource+0x170>
 800749e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074a2:	f000 8086 	beq.w	80075b2 <HAL_TIM_ConfigClockSource+0x176>
 80074a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074aa:	d87f      	bhi.n	80075ac <HAL_TIM_ConfigClockSource+0x170>
 80074ac:	2b70      	cmp	r3, #112	; 0x70
 80074ae:	d01a      	beq.n	80074e6 <HAL_TIM_ConfigClockSource+0xaa>
 80074b0:	2b70      	cmp	r3, #112	; 0x70
 80074b2:	d87b      	bhi.n	80075ac <HAL_TIM_ConfigClockSource+0x170>
 80074b4:	2b60      	cmp	r3, #96	; 0x60
 80074b6:	d050      	beq.n	800755a <HAL_TIM_ConfigClockSource+0x11e>
 80074b8:	2b60      	cmp	r3, #96	; 0x60
 80074ba:	d877      	bhi.n	80075ac <HAL_TIM_ConfigClockSource+0x170>
 80074bc:	2b50      	cmp	r3, #80	; 0x50
 80074be:	d03c      	beq.n	800753a <HAL_TIM_ConfigClockSource+0xfe>
 80074c0:	2b50      	cmp	r3, #80	; 0x50
 80074c2:	d873      	bhi.n	80075ac <HAL_TIM_ConfigClockSource+0x170>
 80074c4:	2b40      	cmp	r3, #64	; 0x40
 80074c6:	d058      	beq.n	800757a <HAL_TIM_ConfigClockSource+0x13e>
 80074c8:	2b40      	cmp	r3, #64	; 0x40
 80074ca:	d86f      	bhi.n	80075ac <HAL_TIM_ConfigClockSource+0x170>
 80074cc:	2b30      	cmp	r3, #48	; 0x30
 80074ce:	d064      	beq.n	800759a <HAL_TIM_ConfigClockSource+0x15e>
 80074d0:	2b30      	cmp	r3, #48	; 0x30
 80074d2:	d86b      	bhi.n	80075ac <HAL_TIM_ConfigClockSource+0x170>
 80074d4:	2b20      	cmp	r3, #32
 80074d6:	d060      	beq.n	800759a <HAL_TIM_ConfigClockSource+0x15e>
 80074d8:	2b20      	cmp	r3, #32
 80074da:	d867      	bhi.n	80075ac <HAL_TIM_ConfigClockSource+0x170>
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d05c      	beq.n	800759a <HAL_TIM_ConfigClockSource+0x15e>
 80074e0:	2b10      	cmp	r3, #16
 80074e2:	d05a      	beq.n	800759a <HAL_TIM_ConfigClockSource+0x15e>
 80074e4:	e062      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6818      	ldr	r0, [r3, #0]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	6899      	ldr	r1, [r3, #8]
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	685a      	ldr	r2, [r3, #4]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	f000 fd39 	bl	8007f6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007508:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68ba      	ldr	r2, [r7, #8]
 8007510:	609a      	str	r2, [r3, #8]
      break;
 8007512:	e04f      	b.n	80075b4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6818      	ldr	r0, [r3, #0]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	6899      	ldr	r1, [r3, #8]
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	685a      	ldr	r2, [r3, #4]
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	f000 fd22 	bl	8007f6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	689a      	ldr	r2, [r3, #8]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007536:	609a      	str	r2, [r3, #8]
      break;
 8007538:	e03c      	b.n	80075b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6818      	ldr	r0, [r3, #0]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	6859      	ldr	r1, [r3, #4]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	461a      	mov	r2, r3
 8007548:	f000 fc96 	bl	8007e78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2150      	movs	r1, #80	; 0x50
 8007552:	4618      	mov	r0, r3
 8007554:	f000 fcef 	bl	8007f36 <TIM_ITRx_SetConfig>
      break;
 8007558:	e02c      	b.n	80075b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6818      	ldr	r0, [r3, #0]
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	6859      	ldr	r1, [r3, #4]
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	461a      	mov	r2, r3
 8007568:	f000 fcb5 	bl	8007ed6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2160      	movs	r1, #96	; 0x60
 8007572:	4618      	mov	r0, r3
 8007574:	f000 fcdf 	bl	8007f36 <TIM_ITRx_SetConfig>
      break;
 8007578:	e01c      	b.n	80075b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6818      	ldr	r0, [r3, #0]
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	6859      	ldr	r1, [r3, #4]
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	461a      	mov	r2, r3
 8007588:	f000 fc76 	bl	8007e78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2140      	movs	r1, #64	; 0x40
 8007592:	4618      	mov	r0, r3
 8007594:	f000 fccf 	bl	8007f36 <TIM_ITRx_SetConfig>
      break;
 8007598:	e00c      	b.n	80075b4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4619      	mov	r1, r3
 80075a4:	4610      	mov	r0, r2
 80075a6:	f000 fcc6 	bl	8007f36 <TIM_ITRx_SetConfig>
      break;
 80075aa:	e003      	b.n	80075b4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	73fb      	strb	r3, [r7, #15]
      break;
 80075b0:	e000      	b.n	80075b4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80075b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b083      	sub	sp, #12
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80075d6:	bf00      	nop
 80075d8:	370c      	adds	r7, #12
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr

080075e2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80075e2:	b480      	push	{r7}
 80075e4:	b083      	sub	sp, #12
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80075ea:	bf00      	nop
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b084      	sub	sp, #16
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007602:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	429a      	cmp	r2, r3
 800760c:	d107      	bne.n	800761e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2201      	movs	r2, #1
 8007612:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800761c:	e02a      	b.n	8007674 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	429a      	cmp	r2, r3
 8007626:	d107      	bne.n	8007638 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2202      	movs	r2, #2
 800762c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007636:	e01d      	b.n	8007674 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	429a      	cmp	r2, r3
 8007640:	d107      	bne.n	8007652 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2204      	movs	r2, #4
 8007646:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007650:	e010      	b.n	8007674 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	429a      	cmp	r2, r3
 800765a:	d107      	bne.n	800766c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2208      	movs	r2, #8
 8007660:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800766a:	e003      	b.n	8007674 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f7ff ffb4 	bl	80075e2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	771a      	strb	r2, [r3, #28]
}
 8007680:	bf00      	nop
 8007682:	3710      	adds	r7, #16
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007694:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	429a      	cmp	r2, r3
 800769e:	d10b      	bne.n	80076b8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2201      	movs	r2, #1
 80076a4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	69db      	ldr	r3, [r3, #28]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d136      	bne.n	800771c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076b6:	e031      	b.n	800771c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d10b      	bne.n	80076da <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2202      	movs	r2, #2
 80076c6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	69db      	ldr	r3, [r3, #28]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d125      	bne.n	800771c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076d8:	e020      	b.n	800771c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d10b      	bne.n	80076fc <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2204      	movs	r2, #4
 80076e8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	69db      	ldr	r3, [r3, #28]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d114      	bne.n	800771c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2201      	movs	r2, #1
 80076f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076fa:	e00f      	b.n	800771c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	429a      	cmp	r2, r3
 8007704:	d10a      	bne.n	800771c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2208      	movs	r2, #8
 800770a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	69db      	ldr	r3, [r3, #28]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d103      	bne.n	800771c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f7fa fc4f 	bl	8001fc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	771a      	strb	r2, [r3, #28]
}
 8007728:	bf00      	nop
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	429a      	cmp	r2, r3
 8007746:	d103      	bne.n	8007750 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2201      	movs	r2, #1
 800774c:	771a      	strb	r2, [r3, #28]
 800774e:	e019      	b.n	8007784 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	429a      	cmp	r2, r3
 8007758:	d103      	bne.n	8007762 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2202      	movs	r2, #2
 800775e:	771a      	strb	r2, [r3, #28]
 8007760:	e010      	b.n	8007784 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	429a      	cmp	r2, r3
 800776a:	d103      	bne.n	8007774 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2204      	movs	r2, #4
 8007770:	771a      	strb	r2, [r3, #28]
 8007772:	e007      	b.n	8007784 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	429a      	cmp	r2, r3
 800777c:	d102      	bne.n	8007784 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2208      	movs	r2, #8
 8007782:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f7ff ff22 	bl	80075ce <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	771a      	strb	r2, [r3, #28]
}
 8007790:	bf00      	nop
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4a40      	ldr	r2, [pc, #256]	; (80078ac <TIM_Base_SetConfig+0x114>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d013      	beq.n	80077d8 <TIM_Base_SetConfig+0x40>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077b6:	d00f      	beq.n	80077d8 <TIM_Base_SetConfig+0x40>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a3d      	ldr	r2, [pc, #244]	; (80078b0 <TIM_Base_SetConfig+0x118>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d00b      	beq.n	80077d8 <TIM_Base_SetConfig+0x40>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a3c      	ldr	r2, [pc, #240]	; (80078b4 <TIM_Base_SetConfig+0x11c>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d007      	beq.n	80077d8 <TIM_Base_SetConfig+0x40>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a3b      	ldr	r2, [pc, #236]	; (80078b8 <TIM_Base_SetConfig+0x120>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d003      	beq.n	80077d8 <TIM_Base_SetConfig+0x40>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a3a      	ldr	r2, [pc, #232]	; (80078bc <TIM_Base_SetConfig+0x124>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d108      	bne.n	80077ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a2f      	ldr	r2, [pc, #188]	; (80078ac <TIM_Base_SetConfig+0x114>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d01f      	beq.n	8007832 <TIM_Base_SetConfig+0x9a>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077f8:	d01b      	beq.n	8007832 <TIM_Base_SetConfig+0x9a>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a2c      	ldr	r2, [pc, #176]	; (80078b0 <TIM_Base_SetConfig+0x118>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d017      	beq.n	8007832 <TIM_Base_SetConfig+0x9a>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a2b      	ldr	r2, [pc, #172]	; (80078b4 <TIM_Base_SetConfig+0x11c>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d013      	beq.n	8007832 <TIM_Base_SetConfig+0x9a>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a2a      	ldr	r2, [pc, #168]	; (80078b8 <TIM_Base_SetConfig+0x120>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d00f      	beq.n	8007832 <TIM_Base_SetConfig+0x9a>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a29      	ldr	r2, [pc, #164]	; (80078bc <TIM_Base_SetConfig+0x124>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d00b      	beq.n	8007832 <TIM_Base_SetConfig+0x9a>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a28      	ldr	r2, [pc, #160]	; (80078c0 <TIM_Base_SetConfig+0x128>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d007      	beq.n	8007832 <TIM_Base_SetConfig+0x9a>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a27      	ldr	r2, [pc, #156]	; (80078c4 <TIM_Base_SetConfig+0x12c>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d003      	beq.n	8007832 <TIM_Base_SetConfig+0x9a>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a26      	ldr	r2, [pc, #152]	; (80078c8 <TIM_Base_SetConfig+0x130>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d108      	bne.n	8007844 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	4313      	orrs	r3, r2
 8007842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	4313      	orrs	r3, r2
 8007850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	689a      	ldr	r2, [r3, #8]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a10      	ldr	r2, [pc, #64]	; (80078ac <TIM_Base_SetConfig+0x114>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d00f      	beq.n	8007890 <TIM_Base_SetConfig+0xf8>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a12      	ldr	r2, [pc, #72]	; (80078bc <TIM_Base_SetConfig+0x124>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d00b      	beq.n	8007890 <TIM_Base_SetConfig+0xf8>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a11      	ldr	r2, [pc, #68]	; (80078c0 <TIM_Base_SetConfig+0x128>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d007      	beq.n	8007890 <TIM_Base_SetConfig+0xf8>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a10      	ldr	r2, [pc, #64]	; (80078c4 <TIM_Base_SetConfig+0x12c>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d003      	beq.n	8007890 <TIM_Base_SetConfig+0xf8>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a0f      	ldr	r2, [pc, #60]	; (80078c8 <TIM_Base_SetConfig+0x130>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d103      	bne.n	8007898 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	691a      	ldr	r2, [r3, #16]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	615a      	str	r2, [r3, #20]
}
 800789e:	bf00      	nop
 80078a0:	3714      	adds	r7, #20
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	40012c00 	.word	0x40012c00
 80078b0:	40000400 	.word	0x40000400
 80078b4:	40000800 	.word	0x40000800
 80078b8:	40000c00 	.word	0x40000c00
 80078bc:	40013400 	.word	0x40013400
 80078c0:	40014000 	.word	0x40014000
 80078c4:	40014400 	.word	0x40014400
 80078c8:	40014800 	.word	0x40014800

080078cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b087      	sub	sp, #28
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a1b      	ldr	r3, [r3, #32]
 80078da:	f023 0201 	bic.w	r2, r3, #1
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	699b      	ldr	r3, [r3, #24]
 80078f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f023 0303 	bic.w	r3, r3, #3
 8007906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	4313      	orrs	r3, r2
 8007910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	f023 0302 	bic.w	r3, r3, #2
 8007918:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	697a      	ldr	r2, [r7, #20]
 8007920:	4313      	orrs	r3, r2
 8007922:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a2c      	ldr	r2, [pc, #176]	; (80079d8 <TIM_OC1_SetConfig+0x10c>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d00f      	beq.n	800794c <TIM_OC1_SetConfig+0x80>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a2b      	ldr	r2, [pc, #172]	; (80079dc <TIM_OC1_SetConfig+0x110>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d00b      	beq.n	800794c <TIM_OC1_SetConfig+0x80>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a2a      	ldr	r2, [pc, #168]	; (80079e0 <TIM_OC1_SetConfig+0x114>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d007      	beq.n	800794c <TIM_OC1_SetConfig+0x80>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a29      	ldr	r2, [pc, #164]	; (80079e4 <TIM_OC1_SetConfig+0x118>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d003      	beq.n	800794c <TIM_OC1_SetConfig+0x80>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a28      	ldr	r2, [pc, #160]	; (80079e8 <TIM_OC1_SetConfig+0x11c>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d10c      	bne.n	8007966 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	f023 0308 	bic.w	r3, r3, #8
 8007952:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	697a      	ldr	r2, [r7, #20]
 800795a:	4313      	orrs	r3, r2
 800795c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	f023 0304 	bic.w	r3, r3, #4
 8007964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a1b      	ldr	r2, [pc, #108]	; (80079d8 <TIM_OC1_SetConfig+0x10c>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d00f      	beq.n	800798e <TIM_OC1_SetConfig+0xc2>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a1a      	ldr	r2, [pc, #104]	; (80079dc <TIM_OC1_SetConfig+0x110>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d00b      	beq.n	800798e <TIM_OC1_SetConfig+0xc2>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a19      	ldr	r2, [pc, #100]	; (80079e0 <TIM_OC1_SetConfig+0x114>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d007      	beq.n	800798e <TIM_OC1_SetConfig+0xc2>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a18      	ldr	r2, [pc, #96]	; (80079e4 <TIM_OC1_SetConfig+0x118>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d003      	beq.n	800798e <TIM_OC1_SetConfig+0xc2>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a17      	ldr	r2, [pc, #92]	; (80079e8 <TIM_OC1_SetConfig+0x11c>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d111      	bne.n	80079b2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007994:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800799c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	693a      	ldr	r2, [r7, #16]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	699b      	ldr	r3, [r3, #24]
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	685a      	ldr	r2, [r3, #4]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	621a      	str	r2, [r3, #32]
}
 80079cc:	bf00      	nop
 80079ce:	371c      	adds	r7, #28
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr
 80079d8:	40012c00 	.word	0x40012c00
 80079dc:	40013400 	.word	0x40013400
 80079e0:	40014000 	.word	0x40014000
 80079e4:	40014400 	.word	0x40014400
 80079e8:	40014800 	.word	0x40014800

080079ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b087      	sub	sp, #28
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a1b      	ldr	r3, [r3, #32]
 80079fa:	f023 0210 	bic.w	r2, r3, #16
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a1b      	ldr	r3, [r3, #32]
 8007a06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	021b      	lsls	r3, r3, #8
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	f023 0320 	bic.w	r3, r3, #32
 8007a3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	011b      	lsls	r3, r3, #4
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4a28      	ldr	r2, [pc, #160]	; (8007aec <TIM_OC2_SetConfig+0x100>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d003      	beq.n	8007a58 <TIM_OC2_SetConfig+0x6c>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a27      	ldr	r2, [pc, #156]	; (8007af0 <TIM_OC2_SetConfig+0x104>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d10d      	bne.n	8007a74 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	011b      	lsls	r3, r3, #4
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a1d      	ldr	r2, [pc, #116]	; (8007aec <TIM_OC2_SetConfig+0x100>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d00f      	beq.n	8007a9c <TIM_OC2_SetConfig+0xb0>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a1c      	ldr	r2, [pc, #112]	; (8007af0 <TIM_OC2_SetConfig+0x104>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d00b      	beq.n	8007a9c <TIM_OC2_SetConfig+0xb0>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a1b      	ldr	r2, [pc, #108]	; (8007af4 <TIM_OC2_SetConfig+0x108>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d007      	beq.n	8007a9c <TIM_OC2_SetConfig+0xb0>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a1a      	ldr	r2, [pc, #104]	; (8007af8 <TIM_OC2_SetConfig+0x10c>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d003      	beq.n	8007a9c <TIM_OC2_SetConfig+0xb0>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a19      	ldr	r2, [pc, #100]	; (8007afc <TIM_OC2_SetConfig+0x110>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d113      	bne.n	8007ac4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007aa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	695b      	ldr	r3, [r3, #20]
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	693a      	ldr	r2, [r7, #16]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	693a      	ldr	r2, [r7, #16]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	693a      	ldr	r2, [r7, #16]
 8007ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	685a      	ldr	r2, [r3, #4]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	697a      	ldr	r2, [r7, #20]
 8007adc:	621a      	str	r2, [r3, #32]
}
 8007ade:	bf00      	nop
 8007ae0:	371c      	adds	r7, #28
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	40012c00 	.word	0x40012c00
 8007af0:	40013400 	.word	0x40013400
 8007af4:	40014000 	.word	0x40014000
 8007af8:	40014400 	.word	0x40014400
 8007afc:	40014800 	.word	0x40014800

08007b00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b087      	sub	sp, #28
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a1b      	ldr	r3, [r3, #32]
 8007b1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	69db      	ldr	r3, [r3, #28]
 8007b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f023 0303 	bic.w	r3, r3, #3
 8007b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	021b      	lsls	r3, r3, #8
 8007b54:	697a      	ldr	r2, [r7, #20]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a27      	ldr	r2, [pc, #156]	; (8007bfc <TIM_OC3_SetConfig+0xfc>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d003      	beq.n	8007b6a <TIM_OC3_SetConfig+0x6a>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a26      	ldr	r2, [pc, #152]	; (8007c00 <TIM_OC3_SetConfig+0x100>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d10d      	bne.n	8007b86 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	021b      	lsls	r3, r3, #8
 8007b78:	697a      	ldr	r2, [r7, #20]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a1c      	ldr	r2, [pc, #112]	; (8007bfc <TIM_OC3_SetConfig+0xfc>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d00f      	beq.n	8007bae <TIM_OC3_SetConfig+0xae>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a1b      	ldr	r2, [pc, #108]	; (8007c00 <TIM_OC3_SetConfig+0x100>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d00b      	beq.n	8007bae <TIM_OC3_SetConfig+0xae>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a1a      	ldr	r2, [pc, #104]	; (8007c04 <TIM_OC3_SetConfig+0x104>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d007      	beq.n	8007bae <TIM_OC3_SetConfig+0xae>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a19      	ldr	r2, [pc, #100]	; (8007c08 <TIM_OC3_SetConfig+0x108>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d003      	beq.n	8007bae <TIM_OC3_SetConfig+0xae>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a18      	ldr	r2, [pc, #96]	; (8007c0c <TIM_OC3_SetConfig+0x10c>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d113      	bne.n	8007bd6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	695b      	ldr	r3, [r3, #20]
 8007bc2:	011b      	lsls	r3, r3, #4
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	011b      	lsls	r3, r3, #4
 8007bd0:	693a      	ldr	r2, [r7, #16]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	685a      	ldr	r2, [r3, #4]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	621a      	str	r2, [r3, #32]
}
 8007bf0:	bf00      	nop
 8007bf2:	371c      	adds	r7, #28
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr
 8007bfc:	40012c00 	.word	0x40012c00
 8007c00:	40013400 	.word	0x40013400
 8007c04:	40014000 	.word	0x40014000
 8007c08:	40014400 	.word	0x40014400
 8007c0c:	40014800 	.word	0x40014800

08007c10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b087      	sub	sp, #28
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a1b      	ldr	r3, [r3, #32]
 8007c1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a1b      	ldr	r3, [r3, #32]
 8007c2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	69db      	ldr	r3, [r3, #28]
 8007c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	021b      	lsls	r3, r3, #8
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	031b      	lsls	r3, r3, #12
 8007c66:	693a      	ldr	r2, [r7, #16]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a18      	ldr	r2, [pc, #96]	; (8007cd0 <TIM_OC4_SetConfig+0xc0>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d00f      	beq.n	8007c94 <TIM_OC4_SetConfig+0x84>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a17      	ldr	r2, [pc, #92]	; (8007cd4 <TIM_OC4_SetConfig+0xc4>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d00b      	beq.n	8007c94 <TIM_OC4_SetConfig+0x84>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a16      	ldr	r2, [pc, #88]	; (8007cd8 <TIM_OC4_SetConfig+0xc8>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d007      	beq.n	8007c94 <TIM_OC4_SetConfig+0x84>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a15      	ldr	r2, [pc, #84]	; (8007cdc <TIM_OC4_SetConfig+0xcc>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d003      	beq.n	8007c94 <TIM_OC4_SetConfig+0x84>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a14      	ldr	r2, [pc, #80]	; (8007ce0 <TIM_OC4_SetConfig+0xd0>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d109      	bne.n	8007ca8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	695b      	ldr	r3, [r3, #20]
 8007ca0:	019b      	lsls	r3, r3, #6
 8007ca2:	697a      	ldr	r2, [r7, #20]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	697a      	ldr	r2, [r7, #20]
 8007cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	685a      	ldr	r2, [r3, #4]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	693a      	ldr	r2, [r7, #16]
 8007cc0:	621a      	str	r2, [r3, #32]
}
 8007cc2:	bf00      	nop
 8007cc4:	371c      	adds	r7, #28
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	40012c00 	.word	0x40012c00
 8007cd4:	40013400 	.word	0x40013400
 8007cd8:	40014000 	.word	0x40014000
 8007cdc:	40014400 	.word	0x40014400
 8007ce0:	40014800 	.word	0x40014800

08007ce4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b087      	sub	sp, #28
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a1b      	ldr	r3, [r3, #32]
 8007cf2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007d28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	041b      	lsls	r3, r3, #16
 8007d30:	693a      	ldr	r2, [r7, #16]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a17      	ldr	r2, [pc, #92]	; (8007d98 <TIM_OC5_SetConfig+0xb4>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d00f      	beq.n	8007d5e <TIM_OC5_SetConfig+0x7a>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a16      	ldr	r2, [pc, #88]	; (8007d9c <TIM_OC5_SetConfig+0xb8>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d00b      	beq.n	8007d5e <TIM_OC5_SetConfig+0x7a>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a15      	ldr	r2, [pc, #84]	; (8007da0 <TIM_OC5_SetConfig+0xbc>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d007      	beq.n	8007d5e <TIM_OC5_SetConfig+0x7a>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4a14      	ldr	r2, [pc, #80]	; (8007da4 <TIM_OC5_SetConfig+0xc0>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d003      	beq.n	8007d5e <TIM_OC5_SetConfig+0x7a>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a13      	ldr	r2, [pc, #76]	; (8007da8 <TIM_OC5_SetConfig+0xc4>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d109      	bne.n	8007d72 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	695b      	ldr	r3, [r3, #20]
 8007d6a:	021b      	lsls	r3, r3, #8
 8007d6c:	697a      	ldr	r2, [r7, #20]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	697a      	ldr	r2, [r7, #20]
 8007d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	685a      	ldr	r2, [r3, #4]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	693a      	ldr	r2, [r7, #16]
 8007d8a:	621a      	str	r2, [r3, #32]
}
 8007d8c:	bf00      	nop
 8007d8e:	371c      	adds	r7, #28
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr
 8007d98:	40012c00 	.word	0x40012c00
 8007d9c:	40013400 	.word	0x40013400
 8007da0:	40014000 	.word	0x40014000
 8007da4:	40014400 	.word	0x40014400
 8007da8:	40014800 	.word	0x40014800

08007dac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b087      	sub	sp, #28
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a1b      	ldr	r3, [r3, #32]
 8007dba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	021b      	lsls	r3, r3, #8
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007df2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	051b      	lsls	r3, r3, #20
 8007dfa:	693a      	ldr	r2, [r7, #16]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a18      	ldr	r2, [pc, #96]	; (8007e64 <TIM_OC6_SetConfig+0xb8>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d00f      	beq.n	8007e28 <TIM_OC6_SetConfig+0x7c>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a17      	ldr	r2, [pc, #92]	; (8007e68 <TIM_OC6_SetConfig+0xbc>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d00b      	beq.n	8007e28 <TIM_OC6_SetConfig+0x7c>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a16      	ldr	r2, [pc, #88]	; (8007e6c <TIM_OC6_SetConfig+0xc0>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d007      	beq.n	8007e28 <TIM_OC6_SetConfig+0x7c>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a15      	ldr	r2, [pc, #84]	; (8007e70 <TIM_OC6_SetConfig+0xc4>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d003      	beq.n	8007e28 <TIM_OC6_SetConfig+0x7c>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a14      	ldr	r2, [pc, #80]	; (8007e74 <TIM_OC6_SetConfig+0xc8>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d109      	bne.n	8007e3c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	695b      	ldr	r3, [r3, #20]
 8007e34:	029b      	lsls	r3, r3, #10
 8007e36:	697a      	ldr	r2, [r7, #20]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	697a      	ldr	r2, [r7, #20]
 8007e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	685a      	ldr	r2, [r3, #4]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	693a      	ldr	r2, [r7, #16]
 8007e54:	621a      	str	r2, [r3, #32]
}
 8007e56:	bf00      	nop
 8007e58:	371c      	adds	r7, #28
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	40012c00 	.word	0x40012c00
 8007e68:	40013400 	.word	0x40013400
 8007e6c:	40014000 	.word	0x40014000
 8007e70:	40014400 	.word	0x40014400
 8007e74:	40014800 	.word	0x40014800

08007e78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b087      	sub	sp, #28
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6a1b      	ldr	r3, [r3, #32]
 8007e88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6a1b      	ldr	r3, [r3, #32]
 8007e8e:	f023 0201 	bic.w	r2, r3, #1
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	699b      	ldr	r3, [r3, #24]
 8007e9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ea2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	011b      	lsls	r3, r3, #4
 8007ea8:	693a      	ldr	r2, [r7, #16]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	f023 030a 	bic.w	r3, r3, #10
 8007eb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007eb6:	697a      	ldr	r2, [r7, #20]
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	697a      	ldr	r2, [r7, #20]
 8007ec8:	621a      	str	r2, [r3, #32]
}
 8007eca:	bf00      	nop
 8007ecc:	371c      	adds	r7, #28
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b087      	sub	sp, #28
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	60f8      	str	r0, [r7, #12]
 8007ede:	60b9      	str	r1, [r7, #8]
 8007ee0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	f023 0210 	bic.w	r2, r3, #16
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6a1b      	ldr	r3, [r3, #32]
 8007ef8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	031b      	lsls	r3, r3, #12
 8007f06:	697a      	ldr	r2, [r7, #20]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	011b      	lsls	r3, r3, #4
 8007f18:	693a      	ldr	r2, [r7, #16]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	697a      	ldr	r2, [r7, #20]
 8007f22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	693a      	ldr	r2, [r7, #16]
 8007f28:	621a      	str	r2, [r3, #32]
}
 8007f2a:	bf00      	nop
 8007f2c:	371c      	adds	r7, #28
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr

08007f36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f36:	b480      	push	{r7}
 8007f38:	b085      	sub	sp, #20
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
 8007f3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f4e:	683a      	ldr	r2, [r7, #0]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	f043 0307 	orr.w	r3, r3, #7
 8007f58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	609a      	str	r2, [r3, #8]
}
 8007f60:	bf00      	nop
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b087      	sub	sp, #28
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
 8007f78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	021a      	lsls	r2, r3, #8
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	431a      	orrs	r2, r3
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	697a      	ldr	r2, [r7, #20]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	697a      	ldr	r2, [r7, #20]
 8007f9e:	609a      	str	r2, [r3, #8]
}
 8007fa0:	bf00      	nop
 8007fa2:	371c      	adds	r7, #28
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b087      	sub	sp, #28
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	f003 031f 	and.w	r3, r3, #31
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6a1a      	ldr	r2, [r3, #32]
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	43db      	mvns	r3, r3
 8007fce:	401a      	ands	r2, r3
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6a1a      	ldr	r2, [r3, #32]
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	f003 031f 	and.w	r3, r3, #31
 8007fde:	6879      	ldr	r1, [r7, #4]
 8007fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8007fe4:	431a      	orrs	r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	621a      	str	r2, [r3, #32]
}
 8007fea:	bf00      	nop
 8007fec:	371c      	adds	r7, #28
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr
	...

08007ff8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008008:	2b01      	cmp	r3, #1
 800800a:	d101      	bne.n	8008010 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800800c:	2302      	movs	r3, #2
 800800e:	e068      	b.n	80080e2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2202      	movs	r2, #2
 800801c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a2e      	ldr	r2, [pc, #184]	; (80080f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d004      	beq.n	8008044 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a2d      	ldr	r2, [pc, #180]	; (80080f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d108      	bne.n	8008056 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800804a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	68fa      	ldr	r2, [r7, #12]
 8008052:	4313      	orrs	r3, r2
 8008054:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800805c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	4313      	orrs	r3, r2
 8008066:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a1e      	ldr	r2, [pc, #120]	; (80080f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d01d      	beq.n	80080b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008082:	d018      	beq.n	80080b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a1b      	ldr	r2, [pc, #108]	; (80080f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d013      	beq.n	80080b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a1a      	ldr	r2, [pc, #104]	; (80080fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d00e      	beq.n	80080b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a18      	ldr	r2, [pc, #96]	; (8008100 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d009      	beq.n	80080b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a13      	ldr	r2, [pc, #76]	; (80080f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d004      	beq.n	80080b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a14      	ldr	r2, [pc, #80]	; (8008104 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d10c      	bne.n	80080d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	68ba      	ldr	r2, [r7, #8]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	68ba      	ldr	r2, [r7, #8]
 80080ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3714      	adds	r7, #20
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	40012c00 	.word	0x40012c00
 80080f4:	40013400 	.word	0x40013400
 80080f8:	40000400 	.word	0x40000400
 80080fc:	40000800 	.word	0x40000800
 8008100:	40000c00 	.word	0x40000c00
 8008104:	40014000 	.word	0x40014000

08008108 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008112:	2300      	movs	r3, #0
 8008114:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800811c:	2b01      	cmp	r3, #1
 800811e:	d101      	bne.n	8008124 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008120:	2302      	movs	r3, #2
 8008122:	e065      	b.n	80081f0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	4313      	orrs	r3, r2
 8008138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	4313      	orrs	r3, r2
 8008146:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	4313      	orrs	r3, r2
 8008154:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4313      	orrs	r3, r2
 8008162:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	4313      	orrs	r3, r2
 8008170:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	695b      	ldr	r3, [r3, #20]
 800817c:	4313      	orrs	r3, r2
 800817e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818a:	4313      	orrs	r3, r2
 800818c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	041b      	lsls	r3, r3, #16
 800819a:	4313      	orrs	r3, r2
 800819c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a16      	ldr	r2, [pc, #88]	; (80081fc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d004      	beq.n	80081b2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a14      	ldr	r2, [pc, #80]	; (8008200 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d115      	bne.n	80081de <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081bc:	051b      	lsls	r3, r3, #20
 80081be:	4313      	orrs	r3, r2
 80081c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	69db      	ldr	r3, [r3, #28]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	6a1b      	ldr	r3, [r3, #32]
 80081da:	4313      	orrs	r3, r2
 80081dc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081ee:	2300      	movs	r3, #0
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3714      	adds	r7, #20
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr
 80081fc:	40012c00 	.word	0x40012c00
 8008200:	40013400 	.word	0x40013400

08008204 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d101      	bne.n	8008216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	e040      	b.n	8008298 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800821a:	2b00      	cmp	r3, #0
 800821c:	d106      	bne.n	800822c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f7fa fb14 	bl	8002854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2224      	movs	r2, #36	; 0x24
 8008230:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f022 0201 	bic.w	r2, r2, #1
 8008240:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f8c0 	bl	80083c8 <UART_SetConfig>
 8008248:	4603      	mov	r3, r0
 800824a:	2b01      	cmp	r3, #1
 800824c:	d101      	bne.n	8008252 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e022      	b.n	8008298 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008256:	2b00      	cmp	r3, #0
 8008258:	d002      	beq.n	8008260 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 fb6c 	bl	8008938 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	685a      	ldr	r2, [r3, #4]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800826e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	689a      	ldr	r2, [r3, #8]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800827e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f042 0201 	orr.w	r2, r2, #1
 800828e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 fbf3 	bl	8008a7c <UART_CheckIdleState>
 8008296:	4603      	mov	r3, r0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b08a      	sub	sp, #40	; 0x28
 80082a4:	af02      	add	r7, sp, #8
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	603b      	str	r3, [r7, #0]
 80082ac:	4613      	mov	r3, r2
 80082ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082b4:	2b20      	cmp	r3, #32
 80082b6:	f040 8082 	bne.w	80083be <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d002      	beq.n	80082c6 <HAL_UART_Transmit+0x26>
 80082c0:	88fb      	ldrh	r3, [r7, #6]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d101      	bne.n	80082ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e07a      	b.n	80083c0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d101      	bne.n	80082d8 <HAL_UART_Transmit+0x38>
 80082d4:	2302      	movs	r3, #2
 80082d6:	e073      	b.n	80083c0 <HAL_UART_Transmit+0x120>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2221      	movs	r2, #33	; 0x21
 80082ec:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082ee:	f7fa fc87 	bl	8002c00 <HAL_GetTick>
 80082f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	88fa      	ldrh	r2, [r7, #6]
 80082f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	88fa      	ldrh	r2, [r7, #6]
 8008300:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800830c:	d108      	bne.n	8008320 <HAL_UART_Transmit+0x80>
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	691b      	ldr	r3, [r3, #16]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d104      	bne.n	8008320 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008316:	2300      	movs	r3, #0
 8008318:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	61bb      	str	r3, [r7, #24]
 800831e:	e003      	b.n	8008328 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008324:	2300      	movs	r3, #0
 8008326:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2200      	movs	r2, #0
 800832c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008330:	e02d      	b.n	800838e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	9300      	str	r3, [sp, #0]
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2200      	movs	r2, #0
 800833a:	2180      	movs	r1, #128	; 0x80
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f000 fbe6 	bl	8008b0e <UART_WaitOnFlagUntilTimeout>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d001      	beq.n	800834c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	e039      	b.n	80083c0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d10b      	bne.n	800836a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	881a      	ldrh	r2, [r3, #0]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800835e:	b292      	uxth	r2, r2
 8008360:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	3302      	adds	r3, #2
 8008366:	61bb      	str	r3, [r7, #24]
 8008368:	e008      	b.n	800837c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	781a      	ldrb	r2, [r3, #0]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	b292      	uxth	r2, r2
 8008374:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	3301      	adds	r3, #1
 800837a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008382:	b29b      	uxth	r3, r3
 8008384:	3b01      	subs	r3, #1
 8008386:	b29a      	uxth	r2, r3
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008394:	b29b      	uxth	r3, r3
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1cb      	bne.n	8008332 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	9300      	str	r3, [sp, #0]
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	2200      	movs	r2, #0
 80083a2:	2140      	movs	r1, #64	; 0x40
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f000 fbb2 	bl	8008b0e <UART_WaitOnFlagUntilTimeout>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d001      	beq.n	80083b4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80083b0:	2303      	movs	r3, #3
 80083b2:	e005      	b.n	80083c0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2220      	movs	r2, #32
 80083b8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80083ba:	2300      	movs	r3, #0
 80083bc:	e000      	b.n	80083c0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80083be:	2302      	movs	r3, #2
  }
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3720      	adds	r7, #32
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083cc:	b08a      	sub	sp, #40	; 0x28
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80083d2:	2300      	movs	r3, #0
 80083d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	689a      	ldr	r2, [r3, #8]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	431a      	orrs	r2, r3
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	695b      	ldr	r3, [r3, #20]
 80083e6:	431a      	orrs	r2, r3
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	69db      	ldr	r3, [r3, #28]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	4ba4      	ldr	r3, [pc, #656]	; (8008688 <UART_SetConfig+0x2c0>)
 80083f8:	4013      	ands	r3, r2
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	6812      	ldr	r2, [r2, #0]
 80083fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008400:	430b      	orrs	r3, r1
 8008402:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	68da      	ldr	r2, [r3, #12]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	430a      	orrs	r2, r1
 8008418:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	699b      	ldr	r3, [r3, #24]
 800841e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a99      	ldr	r2, [pc, #612]	; (800868c <UART_SetConfig+0x2c4>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d004      	beq.n	8008434 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6a1b      	ldr	r3, [r3, #32]
 800842e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008430:	4313      	orrs	r3, r2
 8008432:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008444:	430a      	orrs	r2, r1
 8008446:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a90      	ldr	r2, [pc, #576]	; (8008690 <UART_SetConfig+0x2c8>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d126      	bne.n	80084a0 <UART_SetConfig+0xd8>
 8008452:	4b90      	ldr	r3, [pc, #576]	; (8008694 <UART_SetConfig+0x2cc>)
 8008454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008458:	f003 0303 	and.w	r3, r3, #3
 800845c:	2b03      	cmp	r3, #3
 800845e:	d81b      	bhi.n	8008498 <UART_SetConfig+0xd0>
 8008460:	a201      	add	r2, pc, #4	; (adr r2, 8008468 <UART_SetConfig+0xa0>)
 8008462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008466:	bf00      	nop
 8008468:	08008479 	.word	0x08008479
 800846c:	08008489 	.word	0x08008489
 8008470:	08008481 	.word	0x08008481
 8008474:	08008491 	.word	0x08008491
 8008478:	2301      	movs	r3, #1
 800847a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800847e:	e116      	b.n	80086ae <UART_SetConfig+0x2e6>
 8008480:	2302      	movs	r3, #2
 8008482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008486:	e112      	b.n	80086ae <UART_SetConfig+0x2e6>
 8008488:	2304      	movs	r3, #4
 800848a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800848e:	e10e      	b.n	80086ae <UART_SetConfig+0x2e6>
 8008490:	2308      	movs	r3, #8
 8008492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008496:	e10a      	b.n	80086ae <UART_SetConfig+0x2e6>
 8008498:	2310      	movs	r3, #16
 800849a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800849e:	e106      	b.n	80086ae <UART_SetConfig+0x2e6>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a7c      	ldr	r2, [pc, #496]	; (8008698 <UART_SetConfig+0x2d0>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d138      	bne.n	800851c <UART_SetConfig+0x154>
 80084aa:	4b7a      	ldr	r3, [pc, #488]	; (8008694 <UART_SetConfig+0x2cc>)
 80084ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084b0:	f003 030c 	and.w	r3, r3, #12
 80084b4:	2b0c      	cmp	r3, #12
 80084b6:	d82d      	bhi.n	8008514 <UART_SetConfig+0x14c>
 80084b8:	a201      	add	r2, pc, #4	; (adr r2, 80084c0 <UART_SetConfig+0xf8>)
 80084ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084be:	bf00      	nop
 80084c0:	080084f5 	.word	0x080084f5
 80084c4:	08008515 	.word	0x08008515
 80084c8:	08008515 	.word	0x08008515
 80084cc:	08008515 	.word	0x08008515
 80084d0:	08008505 	.word	0x08008505
 80084d4:	08008515 	.word	0x08008515
 80084d8:	08008515 	.word	0x08008515
 80084dc:	08008515 	.word	0x08008515
 80084e0:	080084fd 	.word	0x080084fd
 80084e4:	08008515 	.word	0x08008515
 80084e8:	08008515 	.word	0x08008515
 80084ec:	08008515 	.word	0x08008515
 80084f0:	0800850d 	.word	0x0800850d
 80084f4:	2300      	movs	r3, #0
 80084f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084fa:	e0d8      	b.n	80086ae <UART_SetConfig+0x2e6>
 80084fc:	2302      	movs	r3, #2
 80084fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008502:	e0d4      	b.n	80086ae <UART_SetConfig+0x2e6>
 8008504:	2304      	movs	r3, #4
 8008506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800850a:	e0d0      	b.n	80086ae <UART_SetConfig+0x2e6>
 800850c:	2308      	movs	r3, #8
 800850e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008512:	e0cc      	b.n	80086ae <UART_SetConfig+0x2e6>
 8008514:	2310      	movs	r3, #16
 8008516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800851a:	e0c8      	b.n	80086ae <UART_SetConfig+0x2e6>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a5e      	ldr	r2, [pc, #376]	; (800869c <UART_SetConfig+0x2d4>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d125      	bne.n	8008572 <UART_SetConfig+0x1aa>
 8008526:	4b5b      	ldr	r3, [pc, #364]	; (8008694 <UART_SetConfig+0x2cc>)
 8008528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800852c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008530:	2b30      	cmp	r3, #48	; 0x30
 8008532:	d016      	beq.n	8008562 <UART_SetConfig+0x19a>
 8008534:	2b30      	cmp	r3, #48	; 0x30
 8008536:	d818      	bhi.n	800856a <UART_SetConfig+0x1a2>
 8008538:	2b20      	cmp	r3, #32
 800853a:	d00a      	beq.n	8008552 <UART_SetConfig+0x18a>
 800853c:	2b20      	cmp	r3, #32
 800853e:	d814      	bhi.n	800856a <UART_SetConfig+0x1a2>
 8008540:	2b00      	cmp	r3, #0
 8008542:	d002      	beq.n	800854a <UART_SetConfig+0x182>
 8008544:	2b10      	cmp	r3, #16
 8008546:	d008      	beq.n	800855a <UART_SetConfig+0x192>
 8008548:	e00f      	b.n	800856a <UART_SetConfig+0x1a2>
 800854a:	2300      	movs	r3, #0
 800854c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008550:	e0ad      	b.n	80086ae <UART_SetConfig+0x2e6>
 8008552:	2302      	movs	r3, #2
 8008554:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008558:	e0a9      	b.n	80086ae <UART_SetConfig+0x2e6>
 800855a:	2304      	movs	r3, #4
 800855c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008560:	e0a5      	b.n	80086ae <UART_SetConfig+0x2e6>
 8008562:	2308      	movs	r3, #8
 8008564:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008568:	e0a1      	b.n	80086ae <UART_SetConfig+0x2e6>
 800856a:	2310      	movs	r3, #16
 800856c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008570:	e09d      	b.n	80086ae <UART_SetConfig+0x2e6>
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a4a      	ldr	r2, [pc, #296]	; (80086a0 <UART_SetConfig+0x2d8>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d125      	bne.n	80085c8 <UART_SetConfig+0x200>
 800857c:	4b45      	ldr	r3, [pc, #276]	; (8008694 <UART_SetConfig+0x2cc>)
 800857e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008582:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008586:	2bc0      	cmp	r3, #192	; 0xc0
 8008588:	d016      	beq.n	80085b8 <UART_SetConfig+0x1f0>
 800858a:	2bc0      	cmp	r3, #192	; 0xc0
 800858c:	d818      	bhi.n	80085c0 <UART_SetConfig+0x1f8>
 800858e:	2b80      	cmp	r3, #128	; 0x80
 8008590:	d00a      	beq.n	80085a8 <UART_SetConfig+0x1e0>
 8008592:	2b80      	cmp	r3, #128	; 0x80
 8008594:	d814      	bhi.n	80085c0 <UART_SetConfig+0x1f8>
 8008596:	2b00      	cmp	r3, #0
 8008598:	d002      	beq.n	80085a0 <UART_SetConfig+0x1d8>
 800859a:	2b40      	cmp	r3, #64	; 0x40
 800859c:	d008      	beq.n	80085b0 <UART_SetConfig+0x1e8>
 800859e:	e00f      	b.n	80085c0 <UART_SetConfig+0x1f8>
 80085a0:	2300      	movs	r3, #0
 80085a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085a6:	e082      	b.n	80086ae <UART_SetConfig+0x2e6>
 80085a8:	2302      	movs	r3, #2
 80085aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085ae:	e07e      	b.n	80086ae <UART_SetConfig+0x2e6>
 80085b0:	2304      	movs	r3, #4
 80085b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085b6:	e07a      	b.n	80086ae <UART_SetConfig+0x2e6>
 80085b8:	2308      	movs	r3, #8
 80085ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085be:	e076      	b.n	80086ae <UART_SetConfig+0x2e6>
 80085c0:	2310      	movs	r3, #16
 80085c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085c6:	e072      	b.n	80086ae <UART_SetConfig+0x2e6>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a35      	ldr	r2, [pc, #212]	; (80086a4 <UART_SetConfig+0x2dc>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d12a      	bne.n	8008628 <UART_SetConfig+0x260>
 80085d2:	4b30      	ldr	r3, [pc, #192]	; (8008694 <UART_SetConfig+0x2cc>)
 80085d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085e0:	d01a      	beq.n	8008618 <UART_SetConfig+0x250>
 80085e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085e6:	d81b      	bhi.n	8008620 <UART_SetConfig+0x258>
 80085e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085ec:	d00c      	beq.n	8008608 <UART_SetConfig+0x240>
 80085ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085f2:	d815      	bhi.n	8008620 <UART_SetConfig+0x258>
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d003      	beq.n	8008600 <UART_SetConfig+0x238>
 80085f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085fc:	d008      	beq.n	8008610 <UART_SetConfig+0x248>
 80085fe:	e00f      	b.n	8008620 <UART_SetConfig+0x258>
 8008600:	2300      	movs	r3, #0
 8008602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008606:	e052      	b.n	80086ae <UART_SetConfig+0x2e6>
 8008608:	2302      	movs	r3, #2
 800860a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800860e:	e04e      	b.n	80086ae <UART_SetConfig+0x2e6>
 8008610:	2304      	movs	r3, #4
 8008612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008616:	e04a      	b.n	80086ae <UART_SetConfig+0x2e6>
 8008618:	2308      	movs	r3, #8
 800861a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800861e:	e046      	b.n	80086ae <UART_SetConfig+0x2e6>
 8008620:	2310      	movs	r3, #16
 8008622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008626:	e042      	b.n	80086ae <UART_SetConfig+0x2e6>
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a17      	ldr	r2, [pc, #92]	; (800868c <UART_SetConfig+0x2c4>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d13a      	bne.n	80086a8 <UART_SetConfig+0x2e0>
 8008632:	4b18      	ldr	r3, [pc, #96]	; (8008694 <UART_SetConfig+0x2cc>)
 8008634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008638:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800863c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008640:	d01a      	beq.n	8008678 <UART_SetConfig+0x2b0>
 8008642:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008646:	d81b      	bhi.n	8008680 <UART_SetConfig+0x2b8>
 8008648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800864c:	d00c      	beq.n	8008668 <UART_SetConfig+0x2a0>
 800864e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008652:	d815      	bhi.n	8008680 <UART_SetConfig+0x2b8>
 8008654:	2b00      	cmp	r3, #0
 8008656:	d003      	beq.n	8008660 <UART_SetConfig+0x298>
 8008658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800865c:	d008      	beq.n	8008670 <UART_SetConfig+0x2a8>
 800865e:	e00f      	b.n	8008680 <UART_SetConfig+0x2b8>
 8008660:	2300      	movs	r3, #0
 8008662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008666:	e022      	b.n	80086ae <UART_SetConfig+0x2e6>
 8008668:	2302      	movs	r3, #2
 800866a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800866e:	e01e      	b.n	80086ae <UART_SetConfig+0x2e6>
 8008670:	2304      	movs	r3, #4
 8008672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008676:	e01a      	b.n	80086ae <UART_SetConfig+0x2e6>
 8008678:	2308      	movs	r3, #8
 800867a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800867e:	e016      	b.n	80086ae <UART_SetConfig+0x2e6>
 8008680:	2310      	movs	r3, #16
 8008682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008686:	e012      	b.n	80086ae <UART_SetConfig+0x2e6>
 8008688:	efff69f3 	.word	0xefff69f3
 800868c:	40008000 	.word	0x40008000
 8008690:	40013800 	.word	0x40013800
 8008694:	40021000 	.word	0x40021000
 8008698:	40004400 	.word	0x40004400
 800869c:	40004800 	.word	0x40004800
 80086a0:	40004c00 	.word	0x40004c00
 80086a4:	40005000 	.word	0x40005000
 80086a8:	2310      	movs	r3, #16
 80086aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a9f      	ldr	r2, [pc, #636]	; (8008930 <UART_SetConfig+0x568>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d17a      	bne.n	80087ae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80086b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086bc:	2b08      	cmp	r3, #8
 80086be:	d824      	bhi.n	800870a <UART_SetConfig+0x342>
 80086c0:	a201      	add	r2, pc, #4	; (adr r2, 80086c8 <UART_SetConfig+0x300>)
 80086c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c6:	bf00      	nop
 80086c8:	080086ed 	.word	0x080086ed
 80086cc:	0800870b 	.word	0x0800870b
 80086d0:	080086f5 	.word	0x080086f5
 80086d4:	0800870b 	.word	0x0800870b
 80086d8:	080086fb 	.word	0x080086fb
 80086dc:	0800870b 	.word	0x0800870b
 80086e0:	0800870b 	.word	0x0800870b
 80086e4:	0800870b 	.word	0x0800870b
 80086e8:	08008703 	.word	0x08008703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086ec:	f7fd fc10 	bl	8005f10 <HAL_RCC_GetPCLK1Freq>
 80086f0:	61f8      	str	r0, [r7, #28]
        break;
 80086f2:	e010      	b.n	8008716 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086f4:	4b8f      	ldr	r3, [pc, #572]	; (8008934 <UART_SetConfig+0x56c>)
 80086f6:	61fb      	str	r3, [r7, #28]
        break;
 80086f8:	e00d      	b.n	8008716 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086fa:	f7fd fb71 	bl	8005de0 <HAL_RCC_GetSysClockFreq>
 80086fe:	61f8      	str	r0, [r7, #28]
        break;
 8008700:	e009      	b.n	8008716 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008706:	61fb      	str	r3, [r7, #28]
        break;
 8008708:	e005      	b.n	8008716 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800870a:	2300      	movs	r3, #0
 800870c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008714:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	2b00      	cmp	r3, #0
 800871a:	f000 80fb 	beq.w	8008914 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	685a      	ldr	r2, [r3, #4]
 8008722:	4613      	mov	r3, r2
 8008724:	005b      	lsls	r3, r3, #1
 8008726:	4413      	add	r3, r2
 8008728:	69fa      	ldr	r2, [r7, #28]
 800872a:	429a      	cmp	r2, r3
 800872c:	d305      	bcc.n	800873a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008734:	69fa      	ldr	r2, [r7, #28]
 8008736:	429a      	cmp	r2, r3
 8008738:	d903      	bls.n	8008742 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008740:	e0e8      	b.n	8008914 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	2200      	movs	r2, #0
 8008746:	461c      	mov	r4, r3
 8008748:	4615      	mov	r5, r2
 800874a:	f04f 0200 	mov.w	r2, #0
 800874e:	f04f 0300 	mov.w	r3, #0
 8008752:	022b      	lsls	r3, r5, #8
 8008754:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008758:	0222      	lsls	r2, r4, #8
 800875a:	68f9      	ldr	r1, [r7, #12]
 800875c:	6849      	ldr	r1, [r1, #4]
 800875e:	0849      	lsrs	r1, r1, #1
 8008760:	2000      	movs	r0, #0
 8008762:	4688      	mov	r8, r1
 8008764:	4681      	mov	r9, r0
 8008766:	eb12 0a08 	adds.w	sl, r2, r8
 800876a:	eb43 0b09 	adc.w	fp, r3, r9
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	603b      	str	r3, [r7, #0]
 8008776:	607a      	str	r2, [r7, #4]
 8008778:	e9d7 2300 	ldrd	r2, r3, [r7]
 800877c:	4650      	mov	r0, sl
 800877e:	4659      	mov	r1, fp
 8008780:	f7f8 fa82 	bl	8000c88 <__aeabi_uldivmod>
 8008784:	4602      	mov	r2, r0
 8008786:	460b      	mov	r3, r1
 8008788:	4613      	mov	r3, r2
 800878a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800878c:	69bb      	ldr	r3, [r7, #24]
 800878e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008792:	d308      	bcc.n	80087a6 <UART_SetConfig+0x3de>
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800879a:	d204      	bcs.n	80087a6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	69ba      	ldr	r2, [r7, #24]
 80087a2:	60da      	str	r2, [r3, #12]
 80087a4:	e0b6      	b.n	8008914 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80087ac:	e0b2      	b.n	8008914 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	69db      	ldr	r3, [r3, #28]
 80087b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087b6:	d15e      	bne.n	8008876 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80087b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087bc:	2b08      	cmp	r3, #8
 80087be:	d828      	bhi.n	8008812 <UART_SetConfig+0x44a>
 80087c0:	a201      	add	r2, pc, #4	; (adr r2, 80087c8 <UART_SetConfig+0x400>)
 80087c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c6:	bf00      	nop
 80087c8:	080087ed 	.word	0x080087ed
 80087cc:	080087f5 	.word	0x080087f5
 80087d0:	080087fd 	.word	0x080087fd
 80087d4:	08008813 	.word	0x08008813
 80087d8:	08008803 	.word	0x08008803
 80087dc:	08008813 	.word	0x08008813
 80087e0:	08008813 	.word	0x08008813
 80087e4:	08008813 	.word	0x08008813
 80087e8:	0800880b 	.word	0x0800880b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087ec:	f7fd fb90 	bl	8005f10 <HAL_RCC_GetPCLK1Freq>
 80087f0:	61f8      	str	r0, [r7, #28]
        break;
 80087f2:	e014      	b.n	800881e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087f4:	f7fd fba2 	bl	8005f3c <HAL_RCC_GetPCLK2Freq>
 80087f8:	61f8      	str	r0, [r7, #28]
        break;
 80087fa:	e010      	b.n	800881e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087fc:	4b4d      	ldr	r3, [pc, #308]	; (8008934 <UART_SetConfig+0x56c>)
 80087fe:	61fb      	str	r3, [r7, #28]
        break;
 8008800:	e00d      	b.n	800881e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008802:	f7fd faed 	bl	8005de0 <HAL_RCC_GetSysClockFreq>
 8008806:	61f8      	str	r0, [r7, #28]
        break;
 8008808:	e009      	b.n	800881e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800880a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800880e:	61fb      	str	r3, [r7, #28]
        break;
 8008810:	e005      	b.n	800881e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008812:	2300      	movs	r3, #0
 8008814:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800881c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d077      	beq.n	8008914 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	005a      	lsls	r2, r3, #1
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	085b      	lsrs	r3, r3, #1
 800882e:	441a      	add	r2, r3
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	fbb2 f3f3 	udiv	r3, r2, r3
 8008838:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	2b0f      	cmp	r3, #15
 800883e:	d916      	bls.n	800886e <UART_SetConfig+0x4a6>
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008846:	d212      	bcs.n	800886e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	b29b      	uxth	r3, r3
 800884c:	f023 030f 	bic.w	r3, r3, #15
 8008850:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	085b      	lsrs	r3, r3, #1
 8008856:	b29b      	uxth	r3, r3
 8008858:	f003 0307 	and.w	r3, r3, #7
 800885c:	b29a      	uxth	r2, r3
 800885e:	8afb      	ldrh	r3, [r7, #22]
 8008860:	4313      	orrs	r3, r2
 8008862:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	8afa      	ldrh	r2, [r7, #22]
 800886a:	60da      	str	r2, [r3, #12]
 800886c:	e052      	b.n	8008914 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008874:	e04e      	b.n	8008914 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008876:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800887a:	2b08      	cmp	r3, #8
 800887c:	d827      	bhi.n	80088ce <UART_SetConfig+0x506>
 800887e:	a201      	add	r2, pc, #4	; (adr r2, 8008884 <UART_SetConfig+0x4bc>)
 8008880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008884:	080088a9 	.word	0x080088a9
 8008888:	080088b1 	.word	0x080088b1
 800888c:	080088b9 	.word	0x080088b9
 8008890:	080088cf 	.word	0x080088cf
 8008894:	080088bf 	.word	0x080088bf
 8008898:	080088cf 	.word	0x080088cf
 800889c:	080088cf 	.word	0x080088cf
 80088a0:	080088cf 	.word	0x080088cf
 80088a4:	080088c7 	.word	0x080088c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088a8:	f7fd fb32 	bl	8005f10 <HAL_RCC_GetPCLK1Freq>
 80088ac:	61f8      	str	r0, [r7, #28]
        break;
 80088ae:	e014      	b.n	80088da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088b0:	f7fd fb44 	bl	8005f3c <HAL_RCC_GetPCLK2Freq>
 80088b4:	61f8      	str	r0, [r7, #28]
        break;
 80088b6:	e010      	b.n	80088da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088b8:	4b1e      	ldr	r3, [pc, #120]	; (8008934 <UART_SetConfig+0x56c>)
 80088ba:	61fb      	str	r3, [r7, #28]
        break;
 80088bc:	e00d      	b.n	80088da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088be:	f7fd fa8f 	bl	8005de0 <HAL_RCC_GetSysClockFreq>
 80088c2:	61f8      	str	r0, [r7, #28]
        break;
 80088c4:	e009      	b.n	80088da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088ca:	61fb      	str	r3, [r7, #28]
        break;
 80088cc:	e005      	b.n	80088da <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80088ce:	2300      	movs	r3, #0
 80088d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80088d8:	bf00      	nop
    }

    if (pclk != 0U)
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d019      	beq.n	8008914 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	085a      	lsrs	r2, r3, #1
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	441a      	add	r2, r3
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80088f2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	2b0f      	cmp	r3, #15
 80088f8:	d909      	bls.n	800890e <UART_SetConfig+0x546>
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008900:	d205      	bcs.n	800890e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	b29a      	uxth	r2, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	60da      	str	r2, [r3, #12]
 800890c:	e002      	b.n	8008914 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008920:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008924:	4618      	mov	r0, r3
 8008926:	3728      	adds	r7, #40	; 0x28
 8008928:	46bd      	mov	sp, r7
 800892a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800892e:	bf00      	nop
 8008930:	40008000 	.word	0x40008000
 8008934:	00f42400 	.word	0x00f42400

08008938 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008944:	f003 0301 	and.w	r3, r3, #1
 8008948:	2b00      	cmp	r3, #0
 800894a:	d00a      	beq.n	8008962 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	430a      	orrs	r2, r1
 8008960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008966:	f003 0302 	and.w	r3, r3, #2
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00a      	beq.n	8008984 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	430a      	orrs	r2, r1
 8008982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008988:	f003 0304 	and.w	r3, r3, #4
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00a      	beq.n	80089a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	430a      	orrs	r2, r1
 80089a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089aa:	f003 0308 	and.w	r3, r3, #8
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00a      	beq.n	80089c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	430a      	orrs	r2, r1
 80089c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089cc:	f003 0310 	and.w	r3, r3, #16
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00a      	beq.n	80089ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	430a      	orrs	r2, r1
 80089e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ee:	f003 0320 	and.w	r3, r3, #32
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00a      	beq.n	8008a0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	430a      	orrs	r2, r1
 8008a0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d01a      	beq.n	8008a4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	430a      	orrs	r2, r1
 8008a2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a36:	d10a      	bne.n	8008a4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	430a      	orrs	r2, r1
 8008a4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00a      	beq.n	8008a70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	430a      	orrs	r2, r1
 8008a6e:	605a      	str	r2, [r3, #4]
  }
}
 8008a70:	bf00      	nop
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b086      	sub	sp, #24
 8008a80:	af02      	add	r7, sp, #8
 8008a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a8c:	f7fa f8b8 	bl	8002c00 <HAL_GetTick>
 8008a90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f003 0308 	and.w	r3, r3, #8
 8008a9c:	2b08      	cmp	r3, #8
 8008a9e:	d10e      	bne.n	8008abe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008aa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008aa4:	9300      	str	r3, [sp, #0]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 f82d 	bl	8008b0e <UART_WaitOnFlagUntilTimeout>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d001      	beq.n	8008abe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008aba:	2303      	movs	r3, #3
 8008abc:	e023      	b.n	8008b06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f003 0304 	and.w	r3, r3, #4
 8008ac8:	2b04      	cmp	r3, #4
 8008aca:	d10e      	bne.n	8008aea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008acc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 f817 	bl	8008b0e <UART_WaitOnFlagUntilTimeout>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d001      	beq.n	8008aea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ae6:	2303      	movs	r3, #3
 8008ae8:	e00d      	b.n	8008b06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2220      	movs	r2, #32
 8008aee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2220      	movs	r2, #32
 8008af4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3710      	adds	r7, #16
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b09c      	sub	sp, #112	; 0x70
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	60f8      	str	r0, [r7, #12]
 8008b16:	60b9      	str	r1, [r7, #8]
 8008b18:	603b      	str	r3, [r7, #0]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b1e:	e0a5      	b.n	8008c6c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b26:	f000 80a1 	beq.w	8008c6c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b2a:	f7fa f869 	bl	8002c00 <HAL_GetTick>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d302      	bcc.n	8008b40 <UART_WaitOnFlagUntilTimeout+0x32>
 8008b3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d13e      	bne.n	8008bbe <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b48:	e853 3f00 	ldrex	r3, [r3]
 8008b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b54:	667b      	str	r3, [r7, #100]	; 0x64
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b60:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b66:	e841 2300 	strex	r3, r2, [r1]
 8008b6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1e6      	bne.n	8008b40 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	3308      	adds	r3, #8
 8008b78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b7c:	e853 3f00 	ldrex	r3, [r3]
 8008b80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b84:	f023 0301 	bic.w	r3, r3, #1
 8008b88:	663b      	str	r3, [r7, #96]	; 0x60
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	3308      	adds	r3, #8
 8008b90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b92:	64ba      	str	r2, [r7, #72]	; 0x48
 8008b94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b9a:	e841 2300 	strex	r3, r2, [r1]
 8008b9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1e5      	bne.n	8008b72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2220      	movs	r2, #32
 8008baa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2220      	movs	r2, #32
 8008bb0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e067      	b.n	8008c8e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f003 0304 	and.w	r3, r3, #4
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d04f      	beq.n	8008c6c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	69db      	ldr	r3, [r3, #28]
 8008bd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bda:	d147      	bne.n	8008c6c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008be4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bee:	e853 3f00 	ldrex	r3, [r3]
 8008bf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008bfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	461a      	mov	r2, r3
 8008c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c04:	637b      	str	r3, [r7, #52]	; 0x34
 8008c06:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c0c:	e841 2300 	strex	r3, r2, [r1]
 8008c10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d1e6      	bne.n	8008be6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	3308      	adds	r3, #8
 8008c1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	e853 3f00 	ldrex	r3, [r3]
 8008c26:	613b      	str	r3, [r7, #16]
   return(result);
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	f023 0301 	bic.w	r3, r3, #1
 8008c2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	3308      	adds	r3, #8
 8008c36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c38:	623a      	str	r2, [r7, #32]
 8008c3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3c:	69f9      	ldr	r1, [r7, #28]
 8008c3e:	6a3a      	ldr	r2, [r7, #32]
 8008c40:	e841 2300 	strex	r3, r2, [r1]
 8008c44:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d1e5      	bne.n	8008c18 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2220      	movs	r2, #32
 8008c50:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2220      	movs	r2, #32
 8008c56:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2220      	movs	r2, #32
 8008c5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008c68:	2303      	movs	r3, #3
 8008c6a:	e010      	b.n	8008c8e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	69da      	ldr	r2, [r3, #28]
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	4013      	ands	r3, r2
 8008c76:	68ba      	ldr	r2, [r7, #8]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	bf0c      	ite	eq
 8008c7c:	2301      	moveq	r3, #1
 8008c7e:	2300      	movne	r3, #0
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	461a      	mov	r2, r3
 8008c84:	79fb      	ldrb	r3, [r7, #7]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	f43f af4a 	beq.w	8008b20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3770      	adds	r7, #112	; 0x70
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
	...

08008c98 <__errno>:
 8008c98:	4b01      	ldr	r3, [pc, #4]	; (8008ca0 <__errno+0x8>)
 8008c9a:	6818      	ldr	r0, [r3, #0]
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	20000030 	.word	0x20000030

08008ca4 <__libc_init_array>:
 8008ca4:	b570      	push	{r4, r5, r6, lr}
 8008ca6:	4d0d      	ldr	r5, [pc, #52]	; (8008cdc <__libc_init_array+0x38>)
 8008ca8:	4c0d      	ldr	r4, [pc, #52]	; (8008ce0 <__libc_init_array+0x3c>)
 8008caa:	1b64      	subs	r4, r4, r5
 8008cac:	10a4      	asrs	r4, r4, #2
 8008cae:	2600      	movs	r6, #0
 8008cb0:	42a6      	cmp	r6, r4
 8008cb2:	d109      	bne.n	8008cc8 <__libc_init_array+0x24>
 8008cb4:	4d0b      	ldr	r5, [pc, #44]	; (8008ce4 <__libc_init_array+0x40>)
 8008cb6:	4c0c      	ldr	r4, [pc, #48]	; (8008ce8 <__libc_init_array+0x44>)
 8008cb8:	f006 fbcc 	bl	800f454 <_init>
 8008cbc:	1b64      	subs	r4, r4, r5
 8008cbe:	10a4      	asrs	r4, r4, #2
 8008cc0:	2600      	movs	r6, #0
 8008cc2:	42a6      	cmp	r6, r4
 8008cc4:	d105      	bne.n	8008cd2 <__libc_init_array+0x2e>
 8008cc6:	bd70      	pop	{r4, r5, r6, pc}
 8008cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ccc:	4798      	blx	r3
 8008cce:	3601      	adds	r6, #1
 8008cd0:	e7ee      	b.n	8008cb0 <__libc_init_array+0xc>
 8008cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cd6:	4798      	blx	r3
 8008cd8:	3601      	adds	r6, #1
 8008cda:	e7f2      	b.n	8008cc2 <__libc_init_array+0x1e>
 8008cdc:	0800fb88 	.word	0x0800fb88
 8008ce0:	0800fb88 	.word	0x0800fb88
 8008ce4:	0800fb88 	.word	0x0800fb88
 8008ce8:	0800fb8c 	.word	0x0800fb8c

08008cec <memset>:
 8008cec:	4402      	add	r2, r0
 8008cee:	4603      	mov	r3, r0
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d100      	bne.n	8008cf6 <memset+0xa>
 8008cf4:	4770      	bx	lr
 8008cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8008cfa:	e7f9      	b.n	8008cf0 <memset+0x4>

08008cfc <__cvt>:
 8008cfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d00:	ec55 4b10 	vmov	r4, r5, d0
 8008d04:	2d00      	cmp	r5, #0
 8008d06:	460e      	mov	r6, r1
 8008d08:	4619      	mov	r1, r3
 8008d0a:	462b      	mov	r3, r5
 8008d0c:	bfbb      	ittet	lt
 8008d0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008d12:	461d      	movlt	r5, r3
 8008d14:	2300      	movge	r3, #0
 8008d16:	232d      	movlt	r3, #45	; 0x2d
 8008d18:	700b      	strb	r3, [r1, #0]
 8008d1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008d20:	4691      	mov	r9, r2
 8008d22:	f023 0820 	bic.w	r8, r3, #32
 8008d26:	bfbc      	itt	lt
 8008d28:	4622      	movlt	r2, r4
 8008d2a:	4614      	movlt	r4, r2
 8008d2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d30:	d005      	beq.n	8008d3e <__cvt+0x42>
 8008d32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008d36:	d100      	bne.n	8008d3a <__cvt+0x3e>
 8008d38:	3601      	adds	r6, #1
 8008d3a:	2102      	movs	r1, #2
 8008d3c:	e000      	b.n	8008d40 <__cvt+0x44>
 8008d3e:	2103      	movs	r1, #3
 8008d40:	ab03      	add	r3, sp, #12
 8008d42:	9301      	str	r3, [sp, #4]
 8008d44:	ab02      	add	r3, sp, #8
 8008d46:	9300      	str	r3, [sp, #0]
 8008d48:	ec45 4b10 	vmov	d0, r4, r5
 8008d4c:	4653      	mov	r3, sl
 8008d4e:	4632      	mov	r2, r6
 8008d50:	f001 fdae 	bl	800a8b0 <_dtoa_r>
 8008d54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008d58:	4607      	mov	r7, r0
 8008d5a:	d102      	bne.n	8008d62 <__cvt+0x66>
 8008d5c:	f019 0f01 	tst.w	r9, #1
 8008d60:	d022      	beq.n	8008da8 <__cvt+0xac>
 8008d62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d66:	eb07 0906 	add.w	r9, r7, r6
 8008d6a:	d110      	bne.n	8008d8e <__cvt+0x92>
 8008d6c:	783b      	ldrb	r3, [r7, #0]
 8008d6e:	2b30      	cmp	r3, #48	; 0x30
 8008d70:	d10a      	bne.n	8008d88 <__cvt+0x8c>
 8008d72:	2200      	movs	r2, #0
 8008d74:	2300      	movs	r3, #0
 8008d76:	4620      	mov	r0, r4
 8008d78:	4629      	mov	r1, r5
 8008d7a:	f7f7 fea5 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d7e:	b918      	cbnz	r0, 8008d88 <__cvt+0x8c>
 8008d80:	f1c6 0601 	rsb	r6, r6, #1
 8008d84:	f8ca 6000 	str.w	r6, [sl]
 8008d88:	f8da 3000 	ldr.w	r3, [sl]
 8008d8c:	4499      	add	r9, r3
 8008d8e:	2200      	movs	r2, #0
 8008d90:	2300      	movs	r3, #0
 8008d92:	4620      	mov	r0, r4
 8008d94:	4629      	mov	r1, r5
 8008d96:	f7f7 fe97 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d9a:	b108      	cbz	r0, 8008da0 <__cvt+0xa4>
 8008d9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008da0:	2230      	movs	r2, #48	; 0x30
 8008da2:	9b03      	ldr	r3, [sp, #12]
 8008da4:	454b      	cmp	r3, r9
 8008da6:	d307      	bcc.n	8008db8 <__cvt+0xbc>
 8008da8:	9b03      	ldr	r3, [sp, #12]
 8008daa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008dac:	1bdb      	subs	r3, r3, r7
 8008dae:	4638      	mov	r0, r7
 8008db0:	6013      	str	r3, [r2, #0]
 8008db2:	b004      	add	sp, #16
 8008db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008db8:	1c59      	adds	r1, r3, #1
 8008dba:	9103      	str	r1, [sp, #12]
 8008dbc:	701a      	strb	r2, [r3, #0]
 8008dbe:	e7f0      	b.n	8008da2 <__cvt+0xa6>

08008dc0 <__exponent>:
 8008dc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	2900      	cmp	r1, #0
 8008dc6:	bfb8      	it	lt
 8008dc8:	4249      	neglt	r1, r1
 8008dca:	f803 2b02 	strb.w	r2, [r3], #2
 8008dce:	bfb4      	ite	lt
 8008dd0:	222d      	movlt	r2, #45	; 0x2d
 8008dd2:	222b      	movge	r2, #43	; 0x2b
 8008dd4:	2909      	cmp	r1, #9
 8008dd6:	7042      	strb	r2, [r0, #1]
 8008dd8:	dd2a      	ble.n	8008e30 <__exponent+0x70>
 8008dda:	f10d 0407 	add.w	r4, sp, #7
 8008dde:	46a4      	mov	ip, r4
 8008de0:	270a      	movs	r7, #10
 8008de2:	46a6      	mov	lr, r4
 8008de4:	460a      	mov	r2, r1
 8008de6:	fb91 f6f7 	sdiv	r6, r1, r7
 8008dea:	fb07 1516 	mls	r5, r7, r6, r1
 8008dee:	3530      	adds	r5, #48	; 0x30
 8008df0:	2a63      	cmp	r2, #99	; 0x63
 8008df2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008df6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008dfa:	4631      	mov	r1, r6
 8008dfc:	dcf1      	bgt.n	8008de2 <__exponent+0x22>
 8008dfe:	3130      	adds	r1, #48	; 0x30
 8008e00:	f1ae 0502 	sub.w	r5, lr, #2
 8008e04:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008e08:	1c44      	adds	r4, r0, #1
 8008e0a:	4629      	mov	r1, r5
 8008e0c:	4561      	cmp	r1, ip
 8008e0e:	d30a      	bcc.n	8008e26 <__exponent+0x66>
 8008e10:	f10d 0209 	add.w	r2, sp, #9
 8008e14:	eba2 020e 	sub.w	r2, r2, lr
 8008e18:	4565      	cmp	r5, ip
 8008e1a:	bf88      	it	hi
 8008e1c:	2200      	movhi	r2, #0
 8008e1e:	4413      	add	r3, r2
 8008e20:	1a18      	subs	r0, r3, r0
 8008e22:	b003      	add	sp, #12
 8008e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e2a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008e2e:	e7ed      	b.n	8008e0c <__exponent+0x4c>
 8008e30:	2330      	movs	r3, #48	; 0x30
 8008e32:	3130      	adds	r1, #48	; 0x30
 8008e34:	7083      	strb	r3, [r0, #2]
 8008e36:	70c1      	strb	r1, [r0, #3]
 8008e38:	1d03      	adds	r3, r0, #4
 8008e3a:	e7f1      	b.n	8008e20 <__exponent+0x60>

08008e3c <_printf_float>:
 8008e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e40:	ed2d 8b02 	vpush	{d8}
 8008e44:	b08d      	sub	sp, #52	; 0x34
 8008e46:	460c      	mov	r4, r1
 8008e48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008e4c:	4616      	mov	r6, r2
 8008e4e:	461f      	mov	r7, r3
 8008e50:	4605      	mov	r5, r0
 8008e52:	f002 fe8b 	bl	800bb6c <_localeconv_r>
 8008e56:	f8d0 a000 	ldr.w	sl, [r0]
 8008e5a:	4650      	mov	r0, sl
 8008e5c:	f7f7 f9b8 	bl	80001d0 <strlen>
 8008e60:	2300      	movs	r3, #0
 8008e62:	930a      	str	r3, [sp, #40]	; 0x28
 8008e64:	6823      	ldr	r3, [r4, #0]
 8008e66:	9305      	str	r3, [sp, #20]
 8008e68:	f8d8 3000 	ldr.w	r3, [r8]
 8008e6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008e70:	3307      	adds	r3, #7
 8008e72:	f023 0307 	bic.w	r3, r3, #7
 8008e76:	f103 0208 	add.w	r2, r3, #8
 8008e7a:	f8c8 2000 	str.w	r2, [r8]
 8008e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e82:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008e86:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008e8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008e8e:	9307      	str	r3, [sp, #28]
 8008e90:	f8cd 8018 	str.w	r8, [sp, #24]
 8008e94:	ee08 0a10 	vmov	s16, r0
 8008e98:	4b9f      	ldr	r3, [pc, #636]	; (8009118 <_printf_float+0x2dc>)
 8008e9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ea2:	f7f7 fe43 	bl	8000b2c <__aeabi_dcmpun>
 8008ea6:	bb88      	cbnz	r0, 8008f0c <_printf_float+0xd0>
 8008ea8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008eac:	4b9a      	ldr	r3, [pc, #616]	; (8009118 <_printf_float+0x2dc>)
 8008eae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008eb2:	f7f7 fe1d 	bl	8000af0 <__aeabi_dcmple>
 8008eb6:	bb48      	cbnz	r0, 8008f0c <_printf_float+0xd0>
 8008eb8:	2200      	movs	r2, #0
 8008eba:	2300      	movs	r3, #0
 8008ebc:	4640      	mov	r0, r8
 8008ebe:	4649      	mov	r1, r9
 8008ec0:	f7f7 fe0c 	bl	8000adc <__aeabi_dcmplt>
 8008ec4:	b110      	cbz	r0, 8008ecc <_printf_float+0x90>
 8008ec6:	232d      	movs	r3, #45	; 0x2d
 8008ec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ecc:	4b93      	ldr	r3, [pc, #588]	; (800911c <_printf_float+0x2e0>)
 8008ece:	4894      	ldr	r0, [pc, #592]	; (8009120 <_printf_float+0x2e4>)
 8008ed0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008ed4:	bf94      	ite	ls
 8008ed6:	4698      	movls	r8, r3
 8008ed8:	4680      	movhi	r8, r0
 8008eda:	2303      	movs	r3, #3
 8008edc:	6123      	str	r3, [r4, #16]
 8008ede:	9b05      	ldr	r3, [sp, #20]
 8008ee0:	f023 0204 	bic.w	r2, r3, #4
 8008ee4:	6022      	str	r2, [r4, #0]
 8008ee6:	f04f 0900 	mov.w	r9, #0
 8008eea:	9700      	str	r7, [sp, #0]
 8008eec:	4633      	mov	r3, r6
 8008eee:	aa0b      	add	r2, sp, #44	; 0x2c
 8008ef0:	4621      	mov	r1, r4
 8008ef2:	4628      	mov	r0, r5
 8008ef4:	f000 f9d8 	bl	80092a8 <_printf_common>
 8008ef8:	3001      	adds	r0, #1
 8008efa:	f040 8090 	bne.w	800901e <_printf_float+0x1e2>
 8008efe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f02:	b00d      	add	sp, #52	; 0x34
 8008f04:	ecbd 8b02 	vpop	{d8}
 8008f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f0c:	4642      	mov	r2, r8
 8008f0e:	464b      	mov	r3, r9
 8008f10:	4640      	mov	r0, r8
 8008f12:	4649      	mov	r1, r9
 8008f14:	f7f7 fe0a 	bl	8000b2c <__aeabi_dcmpun>
 8008f18:	b140      	cbz	r0, 8008f2c <_printf_float+0xf0>
 8008f1a:	464b      	mov	r3, r9
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	bfbc      	itt	lt
 8008f20:	232d      	movlt	r3, #45	; 0x2d
 8008f22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008f26:	487f      	ldr	r0, [pc, #508]	; (8009124 <_printf_float+0x2e8>)
 8008f28:	4b7f      	ldr	r3, [pc, #508]	; (8009128 <_printf_float+0x2ec>)
 8008f2a:	e7d1      	b.n	8008ed0 <_printf_float+0x94>
 8008f2c:	6863      	ldr	r3, [r4, #4]
 8008f2e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008f32:	9206      	str	r2, [sp, #24]
 8008f34:	1c5a      	adds	r2, r3, #1
 8008f36:	d13f      	bne.n	8008fb8 <_printf_float+0x17c>
 8008f38:	2306      	movs	r3, #6
 8008f3a:	6063      	str	r3, [r4, #4]
 8008f3c:	9b05      	ldr	r3, [sp, #20]
 8008f3e:	6861      	ldr	r1, [r4, #4]
 8008f40:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008f44:	2300      	movs	r3, #0
 8008f46:	9303      	str	r3, [sp, #12]
 8008f48:	ab0a      	add	r3, sp, #40	; 0x28
 8008f4a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008f4e:	ab09      	add	r3, sp, #36	; 0x24
 8008f50:	ec49 8b10 	vmov	d0, r8, r9
 8008f54:	9300      	str	r3, [sp, #0]
 8008f56:	6022      	str	r2, [r4, #0]
 8008f58:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	f7ff fecd 	bl	8008cfc <__cvt>
 8008f62:	9b06      	ldr	r3, [sp, #24]
 8008f64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f66:	2b47      	cmp	r3, #71	; 0x47
 8008f68:	4680      	mov	r8, r0
 8008f6a:	d108      	bne.n	8008f7e <_printf_float+0x142>
 8008f6c:	1cc8      	adds	r0, r1, #3
 8008f6e:	db02      	blt.n	8008f76 <_printf_float+0x13a>
 8008f70:	6863      	ldr	r3, [r4, #4]
 8008f72:	4299      	cmp	r1, r3
 8008f74:	dd41      	ble.n	8008ffa <_printf_float+0x1be>
 8008f76:	f1ab 0b02 	sub.w	fp, fp, #2
 8008f7a:	fa5f fb8b 	uxtb.w	fp, fp
 8008f7e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008f82:	d820      	bhi.n	8008fc6 <_printf_float+0x18a>
 8008f84:	3901      	subs	r1, #1
 8008f86:	465a      	mov	r2, fp
 8008f88:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008f8c:	9109      	str	r1, [sp, #36]	; 0x24
 8008f8e:	f7ff ff17 	bl	8008dc0 <__exponent>
 8008f92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f94:	1813      	adds	r3, r2, r0
 8008f96:	2a01      	cmp	r2, #1
 8008f98:	4681      	mov	r9, r0
 8008f9a:	6123      	str	r3, [r4, #16]
 8008f9c:	dc02      	bgt.n	8008fa4 <_printf_float+0x168>
 8008f9e:	6822      	ldr	r2, [r4, #0]
 8008fa0:	07d2      	lsls	r2, r2, #31
 8008fa2:	d501      	bpl.n	8008fa8 <_printf_float+0x16c>
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	6123      	str	r3, [r4, #16]
 8008fa8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d09c      	beq.n	8008eea <_printf_float+0xae>
 8008fb0:	232d      	movs	r3, #45	; 0x2d
 8008fb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fb6:	e798      	b.n	8008eea <_printf_float+0xae>
 8008fb8:	9a06      	ldr	r2, [sp, #24]
 8008fba:	2a47      	cmp	r2, #71	; 0x47
 8008fbc:	d1be      	bne.n	8008f3c <_printf_float+0x100>
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1bc      	bne.n	8008f3c <_printf_float+0x100>
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e7b9      	b.n	8008f3a <_printf_float+0xfe>
 8008fc6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008fca:	d118      	bne.n	8008ffe <_printf_float+0x1c2>
 8008fcc:	2900      	cmp	r1, #0
 8008fce:	6863      	ldr	r3, [r4, #4]
 8008fd0:	dd0b      	ble.n	8008fea <_printf_float+0x1ae>
 8008fd2:	6121      	str	r1, [r4, #16]
 8008fd4:	b913      	cbnz	r3, 8008fdc <_printf_float+0x1a0>
 8008fd6:	6822      	ldr	r2, [r4, #0]
 8008fd8:	07d0      	lsls	r0, r2, #31
 8008fda:	d502      	bpl.n	8008fe2 <_printf_float+0x1a6>
 8008fdc:	3301      	adds	r3, #1
 8008fde:	440b      	add	r3, r1
 8008fe0:	6123      	str	r3, [r4, #16]
 8008fe2:	65a1      	str	r1, [r4, #88]	; 0x58
 8008fe4:	f04f 0900 	mov.w	r9, #0
 8008fe8:	e7de      	b.n	8008fa8 <_printf_float+0x16c>
 8008fea:	b913      	cbnz	r3, 8008ff2 <_printf_float+0x1b6>
 8008fec:	6822      	ldr	r2, [r4, #0]
 8008fee:	07d2      	lsls	r2, r2, #31
 8008ff0:	d501      	bpl.n	8008ff6 <_printf_float+0x1ba>
 8008ff2:	3302      	adds	r3, #2
 8008ff4:	e7f4      	b.n	8008fe0 <_printf_float+0x1a4>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e7f2      	b.n	8008fe0 <_printf_float+0x1a4>
 8008ffa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009000:	4299      	cmp	r1, r3
 8009002:	db05      	blt.n	8009010 <_printf_float+0x1d4>
 8009004:	6823      	ldr	r3, [r4, #0]
 8009006:	6121      	str	r1, [r4, #16]
 8009008:	07d8      	lsls	r0, r3, #31
 800900a:	d5ea      	bpl.n	8008fe2 <_printf_float+0x1a6>
 800900c:	1c4b      	adds	r3, r1, #1
 800900e:	e7e7      	b.n	8008fe0 <_printf_float+0x1a4>
 8009010:	2900      	cmp	r1, #0
 8009012:	bfd4      	ite	le
 8009014:	f1c1 0202 	rsble	r2, r1, #2
 8009018:	2201      	movgt	r2, #1
 800901a:	4413      	add	r3, r2
 800901c:	e7e0      	b.n	8008fe0 <_printf_float+0x1a4>
 800901e:	6823      	ldr	r3, [r4, #0]
 8009020:	055a      	lsls	r2, r3, #21
 8009022:	d407      	bmi.n	8009034 <_printf_float+0x1f8>
 8009024:	6923      	ldr	r3, [r4, #16]
 8009026:	4642      	mov	r2, r8
 8009028:	4631      	mov	r1, r6
 800902a:	4628      	mov	r0, r5
 800902c:	47b8      	blx	r7
 800902e:	3001      	adds	r0, #1
 8009030:	d12c      	bne.n	800908c <_printf_float+0x250>
 8009032:	e764      	b.n	8008efe <_printf_float+0xc2>
 8009034:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009038:	f240 80e0 	bls.w	80091fc <_printf_float+0x3c0>
 800903c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009040:	2200      	movs	r2, #0
 8009042:	2300      	movs	r3, #0
 8009044:	f7f7 fd40 	bl	8000ac8 <__aeabi_dcmpeq>
 8009048:	2800      	cmp	r0, #0
 800904a:	d034      	beq.n	80090b6 <_printf_float+0x27a>
 800904c:	4a37      	ldr	r2, [pc, #220]	; (800912c <_printf_float+0x2f0>)
 800904e:	2301      	movs	r3, #1
 8009050:	4631      	mov	r1, r6
 8009052:	4628      	mov	r0, r5
 8009054:	47b8      	blx	r7
 8009056:	3001      	adds	r0, #1
 8009058:	f43f af51 	beq.w	8008efe <_printf_float+0xc2>
 800905c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009060:	429a      	cmp	r2, r3
 8009062:	db02      	blt.n	800906a <_printf_float+0x22e>
 8009064:	6823      	ldr	r3, [r4, #0]
 8009066:	07d8      	lsls	r0, r3, #31
 8009068:	d510      	bpl.n	800908c <_printf_float+0x250>
 800906a:	ee18 3a10 	vmov	r3, s16
 800906e:	4652      	mov	r2, sl
 8009070:	4631      	mov	r1, r6
 8009072:	4628      	mov	r0, r5
 8009074:	47b8      	blx	r7
 8009076:	3001      	adds	r0, #1
 8009078:	f43f af41 	beq.w	8008efe <_printf_float+0xc2>
 800907c:	f04f 0800 	mov.w	r8, #0
 8009080:	f104 091a 	add.w	r9, r4, #26
 8009084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009086:	3b01      	subs	r3, #1
 8009088:	4543      	cmp	r3, r8
 800908a:	dc09      	bgt.n	80090a0 <_printf_float+0x264>
 800908c:	6823      	ldr	r3, [r4, #0]
 800908e:	079b      	lsls	r3, r3, #30
 8009090:	f100 8105 	bmi.w	800929e <_printf_float+0x462>
 8009094:	68e0      	ldr	r0, [r4, #12]
 8009096:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009098:	4298      	cmp	r0, r3
 800909a:	bfb8      	it	lt
 800909c:	4618      	movlt	r0, r3
 800909e:	e730      	b.n	8008f02 <_printf_float+0xc6>
 80090a0:	2301      	movs	r3, #1
 80090a2:	464a      	mov	r2, r9
 80090a4:	4631      	mov	r1, r6
 80090a6:	4628      	mov	r0, r5
 80090a8:	47b8      	blx	r7
 80090aa:	3001      	adds	r0, #1
 80090ac:	f43f af27 	beq.w	8008efe <_printf_float+0xc2>
 80090b0:	f108 0801 	add.w	r8, r8, #1
 80090b4:	e7e6      	b.n	8009084 <_printf_float+0x248>
 80090b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	dc39      	bgt.n	8009130 <_printf_float+0x2f4>
 80090bc:	4a1b      	ldr	r2, [pc, #108]	; (800912c <_printf_float+0x2f0>)
 80090be:	2301      	movs	r3, #1
 80090c0:	4631      	mov	r1, r6
 80090c2:	4628      	mov	r0, r5
 80090c4:	47b8      	blx	r7
 80090c6:	3001      	adds	r0, #1
 80090c8:	f43f af19 	beq.w	8008efe <_printf_float+0xc2>
 80090cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090d0:	4313      	orrs	r3, r2
 80090d2:	d102      	bne.n	80090da <_printf_float+0x29e>
 80090d4:	6823      	ldr	r3, [r4, #0]
 80090d6:	07d9      	lsls	r1, r3, #31
 80090d8:	d5d8      	bpl.n	800908c <_printf_float+0x250>
 80090da:	ee18 3a10 	vmov	r3, s16
 80090de:	4652      	mov	r2, sl
 80090e0:	4631      	mov	r1, r6
 80090e2:	4628      	mov	r0, r5
 80090e4:	47b8      	blx	r7
 80090e6:	3001      	adds	r0, #1
 80090e8:	f43f af09 	beq.w	8008efe <_printf_float+0xc2>
 80090ec:	f04f 0900 	mov.w	r9, #0
 80090f0:	f104 0a1a 	add.w	sl, r4, #26
 80090f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090f6:	425b      	negs	r3, r3
 80090f8:	454b      	cmp	r3, r9
 80090fa:	dc01      	bgt.n	8009100 <_printf_float+0x2c4>
 80090fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090fe:	e792      	b.n	8009026 <_printf_float+0x1ea>
 8009100:	2301      	movs	r3, #1
 8009102:	4652      	mov	r2, sl
 8009104:	4631      	mov	r1, r6
 8009106:	4628      	mov	r0, r5
 8009108:	47b8      	blx	r7
 800910a:	3001      	adds	r0, #1
 800910c:	f43f aef7 	beq.w	8008efe <_printf_float+0xc2>
 8009110:	f109 0901 	add.w	r9, r9, #1
 8009114:	e7ee      	b.n	80090f4 <_printf_float+0x2b8>
 8009116:	bf00      	nop
 8009118:	7fefffff 	.word	0x7fefffff
 800911c:	0800f4d4 	.word	0x0800f4d4
 8009120:	0800f4d8 	.word	0x0800f4d8
 8009124:	0800f4e0 	.word	0x0800f4e0
 8009128:	0800f4dc 	.word	0x0800f4dc
 800912c:	0800f4e4 	.word	0x0800f4e4
 8009130:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009132:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009134:	429a      	cmp	r2, r3
 8009136:	bfa8      	it	ge
 8009138:	461a      	movge	r2, r3
 800913a:	2a00      	cmp	r2, #0
 800913c:	4691      	mov	r9, r2
 800913e:	dc37      	bgt.n	80091b0 <_printf_float+0x374>
 8009140:	f04f 0b00 	mov.w	fp, #0
 8009144:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009148:	f104 021a 	add.w	r2, r4, #26
 800914c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800914e:	9305      	str	r3, [sp, #20]
 8009150:	eba3 0309 	sub.w	r3, r3, r9
 8009154:	455b      	cmp	r3, fp
 8009156:	dc33      	bgt.n	80091c0 <_printf_float+0x384>
 8009158:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800915c:	429a      	cmp	r2, r3
 800915e:	db3b      	blt.n	80091d8 <_printf_float+0x39c>
 8009160:	6823      	ldr	r3, [r4, #0]
 8009162:	07da      	lsls	r2, r3, #31
 8009164:	d438      	bmi.n	80091d8 <_printf_float+0x39c>
 8009166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009168:	9a05      	ldr	r2, [sp, #20]
 800916a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800916c:	1a9a      	subs	r2, r3, r2
 800916e:	eba3 0901 	sub.w	r9, r3, r1
 8009172:	4591      	cmp	r9, r2
 8009174:	bfa8      	it	ge
 8009176:	4691      	movge	r9, r2
 8009178:	f1b9 0f00 	cmp.w	r9, #0
 800917c:	dc35      	bgt.n	80091ea <_printf_float+0x3ae>
 800917e:	f04f 0800 	mov.w	r8, #0
 8009182:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009186:	f104 0a1a 	add.w	sl, r4, #26
 800918a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800918e:	1a9b      	subs	r3, r3, r2
 8009190:	eba3 0309 	sub.w	r3, r3, r9
 8009194:	4543      	cmp	r3, r8
 8009196:	f77f af79 	ble.w	800908c <_printf_float+0x250>
 800919a:	2301      	movs	r3, #1
 800919c:	4652      	mov	r2, sl
 800919e:	4631      	mov	r1, r6
 80091a0:	4628      	mov	r0, r5
 80091a2:	47b8      	blx	r7
 80091a4:	3001      	adds	r0, #1
 80091a6:	f43f aeaa 	beq.w	8008efe <_printf_float+0xc2>
 80091aa:	f108 0801 	add.w	r8, r8, #1
 80091ae:	e7ec      	b.n	800918a <_printf_float+0x34e>
 80091b0:	4613      	mov	r3, r2
 80091b2:	4631      	mov	r1, r6
 80091b4:	4642      	mov	r2, r8
 80091b6:	4628      	mov	r0, r5
 80091b8:	47b8      	blx	r7
 80091ba:	3001      	adds	r0, #1
 80091bc:	d1c0      	bne.n	8009140 <_printf_float+0x304>
 80091be:	e69e      	b.n	8008efe <_printf_float+0xc2>
 80091c0:	2301      	movs	r3, #1
 80091c2:	4631      	mov	r1, r6
 80091c4:	4628      	mov	r0, r5
 80091c6:	9205      	str	r2, [sp, #20]
 80091c8:	47b8      	blx	r7
 80091ca:	3001      	adds	r0, #1
 80091cc:	f43f ae97 	beq.w	8008efe <_printf_float+0xc2>
 80091d0:	9a05      	ldr	r2, [sp, #20]
 80091d2:	f10b 0b01 	add.w	fp, fp, #1
 80091d6:	e7b9      	b.n	800914c <_printf_float+0x310>
 80091d8:	ee18 3a10 	vmov	r3, s16
 80091dc:	4652      	mov	r2, sl
 80091de:	4631      	mov	r1, r6
 80091e0:	4628      	mov	r0, r5
 80091e2:	47b8      	blx	r7
 80091e4:	3001      	adds	r0, #1
 80091e6:	d1be      	bne.n	8009166 <_printf_float+0x32a>
 80091e8:	e689      	b.n	8008efe <_printf_float+0xc2>
 80091ea:	9a05      	ldr	r2, [sp, #20]
 80091ec:	464b      	mov	r3, r9
 80091ee:	4442      	add	r2, r8
 80091f0:	4631      	mov	r1, r6
 80091f2:	4628      	mov	r0, r5
 80091f4:	47b8      	blx	r7
 80091f6:	3001      	adds	r0, #1
 80091f8:	d1c1      	bne.n	800917e <_printf_float+0x342>
 80091fa:	e680      	b.n	8008efe <_printf_float+0xc2>
 80091fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091fe:	2a01      	cmp	r2, #1
 8009200:	dc01      	bgt.n	8009206 <_printf_float+0x3ca>
 8009202:	07db      	lsls	r3, r3, #31
 8009204:	d538      	bpl.n	8009278 <_printf_float+0x43c>
 8009206:	2301      	movs	r3, #1
 8009208:	4642      	mov	r2, r8
 800920a:	4631      	mov	r1, r6
 800920c:	4628      	mov	r0, r5
 800920e:	47b8      	blx	r7
 8009210:	3001      	adds	r0, #1
 8009212:	f43f ae74 	beq.w	8008efe <_printf_float+0xc2>
 8009216:	ee18 3a10 	vmov	r3, s16
 800921a:	4652      	mov	r2, sl
 800921c:	4631      	mov	r1, r6
 800921e:	4628      	mov	r0, r5
 8009220:	47b8      	blx	r7
 8009222:	3001      	adds	r0, #1
 8009224:	f43f ae6b 	beq.w	8008efe <_printf_float+0xc2>
 8009228:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800922c:	2200      	movs	r2, #0
 800922e:	2300      	movs	r3, #0
 8009230:	f7f7 fc4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009234:	b9d8      	cbnz	r0, 800926e <_printf_float+0x432>
 8009236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009238:	f108 0201 	add.w	r2, r8, #1
 800923c:	3b01      	subs	r3, #1
 800923e:	4631      	mov	r1, r6
 8009240:	4628      	mov	r0, r5
 8009242:	47b8      	blx	r7
 8009244:	3001      	adds	r0, #1
 8009246:	d10e      	bne.n	8009266 <_printf_float+0x42a>
 8009248:	e659      	b.n	8008efe <_printf_float+0xc2>
 800924a:	2301      	movs	r3, #1
 800924c:	4652      	mov	r2, sl
 800924e:	4631      	mov	r1, r6
 8009250:	4628      	mov	r0, r5
 8009252:	47b8      	blx	r7
 8009254:	3001      	adds	r0, #1
 8009256:	f43f ae52 	beq.w	8008efe <_printf_float+0xc2>
 800925a:	f108 0801 	add.w	r8, r8, #1
 800925e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009260:	3b01      	subs	r3, #1
 8009262:	4543      	cmp	r3, r8
 8009264:	dcf1      	bgt.n	800924a <_printf_float+0x40e>
 8009266:	464b      	mov	r3, r9
 8009268:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800926c:	e6dc      	b.n	8009028 <_printf_float+0x1ec>
 800926e:	f04f 0800 	mov.w	r8, #0
 8009272:	f104 0a1a 	add.w	sl, r4, #26
 8009276:	e7f2      	b.n	800925e <_printf_float+0x422>
 8009278:	2301      	movs	r3, #1
 800927a:	4642      	mov	r2, r8
 800927c:	e7df      	b.n	800923e <_printf_float+0x402>
 800927e:	2301      	movs	r3, #1
 8009280:	464a      	mov	r2, r9
 8009282:	4631      	mov	r1, r6
 8009284:	4628      	mov	r0, r5
 8009286:	47b8      	blx	r7
 8009288:	3001      	adds	r0, #1
 800928a:	f43f ae38 	beq.w	8008efe <_printf_float+0xc2>
 800928e:	f108 0801 	add.w	r8, r8, #1
 8009292:	68e3      	ldr	r3, [r4, #12]
 8009294:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009296:	1a5b      	subs	r3, r3, r1
 8009298:	4543      	cmp	r3, r8
 800929a:	dcf0      	bgt.n	800927e <_printf_float+0x442>
 800929c:	e6fa      	b.n	8009094 <_printf_float+0x258>
 800929e:	f04f 0800 	mov.w	r8, #0
 80092a2:	f104 0919 	add.w	r9, r4, #25
 80092a6:	e7f4      	b.n	8009292 <_printf_float+0x456>

080092a8 <_printf_common>:
 80092a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092ac:	4616      	mov	r6, r2
 80092ae:	4699      	mov	r9, r3
 80092b0:	688a      	ldr	r2, [r1, #8]
 80092b2:	690b      	ldr	r3, [r1, #16]
 80092b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092b8:	4293      	cmp	r3, r2
 80092ba:	bfb8      	it	lt
 80092bc:	4613      	movlt	r3, r2
 80092be:	6033      	str	r3, [r6, #0]
 80092c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092c4:	4607      	mov	r7, r0
 80092c6:	460c      	mov	r4, r1
 80092c8:	b10a      	cbz	r2, 80092ce <_printf_common+0x26>
 80092ca:	3301      	adds	r3, #1
 80092cc:	6033      	str	r3, [r6, #0]
 80092ce:	6823      	ldr	r3, [r4, #0]
 80092d0:	0699      	lsls	r1, r3, #26
 80092d2:	bf42      	ittt	mi
 80092d4:	6833      	ldrmi	r3, [r6, #0]
 80092d6:	3302      	addmi	r3, #2
 80092d8:	6033      	strmi	r3, [r6, #0]
 80092da:	6825      	ldr	r5, [r4, #0]
 80092dc:	f015 0506 	ands.w	r5, r5, #6
 80092e0:	d106      	bne.n	80092f0 <_printf_common+0x48>
 80092e2:	f104 0a19 	add.w	sl, r4, #25
 80092e6:	68e3      	ldr	r3, [r4, #12]
 80092e8:	6832      	ldr	r2, [r6, #0]
 80092ea:	1a9b      	subs	r3, r3, r2
 80092ec:	42ab      	cmp	r3, r5
 80092ee:	dc26      	bgt.n	800933e <_printf_common+0x96>
 80092f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80092f4:	1e13      	subs	r3, r2, #0
 80092f6:	6822      	ldr	r2, [r4, #0]
 80092f8:	bf18      	it	ne
 80092fa:	2301      	movne	r3, #1
 80092fc:	0692      	lsls	r2, r2, #26
 80092fe:	d42b      	bmi.n	8009358 <_printf_common+0xb0>
 8009300:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009304:	4649      	mov	r1, r9
 8009306:	4638      	mov	r0, r7
 8009308:	47c0      	blx	r8
 800930a:	3001      	adds	r0, #1
 800930c:	d01e      	beq.n	800934c <_printf_common+0xa4>
 800930e:	6823      	ldr	r3, [r4, #0]
 8009310:	68e5      	ldr	r5, [r4, #12]
 8009312:	6832      	ldr	r2, [r6, #0]
 8009314:	f003 0306 	and.w	r3, r3, #6
 8009318:	2b04      	cmp	r3, #4
 800931a:	bf08      	it	eq
 800931c:	1aad      	subeq	r5, r5, r2
 800931e:	68a3      	ldr	r3, [r4, #8]
 8009320:	6922      	ldr	r2, [r4, #16]
 8009322:	bf0c      	ite	eq
 8009324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009328:	2500      	movne	r5, #0
 800932a:	4293      	cmp	r3, r2
 800932c:	bfc4      	itt	gt
 800932e:	1a9b      	subgt	r3, r3, r2
 8009330:	18ed      	addgt	r5, r5, r3
 8009332:	2600      	movs	r6, #0
 8009334:	341a      	adds	r4, #26
 8009336:	42b5      	cmp	r5, r6
 8009338:	d11a      	bne.n	8009370 <_printf_common+0xc8>
 800933a:	2000      	movs	r0, #0
 800933c:	e008      	b.n	8009350 <_printf_common+0xa8>
 800933e:	2301      	movs	r3, #1
 8009340:	4652      	mov	r2, sl
 8009342:	4649      	mov	r1, r9
 8009344:	4638      	mov	r0, r7
 8009346:	47c0      	blx	r8
 8009348:	3001      	adds	r0, #1
 800934a:	d103      	bne.n	8009354 <_printf_common+0xac>
 800934c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009354:	3501      	adds	r5, #1
 8009356:	e7c6      	b.n	80092e6 <_printf_common+0x3e>
 8009358:	18e1      	adds	r1, r4, r3
 800935a:	1c5a      	adds	r2, r3, #1
 800935c:	2030      	movs	r0, #48	; 0x30
 800935e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009362:	4422      	add	r2, r4
 8009364:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009368:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800936c:	3302      	adds	r3, #2
 800936e:	e7c7      	b.n	8009300 <_printf_common+0x58>
 8009370:	2301      	movs	r3, #1
 8009372:	4622      	mov	r2, r4
 8009374:	4649      	mov	r1, r9
 8009376:	4638      	mov	r0, r7
 8009378:	47c0      	blx	r8
 800937a:	3001      	adds	r0, #1
 800937c:	d0e6      	beq.n	800934c <_printf_common+0xa4>
 800937e:	3601      	adds	r6, #1
 8009380:	e7d9      	b.n	8009336 <_printf_common+0x8e>
	...

08009384 <_printf_i>:
 8009384:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009388:	7e0f      	ldrb	r7, [r1, #24]
 800938a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800938c:	2f78      	cmp	r7, #120	; 0x78
 800938e:	4691      	mov	r9, r2
 8009390:	4680      	mov	r8, r0
 8009392:	460c      	mov	r4, r1
 8009394:	469a      	mov	sl, r3
 8009396:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800939a:	d807      	bhi.n	80093ac <_printf_i+0x28>
 800939c:	2f62      	cmp	r7, #98	; 0x62
 800939e:	d80a      	bhi.n	80093b6 <_printf_i+0x32>
 80093a0:	2f00      	cmp	r7, #0
 80093a2:	f000 80d8 	beq.w	8009556 <_printf_i+0x1d2>
 80093a6:	2f58      	cmp	r7, #88	; 0x58
 80093a8:	f000 80a3 	beq.w	80094f2 <_printf_i+0x16e>
 80093ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093b4:	e03a      	b.n	800942c <_printf_i+0xa8>
 80093b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093ba:	2b15      	cmp	r3, #21
 80093bc:	d8f6      	bhi.n	80093ac <_printf_i+0x28>
 80093be:	a101      	add	r1, pc, #4	; (adr r1, 80093c4 <_printf_i+0x40>)
 80093c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093c4:	0800941d 	.word	0x0800941d
 80093c8:	08009431 	.word	0x08009431
 80093cc:	080093ad 	.word	0x080093ad
 80093d0:	080093ad 	.word	0x080093ad
 80093d4:	080093ad 	.word	0x080093ad
 80093d8:	080093ad 	.word	0x080093ad
 80093dc:	08009431 	.word	0x08009431
 80093e0:	080093ad 	.word	0x080093ad
 80093e4:	080093ad 	.word	0x080093ad
 80093e8:	080093ad 	.word	0x080093ad
 80093ec:	080093ad 	.word	0x080093ad
 80093f0:	0800953d 	.word	0x0800953d
 80093f4:	08009461 	.word	0x08009461
 80093f8:	0800951f 	.word	0x0800951f
 80093fc:	080093ad 	.word	0x080093ad
 8009400:	080093ad 	.word	0x080093ad
 8009404:	0800955f 	.word	0x0800955f
 8009408:	080093ad 	.word	0x080093ad
 800940c:	08009461 	.word	0x08009461
 8009410:	080093ad 	.word	0x080093ad
 8009414:	080093ad 	.word	0x080093ad
 8009418:	08009527 	.word	0x08009527
 800941c:	682b      	ldr	r3, [r5, #0]
 800941e:	1d1a      	adds	r2, r3, #4
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	602a      	str	r2, [r5, #0]
 8009424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009428:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800942c:	2301      	movs	r3, #1
 800942e:	e0a3      	b.n	8009578 <_printf_i+0x1f4>
 8009430:	6820      	ldr	r0, [r4, #0]
 8009432:	6829      	ldr	r1, [r5, #0]
 8009434:	0606      	lsls	r6, r0, #24
 8009436:	f101 0304 	add.w	r3, r1, #4
 800943a:	d50a      	bpl.n	8009452 <_printf_i+0xce>
 800943c:	680e      	ldr	r6, [r1, #0]
 800943e:	602b      	str	r3, [r5, #0]
 8009440:	2e00      	cmp	r6, #0
 8009442:	da03      	bge.n	800944c <_printf_i+0xc8>
 8009444:	232d      	movs	r3, #45	; 0x2d
 8009446:	4276      	negs	r6, r6
 8009448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800944c:	485e      	ldr	r0, [pc, #376]	; (80095c8 <_printf_i+0x244>)
 800944e:	230a      	movs	r3, #10
 8009450:	e019      	b.n	8009486 <_printf_i+0x102>
 8009452:	680e      	ldr	r6, [r1, #0]
 8009454:	602b      	str	r3, [r5, #0]
 8009456:	f010 0f40 	tst.w	r0, #64	; 0x40
 800945a:	bf18      	it	ne
 800945c:	b236      	sxthne	r6, r6
 800945e:	e7ef      	b.n	8009440 <_printf_i+0xbc>
 8009460:	682b      	ldr	r3, [r5, #0]
 8009462:	6820      	ldr	r0, [r4, #0]
 8009464:	1d19      	adds	r1, r3, #4
 8009466:	6029      	str	r1, [r5, #0]
 8009468:	0601      	lsls	r1, r0, #24
 800946a:	d501      	bpl.n	8009470 <_printf_i+0xec>
 800946c:	681e      	ldr	r6, [r3, #0]
 800946e:	e002      	b.n	8009476 <_printf_i+0xf2>
 8009470:	0646      	lsls	r6, r0, #25
 8009472:	d5fb      	bpl.n	800946c <_printf_i+0xe8>
 8009474:	881e      	ldrh	r6, [r3, #0]
 8009476:	4854      	ldr	r0, [pc, #336]	; (80095c8 <_printf_i+0x244>)
 8009478:	2f6f      	cmp	r7, #111	; 0x6f
 800947a:	bf0c      	ite	eq
 800947c:	2308      	moveq	r3, #8
 800947e:	230a      	movne	r3, #10
 8009480:	2100      	movs	r1, #0
 8009482:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009486:	6865      	ldr	r5, [r4, #4]
 8009488:	60a5      	str	r5, [r4, #8]
 800948a:	2d00      	cmp	r5, #0
 800948c:	bfa2      	ittt	ge
 800948e:	6821      	ldrge	r1, [r4, #0]
 8009490:	f021 0104 	bicge.w	r1, r1, #4
 8009494:	6021      	strge	r1, [r4, #0]
 8009496:	b90e      	cbnz	r6, 800949c <_printf_i+0x118>
 8009498:	2d00      	cmp	r5, #0
 800949a:	d04d      	beq.n	8009538 <_printf_i+0x1b4>
 800949c:	4615      	mov	r5, r2
 800949e:	fbb6 f1f3 	udiv	r1, r6, r3
 80094a2:	fb03 6711 	mls	r7, r3, r1, r6
 80094a6:	5dc7      	ldrb	r7, [r0, r7]
 80094a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80094ac:	4637      	mov	r7, r6
 80094ae:	42bb      	cmp	r3, r7
 80094b0:	460e      	mov	r6, r1
 80094b2:	d9f4      	bls.n	800949e <_printf_i+0x11a>
 80094b4:	2b08      	cmp	r3, #8
 80094b6:	d10b      	bne.n	80094d0 <_printf_i+0x14c>
 80094b8:	6823      	ldr	r3, [r4, #0]
 80094ba:	07de      	lsls	r6, r3, #31
 80094bc:	d508      	bpl.n	80094d0 <_printf_i+0x14c>
 80094be:	6923      	ldr	r3, [r4, #16]
 80094c0:	6861      	ldr	r1, [r4, #4]
 80094c2:	4299      	cmp	r1, r3
 80094c4:	bfde      	ittt	le
 80094c6:	2330      	movle	r3, #48	; 0x30
 80094c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80094cc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80094d0:	1b52      	subs	r2, r2, r5
 80094d2:	6122      	str	r2, [r4, #16]
 80094d4:	f8cd a000 	str.w	sl, [sp]
 80094d8:	464b      	mov	r3, r9
 80094da:	aa03      	add	r2, sp, #12
 80094dc:	4621      	mov	r1, r4
 80094de:	4640      	mov	r0, r8
 80094e0:	f7ff fee2 	bl	80092a8 <_printf_common>
 80094e4:	3001      	adds	r0, #1
 80094e6:	d14c      	bne.n	8009582 <_printf_i+0x1fe>
 80094e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094ec:	b004      	add	sp, #16
 80094ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094f2:	4835      	ldr	r0, [pc, #212]	; (80095c8 <_printf_i+0x244>)
 80094f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80094f8:	6829      	ldr	r1, [r5, #0]
 80094fa:	6823      	ldr	r3, [r4, #0]
 80094fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8009500:	6029      	str	r1, [r5, #0]
 8009502:	061d      	lsls	r5, r3, #24
 8009504:	d514      	bpl.n	8009530 <_printf_i+0x1ac>
 8009506:	07df      	lsls	r7, r3, #31
 8009508:	bf44      	itt	mi
 800950a:	f043 0320 	orrmi.w	r3, r3, #32
 800950e:	6023      	strmi	r3, [r4, #0]
 8009510:	b91e      	cbnz	r6, 800951a <_printf_i+0x196>
 8009512:	6823      	ldr	r3, [r4, #0]
 8009514:	f023 0320 	bic.w	r3, r3, #32
 8009518:	6023      	str	r3, [r4, #0]
 800951a:	2310      	movs	r3, #16
 800951c:	e7b0      	b.n	8009480 <_printf_i+0xfc>
 800951e:	6823      	ldr	r3, [r4, #0]
 8009520:	f043 0320 	orr.w	r3, r3, #32
 8009524:	6023      	str	r3, [r4, #0]
 8009526:	2378      	movs	r3, #120	; 0x78
 8009528:	4828      	ldr	r0, [pc, #160]	; (80095cc <_printf_i+0x248>)
 800952a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800952e:	e7e3      	b.n	80094f8 <_printf_i+0x174>
 8009530:	0659      	lsls	r1, r3, #25
 8009532:	bf48      	it	mi
 8009534:	b2b6      	uxthmi	r6, r6
 8009536:	e7e6      	b.n	8009506 <_printf_i+0x182>
 8009538:	4615      	mov	r5, r2
 800953a:	e7bb      	b.n	80094b4 <_printf_i+0x130>
 800953c:	682b      	ldr	r3, [r5, #0]
 800953e:	6826      	ldr	r6, [r4, #0]
 8009540:	6961      	ldr	r1, [r4, #20]
 8009542:	1d18      	adds	r0, r3, #4
 8009544:	6028      	str	r0, [r5, #0]
 8009546:	0635      	lsls	r5, r6, #24
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	d501      	bpl.n	8009550 <_printf_i+0x1cc>
 800954c:	6019      	str	r1, [r3, #0]
 800954e:	e002      	b.n	8009556 <_printf_i+0x1d2>
 8009550:	0670      	lsls	r0, r6, #25
 8009552:	d5fb      	bpl.n	800954c <_printf_i+0x1c8>
 8009554:	8019      	strh	r1, [r3, #0]
 8009556:	2300      	movs	r3, #0
 8009558:	6123      	str	r3, [r4, #16]
 800955a:	4615      	mov	r5, r2
 800955c:	e7ba      	b.n	80094d4 <_printf_i+0x150>
 800955e:	682b      	ldr	r3, [r5, #0]
 8009560:	1d1a      	adds	r2, r3, #4
 8009562:	602a      	str	r2, [r5, #0]
 8009564:	681d      	ldr	r5, [r3, #0]
 8009566:	6862      	ldr	r2, [r4, #4]
 8009568:	2100      	movs	r1, #0
 800956a:	4628      	mov	r0, r5
 800956c:	f7f6 fe38 	bl	80001e0 <memchr>
 8009570:	b108      	cbz	r0, 8009576 <_printf_i+0x1f2>
 8009572:	1b40      	subs	r0, r0, r5
 8009574:	6060      	str	r0, [r4, #4]
 8009576:	6863      	ldr	r3, [r4, #4]
 8009578:	6123      	str	r3, [r4, #16]
 800957a:	2300      	movs	r3, #0
 800957c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009580:	e7a8      	b.n	80094d4 <_printf_i+0x150>
 8009582:	6923      	ldr	r3, [r4, #16]
 8009584:	462a      	mov	r2, r5
 8009586:	4649      	mov	r1, r9
 8009588:	4640      	mov	r0, r8
 800958a:	47d0      	blx	sl
 800958c:	3001      	adds	r0, #1
 800958e:	d0ab      	beq.n	80094e8 <_printf_i+0x164>
 8009590:	6823      	ldr	r3, [r4, #0]
 8009592:	079b      	lsls	r3, r3, #30
 8009594:	d413      	bmi.n	80095be <_printf_i+0x23a>
 8009596:	68e0      	ldr	r0, [r4, #12]
 8009598:	9b03      	ldr	r3, [sp, #12]
 800959a:	4298      	cmp	r0, r3
 800959c:	bfb8      	it	lt
 800959e:	4618      	movlt	r0, r3
 80095a0:	e7a4      	b.n	80094ec <_printf_i+0x168>
 80095a2:	2301      	movs	r3, #1
 80095a4:	4632      	mov	r2, r6
 80095a6:	4649      	mov	r1, r9
 80095a8:	4640      	mov	r0, r8
 80095aa:	47d0      	blx	sl
 80095ac:	3001      	adds	r0, #1
 80095ae:	d09b      	beq.n	80094e8 <_printf_i+0x164>
 80095b0:	3501      	adds	r5, #1
 80095b2:	68e3      	ldr	r3, [r4, #12]
 80095b4:	9903      	ldr	r1, [sp, #12]
 80095b6:	1a5b      	subs	r3, r3, r1
 80095b8:	42ab      	cmp	r3, r5
 80095ba:	dcf2      	bgt.n	80095a2 <_printf_i+0x21e>
 80095bc:	e7eb      	b.n	8009596 <_printf_i+0x212>
 80095be:	2500      	movs	r5, #0
 80095c0:	f104 0619 	add.w	r6, r4, #25
 80095c4:	e7f5      	b.n	80095b2 <_printf_i+0x22e>
 80095c6:	bf00      	nop
 80095c8:	0800f4e6 	.word	0x0800f4e6
 80095cc:	0800f4f7 	.word	0x0800f4f7

080095d0 <_scanf_float>:
 80095d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d4:	b087      	sub	sp, #28
 80095d6:	4617      	mov	r7, r2
 80095d8:	9303      	str	r3, [sp, #12]
 80095da:	688b      	ldr	r3, [r1, #8]
 80095dc:	1e5a      	subs	r2, r3, #1
 80095de:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80095e2:	bf83      	ittte	hi
 80095e4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80095e8:	195b      	addhi	r3, r3, r5
 80095ea:	9302      	strhi	r3, [sp, #8]
 80095ec:	2300      	movls	r3, #0
 80095ee:	bf86      	itte	hi
 80095f0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80095f4:	608b      	strhi	r3, [r1, #8]
 80095f6:	9302      	strls	r3, [sp, #8]
 80095f8:	680b      	ldr	r3, [r1, #0]
 80095fa:	468b      	mov	fp, r1
 80095fc:	2500      	movs	r5, #0
 80095fe:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009602:	f84b 3b1c 	str.w	r3, [fp], #28
 8009606:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800960a:	4680      	mov	r8, r0
 800960c:	460c      	mov	r4, r1
 800960e:	465e      	mov	r6, fp
 8009610:	46aa      	mov	sl, r5
 8009612:	46a9      	mov	r9, r5
 8009614:	9501      	str	r5, [sp, #4]
 8009616:	68a2      	ldr	r2, [r4, #8]
 8009618:	b152      	cbz	r2, 8009630 <_scanf_float+0x60>
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	2b4e      	cmp	r3, #78	; 0x4e
 8009620:	d864      	bhi.n	80096ec <_scanf_float+0x11c>
 8009622:	2b40      	cmp	r3, #64	; 0x40
 8009624:	d83c      	bhi.n	80096a0 <_scanf_float+0xd0>
 8009626:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800962a:	b2c8      	uxtb	r0, r1
 800962c:	280e      	cmp	r0, #14
 800962e:	d93a      	bls.n	80096a6 <_scanf_float+0xd6>
 8009630:	f1b9 0f00 	cmp.w	r9, #0
 8009634:	d003      	beq.n	800963e <_scanf_float+0x6e>
 8009636:	6823      	ldr	r3, [r4, #0]
 8009638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800963c:	6023      	str	r3, [r4, #0]
 800963e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009642:	f1ba 0f01 	cmp.w	sl, #1
 8009646:	f200 8113 	bhi.w	8009870 <_scanf_float+0x2a0>
 800964a:	455e      	cmp	r6, fp
 800964c:	f200 8105 	bhi.w	800985a <_scanf_float+0x28a>
 8009650:	2501      	movs	r5, #1
 8009652:	4628      	mov	r0, r5
 8009654:	b007      	add	sp, #28
 8009656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800965a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800965e:	2a0d      	cmp	r2, #13
 8009660:	d8e6      	bhi.n	8009630 <_scanf_float+0x60>
 8009662:	a101      	add	r1, pc, #4	; (adr r1, 8009668 <_scanf_float+0x98>)
 8009664:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009668:	080097a7 	.word	0x080097a7
 800966c:	08009631 	.word	0x08009631
 8009670:	08009631 	.word	0x08009631
 8009674:	08009631 	.word	0x08009631
 8009678:	08009807 	.word	0x08009807
 800967c:	080097df 	.word	0x080097df
 8009680:	08009631 	.word	0x08009631
 8009684:	08009631 	.word	0x08009631
 8009688:	080097b5 	.word	0x080097b5
 800968c:	08009631 	.word	0x08009631
 8009690:	08009631 	.word	0x08009631
 8009694:	08009631 	.word	0x08009631
 8009698:	08009631 	.word	0x08009631
 800969c:	0800976d 	.word	0x0800976d
 80096a0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80096a4:	e7db      	b.n	800965e <_scanf_float+0x8e>
 80096a6:	290e      	cmp	r1, #14
 80096a8:	d8c2      	bhi.n	8009630 <_scanf_float+0x60>
 80096aa:	a001      	add	r0, pc, #4	; (adr r0, 80096b0 <_scanf_float+0xe0>)
 80096ac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80096b0:	0800975f 	.word	0x0800975f
 80096b4:	08009631 	.word	0x08009631
 80096b8:	0800975f 	.word	0x0800975f
 80096bc:	080097f3 	.word	0x080097f3
 80096c0:	08009631 	.word	0x08009631
 80096c4:	0800970d 	.word	0x0800970d
 80096c8:	08009749 	.word	0x08009749
 80096cc:	08009749 	.word	0x08009749
 80096d0:	08009749 	.word	0x08009749
 80096d4:	08009749 	.word	0x08009749
 80096d8:	08009749 	.word	0x08009749
 80096dc:	08009749 	.word	0x08009749
 80096e0:	08009749 	.word	0x08009749
 80096e4:	08009749 	.word	0x08009749
 80096e8:	08009749 	.word	0x08009749
 80096ec:	2b6e      	cmp	r3, #110	; 0x6e
 80096ee:	d809      	bhi.n	8009704 <_scanf_float+0x134>
 80096f0:	2b60      	cmp	r3, #96	; 0x60
 80096f2:	d8b2      	bhi.n	800965a <_scanf_float+0x8a>
 80096f4:	2b54      	cmp	r3, #84	; 0x54
 80096f6:	d077      	beq.n	80097e8 <_scanf_float+0x218>
 80096f8:	2b59      	cmp	r3, #89	; 0x59
 80096fa:	d199      	bne.n	8009630 <_scanf_float+0x60>
 80096fc:	2d07      	cmp	r5, #7
 80096fe:	d197      	bne.n	8009630 <_scanf_float+0x60>
 8009700:	2508      	movs	r5, #8
 8009702:	e029      	b.n	8009758 <_scanf_float+0x188>
 8009704:	2b74      	cmp	r3, #116	; 0x74
 8009706:	d06f      	beq.n	80097e8 <_scanf_float+0x218>
 8009708:	2b79      	cmp	r3, #121	; 0x79
 800970a:	e7f6      	b.n	80096fa <_scanf_float+0x12a>
 800970c:	6821      	ldr	r1, [r4, #0]
 800970e:	05c8      	lsls	r0, r1, #23
 8009710:	d51a      	bpl.n	8009748 <_scanf_float+0x178>
 8009712:	9b02      	ldr	r3, [sp, #8]
 8009714:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009718:	6021      	str	r1, [r4, #0]
 800971a:	f109 0901 	add.w	r9, r9, #1
 800971e:	b11b      	cbz	r3, 8009728 <_scanf_float+0x158>
 8009720:	3b01      	subs	r3, #1
 8009722:	3201      	adds	r2, #1
 8009724:	9302      	str	r3, [sp, #8]
 8009726:	60a2      	str	r2, [r4, #8]
 8009728:	68a3      	ldr	r3, [r4, #8]
 800972a:	3b01      	subs	r3, #1
 800972c:	60a3      	str	r3, [r4, #8]
 800972e:	6923      	ldr	r3, [r4, #16]
 8009730:	3301      	adds	r3, #1
 8009732:	6123      	str	r3, [r4, #16]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	3b01      	subs	r3, #1
 8009738:	2b00      	cmp	r3, #0
 800973a:	607b      	str	r3, [r7, #4]
 800973c:	f340 8084 	ble.w	8009848 <_scanf_float+0x278>
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	3301      	adds	r3, #1
 8009744:	603b      	str	r3, [r7, #0]
 8009746:	e766      	b.n	8009616 <_scanf_float+0x46>
 8009748:	eb1a 0f05 	cmn.w	sl, r5
 800974c:	f47f af70 	bne.w	8009630 <_scanf_float+0x60>
 8009750:	6822      	ldr	r2, [r4, #0]
 8009752:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009756:	6022      	str	r2, [r4, #0]
 8009758:	f806 3b01 	strb.w	r3, [r6], #1
 800975c:	e7e4      	b.n	8009728 <_scanf_float+0x158>
 800975e:	6822      	ldr	r2, [r4, #0]
 8009760:	0610      	lsls	r0, r2, #24
 8009762:	f57f af65 	bpl.w	8009630 <_scanf_float+0x60>
 8009766:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800976a:	e7f4      	b.n	8009756 <_scanf_float+0x186>
 800976c:	f1ba 0f00 	cmp.w	sl, #0
 8009770:	d10e      	bne.n	8009790 <_scanf_float+0x1c0>
 8009772:	f1b9 0f00 	cmp.w	r9, #0
 8009776:	d10e      	bne.n	8009796 <_scanf_float+0x1c6>
 8009778:	6822      	ldr	r2, [r4, #0]
 800977a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800977e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009782:	d108      	bne.n	8009796 <_scanf_float+0x1c6>
 8009784:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009788:	6022      	str	r2, [r4, #0]
 800978a:	f04f 0a01 	mov.w	sl, #1
 800978e:	e7e3      	b.n	8009758 <_scanf_float+0x188>
 8009790:	f1ba 0f02 	cmp.w	sl, #2
 8009794:	d055      	beq.n	8009842 <_scanf_float+0x272>
 8009796:	2d01      	cmp	r5, #1
 8009798:	d002      	beq.n	80097a0 <_scanf_float+0x1d0>
 800979a:	2d04      	cmp	r5, #4
 800979c:	f47f af48 	bne.w	8009630 <_scanf_float+0x60>
 80097a0:	3501      	adds	r5, #1
 80097a2:	b2ed      	uxtb	r5, r5
 80097a4:	e7d8      	b.n	8009758 <_scanf_float+0x188>
 80097a6:	f1ba 0f01 	cmp.w	sl, #1
 80097aa:	f47f af41 	bne.w	8009630 <_scanf_float+0x60>
 80097ae:	f04f 0a02 	mov.w	sl, #2
 80097b2:	e7d1      	b.n	8009758 <_scanf_float+0x188>
 80097b4:	b97d      	cbnz	r5, 80097d6 <_scanf_float+0x206>
 80097b6:	f1b9 0f00 	cmp.w	r9, #0
 80097ba:	f47f af3c 	bne.w	8009636 <_scanf_float+0x66>
 80097be:	6822      	ldr	r2, [r4, #0]
 80097c0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80097c4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80097c8:	f47f af39 	bne.w	800963e <_scanf_float+0x6e>
 80097cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80097d0:	6022      	str	r2, [r4, #0]
 80097d2:	2501      	movs	r5, #1
 80097d4:	e7c0      	b.n	8009758 <_scanf_float+0x188>
 80097d6:	2d03      	cmp	r5, #3
 80097d8:	d0e2      	beq.n	80097a0 <_scanf_float+0x1d0>
 80097da:	2d05      	cmp	r5, #5
 80097dc:	e7de      	b.n	800979c <_scanf_float+0x1cc>
 80097de:	2d02      	cmp	r5, #2
 80097e0:	f47f af26 	bne.w	8009630 <_scanf_float+0x60>
 80097e4:	2503      	movs	r5, #3
 80097e6:	e7b7      	b.n	8009758 <_scanf_float+0x188>
 80097e8:	2d06      	cmp	r5, #6
 80097ea:	f47f af21 	bne.w	8009630 <_scanf_float+0x60>
 80097ee:	2507      	movs	r5, #7
 80097f0:	e7b2      	b.n	8009758 <_scanf_float+0x188>
 80097f2:	6822      	ldr	r2, [r4, #0]
 80097f4:	0591      	lsls	r1, r2, #22
 80097f6:	f57f af1b 	bpl.w	8009630 <_scanf_float+0x60>
 80097fa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80097fe:	6022      	str	r2, [r4, #0]
 8009800:	f8cd 9004 	str.w	r9, [sp, #4]
 8009804:	e7a8      	b.n	8009758 <_scanf_float+0x188>
 8009806:	6822      	ldr	r2, [r4, #0]
 8009808:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800980c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009810:	d006      	beq.n	8009820 <_scanf_float+0x250>
 8009812:	0550      	lsls	r0, r2, #21
 8009814:	f57f af0c 	bpl.w	8009630 <_scanf_float+0x60>
 8009818:	f1b9 0f00 	cmp.w	r9, #0
 800981c:	f43f af0f 	beq.w	800963e <_scanf_float+0x6e>
 8009820:	0591      	lsls	r1, r2, #22
 8009822:	bf58      	it	pl
 8009824:	9901      	ldrpl	r1, [sp, #4]
 8009826:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800982a:	bf58      	it	pl
 800982c:	eba9 0101 	subpl.w	r1, r9, r1
 8009830:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009834:	bf58      	it	pl
 8009836:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800983a:	6022      	str	r2, [r4, #0]
 800983c:	f04f 0900 	mov.w	r9, #0
 8009840:	e78a      	b.n	8009758 <_scanf_float+0x188>
 8009842:	f04f 0a03 	mov.w	sl, #3
 8009846:	e787      	b.n	8009758 <_scanf_float+0x188>
 8009848:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800984c:	4639      	mov	r1, r7
 800984e:	4640      	mov	r0, r8
 8009850:	4798      	blx	r3
 8009852:	2800      	cmp	r0, #0
 8009854:	f43f aedf 	beq.w	8009616 <_scanf_float+0x46>
 8009858:	e6ea      	b.n	8009630 <_scanf_float+0x60>
 800985a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800985e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009862:	463a      	mov	r2, r7
 8009864:	4640      	mov	r0, r8
 8009866:	4798      	blx	r3
 8009868:	6923      	ldr	r3, [r4, #16]
 800986a:	3b01      	subs	r3, #1
 800986c:	6123      	str	r3, [r4, #16]
 800986e:	e6ec      	b.n	800964a <_scanf_float+0x7a>
 8009870:	1e6b      	subs	r3, r5, #1
 8009872:	2b06      	cmp	r3, #6
 8009874:	d825      	bhi.n	80098c2 <_scanf_float+0x2f2>
 8009876:	2d02      	cmp	r5, #2
 8009878:	d836      	bhi.n	80098e8 <_scanf_float+0x318>
 800987a:	455e      	cmp	r6, fp
 800987c:	f67f aee8 	bls.w	8009650 <_scanf_float+0x80>
 8009880:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009884:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009888:	463a      	mov	r2, r7
 800988a:	4640      	mov	r0, r8
 800988c:	4798      	blx	r3
 800988e:	6923      	ldr	r3, [r4, #16]
 8009890:	3b01      	subs	r3, #1
 8009892:	6123      	str	r3, [r4, #16]
 8009894:	e7f1      	b.n	800987a <_scanf_float+0x2aa>
 8009896:	9802      	ldr	r0, [sp, #8]
 8009898:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800989c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80098a0:	9002      	str	r0, [sp, #8]
 80098a2:	463a      	mov	r2, r7
 80098a4:	4640      	mov	r0, r8
 80098a6:	4798      	blx	r3
 80098a8:	6923      	ldr	r3, [r4, #16]
 80098aa:	3b01      	subs	r3, #1
 80098ac:	6123      	str	r3, [r4, #16]
 80098ae:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80098b2:	fa5f fa8a 	uxtb.w	sl, sl
 80098b6:	f1ba 0f02 	cmp.w	sl, #2
 80098ba:	d1ec      	bne.n	8009896 <_scanf_float+0x2c6>
 80098bc:	3d03      	subs	r5, #3
 80098be:	b2ed      	uxtb	r5, r5
 80098c0:	1b76      	subs	r6, r6, r5
 80098c2:	6823      	ldr	r3, [r4, #0]
 80098c4:	05da      	lsls	r2, r3, #23
 80098c6:	d52f      	bpl.n	8009928 <_scanf_float+0x358>
 80098c8:	055b      	lsls	r3, r3, #21
 80098ca:	d510      	bpl.n	80098ee <_scanf_float+0x31e>
 80098cc:	455e      	cmp	r6, fp
 80098ce:	f67f aebf 	bls.w	8009650 <_scanf_float+0x80>
 80098d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80098da:	463a      	mov	r2, r7
 80098dc:	4640      	mov	r0, r8
 80098de:	4798      	blx	r3
 80098e0:	6923      	ldr	r3, [r4, #16]
 80098e2:	3b01      	subs	r3, #1
 80098e4:	6123      	str	r3, [r4, #16]
 80098e6:	e7f1      	b.n	80098cc <_scanf_float+0x2fc>
 80098e8:	46aa      	mov	sl, r5
 80098ea:	9602      	str	r6, [sp, #8]
 80098ec:	e7df      	b.n	80098ae <_scanf_float+0x2de>
 80098ee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80098f2:	6923      	ldr	r3, [r4, #16]
 80098f4:	2965      	cmp	r1, #101	; 0x65
 80098f6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80098fa:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80098fe:	6123      	str	r3, [r4, #16]
 8009900:	d00c      	beq.n	800991c <_scanf_float+0x34c>
 8009902:	2945      	cmp	r1, #69	; 0x45
 8009904:	d00a      	beq.n	800991c <_scanf_float+0x34c>
 8009906:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800990a:	463a      	mov	r2, r7
 800990c:	4640      	mov	r0, r8
 800990e:	4798      	blx	r3
 8009910:	6923      	ldr	r3, [r4, #16]
 8009912:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009916:	3b01      	subs	r3, #1
 8009918:	1eb5      	subs	r5, r6, #2
 800991a:	6123      	str	r3, [r4, #16]
 800991c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009920:	463a      	mov	r2, r7
 8009922:	4640      	mov	r0, r8
 8009924:	4798      	blx	r3
 8009926:	462e      	mov	r6, r5
 8009928:	6825      	ldr	r5, [r4, #0]
 800992a:	f015 0510 	ands.w	r5, r5, #16
 800992e:	d159      	bne.n	80099e4 <_scanf_float+0x414>
 8009930:	7035      	strb	r5, [r6, #0]
 8009932:	6823      	ldr	r3, [r4, #0]
 8009934:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800993c:	d11b      	bne.n	8009976 <_scanf_float+0x3a6>
 800993e:	9b01      	ldr	r3, [sp, #4]
 8009940:	454b      	cmp	r3, r9
 8009942:	eba3 0209 	sub.w	r2, r3, r9
 8009946:	d123      	bne.n	8009990 <_scanf_float+0x3c0>
 8009948:	2200      	movs	r2, #0
 800994a:	4659      	mov	r1, fp
 800994c:	4640      	mov	r0, r8
 800994e:	f000 fe99 	bl	800a684 <_strtod_r>
 8009952:	6822      	ldr	r2, [r4, #0]
 8009954:	9b03      	ldr	r3, [sp, #12]
 8009956:	f012 0f02 	tst.w	r2, #2
 800995a:	ec57 6b10 	vmov	r6, r7, d0
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	d021      	beq.n	80099a6 <_scanf_float+0x3d6>
 8009962:	9903      	ldr	r1, [sp, #12]
 8009964:	1d1a      	adds	r2, r3, #4
 8009966:	600a      	str	r2, [r1, #0]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	e9c3 6700 	strd	r6, r7, [r3]
 800996e:	68e3      	ldr	r3, [r4, #12]
 8009970:	3301      	adds	r3, #1
 8009972:	60e3      	str	r3, [r4, #12]
 8009974:	e66d      	b.n	8009652 <_scanf_float+0x82>
 8009976:	9b04      	ldr	r3, [sp, #16]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d0e5      	beq.n	8009948 <_scanf_float+0x378>
 800997c:	9905      	ldr	r1, [sp, #20]
 800997e:	230a      	movs	r3, #10
 8009980:	462a      	mov	r2, r5
 8009982:	3101      	adds	r1, #1
 8009984:	4640      	mov	r0, r8
 8009986:	f000 ff05 	bl	800a794 <_strtol_r>
 800998a:	9b04      	ldr	r3, [sp, #16]
 800998c:	9e05      	ldr	r6, [sp, #20]
 800998e:	1ac2      	subs	r2, r0, r3
 8009990:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009994:	429e      	cmp	r6, r3
 8009996:	bf28      	it	cs
 8009998:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800999c:	4912      	ldr	r1, [pc, #72]	; (80099e8 <_scanf_float+0x418>)
 800999e:	4630      	mov	r0, r6
 80099a0:	f000 f82c 	bl	80099fc <siprintf>
 80099a4:	e7d0      	b.n	8009948 <_scanf_float+0x378>
 80099a6:	9903      	ldr	r1, [sp, #12]
 80099a8:	f012 0f04 	tst.w	r2, #4
 80099ac:	f103 0204 	add.w	r2, r3, #4
 80099b0:	600a      	str	r2, [r1, #0]
 80099b2:	d1d9      	bne.n	8009968 <_scanf_float+0x398>
 80099b4:	f8d3 8000 	ldr.w	r8, [r3]
 80099b8:	ee10 2a10 	vmov	r2, s0
 80099bc:	ee10 0a10 	vmov	r0, s0
 80099c0:	463b      	mov	r3, r7
 80099c2:	4639      	mov	r1, r7
 80099c4:	f7f7 f8b2 	bl	8000b2c <__aeabi_dcmpun>
 80099c8:	b128      	cbz	r0, 80099d6 <_scanf_float+0x406>
 80099ca:	4808      	ldr	r0, [pc, #32]	; (80099ec <_scanf_float+0x41c>)
 80099cc:	f000 f810 	bl	80099f0 <nanf>
 80099d0:	ed88 0a00 	vstr	s0, [r8]
 80099d4:	e7cb      	b.n	800996e <_scanf_float+0x39e>
 80099d6:	4630      	mov	r0, r6
 80099d8:	4639      	mov	r1, r7
 80099da:	f7f7 f905 	bl	8000be8 <__aeabi_d2f>
 80099de:	f8c8 0000 	str.w	r0, [r8]
 80099e2:	e7c4      	b.n	800996e <_scanf_float+0x39e>
 80099e4:	2500      	movs	r5, #0
 80099e6:	e634      	b.n	8009652 <_scanf_float+0x82>
 80099e8:	0800f508 	.word	0x0800f508
 80099ec:	0800f910 	.word	0x0800f910

080099f0 <nanf>:
 80099f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80099f8 <nanf+0x8>
 80099f4:	4770      	bx	lr
 80099f6:	bf00      	nop
 80099f8:	7fc00000 	.word	0x7fc00000

080099fc <siprintf>:
 80099fc:	b40e      	push	{r1, r2, r3}
 80099fe:	b500      	push	{lr}
 8009a00:	b09c      	sub	sp, #112	; 0x70
 8009a02:	ab1d      	add	r3, sp, #116	; 0x74
 8009a04:	9002      	str	r0, [sp, #8]
 8009a06:	9006      	str	r0, [sp, #24]
 8009a08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a0c:	4809      	ldr	r0, [pc, #36]	; (8009a34 <siprintf+0x38>)
 8009a0e:	9107      	str	r1, [sp, #28]
 8009a10:	9104      	str	r1, [sp, #16]
 8009a12:	4909      	ldr	r1, [pc, #36]	; (8009a38 <siprintf+0x3c>)
 8009a14:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a18:	9105      	str	r1, [sp, #20]
 8009a1a:	6800      	ldr	r0, [r0, #0]
 8009a1c:	9301      	str	r3, [sp, #4]
 8009a1e:	a902      	add	r1, sp, #8
 8009a20:	f002 fee4 	bl	800c7ec <_svfiprintf_r>
 8009a24:	9b02      	ldr	r3, [sp, #8]
 8009a26:	2200      	movs	r2, #0
 8009a28:	701a      	strb	r2, [r3, #0]
 8009a2a:	b01c      	add	sp, #112	; 0x70
 8009a2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a30:	b003      	add	sp, #12
 8009a32:	4770      	bx	lr
 8009a34:	20000030 	.word	0x20000030
 8009a38:	ffff0208 	.word	0xffff0208

08009a3c <sulp>:
 8009a3c:	b570      	push	{r4, r5, r6, lr}
 8009a3e:	4604      	mov	r4, r0
 8009a40:	460d      	mov	r5, r1
 8009a42:	ec45 4b10 	vmov	d0, r4, r5
 8009a46:	4616      	mov	r6, r2
 8009a48:	f002 fc2e 	bl	800c2a8 <__ulp>
 8009a4c:	ec51 0b10 	vmov	r0, r1, d0
 8009a50:	b17e      	cbz	r6, 8009a72 <sulp+0x36>
 8009a52:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009a56:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	dd09      	ble.n	8009a72 <sulp+0x36>
 8009a5e:	051b      	lsls	r3, r3, #20
 8009a60:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009a64:	2400      	movs	r4, #0
 8009a66:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009a6a:	4622      	mov	r2, r4
 8009a6c:	462b      	mov	r3, r5
 8009a6e:	f7f6 fdc3 	bl	80005f8 <__aeabi_dmul>
 8009a72:	bd70      	pop	{r4, r5, r6, pc}
 8009a74:	0000      	movs	r0, r0
	...

08009a78 <_strtod_l>:
 8009a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a7c:	ed2d 8b02 	vpush	{d8}
 8009a80:	b09d      	sub	sp, #116	; 0x74
 8009a82:	461f      	mov	r7, r3
 8009a84:	2300      	movs	r3, #0
 8009a86:	9318      	str	r3, [sp, #96]	; 0x60
 8009a88:	4ba2      	ldr	r3, [pc, #648]	; (8009d14 <_strtod_l+0x29c>)
 8009a8a:	9213      	str	r2, [sp, #76]	; 0x4c
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	9305      	str	r3, [sp, #20]
 8009a90:	4604      	mov	r4, r0
 8009a92:	4618      	mov	r0, r3
 8009a94:	4688      	mov	r8, r1
 8009a96:	f7f6 fb9b 	bl	80001d0 <strlen>
 8009a9a:	f04f 0a00 	mov.w	sl, #0
 8009a9e:	4605      	mov	r5, r0
 8009aa0:	f04f 0b00 	mov.w	fp, #0
 8009aa4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009aa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009aaa:	781a      	ldrb	r2, [r3, #0]
 8009aac:	2a2b      	cmp	r2, #43	; 0x2b
 8009aae:	d04e      	beq.n	8009b4e <_strtod_l+0xd6>
 8009ab0:	d83b      	bhi.n	8009b2a <_strtod_l+0xb2>
 8009ab2:	2a0d      	cmp	r2, #13
 8009ab4:	d834      	bhi.n	8009b20 <_strtod_l+0xa8>
 8009ab6:	2a08      	cmp	r2, #8
 8009ab8:	d834      	bhi.n	8009b24 <_strtod_l+0xac>
 8009aba:	2a00      	cmp	r2, #0
 8009abc:	d03e      	beq.n	8009b3c <_strtod_l+0xc4>
 8009abe:	2300      	movs	r3, #0
 8009ac0:	930a      	str	r3, [sp, #40]	; 0x28
 8009ac2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009ac4:	7833      	ldrb	r3, [r6, #0]
 8009ac6:	2b30      	cmp	r3, #48	; 0x30
 8009ac8:	f040 80b0 	bne.w	8009c2c <_strtod_l+0x1b4>
 8009acc:	7873      	ldrb	r3, [r6, #1]
 8009ace:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009ad2:	2b58      	cmp	r3, #88	; 0x58
 8009ad4:	d168      	bne.n	8009ba8 <_strtod_l+0x130>
 8009ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ad8:	9301      	str	r3, [sp, #4]
 8009ada:	ab18      	add	r3, sp, #96	; 0x60
 8009adc:	9702      	str	r7, [sp, #8]
 8009ade:	9300      	str	r3, [sp, #0]
 8009ae0:	4a8d      	ldr	r2, [pc, #564]	; (8009d18 <_strtod_l+0x2a0>)
 8009ae2:	ab19      	add	r3, sp, #100	; 0x64
 8009ae4:	a917      	add	r1, sp, #92	; 0x5c
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	f001 fd38 	bl	800b55c <__gethex>
 8009aec:	f010 0707 	ands.w	r7, r0, #7
 8009af0:	4605      	mov	r5, r0
 8009af2:	d005      	beq.n	8009b00 <_strtod_l+0x88>
 8009af4:	2f06      	cmp	r7, #6
 8009af6:	d12c      	bne.n	8009b52 <_strtod_l+0xda>
 8009af8:	3601      	adds	r6, #1
 8009afa:	2300      	movs	r3, #0
 8009afc:	9617      	str	r6, [sp, #92]	; 0x5c
 8009afe:	930a      	str	r3, [sp, #40]	; 0x28
 8009b00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f040 8590 	bne.w	800a628 <_strtod_l+0xbb0>
 8009b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b0a:	b1eb      	cbz	r3, 8009b48 <_strtod_l+0xd0>
 8009b0c:	4652      	mov	r2, sl
 8009b0e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009b12:	ec43 2b10 	vmov	d0, r2, r3
 8009b16:	b01d      	add	sp, #116	; 0x74
 8009b18:	ecbd 8b02 	vpop	{d8}
 8009b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b20:	2a20      	cmp	r2, #32
 8009b22:	d1cc      	bne.n	8009abe <_strtod_l+0x46>
 8009b24:	3301      	adds	r3, #1
 8009b26:	9317      	str	r3, [sp, #92]	; 0x5c
 8009b28:	e7be      	b.n	8009aa8 <_strtod_l+0x30>
 8009b2a:	2a2d      	cmp	r2, #45	; 0x2d
 8009b2c:	d1c7      	bne.n	8009abe <_strtod_l+0x46>
 8009b2e:	2201      	movs	r2, #1
 8009b30:	920a      	str	r2, [sp, #40]	; 0x28
 8009b32:	1c5a      	adds	r2, r3, #1
 8009b34:	9217      	str	r2, [sp, #92]	; 0x5c
 8009b36:	785b      	ldrb	r3, [r3, #1]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d1c2      	bne.n	8009ac2 <_strtod_l+0x4a>
 8009b3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009b3e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	f040 856e 	bne.w	800a624 <_strtod_l+0xbac>
 8009b48:	4652      	mov	r2, sl
 8009b4a:	465b      	mov	r3, fp
 8009b4c:	e7e1      	b.n	8009b12 <_strtod_l+0x9a>
 8009b4e:	2200      	movs	r2, #0
 8009b50:	e7ee      	b.n	8009b30 <_strtod_l+0xb8>
 8009b52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009b54:	b13a      	cbz	r2, 8009b66 <_strtod_l+0xee>
 8009b56:	2135      	movs	r1, #53	; 0x35
 8009b58:	a81a      	add	r0, sp, #104	; 0x68
 8009b5a:	f002 fcb0 	bl	800c4be <__copybits>
 8009b5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009b60:	4620      	mov	r0, r4
 8009b62:	f002 f86f 	bl	800bc44 <_Bfree>
 8009b66:	3f01      	subs	r7, #1
 8009b68:	2f04      	cmp	r7, #4
 8009b6a:	d806      	bhi.n	8009b7a <_strtod_l+0x102>
 8009b6c:	e8df f007 	tbb	[pc, r7]
 8009b70:	1714030a 	.word	0x1714030a
 8009b74:	0a          	.byte	0x0a
 8009b75:	00          	.byte	0x00
 8009b76:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009b7a:	0728      	lsls	r0, r5, #28
 8009b7c:	d5c0      	bpl.n	8009b00 <_strtod_l+0x88>
 8009b7e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009b82:	e7bd      	b.n	8009b00 <_strtod_l+0x88>
 8009b84:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009b88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009b8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009b8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009b92:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009b96:	e7f0      	b.n	8009b7a <_strtod_l+0x102>
 8009b98:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009d1c <_strtod_l+0x2a4>
 8009b9c:	e7ed      	b.n	8009b7a <_strtod_l+0x102>
 8009b9e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009ba2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009ba6:	e7e8      	b.n	8009b7a <_strtod_l+0x102>
 8009ba8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009baa:	1c5a      	adds	r2, r3, #1
 8009bac:	9217      	str	r2, [sp, #92]	; 0x5c
 8009bae:	785b      	ldrb	r3, [r3, #1]
 8009bb0:	2b30      	cmp	r3, #48	; 0x30
 8009bb2:	d0f9      	beq.n	8009ba8 <_strtod_l+0x130>
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d0a3      	beq.n	8009b00 <_strtod_l+0x88>
 8009bb8:	2301      	movs	r3, #1
 8009bba:	f04f 0900 	mov.w	r9, #0
 8009bbe:	9304      	str	r3, [sp, #16]
 8009bc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009bc2:	9308      	str	r3, [sp, #32]
 8009bc4:	f8cd 901c 	str.w	r9, [sp, #28]
 8009bc8:	464f      	mov	r7, r9
 8009bca:	220a      	movs	r2, #10
 8009bcc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009bce:	7806      	ldrb	r6, [r0, #0]
 8009bd0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009bd4:	b2d9      	uxtb	r1, r3
 8009bd6:	2909      	cmp	r1, #9
 8009bd8:	d92a      	bls.n	8009c30 <_strtod_l+0x1b8>
 8009bda:	9905      	ldr	r1, [sp, #20]
 8009bdc:	462a      	mov	r2, r5
 8009bde:	f002 ff1f 	bl	800ca20 <strncmp>
 8009be2:	b398      	cbz	r0, 8009c4c <_strtod_l+0x1d4>
 8009be4:	2000      	movs	r0, #0
 8009be6:	4632      	mov	r2, r6
 8009be8:	463d      	mov	r5, r7
 8009bea:	9005      	str	r0, [sp, #20]
 8009bec:	4603      	mov	r3, r0
 8009bee:	2a65      	cmp	r2, #101	; 0x65
 8009bf0:	d001      	beq.n	8009bf6 <_strtod_l+0x17e>
 8009bf2:	2a45      	cmp	r2, #69	; 0x45
 8009bf4:	d118      	bne.n	8009c28 <_strtod_l+0x1b0>
 8009bf6:	b91d      	cbnz	r5, 8009c00 <_strtod_l+0x188>
 8009bf8:	9a04      	ldr	r2, [sp, #16]
 8009bfa:	4302      	orrs	r2, r0
 8009bfc:	d09e      	beq.n	8009b3c <_strtod_l+0xc4>
 8009bfe:	2500      	movs	r5, #0
 8009c00:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009c04:	f108 0201 	add.w	r2, r8, #1
 8009c08:	9217      	str	r2, [sp, #92]	; 0x5c
 8009c0a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009c0e:	2a2b      	cmp	r2, #43	; 0x2b
 8009c10:	d075      	beq.n	8009cfe <_strtod_l+0x286>
 8009c12:	2a2d      	cmp	r2, #45	; 0x2d
 8009c14:	d07b      	beq.n	8009d0e <_strtod_l+0x296>
 8009c16:	f04f 0c00 	mov.w	ip, #0
 8009c1a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009c1e:	2909      	cmp	r1, #9
 8009c20:	f240 8082 	bls.w	8009d28 <_strtod_l+0x2b0>
 8009c24:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009c28:	2600      	movs	r6, #0
 8009c2a:	e09d      	b.n	8009d68 <_strtod_l+0x2f0>
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	e7c4      	b.n	8009bba <_strtod_l+0x142>
 8009c30:	2f08      	cmp	r7, #8
 8009c32:	bfd8      	it	le
 8009c34:	9907      	ldrle	r1, [sp, #28]
 8009c36:	f100 0001 	add.w	r0, r0, #1
 8009c3a:	bfda      	itte	le
 8009c3c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009c40:	9307      	strle	r3, [sp, #28]
 8009c42:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009c46:	3701      	adds	r7, #1
 8009c48:	9017      	str	r0, [sp, #92]	; 0x5c
 8009c4a:	e7bf      	b.n	8009bcc <_strtod_l+0x154>
 8009c4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c4e:	195a      	adds	r2, r3, r5
 8009c50:	9217      	str	r2, [sp, #92]	; 0x5c
 8009c52:	5d5a      	ldrb	r2, [r3, r5]
 8009c54:	2f00      	cmp	r7, #0
 8009c56:	d037      	beq.n	8009cc8 <_strtod_l+0x250>
 8009c58:	9005      	str	r0, [sp, #20]
 8009c5a:	463d      	mov	r5, r7
 8009c5c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009c60:	2b09      	cmp	r3, #9
 8009c62:	d912      	bls.n	8009c8a <_strtod_l+0x212>
 8009c64:	2301      	movs	r3, #1
 8009c66:	e7c2      	b.n	8009bee <_strtod_l+0x176>
 8009c68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c6a:	1c5a      	adds	r2, r3, #1
 8009c6c:	9217      	str	r2, [sp, #92]	; 0x5c
 8009c6e:	785a      	ldrb	r2, [r3, #1]
 8009c70:	3001      	adds	r0, #1
 8009c72:	2a30      	cmp	r2, #48	; 0x30
 8009c74:	d0f8      	beq.n	8009c68 <_strtod_l+0x1f0>
 8009c76:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009c7a:	2b08      	cmp	r3, #8
 8009c7c:	f200 84d9 	bhi.w	800a632 <_strtod_l+0xbba>
 8009c80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c82:	9005      	str	r0, [sp, #20]
 8009c84:	2000      	movs	r0, #0
 8009c86:	9308      	str	r3, [sp, #32]
 8009c88:	4605      	mov	r5, r0
 8009c8a:	3a30      	subs	r2, #48	; 0x30
 8009c8c:	f100 0301 	add.w	r3, r0, #1
 8009c90:	d014      	beq.n	8009cbc <_strtod_l+0x244>
 8009c92:	9905      	ldr	r1, [sp, #20]
 8009c94:	4419      	add	r1, r3
 8009c96:	9105      	str	r1, [sp, #20]
 8009c98:	462b      	mov	r3, r5
 8009c9a:	eb00 0e05 	add.w	lr, r0, r5
 8009c9e:	210a      	movs	r1, #10
 8009ca0:	4573      	cmp	r3, lr
 8009ca2:	d113      	bne.n	8009ccc <_strtod_l+0x254>
 8009ca4:	182b      	adds	r3, r5, r0
 8009ca6:	2b08      	cmp	r3, #8
 8009ca8:	f105 0501 	add.w	r5, r5, #1
 8009cac:	4405      	add	r5, r0
 8009cae:	dc1c      	bgt.n	8009cea <_strtod_l+0x272>
 8009cb0:	9907      	ldr	r1, [sp, #28]
 8009cb2:	230a      	movs	r3, #10
 8009cb4:	fb03 2301 	mla	r3, r3, r1, r2
 8009cb8:	9307      	str	r3, [sp, #28]
 8009cba:	2300      	movs	r3, #0
 8009cbc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009cbe:	1c51      	adds	r1, r2, #1
 8009cc0:	9117      	str	r1, [sp, #92]	; 0x5c
 8009cc2:	7852      	ldrb	r2, [r2, #1]
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	e7c9      	b.n	8009c5c <_strtod_l+0x1e4>
 8009cc8:	4638      	mov	r0, r7
 8009cca:	e7d2      	b.n	8009c72 <_strtod_l+0x1fa>
 8009ccc:	2b08      	cmp	r3, #8
 8009cce:	dc04      	bgt.n	8009cda <_strtod_l+0x262>
 8009cd0:	9e07      	ldr	r6, [sp, #28]
 8009cd2:	434e      	muls	r6, r1
 8009cd4:	9607      	str	r6, [sp, #28]
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	e7e2      	b.n	8009ca0 <_strtod_l+0x228>
 8009cda:	f103 0c01 	add.w	ip, r3, #1
 8009cde:	f1bc 0f10 	cmp.w	ip, #16
 8009ce2:	bfd8      	it	le
 8009ce4:	fb01 f909 	mulle.w	r9, r1, r9
 8009ce8:	e7f5      	b.n	8009cd6 <_strtod_l+0x25e>
 8009cea:	2d10      	cmp	r5, #16
 8009cec:	bfdc      	itt	le
 8009cee:	230a      	movle	r3, #10
 8009cf0:	fb03 2909 	mlale	r9, r3, r9, r2
 8009cf4:	e7e1      	b.n	8009cba <_strtod_l+0x242>
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	9305      	str	r3, [sp, #20]
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	e77c      	b.n	8009bf8 <_strtod_l+0x180>
 8009cfe:	f04f 0c00 	mov.w	ip, #0
 8009d02:	f108 0202 	add.w	r2, r8, #2
 8009d06:	9217      	str	r2, [sp, #92]	; 0x5c
 8009d08:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009d0c:	e785      	b.n	8009c1a <_strtod_l+0x1a2>
 8009d0e:	f04f 0c01 	mov.w	ip, #1
 8009d12:	e7f6      	b.n	8009d02 <_strtod_l+0x28a>
 8009d14:	0800f758 	.word	0x0800f758
 8009d18:	0800f510 	.word	0x0800f510
 8009d1c:	7ff00000 	.word	0x7ff00000
 8009d20:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009d22:	1c51      	adds	r1, r2, #1
 8009d24:	9117      	str	r1, [sp, #92]	; 0x5c
 8009d26:	7852      	ldrb	r2, [r2, #1]
 8009d28:	2a30      	cmp	r2, #48	; 0x30
 8009d2a:	d0f9      	beq.n	8009d20 <_strtod_l+0x2a8>
 8009d2c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009d30:	2908      	cmp	r1, #8
 8009d32:	f63f af79 	bhi.w	8009c28 <_strtod_l+0x1b0>
 8009d36:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009d3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009d3c:	9206      	str	r2, [sp, #24]
 8009d3e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009d40:	1c51      	adds	r1, r2, #1
 8009d42:	9117      	str	r1, [sp, #92]	; 0x5c
 8009d44:	7852      	ldrb	r2, [r2, #1]
 8009d46:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009d4a:	2e09      	cmp	r6, #9
 8009d4c:	d937      	bls.n	8009dbe <_strtod_l+0x346>
 8009d4e:	9e06      	ldr	r6, [sp, #24]
 8009d50:	1b89      	subs	r1, r1, r6
 8009d52:	2908      	cmp	r1, #8
 8009d54:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009d58:	dc02      	bgt.n	8009d60 <_strtod_l+0x2e8>
 8009d5a:	4576      	cmp	r6, lr
 8009d5c:	bfa8      	it	ge
 8009d5e:	4676      	movge	r6, lr
 8009d60:	f1bc 0f00 	cmp.w	ip, #0
 8009d64:	d000      	beq.n	8009d68 <_strtod_l+0x2f0>
 8009d66:	4276      	negs	r6, r6
 8009d68:	2d00      	cmp	r5, #0
 8009d6a:	d14d      	bne.n	8009e08 <_strtod_l+0x390>
 8009d6c:	9904      	ldr	r1, [sp, #16]
 8009d6e:	4301      	orrs	r1, r0
 8009d70:	f47f aec6 	bne.w	8009b00 <_strtod_l+0x88>
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	f47f aee1 	bne.w	8009b3c <_strtod_l+0xc4>
 8009d7a:	2a69      	cmp	r2, #105	; 0x69
 8009d7c:	d027      	beq.n	8009dce <_strtod_l+0x356>
 8009d7e:	dc24      	bgt.n	8009dca <_strtod_l+0x352>
 8009d80:	2a49      	cmp	r2, #73	; 0x49
 8009d82:	d024      	beq.n	8009dce <_strtod_l+0x356>
 8009d84:	2a4e      	cmp	r2, #78	; 0x4e
 8009d86:	f47f aed9 	bne.w	8009b3c <_strtod_l+0xc4>
 8009d8a:	499f      	ldr	r1, [pc, #636]	; (800a008 <_strtod_l+0x590>)
 8009d8c:	a817      	add	r0, sp, #92	; 0x5c
 8009d8e:	f001 fe3d 	bl	800ba0c <__match>
 8009d92:	2800      	cmp	r0, #0
 8009d94:	f43f aed2 	beq.w	8009b3c <_strtod_l+0xc4>
 8009d98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	2b28      	cmp	r3, #40	; 0x28
 8009d9e:	d12d      	bne.n	8009dfc <_strtod_l+0x384>
 8009da0:	499a      	ldr	r1, [pc, #616]	; (800a00c <_strtod_l+0x594>)
 8009da2:	aa1a      	add	r2, sp, #104	; 0x68
 8009da4:	a817      	add	r0, sp, #92	; 0x5c
 8009da6:	f001 fe45 	bl	800ba34 <__hexnan>
 8009daa:	2805      	cmp	r0, #5
 8009dac:	d126      	bne.n	8009dfc <_strtod_l+0x384>
 8009dae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009db0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009db4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009db8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009dbc:	e6a0      	b.n	8009b00 <_strtod_l+0x88>
 8009dbe:	210a      	movs	r1, #10
 8009dc0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009dc4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009dc8:	e7b9      	b.n	8009d3e <_strtod_l+0x2c6>
 8009dca:	2a6e      	cmp	r2, #110	; 0x6e
 8009dcc:	e7db      	b.n	8009d86 <_strtod_l+0x30e>
 8009dce:	4990      	ldr	r1, [pc, #576]	; (800a010 <_strtod_l+0x598>)
 8009dd0:	a817      	add	r0, sp, #92	; 0x5c
 8009dd2:	f001 fe1b 	bl	800ba0c <__match>
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	f43f aeb0 	beq.w	8009b3c <_strtod_l+0xc4>
 8009ddc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009dde:	498d      	ldr	r1, [pc, #564]	; (800a014 <_strtod_l+0x59c>)
 8009de0:	3b01      	subs	r3, #1
 8009de2:	a817      	add	r0, sp, #92	; 0x5c
 8009de4:	9317      	str	r3, [sp, #92]	; 0x5c
 8009de6:	f001 fe11 	bl	800ba0c <__match>
 8009dea:	b910      	cbnz	r0, 8009df2 <_strtod_l+0x37a>
 8009dec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009dee:	3301      	adds	r3, #1
 8009df0:	9317      	str	r3, [sp, #92]	; 0x5c
 8009df2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a024 <_strtod_l+0x5ac>
 8009df6:	f04f 0a00 	mov.w	sl, #0
 8009dfa:	e681      	b.n	8009b00 <_strtod_l+0x88>
 8009dfc:	4886      	ldr	r0, [pc, #536]	; (800a018 <_strtod_l+0x5a0>)
 8009dfe:	f002 fdf7 	bl	800c9f0 <nan>
 8009e02:	ec5b ab10 	vmov	sl, fp, d0
 8009e06:	e67b      	b.n	8009b00 <_strtod_l+0x88>
 8009e08:	9b05      	ldr	r3, [sp, #20]
 8009e0a:	9807      	ldr	r0, [sp, #28]
 8009e0c:	1af3      	subs	r3, r6, r3
 8009e0e:	2f00      	cmp	r7, #0
 8009e10:	bf08      	it	eq
 8009e12:	462f      	moveq	r7, r5
 8009e14:	2d10      	cmp	r5, #16
 8009e16:	9306      	str	r3, [sp, #24]
 8009e18:	46a8      	mov	r8, r5
 8009e1a:	bfa8      	it	ge
 8009e1c:	f04f 0810 	movge.w	r8, #16
 8009e20:	f7f6 fb70 	bl	8000504 <__aeabi_ui2d>
 8009e24:	2d09      	cmp	r5, #9
 8009e26:	4682      	mov	sl, r0
 8009e28:	468b      	mov	fp, r1
 8009e2a:	dd13      	ble.n	8009e54 <_strtod_l+0x3dc>
 8009e2c:	4b7b      	ldr	r3, [pc, #492]	; (800a01c <_strtod_l+0x5a4>)
 8009e2e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009e32:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009e36:	f7f6 fbdf 	bl	80005f8 <__aeabi_dmul>
 8009e3a:	4682      	mov	sl, r0
 8009e3c:	4648      	mov	r0, r9
 8009e3e:	468b      	mov	fp, r1
 8009e40:	f7f6 fb60 	bl	8000504 <__aeabi_ui2d>
 8009e44:	4602      	mov	r2, r0
 8009e46:	460b      	mov	r3, r1
 8009e48:	4650      	mov	r0, sl
 8009e4a:	4659      	mov	r1, fp
 8009e4c:	f7f6 fa1e 	bl	800028c <__adddf3>
 8009e50:	4682      	mov	sl, r0
 8009e52:	468b      	mov	fp, r1
 8009e54:	2d0f      	cmp	r5, #15
 8009e56:	dc38      	bgt.n	8009eca <_strtod_l+0x452>
 8009e58:	9b06      	ldr	r3, [sp, #24]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	f43f ae50 	beq.w	8009b00 <_strtod_l+0x88>
 8009e60:	dd24      	ble.n	8009eac <_strtod_l+0x434>
 8009e62:	2b16      	cmp	r3, #22
 8009e64:	dc0b      	bgt.n	8009e7e <_strtod_l+0x406>
 8009e66:	496d      	ldr	r1, [pc, #436]	; (800a01c <_strtod_l+0x5a4>)
 8009e68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e70:	4652      	mov	r2, sl
 8009e72:	465b      	mov	r3, fp
 8009e74:	f7f6 fbc0 	bl	80005f8 <__aeabi_dmul>
 8009e78:	4682      	mov	sl, r0
 8009e7a:	468b      	mov	fp, r1
 8009e7c:	e640      	b.n	8009b00 <_strtod_l+0x88>
 8009e7e:	9a06      	ldr	r2, [sp, #24]
 8009e80:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009e84:	4293      	cmp	r3, r2
 8009e86:	db20      	blt.n	8009eca <_strtod_l+0x452>
 8009e88:	4c64      	ldr	r4, [pc, #400]	; (800a01c <_strtod_l+0x5a4>)
 8009e8a:	f1c5 050f 	rsb	r5, r5, #15
 8009e8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009e92:	4652      	mov	r2, sl
 8009e94:	465b      	mov	r3, fp
 8009e96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e9a:	f7f6 fbad 	bl	80005f8 <__aeabi_dmul>
 8009e9e:	9b06      	ldr	r3, [sp, #24]
 8009ea0:	1b5d      	subs	r5, r3, r5
 8009ea2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009ea6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009eaa:	e7e3      	b.n	8009e74 <_strtod_l+0x3fc>
 8009eac:	9b06      	ldr	r3, [sp, #24]
 8009eae:	3316      	adds	r3, #22
 8009eb0:	db0b      	blt.n	8009eca <_strtod_l+0x452>
 8009eb2:	9b05      	ldr	r3, [sp, #20]
 8009eb4:	1b9e      	subs	r6, r3, r6
 8009eb6:	4b59      	ldr	r3, [pc, #356]	; (800a01c <_strtod_l+0x5a4>)
 8009eb8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009ebc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ec0:	4650      	mov	r0, sl
 8009ec2:	4659      	mov	r1, fp
 8009ec4:	f7f6 fcc2 	bl	800084c <__aeabi_ddiv>
 8009ec8:	e7d6      	b.n	8009e78 <_strtod_l+0x400>
 8009eca:	9b06      	ldr	r3, [sp, #24]
 8009ecc:	eba5 0808 	sub.w	r8, r5, r8
 8009ed0:	4498      	add	r8, r3
 8009ed2:	f1b8 0f00 	cmp.w	r8, #0
 8009ed6:	dd74      	ble.n	8009fc2 <_strtod_l+0x54a>
 8009ed8:	f018 030f 	ands.w	r3, r8, #15
 8009edc:	d00a      	beq.n	8009ef4 <_strtod_l+0x47c>
 8009ede:	494f      	ldr	r1, [pc, #316]	; (800a01c <_strtod_l+0x5a4>)
 8009ee0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009ee4:	4652      	mov	r2, sl
 8009ee6:	465b      	mov	r3, fp
 8009ee8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009eec:	f7f6 fb84 	bl	80005f8 <__aeabi_dmul>
 8009ef0:	4682      	mov	sl, r0
 8009ef2:	468b      	mov	fp, r1
 8009ef4:	f038 080f 	bics.w	r8, r8, #15
 8009ef8:	d04f      	beq.n	8009f9a <_strtod_l+0x522>
 8009efa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009efe:	dd22      	ble.n	8009f46 <_strtod_l+0x4ce>
 8009f00:	2500      	movs	r5, #0
 8009f02:	462e      	mov	r6, r5
 8009f04:	9507      	str	r5, [sp, #28]
 8009f06:	9505      	str	r5, [sp, #20]
 8009f08:	2322      	movs	r3, #34	; 0x22
 8009f0a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a024 <_strtod_l+0x5ac>
 8009f0e:	6023      	str	r3, [r4, #0]
 8009f10:	f04f 0a00 	mov.w	sl, #0
 8009f14:	9b07      	ldr	r3, [sp, #28]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	f43f adf2 	beq.w	8009b00 <_strtod_l+0x88>
 8009f1c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009f1e:	4620      	mov	r0, r4
 8009f20:	f001 fe90 	bl	800bc44 <_Bfree>
 8009f24:	9905      	ldr	r1, [sp, #20]
 8009f26:	4620      	mov	r0, r4
 8009f28:	f001 fe8c 	bl	800bc44 <_Bfree>
 8009f2c:	4631      	mov	r1, r6
 8009f2e:	4620      	mov	r0, r4
 8009f30:	f001 fe88 	bl	800bc44 <_Bfree>
 8009f34:	9907      	ldr	r1, [sp, #28]
 8009f36:	4620      	mov	r0, r4
 8009f38:	f001 fe84 	bl	800bc44 <_Bfree>
 8009f3c:	4629      	mov	r1, r5
 8009f3e:	4620      	mov	r0, r4
 8009f40:	f001 fe80 	bl	800bc44 <_Bfree>
 8009f44:	e5dc      	b.n	8009b00 <_strtod_l+0x88>
 8009f46:	4b36      	ldr	r3, [pc, #216]	; (800a020 <_strtod_l+0x5a8>)
 8009f48:	9304      	str	r3, [sp, #16]
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009f50:	4650      	mov	r0, sl
 8009f52:	4659      	mov	r1, fp
 8009f54:	4699      	mov	r9, r3
 8009f56:	f1b8 0f01 	cmp.w	r8, #1
 8009f5a:	dc21      	bgt.n	8009fa0 <_strtod_l+0x528>
 8009f5c:	b10b      	cbz	r3, 8009f62 <_strtod_l+0x4ea>
 8009f5e:	4682      	mov	sl, r0
 8009f60:	468b      	mov	fp, r1
 8009f62:	4b2f      	ldr	r3, [pc, #188]	; (800a020 <_strtod_l+0x5a8>)
 8009f64:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009f68:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009f6c:	4652      	mov	r2, sl
 8009f6e:	465b      	mov	r3, fp
 8009f70:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009f74:	f7f6 fb40 	bl	80005f8 <__aeabi_dmul>
 8009f78:	4b2a      	ldr	r3, [pc, #168]	; (800a024 <_strtod_l+0x5ac>)
 8009f7a:	460a      	mov	r2, r1
 8009f7c:	400b      	ands	r3, r1
 8009f7e:	492a      	ldr	r1, [pc, #168]	; (800a028 <_strtod_l+0x5b0>)
 8009f80:	428b      	cmp	r3, r1
 8009f82:	4682      	mov	sl, r0
 8009f84:	d8bc      	bhi.n	8009f00 <_strtod_l+0x488>
 8009f86:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009f8a:	428b      	cmp	r3, r1
 8009f8c:	bf86      	itte	hi
 8009f8e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a02c <_strtod_l+0x5b4>
 8009f92:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8009f96:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	9304      	str	r3, [sp, #16]
 8009f9e:	e084      	b.n	800a0aa <_strtod_l+0x632>
 8009fa0:	f018 0f01 	tst.w	r8, #1
 8009fa4:	d005      	beq.n	8009fb2 <_strtod_l+0x53a>
 8009fa6:	9b04      	ldr	r3, [sp, #16]
 8009fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fac:	f7f6 fb24 	bl	80005f8 <__aeabi_dmul>
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	9a04      	ldr	r2, [sp, #16]
 8009fb4:	3208      	adds	r2, #8
 8009fb6:	f109 0901 	add.w	r9, r9, #1
 8009fba:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009fbe:	9204      	str	r2, [sp, #16]
 8009fc0:	e7c9      	b.n	8009f56 <_strtod_l+0x4de>
 8009fc2:	d0ea      	beq.n	8009f9a <_strtod_l+0x522>
 8009fc4:	f1c8 0800 	rsb	r8, r8, #0
 8009fc8:	f018 020f 	ands.w	r2, r8, #15
 8009fcc:	d00a      	beq.n	8009fe4 <_strtod_l+0x56c>
 8009fce:	4b13      	ldr	r3, [pc, #76]	; (800a01c <_strtod_l+0x5a4>)
 8009fd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fd4:	4650      	mov	r0, sl
 8009fd6:	4659      	mov	r1, fp
 8009fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fdc:	f7f6 fc36 	bl	800084c <__aeabi_ddiv>
 8009fe0:	4682      	mov	sl, r0
 8009fe2:	468b      	mov	fp, r1
 8009fe4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009fe8:	d0d7      	beq.n	8009f9a <_strtod_l+0x522>
 8009fea:	f1b8 0f1f 	cmp.w	r8, #31
 8009fee:	dd1f      	ble.n	800a030 <_strtod_l+0x5b8>
 8009ff0:	2500      	movs	r5, #0
 8009ff2:	462e      	mov	r6, r5
 8009ff4:	9507      	str	r5, [sp, #28]
 8009ff6:	9505      	str	r5, [sp, #20]
 8009ff8:	2322      	movs	r3, #34	; 0x22
 8009ffa:	f04f 0a00 	mov.w	sl, #0
 8009ffe:	f04f 0b00 	mov.w	fp, #0
 800a002:	6023      	str	r3, [r4, #0]
 800a004:	e786      	b.n	8009f14 <_strtod_l+0x49c>
 800a006:	bf00      	nop
 800a008:	0800f4e1 	.word	0x0800f4e1
 800a00c:	0800f524 	.word	0x0800f524
 800a010:	0800f4d9 	.word	0x0800f4d9
 800a014:	0800f664 	.word	0x0800f664
 800a018:	0800f910 	.word	0x0800f910
 800a01c:	0800f7f0 	.word	0x0800f7f0
 800a020:	0800f7c8 	.word	0x0800f7c8
 800a024:	7ff00000 	.word	0x7ff00000
 800a028:	7ca00000 	.word	0x7ca00000
 800a02c:	7fefffff 	.word	0x7fefffff
 800a030:	f018 0310 	ands.w	r3, r8, #16
 800a034:	bf18      	it	ne
 800a036:	236a      	movne	r3, #106	; 0x6a
 800a038:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a3e8 <_strtod_l+0x970>
 800a03c:	9304      	str	r3, [sp, #16]
 800a03e:	4650      	mov	r0, sl
 800a040:	4659      	mov	r1, fp
 800a042:	2300      	movs	r3, #0
 800a044:	f018 0f01 	tst.w	r8, #1
 800a048:	d004      	beq.n	800a054 <_strtod_l+0x5dc>
 800a04a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a04e:	f7f6 fad3 	bl	80005f8 <__aeabi_dmul>
 800a052:	2301      	movs	r3, #1
 800a054:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a058:	f109 0908 	add.w	r9, r9, #8
 800a05c:	d1f2      	bne.n	800a044 <_strtod_l+0x5cc>
 800a05e:	b10b      	cbz	r3, 800a064 <_strtod_l+0x5ec>
 800a060:	4682      	mov	sl, r0
 800a062:	468b      	mov	fp, r1
 800a064:	9b04      	ldr	r3, [sp, #16]
 800a066:	b1c3      	cbz	r3, 800a09a <_strtod_l+0x622>
 800a068:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a06c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a070:	2b00      	cmp	r3, #0
 800a072:	4659      	mov	r1, fp
 800a074:	dd11      	ble.n	800a09a <_strtod_l+0x622>
 800a076:	2b1f      	cmp	r3, #31
 800a078:	f340 8124 	ble.w	800a2c4 <_strtod_l+0x84c>
 800a07c:	2b34      	cmp	r3, #52	; 0x34
 800a07e:	bfde      	ittt	le
 800a080:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a084:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800a088:	fa03 f202 	lslle.w	r2, r3, r2
 800a08c:	f04f 0a00 	mov.w	sl, #0
 800a090:	bfcc      	ite	gt
 800a092:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a096:	ea02 0b01 	andle.w	fp, r2, r1
 800a09a:	2200      	movs	r2, #0
 800a09c:	2300      	movs	r3, #0
 800a09e:	4650      	mov	r0, sl
 800a0a0:	4659      	mov	r1, fp
 800a0a2:	f7f6 fd11 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0a6:	2800      	cmp	r0, #0
 800a0a8:	d1a2      	bne.n	8009ff0 <_strtod_l+0x578>
 800a0aa:	9b07      	ldr	r3, [sp, #28]
 800a0ac:	9300      	str	r3, [sp, #0]
 800a0ae:	9908      	ldr	r1, [sp, #32]
 800a0b0:	462b      	mov	r3, r5
 800a0b2:	463a      	mov	r2, r7
 800a0b4:	4620      	mov	r0, r4
 800a0b6:	f001 fe2d 	bl	800bd14 <__s2b>
 800a0ba:	9007      	str	r0, [sp, #28]
 800a0bc:	2800      	cmp	r0, #0
 800a0be:	f43f af1f 	beq.w	8009f00 <_strtod_l+0x488>
 800a0c2:	9b05      	ldr	r3, [sp, #20]
 800a0c4:	1b9e      	subs	r6, r3, r6
 800a0c6:	9b06      	ldr	r3, [sp, #24]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	bfb4      	ite	lt
 800a0cc:	4633      	movlt	r3, r6
 800a0ce:	2300      	movge	r3, #0
 800a0d0:	930c      	str	r3, [sp, #48]	; 0x30
 800a0d2:	9b06      	ldr	r3, [sp, #24]
 800a0d4:	2500      	movs	r5, #0
 800a0d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a0da:	9312      	str	r3, [sp, #72]	; 0x48
 800a0dc:	462e      	mov	r6, r5
 800a0de:	9b07      	ldr	r3, [sp, #28]
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	6859      	ldr	r1, [r3, #4]
 800a0e4:	f001 fd6e 	bl	800bbc4 <_Balloc>
 800a0e8:	9005      	str	r0, [sp, #20]
 800a0ea:	2800      	cmp	r0, #0
 800a0ec:	f43f af0c 	beq.w	8009f08 <_strtod_l+0x490>
 800a0f0:	9b07      	ldr	r3, [sp, #28]
 800a0f2:	691a      	ldr	r2, [r3, #16]
 800a0f4:	3202      	adds	r2, #2
 800a0f6:	f103 010c 	add.w	r1, r3, #12
 800a0fa:	0092      	lsls	r2, r2, #2
 800a0fc:	300c      	adds	r0, #12
 800a0fe:	f001 fd53 	bl	800bba8 <memcpy>
 800a102:	ec4b ab10 	vmov	d0, sl, fp
 800a106:	aa1a      	add	r2, sp, #104	; 0x68
 800a108:	a919      	add	r1, sp, #100	; 0x64
 800a10a:	4620      	mov	r0, r4
 800a10c:	f002 f948 	bl	800c3a0 <__d2b>
 800a110:	ec4b ab18 	vmov	d8, sl, fp
 800a114:	9018      	str	r0, [sp, #96]	; 0x60
 800a116:	2800      	cmp	r0, #0
 800a118:	f43f aef6 	beq.w	8009f08 <_strtod_l+0x490>
 800a11c:	2101      	movs	r1, #1
 800a11e:	4620      	mov	r0, r4
 800a120:	f001 fe92 	bl	800be48 <__i2b>
 800a124:	4606      	mov	r6, r0
 800a126:	2800      	cmp	r0, #0
 800a128:	f43f aeee 	beq.w	8009f08 <_strtod_l+0x490>
 800a12c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a12e:	9904      	ldr	r1, [sp, #16]
 800a130:	2b00      	cmp	r3, #0
 800a132:	bfab      	itete	ge
 800a134:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a136:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a138:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a13a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a13e:	bfac      	ite	ge
 800a140:	eb03 0902 	addge.w	r9, r3, r2
 800a144:	1ad7      	sublt	r7, r2, r3
 800a146:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a148:	eba3 0801 	sub.w	r8, r3, r1
 800a14c:	4490      	add	r8, r2
 800a14e:	4ba1      	ldr	r3, [pc, #644]	; (800a3d4 <_strtod_l+0x95c>)
 800a150:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a154:	4598      	cmp	r8, r3
 800a156:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a15a:	f280 80c7 	bge.w	800a2ec <_strtod_l+0x874>
 800a15e:	eba3 0308 	sub.w	r3, r3, r8
 800a162:	2b1f      	cmp	r3, #31
 800a164:	eba2 0203 	sub.w	r2, r2, r3
 800a168:	f04f 0101 	mov.w	r1, #1
 800a16c:	f300 80b1 	bgt.w	800a2d2 <_strtod_l+0x85a>
 800a170:	fa01 f303 	lsl.w	r3, r1, r3
 800a174:	930d      	str	r3, [sp, #52]	; 0x34
 800a176:	2300      	movs	r3, #0
 800a178:	9308      	str	r3, [sp, #32]
 800a17a:	eb09 0802 	add.w	r8, r9, r2
 800a17e:	9b04      	ldr	r3, [sp, #16]
 800a180:	45c1      	cmp	r9, r8
 800a182:	4417      	add	r7, r2
 800a184:	441f      	add	r7, r3
 800a186:	464b      	mov	r3, r9
 800a188:	bfa8      	it	ge
 800a18a:	4643      	movge	r3, r8
 800a18c:	42bb      	cmp	r3, r7
 800a18e:	bfa8      	it	ge
 800a190:	463b      	movge	r3, r7
 800a192:	2b00      	cmp	r3, #0
 800a194:	bfc2      	ittt	gt
 800a196:	eba8 0803 	subgt.w	r8, r8, r3
 800a19a:	1aff      	subgt	r7, r7, r3
 800a19c:	eba9 0903 	subgt.w	r9, r9, r3
 800a1a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	dd17      	ble.n	800a1d6 <_strtod_l+0x75e>
 800a1a6:	4631      	mov	r1, r6
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	f001 ff0c 	bl	800bfc8 <__pow5mult>
 800a1b0:	4606      	mov	r6, r0
 800a1b2:	2800      	cmp	r0, #0
 800a1b4:	f43f aea8 	beq.w	8009f08 <_strtod_l+0x490>
 800a1b8:	4601      	mov	r1, r0
 800a1ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a1bc:	4620      	mov	r0, r4
 800a1be:	f001 fe59 	bl	800be74 <__multiply>
 800a1c2:	900b      	str	r0, [sp, #44]	; 0x2c
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	f43f ae9f 	beq.w	8009f08 <_strtod_l+0x490>
 800a1ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	f001 fd39 	bl	800bc44 <_Bfree>
 800a1d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1d4:	9318      	str	r3, [sp, #96]	; 0x60
 800a1d6:	f1b8 0f00 	cmp.w	r8, #0
 800a1da:	f300 808c 	bgt.w	800a2f6 <_strtod_l+0x87e>
 800a1de:	9b06      	ldr	r3, [sp, #24]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	dd08      	ble.n	800a1f6 <_strtod_l+0x77e>
 800a1e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a1e6:	9905      	ldr	r1, [sp, #20]
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	f001 feed 	bl	800bfc8 <__pow5mult>
 800a1ee:	9005      	str	r0, [sp, #20]
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	f43f ae89 	beq.w	8009f08 <_strtod_l+0x490>
 800a1f6:	2f00      	cmp	r7, #0
 800a1f8:	dd08      	ble.n	800a20c <_strtod_l+0x794>
 800a1fa:	9905      	ldr	r1, [sp, #20]
 800a1fc:	463a      	mov	r2, r7
 800a1fe:	4620      	mov	r0, r4
 800a200:	f001 ff3c 	bl	800c07c <__lshift>
 800a204:	9005      	str	r0, [sp, #20]
 800a206:	2800      	cmp	r0, #0
 800a208:	f43f ae7e 	beq.w	8009f08 <_strtod_l+0x490>
 800a20c:	f1b9 0f00 	cmp.w	r9, #0
 800a210:	dd08      	ble.n	800a224 <_strtod_l+0x7ac>
 800a212:	4631      	mov	r1, r6
 800a214:	464a      	mov	r2, r9
 800a216:	4620      	mov	r0, r4
 800a218:	f001 ff30 	bl	800c07c <__lshift>
 800a21c:	4606      	mov	r6, r0
 800a21e:	2800      	cmp	r0, #0
 800a220:	f43f ae72 	beq.w	8009f08 <_strtod_l+0x490>
 800a224:	9a05      	ldr	r2, [sp, #20]
 800a226:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a228:	4620      	mov	r0, r4
 800a22a:	f001 ffb3 	bl	800c194 <__mdiff>
 800a22e:	4605      	mov	r5, r0
 800a230:	2800      	cmp	r0, #0
 800a232:	f43f ae69 	beq.w	8009f08 <_strtod_l+0x490>
 800a236:	68c3      	ldr	r3, [r0, #12]
 800a238:	930b      	str	r3, [sp, #44]	; 0x2c
 800a23a:	2300      	movs	r3, #0
 800a23c:	60c3      	str	r3, [r0, #12]
 800a23e:	4631      	mov	r1, r6
 800a240:	f001 ff8c 	bl	800c15c <__mcmp>
 800a244:	2800      	cmp	r0, #0
 800a246:	da60      	bge.n	800a30a <_strtod_l+0x892>
 800a248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a24a:	ea53 030a 	orrs.w	r3, r3, sl
 800a24e:	f040 8082 	bne.w	800a356 <_strtod_l+0x8de>
 800a252:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a256:	2b00      	cmp	r3, #0
 800a258:	d17d      	bne.n	800a356 <_strtod_l+0x8de>
 800a25a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a25e:	0d1b      	lsrs	r3, r3, #20
 800a260:	051b      	lsls	r3, r3, #20
 800a262:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a266:	d976      	bls.n	800a356 <_strtod_l+0x8de>
 800a268:	696b      	ldr	r3, [r5, #20]
 800a26a:	b913      	cbnz	r3, 800a272 <_strtod_l+0x7fa>
 800a26c:	692b      	ldr	r3, [r5, #16]
 800a26e:	2b01      	cmp	r3, #1
 800a270:	dd71      	ble.n	800a356 <_strtod_l+0x8de>
 800a272:	4629      	mov	r1, r5
 800a274:	2201      	movs	r2, #1
 800a276:	4620      	mov	r0, r4
 800a278:	f001 ff00 	bl	800c07c <__lshift>
 800a27c:	4631      	mov	r1, r6
 800a27e:	4605      	mov	r5, r0
 800a280:	f001 ff6c 	bl	800c15c <__mcmp>
 800a284:	2800      	cmp	r0, #0
 800a286:	dd66      	ble.n	800a356 <_strtod_l+0x8de>
 800a288:	9904      	ldr	r1, [sp, #16]
 800a28a:	4a53      	ldr	r2, [pc, #332]	; (800a3d8 <_strtod_l+0x960>)
 800a28c:	465b      	mov	r3, fp
 800a28e:	2900      	cmp	r1, #0
 800a290:	f000 8081 	beq.w	800a396 <_strtod_l+0x91e>
 800a294:	ea02 010b 	and.w	r1, r2, fp
 800a298:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a29c:	dc7b      	bgt.n	800a396 <_strtod_l+0x91e>
 800a29e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a2a2:	f77f aea9 	ble.w	8009ff8 <_strtod_l+0x580>
 800a2a6:	4b4d      	ldr	r3, [pc, #308]	; (800a3dc <_strtod_l+0x964>)
 800a2a8:	4650      	mov	r0, sl
 800a2aa:	4659      	mov	r1, fp
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	f7f6 f9a3 	bl	80005f8 <__aeabi_dmul>
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	4303      	orrs	r3, r0
 800a2b6:	bf08      	it	eq
 800a2b8:	2322      	moveq	r3, #34	; 0x22
 800a2ba:	4682      	mov	sl, r0
 800a2bc:	468b      	mov	fp, r1
 800a2be:	bf08      	it	eq
 800a2c0:	6023      	streq	r3, [r4, #0]
 800a2c2:	e62b      	b.n	8009f1c <_strtod_l+0x4a4>
 800a2c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a2c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a2cc:	ea03 0a0a 	and.w	sl, r3, sl
 800a2d0:	e6e3      	b.n	800a09a <_strtod_l+0x622>
 800a2d2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a2d6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a2da:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a2de:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a2e2:	fa01 f308 	lsl.w	r3, r1, r8
 800a2e6:	9308      	str	r3, [sp, #32]
 800a2e8:	910d      	str	r1, [sp, #52]	; 0x34
 800a2ea:	e746      	b.n	800a17a <_strtod_l+0x702>
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	9308      	str	r3, [sp, #32]
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	930d      	str	r3, [sp, #52]	; 0x34
 800a2f4:	e741      	b.n	800a17a <_strtod_l+0x702>
 800a2f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a2f8:	4642      	mov	r2, r8
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	f001 febe 	bl	800c07c <__lshift>
 800a300:	9018      	str	r0, [sp, #96]	; 0x60
 800a302:	2800      	cmp	r0, #0
 800a304:	f47f af6b 	bne.w	800a1de <_strtod_l+0x766>
 800a308:	e5fe      	b.n	8009f08 <_strtod_l+0x490>
 800a30a:	465f      	mov	r7, fp
 800a30c:	d16e      	bne.n	800a3ec <_strtod_l+0x974>
 800a30e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a310:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a314:	b342      	cbz	r2, 800a368 <_strtod_l+0x8f0>
 800a316:	4a32      	ldr	r2, [pc, #200]	; (800a3e0 <_strtod_l+0x968>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d128      	bne.n	800a36e <_strtod_l+0x8f6>
 800a31c:	9b04      	ldr	r3, [sp, #16]
 800a31e:	4651      	mov	r1, sl
 800a320:	b1eb      	cbz	r3, 800a35e <_strtod_l+0x8e6>
 800a322:	4b2d      	ldr	r3, [pc, #180]	; (800a3d8 <_strtod_l+0x960>)
 800a324:	403b      	ands	r3, r7
 800a326:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a32a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a32e:	d819      	bhi.n	800a364 <_strtod_l+0x8ec>
 800a330:	0d1b      	lsrs	r3, r3, #20
 800a332:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a336:	fa02 f303 	lsl.w	r3, r2, r3
 800a33a:	4299      	cmp	r1, r3
 800a33c:	d117      	bne.n	800a36e <_strtod_l+0x8f6>
 800a33e:	4b29      	ldr	r3, [pc, #164]	; (800a3e4 <_strtod_l+0x96c>)
 800a340:	429f      	cmp	r7, r3
 800a342:	d102      	bne.n	800a34a <_strtod_l+0x8d2>
 800a344:	3101      	adds	r1, #1
 800a346:	f43f addf 	beq.w	8009f08 <_strtod_l+0x490>
 800a34a:	4b23      	ldr	r3, [pc, #140]	; (800a3d8 <_strtod_l+0x960>)
 800a34c:	403b      	ands	r3, r7
 800a34e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a352:	f04f 0a00 	mov.w	sl, #0
 800a356:	9b04      	ldr	r3, [sp, #16]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d1a4      	bne.n	800a2a6 <_strtod_l+0x82e>
 800a35c:	e5de      	b.n	8009f1c <_strtod_l+0x4a4>
 800a35e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a362:	e7ea      	b.n	800a33a <_strtod_l+0x8c2>
 800a364:	4613      	mov	r3, r2
 800a366:	e7e8      	b.n	800a33a <_strtod_l+0x8c2>
 800a368:	ea53 030a 	orrs.w	r3, r3, sl
 800a36c:	d08c      	beq.n	800a288 <_strtod_l+0x810>
 800a36e:	9b08      	ldr	r3, [sp, #32]
 800a370:	b1db      	cbz	r3, 800a3aa <_strtod_l+0x932>
 800a372:	423b      	tst	r3, r7
 800a374:	d0ef      	beq.n	800a356 <_strtod_l+0x8de>
 800a376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a378:	9a04      	ldr	r2, [sp, #16]
 800a37a:	4650      	mov	r0, sl
 800a37c:	4659      	mov	r1, fp
 800a37e:	b1c3      	cbz	r3, 800a3b2 <_strtod_l+0x93a>
 800a380:	f7ff fb5c 	bl	8009a3c <sulp>
 800a384:	4602      	mov	r2, r0
 800a386:	460b      	mov	r3, r1
 800a388:	ec51 0b18 	vmov	r0, r1, d8
 800a38c:	f7f5 ff7e 	bl	800028c <__adddf3>
 800a390:	4682      	mov	sl, r0
 800a392:	468b      	mov	fp, r1
 800a394:	e7df      	b.n	800a356 <_strtod_l+0x8de>
 800a396:	4013      	ands	r3, r2
 800a398:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a39c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a3a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a3a4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a3a8:	e7d5      	b.n	800a356 <_strtod_l+0x8de>
 800a3aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3ac:	ea13 0f0a 	tst.w	r3, sl
 800a3b0:	e7e0      	b.n	800a374 <_strtod_l+0x8fc>
 800a3b2:	f7ff fb43 	bl	8009a3c <sulp>
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	ec51 0b18 	vmov	r0, r1, d8
 800a3be:	f7f5 ff63 	bl	8000288 <__aeabi_dsub>
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	4682      	mov	sl, r0
 800a3c8:	468b      	mov	fp, r1
 800a3ca:	f7f6 fb7d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3ce:	2800      	cmp	r0, #0
 800a3d0:	d0c1      	beq.n	800a356 <_strtod_l+0x8de>
 800a3d2:	e611      	b.n	8009ff8 <_strtod_l+0x580>
 800a3d4:	fffffc02 	.word	0xfffffc02
 800a3d8:	7ff00000 	.word	0x7ff00000
 800a3dc:	39500000 	.word	0x39500000
 800a3e0:	000fffff 	.word	0x000fffff
 800a3e4:	7fefffff 	.word	0x7fefffff
 800a3e8:	0800f538 	.word	0x0800f538
 800a3ec:	4631      	mov	r1, r6
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	f002 f832 	bl	800c458 <__ratio>
 800a3f4:	ec59 8b10 	vmov	r8, r9, d0
 800a3f8:	ee10 0a10 	vmov	r0, s0
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a402:	4649      	mov	r1, r9
 800a404:	f7f6 fb74 	bl	8000af0 <__aeabi_dcmple>
 800a408:	2800      	cmp	r0, #0
 800a40a:	d07a      	beq.n	800a502 <_strtod_l+0xa8a>
 800a40c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d04a      	beq.n	800a4a8 <_strtod_l+0xa30>
 800a412:	4b95      	ldr	r3, [pc, #596]	; (800a668 <_strtod_l+0xbf0>)
 800a414:	2200      	movs	r2, #0
 800a416:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a41a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a668 <_strtod_l+0xbf0>
 800a41e:	f04f 0800 	mov.w	r8, #0
 800a422:	4b92      	ldr	r3, [pc, #584]	; (800a66c <_strtod_l+0xbf4>)
 800a424:	403b      	ands	r3, r7
 800a426:	930d      	str	r3, [sp, #52]	; 0x34
 800a428:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a42a:	4b91      	ldr	r3, [pc, #580]	; (800a670 <_strtod_l+0xbf8>)
 800a42c:	429a      	cmp	r2, r3
 800a42e:	f040 80b0 	bne.w	800a592 <_strtod_l+0xb1a>
 800a432:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a436:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a43a:	ec4b ab10 	vmov	d0, sl, fp
 800a43e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a442:	f001 ff31 	bl	800c2a8 <__ulp>
 800a446:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a44a:	ec53 2b10 	vmov	r2, r3, d0
 800a44e:	f7f6 f8d3 	bl	80005f8 <__aeabi_dmul>
 800a452:	4652      	mov	r2, sl
 800a454:	465b      	mov	r3, fp
 800a456:	f7f5 ff19 	bl	800028c <__adddf3>
 800a45a:	460b      	mov	r3, r1
 800a45c:	4983      	ldr	r1, [pc, #524]	; (800a66c <_strtod_l+0xbf4>)
 800a45e:	4a85      	ldr	r2, [pc, #532]	; (800a674 <_strtod_l+0xbfc>)
 800a460:	4019      	ands	r1, r3
 800a462:	4291      	cmp	r1, r2
 800a464:	4682      	mov	sl, r0
 800a466:	d960      	bls.n	800a52a <_strtod_l+0xab2>
 800a468:	ee18 3a90 	vmov	r3, s17
 800a46c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a470:	4293      	cmp	r3, r2
 800a472:	d104      	bne.n	800a47e <_strtod_l+0xa06>
 800a474:	ee18 3a10 	vmov	r3, s16
 800a478:	3301      	adds	r3, #1
 800a47a:	f43f ad45 	beq.w	8009f08 <_strtod_l+0x490>
 800a47e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a680 <_strtod_l+0xc08>
 800a482:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a486:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a488:	4620      	mov	r0, r4
 800a48a:	f001 fbdb 	bl	800bc44 <_Bfree>
 800a48e:	9905      	ldr	r1, [sp, #20]
 800a490:	4620      	mov	r0, r4
 800a492:	f001 fbd7 	bl	800bc44 <_Bfree>
 800a496:	4631      	mov	r1, r6
 800a498:	4620      	mov	r0, r4
 800a49a:	f001 fbd3 	bl	800bc44 <_Bfree>
 800a49e:	4629      	mov	r1, r5
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	f001 fbcf 	bl	800bc44 <_Bfree>
 800a4a6:	e61a      	b.n	800a0de <_strtod_l+0x666>
 800a4a8:	f1ba 0f00 	cmp.w	sl, #0
 800a4ac:	d11b      	bne.n	800a4e6 <_strtod_l+0xa6e>
 800a4ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a4b2:	b9f3      	cbnz	r3, 800a4f2 <_strtod_l+0xa7a>
 800a4b4:	4b6c      	ldr	r3, [pc, #432]	; (800a668 <_strtod_l+0xbf0>)
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	4640      	mov	r0, r8
 800a4ba:	4649      	mov	r1, r9
 800a4bc:	f7f6 fb0e 	bl	8000adc <__aeabi_dcmplt>
 800a4c0:	b9d0      	cbnz	r0, 800a4f8 <_strtod_l+0xa80>
 800a4c2:	4640      	mov	r0, r8
 800a4c4:	4649      	mov	r1, r9
 800a4c6:	4b6c      	ldr	r3, [pc, #432]	; (800a678 <_strtod_l+0xc00>)
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f7f6 f895 	bl	80005f8 <__aeabi_dmul>
 800a4ce:	4680      	mov	r8, r0
 800a4d0:	4689      	mov	r9, r1
 800a4d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a4d6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a4da:	9315      	str	r3, [sp, #84]	; 0x54
 800a4dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a4e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a4e4:	e79d      	b.n	800a422 <_strtod_l+0x9aa>
 800a4e6:	f1ba 0f01 	cmp.w	sl, #1
 800a4ea:	d102      	bne.n	800a4f2 <_strtod_l+0xa7a>
 800a4ec:	2f00      	cmp	r7, #0
 800a4ee:	f43f ad83 	beq.w	8009ff8 <_strtod_l+0x580>
 800a4f2:	4b62      	ldr	r3, [pc, #392]	; (800a67c <_strtod_l+0xc04>)
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	e78e      	b.n	800a416 <_strtod_l+0x99e>
 800a4f8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a678 <_strtod_l+0xc00>
 800a4fc:	f04f 0800 	mov.w	r8, #0
 800a500:	e7e7      	b.n	800a4d2 <_strtod_l+0xa5a>
 800a502:	4b5d      	ldr	r3, [pc, #372]	; (800a678 <_strtod_l+0xc00>)
 800a504:	4640      	mov	r0, r8
 800a506:	4649      	mov	r1, r9
 800a508:	2200      	movs	r2, #0
 800a50a:	f7f6 f875 	bl	80005f8 <__aeabi_dmul>
 800a50e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a510:	4680      	mov	r8, r0
 800a512:	4689      	mov	r9, r1
 800a514:	b933      	cbnz	r3, 800a524 <_strtod_l+0xaac>
 800a516:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a51a:	900e      	str	r0, [sp, #56]	; 0x38
 800a51c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a51e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a522:	e7dd      	b.n	800a4e0 <_strtod_l+0xa68>
 800a524:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a528:	e7f9      	b.n	800a51e <_strtod_l+0xaa6>
 800a52a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a52e:	9b04      	ldr	r3, [sp, #16]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d1a8      	bne.n	800a486 <_strtod_l+0xa0e>
 800a534:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a538:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a53a:	0d1b      	lsrs	r3, r3, #20
 800a53c:	051b      	lsls	r3, r3, #20
 800a53e:	429a      	cmp	r2, r3
 800a540:	d1a1      	bne.n	800a486 <_strtod_l+0xa0e>
 800a542:	4640      	mov	r0, r8
 800a544:	4649      	mov	r1, r9
 800a546:	f7f6 fbb7 	bl	8000cb8 <__aeabi_d2lz>
 800a54a:	f7f6 f827 	bl	800059c <__aeabi_l2d>
 800a54e:	4602      	mov	r2, r0
 800a550:	460b      	mov	r3, r1
 800a552:	4640      	mov	r0, r8
 800a554:	4649      	mov	r1, r9
 800a556:	f7f5 fe97 	bl	8000288 <__aeabi_dsub>
 800a55a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a55c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a560:	ea43 030a 	orr.w	r3, r3, sl
 800a564:	4313      	orrs	r3, r2
 800a566:	4680      	mov	r8, r0
 800a568:	4689      	mov	r9, r1
 800a56a:	d055      	beq.n	800a618 <_strtod_l+0xba0>
 800a56c:	a336      	add	r3, pc, #216	; (adr r3, 800a648 <_strtod_l+0xbd0>)
 800a56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a572:	f7f6 fab3 	bl	8000adc <__aeabi_dcmplt>
 800a576:	2800      	cmp	r0, #0
 800a578:	f47f acd0 	bne.w	8009f1c <_strtod_l+0x4a4>
 800a57c:	a334      	add	r3, pc, #208	; (adr r3, 800a650 <_strtod_l+0xbd8>)
 800a57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a582:	4640      	mov	r0, r8
 800a584:	4649      	mov	r1, r9
 800a586:	f7f6 fac7 	bl	8000b18 <__aeabi_dcmpgt>
 800a58a:	2800      	cmp	r0, #0
 800a58c:	f43f af7b 	beq.w	800a486 <_strtod_l+0xa0e>
 800a590:	e4c4      	b.n	8009f1c <_strtod_l+0x4a4>
 800a592:	9b04      	ldr	r3, [sp, #16]
 800a594:	b333      	cbz	r3, 800a5e4 <_strtod_l+0xb6c>
 800a596:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a598:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a59c:	d822      	bhi.n	800a5e4 <_strtod_l+0xb6c>
 800a59e:	a32e      	add	r3, pc, #184	; (adr r3, 800a658 <_strtod_l+0xbe0>)
 800a5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a4:	4640      	mov	r0, r8
 800a5a6:	4649      	mov	r1, r9
 800a5a8:	f7f6 faa2 	bl	8000af0 <__aeabi_dcmple>
 800a5ac:	b1a0      	cbz	r0, 800a5d8 <_strtod_l+0xb60>
 800a5ae:	4649      	mov	r1, r9
 800a5b0:	4640      	mov	r0, r8
 800a5b2:	f7f6 faf9 	bl	8000ba8 <__aeabi_d2uiz>
 800a5b6:	2801      	cmp	r0, #1
 800a5b8:	bf38      	it	cc
 800a5ba:	2001      	movcc	r0, #1
 800a5bc:	f7f5 ffa2 	bl	8000504 <__aeabi_ui2d>
 800a5c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5c2:	4680      	mov	r8, r0
 800a5c4:	4689      	mov	r9, r1
 800a5c6:	bb23      	cbnz	r3, 800a612 <_strtod_l+0xb9a>
 800a5c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a5cc:	9010      	str	r0, [sp, #64]	; 0x40
 800a5ce:	9311      	str	r3, [sp, #68]	; 0x44
 800a5d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a5d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a5d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a5dc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a5e0:	1a9b      	subs	r3, r3, r2
 800a5e2:	9309      	str	r3, [sp, #36]	; 0x24
 800a5e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a5e8:	eeb0 0a48 	vmov.f32	s0, s16
 800a5ec:	eef0 0a68 	vmov.f32	s1, s17
 800a5f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a5f4:	f001 fe58 	bl	800c2a8 <__ulp>
 800a5f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a5fc:	ec53 2b10 	vmov	r2, r3, d0
 800a600:	f7f5 fffa 	bl	80005f8 <__aeabi_dmul>
 800a604:	ec53 2b18 	vmov	r2, r3, d8
 800a608:	f7f5 fe40 	bl	800028c <__adddf3>
 800a60c:	4682      	mov	sl, r0
 800a60e:	468b      	mov	fp, r1
 800a610:	e78d      	b.n	800a52e <_strtod_l+0xab6>
 800a612:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a616:	e7db      	b.n	800a5d0 <_strtod_l+0xb58>
 800a618:	a311      	add	r3, pc, #68	; (adr r3, 800a660 <_strtod_l+0xbe8>)
 800a61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61e:	f7f6 fa5d 	bl	8000adc <__aeabi_dcmplt>
 800a622:	e7b2      	b.n	800a58a <_strtod_l+0xb12>
 800a624:	2300      	movs	r3, #0
 800a626:	930a      	str	r3, [sp, #40]	; 0x28
 800a628:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a62a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a62c:	6013      	str	r3, [r2, #0]
 800a62e:	f7ff ba6b 	b.w	8009b08 <_strtod_l+0x90>
 800a632:	2a65      	cmp	r2, #101	; 0x65
 800a634:	f43f ab5f 	beq.w	8009cf6 <_strtod_l+0x27e>
 800a638:	2a45      	cmp	r2, #69	; 0x45
 800a63a:	f43f ab5c 	beq.w	8009cf6 <_strtod_l+0x27e>
 800a63e:	2301      	movs	r3, #1
 800a640:	f7ff bb94 	b.w	8009d6c <_strtod_l+0x2f4>
 800a644:	f3af 8000 	nop.w
 800a648:	94a03595 	.word	0x94a03595
 800a64c:	3fdfffff 	.word	0x3fdfffff
 800a650:	35afe535 	.word	0x35afe535
 800a654:	3fe00000 	.word	0x3fe00000
 800a658:	ffc00000 	.word	0xffc00000
 800a65c:	41dfffff 	.word	0x41dfffff
 800a660:	94a03595 	.word	0x94a03595
 800a664:	3fcfffff 	.word	0x3fcfffff
 800a668:	3ff00000 	.word	0x3ff00000
 800a66c:	7ff00000 	.word	0x7ff00000
 800a670:	7fe00000 	.word	0x7fe00000
 800a674:	7c9fffff 	.word	0x7c9fffff
 800a678:	3fe00000 	.word	0x3fe00000
 800a67c:	bff00000 	.word	0xbff00000
 800a680:	7fefffff 	.word	0x7fefffff

0800a684 <_strtod_r>:
 800a684:	4b01      	ldr	r3, [pc, #4]	; (800a68c <_strtod_r+0x8>)
 800a686:	f7ff b9f7 	b.w	8009a78 <_strtod_l>
 800a68a:	bf00      	nop
 800a68c:	20000098 	.word	0x20000098

0800a690 <_strtol_l.constprop.0>:
 800a690:	2b01      	cmp	r3, #1
 800a692:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a696:	d001      	beq.n	800a69c <_strtol_l.constprop.0+0xc>
 800a698:	2b24      	cmp	r3, #36	; 0x24
 800a69a:	d906      	bls.n	800a6aa <_strtol_l.constprop.0+0x1a>
 800a69c:	f7fe fafc 	bl	8008c98 <__errno>
 800a6a0:	2316      	movs	r3, #22
 800a6a2:	6003      	str	r3, [r0, #0]
 800a6a4:	2000      	movs	r0, #0
 800a6a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a790 <_strtol_l.constprop.0+0x100>
 800a6ae:	460d      	mov	r5, r1
 800a6b0:	462e      	mov	r6, r5
 800a6b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a6ba:	f017 0708 	ands.w	r7, r7, #8
 800a6be:	d1f7      	bne.n	800a6b0 <_strtol_l.constprop.0+0x20>
 800a6c0:	2c2d      	cmp	r4, #45	; 0x2d
 800a6c2:	d132      	bne.n	800a72a <_strtol_l.constprop.0+0x9a>
 800a6c4:	782c      	ldrb	r4, [r5, #0]
 800a6c6:	2701      	movs	r7, #1
 800a6c8:	1cb5      	adds	r5, r6, #2
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d05b      	beq.n	800a786 <_strtol_l.constprop.0+0xf6>
 800a6ce:	2b10      	cmp	r3, #16
 800a6d0:	d109      	bne.n	800a6e6 <_strtol_l.constprop.0+0x56>
 800a6d2:	2c30      	cmp	r4, #48	; 0x30
 800a6d4:	d107      	bne.n	800a6e6 <_strtol_l.constprop.0+0x56>
 800a6d6:	782c      	ldrb	r4, [r5, #0]
 800a6d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a6dc:	2c58      	cmp	r4, #88	; 0x58
 800a6de:	d14d      	bne.n	800a77c <_strtol_l.constprop.0+0xec>
 800a6e0:	786c      	ldrb	r4, [r5, #1]
 800a6e2:	2310      	movs	r3, #16
 800a6e4:	3502      	adds	r5, #2
 800a6e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a6ea:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a6ee:	f04f 0c00 	mov.w	ip, #0
 800a6f2:	fbb8 f9f3 	udiv	r9, r8, r3
 800a6f6:	4666      	mov	r6, ip
 800a6f8:	fb03 8a19 	mls	sl, r3, r9, r8
 800a6fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a700:	f1be 0f09 	cmp.w	lr, #9
 800a704:	d816      	bhi.n	800a734 <_strtol_l.constprop.0+0xa4>
 800a706:	4674      	mov	r4, lr
 800a708:	42a3      	cmp	r3, r4
 800a70a:	dd24      	ble.n	800a756 <_strtol_l.constprop.0+0xc6>
 800a70c:	f1bc 0f00 	cmp.w	ip, #0
 800a710:	db1e      	blt.n	800a750 <_strtol_l.constprop.0+0xc0>
 800a712:	45b1      	cmp	r9, r6
 800a714:	d31c      	bcc.n	800a750 <_strtol_l.constprop.0+0xc0>
 800a716:	d101      	bne.n	800a71c <_strtol_l.constprop.0+0x8c>
 800a718:	45a2      	cmp	sl, r4
 800a71a:	db19      	blt.n	800a750 <_strtol_l.constprop.0+0xc0>
 800a71c:	fb06 4603 	mla	r6, r6, r3, r4
 800a720:	f04f 0c01 	mov.w	ip, #1
 800a724:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a728:	e7e8      	b.n	800a6fc <_strtol_l.constprop.0+0x6c>
 800a72a:	2c2b      	cmp	r4, #43	; 0x2b
 800a72c:	bf04      	itt	eq
 800a72e:	782c      	ldrbeq	r4, [r5, #0]
 800a730:	1cb5      	addeq	r5, r6, #2
 800a732:	e7ca      	b.n	800a6ca <_strtol_l.constprop.0+0x3a>
 800a734:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a738:	f1be 0f19 	cmp.w	lr, #25
 800a73c:	d801      	bhi.n	800a742 <_strtol_l.constprop.0+0xb2>
 800a73e:	3c37      	subs	r4, #55	; 0x37
 800a740:	e7e2      	b.n	800a708 <_strtol_l.constprop.0+0x78>
 800a742:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a746:	f1be 0f19 	cmp.w	lr, #25
 800a74a:	d804      	bhi.n	800a756 <_strtol_l.constprop.0+0xc6>
 800a74c:	3c57      	subs	r4, #87	; 0x57
 800a74e:	e7db      	b.n	800a708 <_strtol_l.constprop.0+0x78>
 800a750:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800a754:	e7e6      	b.n	800a724 <_strtol_l.constprop.0+0x94>
 800a756:	f1bc 0f00 	cmp.w	ip, #0
 800a75a:	da05      	bge.n	800a768 <_strtol_l.constprop.0+0xd8>
 800a75c:	2322      	movs	r3, #34	; 0x22
 800a75e:	6003      	str	r3, [r0, #0]
 800a760:	4646      	mov	r6, r8
 800a762:	b942      	cbnz	r2, 800a776 <_strtol_l.constprop.0+0xe6>
 800a764:	4630      	mov	r0, r6
 800a766:	e79e      	b.n	800a6a6 <_strtol_l.constprop.0+0x16>
 800a768:	b107      	cbz	r7, 800a76c <_strtol_l.constprop.0+0xdc>
 800a76a:	4276      	negs	r6, r6
 800a76c:	2a00      	cmp	r2, #0
 800a76e:	d0f9      	beq.n	800a764 <_strtol_l.constprop.0+0xd4>
 800a770:	f1bc 0f00 	cmp.w	ip, #0
 800a774:	d000      	beq.n	800a778 <_strtol_l.constprop.0+0xe8>
 800a776:	1e69      	subs	r1, r5, #1
 800a778:	6011      	str	r1, [r2, #0]
 800a77a:	e7f3      	b.n	800a764 <_strtol_l.constprop.0+0xd4>
 800a77c:	2430      	movs	r4, #48	; 0x30
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d1b1      	bne.n	800a6e6 <_strtol_l.constprop.0+0x56>
 800a782:	2308      	movs	r3, #8
 800a784:	e7af      	b.n	800a6e6 <_strtol_l.constprop.0+0x56>
 800a786:	2c30      	cmp	r4, #48	; 0x30
 800a788:	d0a5      	beq.n	800a6d6 <_strtol_l.constprop.0+0x46>
 800a78a:	230a      	movs	r3, #10
 800a78c:	e7ab      	b.n	800a6e6 <_strtol_l.constprop.0+0x56>
 800a78e:	bf00      	nop
 800a790:	0800f561 	.word	0x0800f561

0800a794 <_strtol_r>:
 800a794:	f7ff bf7c 	b.w	800a690 <_strtol_l.constprop.0>

0800a798 <quorem>:
 800a798:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a79c:	6903      	ldr	r3, [r0, #16]
 800a79e:	690c      	ldr	r4, [r1, #16]
 800a7a0:	42a3      	cmp	r3, r4
 800a7a2:	4607      	mov	r7, r0
 800a7a4:	f2c0 8081 	blt.w	800a8aa <quorem+0x112>
 800a7a8:	3c01      	subs	r4, #1
 800a7aa:	f101 0814 	add.w	r8, r1, #20
 800a7ae:	f100 0514 	add.w	r5, r0, #20
 800a7b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7b6:	9301      	str	r3, [sp, #4]
 800a7b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a7bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a7c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a7cc:	fbb2 f6f3 	udiv	r6, r2, r3
 800a7d0:	d331      	bcc.n	800a836 <quorem+0x9e>
 800a7d2:	f04f 0e00 	mov.w	lr, #0
 800a7d6:	4640      	mov	r0, r8
 800a7d8:	46ac      	mov	ip, r5
 800a7da:	46f2      	mov	sl, lr
 800a7dc:	f850 2b04 	ldr.w	r2, [r0], #4
 800a7e0:	b293      	uxth	r3, r2
 800a7e2:	fb06 e303 	mla	r3, r6, r3, lr
 800a7e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	ebaa 0303 	sub.w	r3, sl, r3
 800a7f0:	f8dc a000 	ldr.w	sl, [ip]
 800a7f4:	0c12      	lsrs	r2, r2, #16
 800a7f6:	fa13 f38a 	uxtah	r3, r3, sl
 800a7fa:	fb06 e202 	mla	r2, r6, r2, lr
 800a7fe:	9300      	str	r3, [sp, #0]
 800a800:	9b00      	ldr	r3, [sp, #0]
 800a802:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a806:	b292      	uxth	r2, r2
 800a808:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a80c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a810:	f8bd 3000 	ldrh.w	r3, [sp]
 800a814:	4581      	cmp	r9, r0
 800a816:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a81a:	f84c 3b04 	str.w	r3, [ip], #4
 800a81e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a822:	d2db      	bcs.n	800a7dc <quorem+0x44>
 800a824:	f855 300b 	ldr.w	r3, [r5, fp]
 800a828:	b92b      	cbnz	r3, 800a836 <quorem+0x9e>
 800a82a:	9b01      	ldr	r3, [sp, #4]
 800a82c:	3b04      	subs	r3, #4
 800a82e:	429d      	cmp	r5, r3
 800a830:	461a      	mov	r2, r3
 800a832:	d32e      	bcc.n	800a892 <quorem+0xfa>
 800a834:	613c      	str	r4, [r7, #16]
 800a836:	4638      	mov	r0, r7
 800a838:	f001 fc90 	bl	800c15c <__mcmp>
 800a83c:	2800      	cmp	r0, #0
 800a83e:	db24      	blt.n	800a88a <quorem+0xf2>
 800a840:	3601      	adds	r6, #1
 800a842:	4628      	mov	r0, r5
 800a844:	f04f 0c00 	mov.w	ip, #0
 800a848:	f858 2b04 	ldr.w	r2, [r8], #4
 800a84c:	f8d0 e000 	ldr.w	lr, [r0]
 800a850:	b293      	uxth	r3, r2
 800a852:	ebac 0303 	sub.w	r3, ip, r3
 800a856:	0c12      	lsrs	r2, r2, #16
 800a858:	fa13 f38e 	uxtah	r3, r3, lr
 800a85c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a860:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a864:	b29b      	uxth	r3, r3
 800a866:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a86a:	45c1      	cmp	r9, r8
 800a86c:	f840 3b04 	str.w	r3, [r0], #4
 800a870:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a874:	d2e8      	bcs.n	800a848 <quorem+0xb0>
 800a876:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a87a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a87e:	b922      	cbnz	r2, 800a88a <quorem+0xf2>
 800a880:	3b04      	subs	r3, #4
 800a882:	429d      	cmp	r5, r3
 800a884:	461a      	mov	r2, r3
 800a886:	d30a      	bcc.n	800a89e <quorem+0x106>
 800a888:	613c      	str	r4, [r7, #16]
 800a88a:	4630      	mov	r0, r6
 800a88c:	b003      	add	sp, #12
 800a88e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a892:	6812      	ldr	r2, [r2, #0]
 800a894:	3b04      	subs	r3, #4
 800a896:	2a00      	cmp	r2, #0
 800a898:	d1cc      	bne.n	800a834 <quorem+0x9c>
 800a89a:	3c01      	subs	r4, #1
 800a89c:	e7c7      	b.n	800a82e <quorem+0x96>
 800a89e:	6812      	ldr	r2, [r2, #0]
 800a8a0:	3b04      	subs	r3, #4
 800a8a2:	2a00      	cmp	r2, #0
 800a8a4:	d1f0      	bne.n	800a888 <quorem+0xf0>
 800a8a6:	3c01      	subs	r4, #1
 800a8a8:	e7eb      	b.n	800a882 <quorem+0xea>
 800a8aa:	2000      	movs	r0, #0
 800a8ac:	e7ee      	b.n	800a88c <quorem+0xf4>
	...

0800a8b0 <_dtoa_r>:
 800a8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b4:	ed2d 8b04 	vpush	{d8-d9}
 800a8b8:	ec57 6b10 	vmov	r6, r7, d0
 800a8bc:	b093      	sub	sp, #76	; 0x4c
 800a8be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a8c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a8c4:	9106      	str	r1, [sp, #24]
 800a8c6:	ee10 aa10 	vmov	sl, s0
 800a8ca:	4604      	mov	r4, r0
 800a8cc:	9209      	str	r2, [sp, #36]	; 0x24
 800a8ce:	930c      	str	r3, [sp, #48]	; 0x30
 800a8d0:	46bb      	mov	fp, r7
 800a8d2:	b975      	cbnz	r5, 800a8f2 <_dtoa_r+0x42>
 800a8d4:	2010      	movs	r0, #16
 800a8d6:	f001 f94d 	bl	800bb74 <malloc>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	6260      	str	r0, [r4, #36]	; 0x24
 800a8de:	b920      	cbnz	r0, 800a8ea <_dtoa_r+0x3a>
 800a8e0:	4ba7      	ldr	r3, [pc, #668]	; (800ab80 <_dtoa_r+0x2d0>)
 800a8e2:	21ea      	movs	r1, #234	; 0xea
 800a8e4:	48a7      	ldr	r0, [pc, #668]	; (800ab84 <_dtoa_r+0x2d4>)
 800a8e6:	f002 f8bd 	bl	800ca64 <__assert_func>
 800a8ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a8ee:	6005      	str	r5, [r0, #0]
 800a8f0:	60c5      	str	r5, [r0, #12]
 800a8f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8f4:	6819      	ldr	r1, [r3, #0]
 800a8f6:	b151      	cbz	r1, 800a90e <_dtoa_r+0x5e>
 800a8f8:	685a      	ldr	r2, [r3, #4]
 800a8fa:	604a      	str	r2, [r1, #4]
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	4093      	lsls	r3, r2
 800a900:	608b      	str	r3, [r1, #8]
 800a902:	4620      	mov	r0, r4
 800a904:	f001 f99e 	bl	800bc44 <_Bfree>
 800a908:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a90a:	2200      	movs	r2, #0
 800a90c:	601a      	str	r2, [r3, #0]
 800a90e:	1e3b      	subs	r3, r7, #0
 800a910:	bfaa      	itet	ge
 800a912:	2300      	movge	r3, #0
 800a914:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a918:	f8c8 3000 	strge.w	r3, [r8]
 800a91c:	4b9a      	ldr	r3, [pc, #616]	; (800ab88 <_dtoa_r+0x2d8>)
 800a91e:	bfbc      	itt	lt
 800a920:	2201      	movlt	r2, #1
 800a922:	f8c8 2000 	strlt.w	r2, [r8]
 800a926:	ea33 030b 	bics.w	r3, r3, fp
 800a92a:	d11b      	bne.n	800a964 <_dtoa_r+0xb4>
 800a92c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a92e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a932:	6013      	str	r3, [r2, #0]
 800a934:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a938:	4333      	orrs	r3, r6
 800a93a:	f000 8592 	beq.w	800b462 <_dtoa_r+0xbb2>
 800a93e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a940:	b963      	cbnz	r3, 800a95c <_dtoa_r+0xac>
 800a942:	4b92      	ldr	r3, [pc, #584]	; (800ab8c <_dtoa_r+0x2dc>)
 800a944:	e022      	b.n	800a98c <_dtoa_r+0xdc>
 800a946:	4b92      	ldr	r3, [pc, #584]	; (800ab90 <_dtoa_r+0x2e0>)
 800a948:	9301      	str	r3, [sp, #4]
 800a94a:	3308      	adds	r3, #8
 800a94c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a94e:	6013      	str	r3, [r2, #0]
 800a950:	9801      	ldr	r0, [sp, #4]
 800a952:	b013      	add	sp, #76	; 0x4c
 800a954:	ecbd 8b04 	vpop	{d8-d9}
 800a958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a95c:	4b8b      	ldr	r3, [pc, #556]	; (800ab8c <_dtoa_r+0x2dc>)
 800a95e:	9301      	str	r3, [sp, #4]
 800a960:	3303      	adds	r3, #3
 800a962:	e7f3      	b.n	800a94c <_dtoa_r+0x9c>
 800a964:	2200      	movs	r2, #0
 800a966:	2300      	movs	r3, #0
 800a968:	4650      	mov	r0, sl
 800a96a:	4659      	mov	r1, fp
 800a96c:	f7f6 f8ac 	bl	8000ac8 <__aeabi_dcmpeq>
 800a970:	ec4b ab19 	vmov	d9, sl, fp
 800a974:	4680      	mov	r8, r0
 800a976:	b158      	cbz	r0, 800a990 <_dtoa_r+0xe0>
 800a978:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a97a:	2301      	movs	r3, #1
 800a97c:	6013      	str	r3, [r2, #0]
 800a97e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a980:	2b00      	cmp	r3, #0
 800a982:	f000 856b 	beq.w	800b45c <_dtoa_r+0xbac>
 800a986:	4883      	ldr	r0, [pc, #524]	; (800ab94 <_dtoa_r+0x2e4>)
 800a988:	6018      	str	r0, [r3, #0]
 800a98a:	1e43      	subs	r3, r0, #1
 800a98c:	9301      	str	r3, [sp, #4]
 800a98e:	e7df      	b.n	800a950 <_dtoa_r+0xa0>
 800a990:	ec4b ab10 	vmov	d0, sl, fp
 800a994:	aa10      	add	r2, sp, #64	; 0x40
 800a996:	a911      	add	r1, sp, #68	; 0x44
 800a998:	4620      	mov	r0, r4
 800a99a:	f001 fd01 	bl	800c3a0 <__d2b>
 800a99e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a9a2:	ee08 0a10 	vmov	s16, r0
 800a9a6:	2d00      	cmp	r5, #0
 800a9a8:	f000 8084 	beq.w	800aab4 <_dtoa_r+0x204>
 800a9ac:	ee19 3a90 	vmov	r3, s19
 800a9b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a9b8:	4656      	mov	r6, sl
 800a9ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a9be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a9c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a9c6:	4b74      	ldr	r3, [pc, #464]	; (800ab98 <_dtoa_r+0x2e8>)
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	4630      	mov	r0, r6
 800a9cc:	4639      	mov	r1, r7
 800a9ce:	f7f5 fc5b 	bl	8000288 <__aeabi_dsub>
 800a9d2:	a365      	add	r3, pc, #404	; (adr r3, 800ab68 <_dtoa_r+0x2b8>)
 800a9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d8:	f7f5 fe0e 	bl	80005f8 <__aeabi_dmul>
 800a9dc:	a364      	add	r3, pc, #400	; (adr r3, 800ab70 <_dtoa_r+0x2c0>)
 800a9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e2:	f7f5 fc53 	bl	800028c <__adddf3>
 800a9e6:	4606      	mov	r6, r0
 800a9e8:	4628      	mov	r0, r5
 800a9ea:	460f      	mov	r7, r1
 800a9ec:	f7f5 fd9a 	bl	8000524 <__aeabi_i2d>
 800a9f0:	a361      	add	r3, pc, #388	; (adr r3, 800ab78 <_dtoa_r+0x2c8>)
 800a9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f6:	f7f5 fdff 	bl	80005f8 <__aeabi_dmul>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	4630      	mov	r0, r6
 800aa00:	4639      	mov	r1, r7
 800aa02:	f7f5 fc43 	bl	800028c <__adddf3>
 800aa06:	4606      	mov	r6, r0
 800aa08:	460f      	mov	r7, r1
 800aa0a:	f7f6 f8a5 	bl	8000b58 <__aeabi_d2iz>
 800aa0e:	2200      	movs	r2, #0
 800aa10:	9000      	str	r0, [sp, #0]
 800aa12:	2300      	movs	r3, #0
 800aa14:	4630      	mov	r0, r6
 800aa16:	4639      	mov	r1, r7
 800aa18:	f7f6 f860 	bl	8000adc <__aeabi_dcmplt>
 800aa1c:	b150      	cbz	r0, 800aa34 <_dtoa_r+0x184>
 800aa1e:	9800      	ldr	r0, [sp, #0]
 800aa20:	f7f5 fd80 	bl	8000524 <__aeabi_i2d>
 800aa24:	4632      	mov	r2, r6
 800aa26:	463b      	mov	r3, r7
 800aa28:	f7f6 f84e 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa2c:	b910      	cbnz	r0, 800aa34 <_dtoa_r+0x184>
 800aa2e:	9b00      	ldr	r3, [sp, #0]
 800aa30:	3b01      	subs	r3, #1
 800aa32:	9300      	str	r3, [sp, #0]
 800aa34:	9b00      	ldr	r3, [sp, #0]
 800aa36:	2b16      	cmp	r3, #22
 800aa38:	d85a      	bhi.n	800aaf0 <_dtoa_r+0x240>
 800aa3a:	9a00      	ldr	r2, [sp, #0]
 800aa3c:	4b57      	ldr	r3, [pc, #348]	; (800ab9c <_dtoa_r+0x2ec>)
 800aa3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa46:	ec51 0b19 	vmov	r0, r1, d9
 800aa4a:	f7f6 f847 	bl	8000adc <__aeabi_dcmplt>
 800aa4e:	2800      	cmp	r0, #0
 800aa50:	d050      	beq.n	800aaf4 <_dtoa_r+0x244>
 800aa52:	9b00      	ldr	r3, [sp, #0]
 800aa54:	3b01      	subs	r3, #1
 800aa56:	9300      	str	r3, [sp, #0]
 800aa58:	2300      	movs	r3, #0
 800aa5a:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa5e:	1b5d      	subs	r5, r3, r5
 800aa60:	1e6b      	subs	r3, r5, #1
 800aa62:	9305      	str	r3, [sp, #20]
 800aa64:	bf45      	ittet	mi
 800aa66:	f1c5 0301 	rsbmi	r3, r5, #1
 800aa6a:	9304      	strmi	r3, [sp, #16]
 800aa6c:	2300      	movpl	r3, #0
 800aa6e:	2300      	movmi	r3, #0
 800aa70:	bf4c      	ite	mi
 800aa72:	9305      	strmi	r3, [sp, #20]
 800aa74:	9304      	strpl	r3, [sp, #16]
 800aa76:	9b00      	ldr	r3, [sp, #0]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	db3d      	blt.n	800aaf8 <_dtoa_r+0x248>
 800aa7c:	9b05      	ldr	r3, [sp, #20]
 800aa7e:	9a00      	ldr	r2, [sp, #0]
 800aa80:	920a      	str	r2, [sp, #40]	; 0x28
 800aa82:	4413      	add	r3, r2
 800aa84:	9305      	str	r3, [sp, #20]
 800aa86:	2300      	movs	r3, #0
 800aa88:	9307      	str	r3, [sp, #28]
 800aa8a:	9b06      	ldr	r3, [sp, #24]
 800aa8c:	2b09      	cmp	r3, #9
 800aa8e:	f200 8089 	bhi.w	800aba4 <_dtoa_r+0x2f4>
 800aa92:	2b05      	cmp	r3, #5
 800aa94:	bfc4      	itt	gt
 800aa96:	3b04      	subgt	r3, #4
 800aa98:	9306      	strgt	r3, [sp, #24]
 800aa9a:	9b06      	ldr	r3, [sp, #24]
 800aa9c:	f1a3 0302 	sub.w	r3, r3, #2
 800aaa0:	bfcc      	ite	gt
 800aaa2:	2500      	movgt	r5, #0
 800aaa4:	2501      	movle	r5, #1
 800aaa6:	2b03      	cmp	r3, #3
 800aaa8:	f200 8087 	bhi.w	800abba <_dtoa_r+0x30a>
 800aaac:	e8df f003 	tbb	[pc, r3]
 800aab0:	59383a2d 	.word	0x59383a2d
 800aab4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800aab8:	441d      	add	r5, r3
 800aaba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aabe:	2b20      	cmp	r3, #32
 800aac0:	bfc1      	itttt	gt
 800aac2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aac6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800aaca:	fa0b f303 	lslgt.w	r3, fp, r3
 800aace:	fa26 f000 	lsrgt.w	r0, r6, r0
 800aad2:	bfda      	itte	le
 800aad4:	f1c3 0320 	rsble	r3, r3, #32
 800aad8:	fa06 f003 	lslle.w	r0, r6, r3
 800aadc:	4318      	orrgt	r0, r3
 800aade:	f7f5 fd11 	bl	8000504 <__aeabi_ui2d>
 800aae2:	2301      	movs	r3, #1
 800aae4:	4606      	mov	r6, r0
 800aae6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800aaea:	3d01      	subs	r5, #1
 800aaec:	930e      	str	r3, [sp, #56]	; 0x38
 800aaee:	e76a      	b.n	800a9c6 <_dtoa_r+0x116>
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	e7b2      	b.n	800aa5a <_dtoa_r+0x1aa>
 800aaf4:	900b      	str	r0, [sp, #44]	; 0x2c
 800aaf6:	e7b1      	b.n	800aa5c <_dtoa_r+0x1ac>
 800aaf8:	9b04      	ldr	r3, [sp, #16]
 800aafa:	9a00      	ldr	r2, [sp, #0]
 800aafc:	1a9b      	subs	r3, r3, r2
 800aafe:	9304      	str	r3, [sp, #16]
 800ab00:	4253      	negs	r3, r2
 800ab02:	9307      	str	r3, [sp, #28]
 800ab04:	2300      	movs	r3, #0
 800ab06:	930a      	str	r3, [sp, #40]	; 0x28
 800ab08:	e7bf      	b.n	800aa8a <_dtoa_r+0x1da>
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	9308      	str	r3, [sp, #32]
 800ab0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	dc55      	bgt.n	800abc0 <_dtoa_r+0x310>
 800ab14:	2301      	movs	r3, #1
 800ab16:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	9209      	str	r2, [sp, #36]	; 0x24
 800ab1e:	e00c      	b.n	800ab3a <_dtoa_r+0x28a>
 800ab20:	2301      	movs	r3, #1
 800ab22:	e7f3      	b.n	800ab0c <_dtoa_r+0x25c>
 800ab24:	2300      	movs	r3, #0
 800ab26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab28:	9308      	str	r3, [sp, #32]
 800ab2a:	9b00      	ldr	r3, [sp, #0]
 800ab2c:	4413      	add	r3, r2
 800ab2e:	9302      	str	r3, [sp, #8]
 800ab30:	3301      	adds	r3, #1
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	9303      	str	r3, [sp, #12]
 800ab36:	bfb8      	it	lt
 800ab38:	2301      	movlt	r3, #1
 800ab3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	6042      	str	r2, [r0, #4]
 800ab40:	2204      	movs	r2, #4
 800ab42:	f102 0614 	add.w	r6, r2, #20
 800ab46:	429e      	cmp	r6, r3
 800ab48:	6841      	ldr	r1, [r0, #4]
 800ab4a:	d93d      	bls.n	800abc8 <_dtoa_r+0x318>
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	f001 f839 	bl	800bbc4 <_Balloc>
 800ab52:	9001      	str	r0, [sp, #4]
 800ab54:	2800      	cmp	r0, #0
 800ab56:	d13b      	bne.n	800abd0 <_dtoa_r+0x320>
 800ab58:	4b11      	ldr	r3, [pc, #68]	; (800aba0 <_dtoa_r+0x2f0>)
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ab60:	e6c0      	b.n	800a8e4 <_dtoa_r+0x34>
 800ab62:	2301      	movs	r3, #1
 800ab64:	e7df      	b.n	800ab26 <_dtoa_r+0x276>
 800ab66:	bf00      	nop
 800ab68:	636f4361 	.word	0x636f4361
 800ab6c:	3fd287a7 	.word	0x3fd287a7
 800ab70:	8b60c8b3 	.word	0x8b60c8b3
 800ab74:	3fc68a28 	.word	0x3fc68a28
 800ab78:	509f79fb 	.word	0x509f79fb
 800ab7c:	3fd34413 	.word	0x3fd34413
 800ab80:	0800f66e 	.word	0x0800f66e
 800ab84:	0800f685 	.word	0x0800f685
 800ab88:	7ff00000 	.word	0x7ff00000
 800ab8c:	0800f66a 	.word	0x0800f66a
 800ab90:	0800f661 	.word	0x0800f661
 800ab94:	0800f4e5 	.word	0x0800f4e5
 800ab98:	3ff80000 	.word	0x3ff80000
 800ab9c:	0800f7f0 	.word	0x0800f7f0
 800aba0:	0800f6e0 	.word	0x0800f6e0
 800aba4:	2501      	movs	r5, #1
 800aba6:	2300      	movs	r3, #0
 800aba8:	9306      	str	r3, [sp, #24]
 800abaa:	9508      	str	r5, [sp, #32]
 800abac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abb0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800abb4:	2200      	movs	r2, #0
 800abb6:	2312      	movs	r3, #18
 800abb8:	e7b0      	b.n	800ab1c <_dtoa_r+0x26c>
 800abba:	2301      	movs	r3, #1
 800abbc:	9308      	str	r3, [sp, #32]
 800abbe:	e7f5      	b.n	800abac <_dtoa_r+0x2fc>
 800abc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abc2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800abc6:	e7b8      	b.n	800ab3a <_dtoa_r+0x28a>
 800abc8:	3101      	adds	r1, #1
 800abca:	6041      	str	r1, [r0, #4]
 800abcc:	0052      	lsls	r2, r2, #1
 800abce:	e7b8      	b.n	800ab42 <_dtoa_r+0x292>
 800abd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abd2:	9a01      	ldr	r2, [sp, #4]
 800abd4:	601a      	str	r2, [r3, #0]
 800abd6:	9b03      	ldr	r3, [sp, #12]
 800abd8:	2b0e      	cmp	r3, #14
 800abda:	f200 809d 	bhi.w	800ad18 <_dtoa_r+0x468>
 800abde:	2d00      	cmp	r5, #0
 800abe0:	f000 809a 	beq.w	800ad18 <_dtoa_r+0x468>
 800abe4:	9b00      	ldr	r3, [sp, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	dd32      	ble.n	800ac50 <_dtoa_r+0x3a0>
 800abea:	4ab7      	ldr	r2, [pc, #732]	; (800aec8 <_dtoa_r+0x618>)
 800abec:	f003 030f 	and.w	r3, r3, #15
 800abf0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800abf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800abf8:	9b00      	ldr	r3, [sp, #0]
 800abfa:	05d8      	lsls	r0, r3, #23
 800abfc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ac00:	d516      	bpl.n	800ac30 <_dtoa_r+0x380>
 800ac02:	4bb2      	ldr	r3, [pc, #712]	; (800aecc <_dtoa_r+0x61c>)
 800ac04:	ec51 0b19 	vmov	r0, r1, d9
 800ac08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ac0c:	f7f5 fe1e 	bl	800084c <__aeabi_ddiv>
 800ac10:	f007 070f 	and.w	r7, r7, #15
 800ac14:	4682      	mov	sl, r0
 800ac16:	468b      	mov	fp, r1
 800ac18:	2503      	movs	r5, #3
 800ac1a:	4eac      	ldr	r6, [pc, #688]	; (800aecc <_dtoa_r+0x61c>)
 800ac1c:	b957      	cbnz	r7, 800ac34 <_dtoa_r+0x384>
 800ac1e:	4642      	mov	r2, r8
 800ac20:	464b      	mov	r3, r9
 800ac22:	4650      	mov	r0, sl
 800ac24:	4659      	mov	r1, fp
 800ac26:	f7f5 fe11 	bl	800084c <__aeabi_ddiv>
 800ac2a:	4682      	mov	sl, r0
 800ac2c:	468b      	mov	fp, r1
 800ac2e:	e028      	b.n	800ac82 <_dtoa_r+0x3d2>
 800ac30:	2502      	movs	r5, #2
 800ac32:	e7f2      	b.n	800ac1a <_dtoa_r+0x36a>
 800ac34:	07f9      	lsls	r1, r7, #31
 800ac36:	d508      	bpl.n	800ac4a <_dtoa_r+0x39a>
 800ac38:	4640      	mov	r0, r8
 800ac3a:	4649      	mov	r1, r9
 800ac3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ac40:	f7f5 fcda 	bl	80005f8 <__aeabi_dmul>
 800ac44:	3501      	adds	r5, #1
 800ac46:	4680      	mov	r8, r0
 800ac48:	4689      	mov	r9, r1
 800ac4a:	107f      	asrs	r7, r7, #1
 800ac4c:	3608      	adds	r6, #8
 800ac4e:	e7e5      	b.n	800ac1c <_dtoa_r+0x36c>
 800ac50:	f000 809b 	beq.w	800ad8a <_dtoa_r+0x4da>
 800ac54:	9b00      	ldr	r3, [sp, #0]
 800ac56:	4f9d      	ldr	r7, [pc, #628]	; (800aecc <_dtoa_r+0x61c>)
 800ac58:	425e      	negs	r6, r3
 800ac5a:	4b9b      	ldr	r3, [pc, #620]	; (800aec8 <_dtoa_r+0x618>)
 800ac5c:	f006 020f 	and.w	r2, r6, #15
 800ac60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac68:	ec51 0b19 	vmov	r0, r1, d9
 800ac6c:	f7f5 fcc4 	bl	80005f8 <__aeabi_dmul>
 800ac70:	1136      	asrs	r6, r6, #4
 800ac72:	4682      	mov	sl, r0
 800ac74:	468b      	mov	fp, r1
 800ac76:	2300      	movs	r3, #0
 800ac78:	2502      	movs	r5, #2
 800ac7a:	2e00      	cmp	r6, #0
 800ac7c:	d17a      	bne.n	800ad74 <_dtoa_r+0x4c4>
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d1d3      	bne.n	800ac2a <_dtoa_r+0x37a>
 800ac82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	f000 8082 	beq.w	800ad8e <_dtoa_r+0x4de>
 800ac8a:	4b91      	ldr	r3, [pc, #580]	; (800aed0 <_dtoa_r+0x620>)
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	4650      	mov	r0, sl
 800ac90:	4659      	mov	r1, fp
 800ac92:	f7f5 ff23 	bl	8000adc <__aeabi_dcmplt>
 800ac96:	2800      	cmp	r0, #0
 800ac98:	d079      	beq.n	800ad8e <_dtoa_r+0x4de>
 800ac9a:	9b03      	ldr	r3, [sp, #12]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d076      	beq.n	800ad8e <_dtoa_r+0x4de>
 800aca0:	9b02      	ldr	r3, [sp, #8]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	dd36      	ble.n	800ad14 <_dtoa_r+0x464>
 800aca6:	9b00      	ldr	r3, [sp, #0]
 800aca8:	4650      	mov	r0, sl
 800acaa:	4659      	mov	r1, fp
 800acac:	1e5f      	subs	r7, r3, #1
 800acae:	2200      	movs	r2, #0
 800acb0:	4b88      	ldr	r3, [pc, #544]	; (800aed4 <_dtoa_r+0x624>)
 800acb2:	f7f5 fca1 	bl	80005f8 <__aeabi_dmul>
 800acb6:	9e02      	ldr	r6, [sp, #8]
 800acb8:	4682      	mov	sl, r0
 800acba:	468b      	mov	fp, r1
 800acbc:	3501      	adds	r5, #1
 800acbe:	4628      	mov	r0, r5
 800acc0:	f7f5 fc30 	bl	8000524 <__aeabi_i2d>
 800acc4:	4652      	mov	r2, sl
 800acc6:	465b      	mov	r3, fp
 800acc8:	f7f5 fc96 	bl	80005f8 <__aeabi_dmul>
 800accc:	4b82      	ldr	r3, [pc, #520]	; (800aed8 <_dtoa_r+0x628>)
 800acce:	2200      	movs	r2, #0
 800acd0:	f7f5 fadc 	bl	800028c <__adddf3>
 800acd4:	46d0      	mov	r8, sl
 800acd6:	46d9      	mov	r9, fp
 800acd8:	4682      	mov	sl, r0
 800acda:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800acde:	2e00      	cmp	r6, #0
 800ace0:	d158      	bne.n	800ad94 <_dtoa_r+0x4e4>
 800ace2:	4b7e      	ldr	r3, [pc, #504]	; (800aedc <_dtoa_r+0x62c>)
 800ace4:	2200      	movs	r2, #0
 800ace6:	4640      	mov	r0, r8
 800ace8:	4649      	mov	r1, r9
 800acea:	f7f5 facd 	bl	8000288 <__aeabi_dsub>
 800acee:	4652      	mov	r2, sl
 800acf0:	465b      	mov	r3, fp
 800acf2:	4680      	mov	r8, r0
 800acf4:	4689      	mov	r9, r1
 800acf6:	f7f5 ff0f 	bl	8000b18 <__aeabi_dcmpgt>
 800acfa:	2800      	cmp	r0, #0
 800acfc:	f040 8295 	bne.w	800b22a <_dtoa_r+0x97a>
 800ad00:	4652      	mov	r2, sl
 800ad02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ad06:	4640      	mov	r0, r8
 800ad08:	4649      	mov	r1, r9
 800ad0a:	f7f5 fee7 	bl	8000adc <__aeabi_dcmplt>
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	f040 8289 	bne.w	800b226 <_dtoa_r+0x976>
 800ad14:	ec5b ab19 	vmov	sl, fp, d9
 800ad18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	f2c0 8148 	blt.w	800afb0 <_dtoa_r+0x700>
 800ad20:	9a00      	ldr	r2, [sp, #0]
 800ad22:	2a0e      	cmp	r2, #14
 800ad24:	f300 8144 	bgt.w	800afb0 <_dtoa_r+0x700>
 800ad28:	4b67      	ldr	r3, [pc, #412]	; (800aec8 <_dtoa_r+0x618>)
 800ad2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	f280 80d5 	bge.w	800aee4 <_dtoa_r+0x634>
 800ad3a:	9b03      	ldr	r3, [sp, #12]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	f300 80d1 	bgt.w	800aee4 <_dtoa_r+0x634>
 800ad42:	f040 826f 	bne.w	800b224 <_dtoa_r+0x974>
 800ad46:	4b65      	ldr	r3, [pc, #404]	; (800aedc <_dtoa_r+0x62c>)
 800ad48:	2200      	movs	r2, #0
 800ad4a:	4640      	mov	r0, r8
 800ad4c:	4649      	mov	r1, r9
 800ad4e:	f7f5 fc53 	bl	80005f8 <__aeabi_dmul>
 800ad52:	4652      	mov	r2, sl
 800ad54:	465b      	mov	r3, fp
 800ad56:	f7f5 fed5 	bl	8000b04 <__aeabi_dcmpge>
 800ad5a:	9e03      	ldr	r6, [sp, #12]
 800ad5c:	4637      	mov	r7, r6
 800ad5e:	2800      	cmp	r0, #0
 800ad60:	f040 8245 	bne.w	800b1ee <_dtoa_r+0x93e>
 800ad64:	9d01      	ldr	r5, [sp, #4]
 800ad66:	2331      	movs	r3, #49	; 0x31
 800ad68:	f805 3b01 	strb.w	r3, [r5], #1
 800ad6c:	9b00      	ldr	r3, [sp, #0]
 800ad6e:	3301      	adds	r3, #1
 800ad70:	9300      	str	r3, [sp, #0]
 800ad72:	e240      	b.n	800b1f6 <_dtoa_r+0x946>
 800ad74:	07f2      	lsls	r2, r6, #31
 800ad76:	d505      	bpl.n	800ad84 <_dtoa_r+0x4d4>
 800ad78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad7c:	f7f5 fc3c 	bl	80005f8 <__aeabi_dmul>
 800ad80:	3501      	adds	r5, #1
 800ad82:	2301      	movs	r3, #1
 800ad84:	1076      	asrs	r6, r6, #1
 800ad86:	3708      	adds	r7, #8
 800ad88:	e777      	b.n	800ac7a <_dtoa_r+0x3ca>
 800ad8a:	2502      	movs	r5, #2
 800ad8c:	e779      	b.n	800ac82 <_dtoa_r+0x3d2>
 800ad8e:	9f00      	ldr	r7, [sp, #0]
 800ad90:	9e03      	ldr	r6, [sp, #12]
 800ad92:	e794      	b.n	800acbe <_dtoa_r+0x40e>
 800ad94:	9901      	ldr	r1, [sp, #4]
 800ad96:	4b4c      	ldr	r3, [pc, #304]	; (800aec8 <_dtoa_r+0x618>)
 800ad98:	4431      	add	r1, r6
 800ad9a:	910d      	str	r1, [sp, #52]	; 0x34
 800ad9c:	9908      	ldr	r1, [sp, #32]
 800ad9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ada2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ada6:	2900      	cmp	r1, #0
 800ada8:	d043      	beq.n	800ae32 <_dtoa_r+0x582>
 800adaa:	494d      	ldr	r1, [pc, #308]	; (800aee0 <_dtoa_r+0x630>)
 800adac:	2000      	movs	r0, #0
 800adae:	f7f5 fd4d 	bl	800084c <__aeabi_ddiv>
 800adb2:	4652      	mov	r2, sl
 800adb4:	465b      	mov	r3, fp
 800adb6:	f7f5 fa67 	bl	8000288 <__aeabi_dsub>
 800adba:	9d01      	ldr	r5, [sp, #4]
 800adbc:	4682      	mov	sl, r0
 800adbe:	468b      	mov	fp, r1
 800adc0:	4649      	mov	r1, r9
 800adc2:	4640      	mov	r0, r8
 800adc4:	f7f5 fec8 	bl	8000b58 <__aeabi_d2iz>
 800adc8:	4606      	mov	r6, r0
 800adca:	f7f5 fbab 	bl	8000524 <__aeabi_i2d>
 800adce:	4602      	mov	r2, r0
 800add0:	460b      	mov	r3, r1
 800add2:	4640      	mov	r0, r8
 800add4:	4649      	mov	r1, r9
 800add6:	f7f5 fa57 	bl	8000288 <__aeabi_dsub>
 800adda:	3630      	adds	r6, #48	; 0x30
 800addc:	f805 6b01 	strb.w	r6, [r5], #1
 800ade0:	4652      	mov	r2, sl
 800ade2:	465b      	mov	r3, fp
 800ade4:	4680      	mov	r8, r0
 800ade6:	4689      	mov	r9, r1
 800ade8:	f7f5 fe78 	bl	8000adc <__aeabi_dcmplt>
 800adec:	2800      	cmp	r0, #0
 800adee:	d163      	bne.n	800aeb8 <_dtoa_r+0x608>
 800adf0:	4642      	mov	r2, r8
 800adf2:	464b      	mov	r3, r9
 800adf4:	4936      	ldr	r1, [pc, #216]	; (800aed0 <_dtoa_r+0x620>)
 800adf6:	2000      	movs	r0, #0
 800adf8:	f7f5 fa46 	bl	8000288 <__aeabi_dsub>
 800adfc:	4652      	mov	r2, sl
 800adfe:	465b      	mov	r3, fp
 800ae00:	f7f5 fe6c 	bl	8000adc <__aeabi_dcmplt>
 800ae04:	2800      	cmp	r0, #0
 800ae06:	f040 80b5 	bne.w	800af74 <_dtoa_r+0x6c4>
 800ae0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae0c:	429d      	cmp	r5, r3
 800ae0e:	d081      	beq.n	800ad14 <_dtoa_r+0x464>
 800ae10:	4b30      	ldr	r3, [pc, #192]	; (800aed4 <_dtoa_r+0x624>)
 800ae12:	2200      	movs	r2, #0
 800ae14:	4650      	mov	r0, sl
 800ae16:	4659      	mov	r1, fp
 800ae18:	f7f5 fbee 	bl	80005f8 <__aeabi_dmul>
 800ae1c:	4b2d      	ldr	r3, [pc, #180]	; (800aed4 <_dtoa_r+0x624>)
 800ae1e:	4682      	mov	sl, r0
 800ae20:	468b      	mov	fp, r1
 800ae22:	4640      	mov	r0, r8
 800ae24:	4649      	mov	r1, r9
 800ae26:	2200      	movs	r2, #0
 800ae28:	f7f5 fbe6 	bl	80005f8 <__aeabi_dmul>
 800ae2c:	4680      	mov	r8, r0
 800ae2e:	4689      	mov	r9, r1
 800ae30:	e7c6      	b.n	800adc0 <_dtoa_r+0x510>
 800ae32:	4650      	mov	r0, sl
 800ae34:	4659      	mov	r1, fp
 800ae36:	f7f5 fbdf 	bl	80005f8 <__aeabi_dmul>
 800ae3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae3c:	9d01      	ldr	r5, [sp, #4]
 800ae3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae40:	4682      	mov	sl, r0
 800ae42:	468b      	mov	fp, r1
 800ae44:	4649      	mov	r1, r9
 800ae46:	4640      	mov	r0, r8
 800ae48:	f7f5 fe86 	bl	8000b58 <__aeabi_d2iz>
 800ae4c:	4606      	mov	r6, r0
 800ae4e:	f7f5 fb69 	bl	8000524 <__aeabi_i2d>
 800ae52:	3630      	adds	r6, #48	; 0x30
 800ae54:	4602      	mov	r2, r0
 800ae56:	460b      	mov	r3, r1
 800ae58:	4640      	mov	r0, r8
 800ae5a:	4649      	mov	r1, r9
 800ae5c:	f7f5 fa14 	bl	8000288 <__aeabi_dsub>
 800ae60:	f805 6b01 	strb.w	r6, [r5], #1
 800ae64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae66:	429d      	cmp	r5, r3
 800ae68:	4680      	mov	r8, r0
 800ae6a:	4689      	mov	r9, r1
 800ae6c:	f04f 0200 	mov.w	r2, #0
 800ae70:	d124      	bne.n	800aebc <_dtoa_r+0x60c>
 800ae72:	4b1b      	ldr	r3, [pc, #108]	; (800aee0 <_dtoa_r+0x630>)
 800ae74:	4650      	mov	r0, sl
 800ae76:	4659      	mov	r1, fp
 800ae78:	f7f5 fa08 	bl	800028c <__adddf3>
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	460b      	mov	r3, r1
 800ae80:	4640      	mov	r0, r8
 800ae82:	4649      	mov	r1, r9
 800ae84:	f7f5 fe48 	bl	8000b18 <__aeabi_dcmpgt>
 800ae88:	2800      	cmp	r0, #0
 800ae8a:	d173      	bne.n	800af74 <_dtoa_r+0x6c4>
 800ae8c:	4652      	mov	r2, sl
 800ae8e:	465b      	mov	r3, fp
 800ae90:	4913      	ldr	r1, [pc, #76]	; (800aee0 <_dtoa_r+0x630>)
 800ae92:	2000      	movs	r0, #0
 800ae94:	f7f5 f9f8 	bl	8000288 <__aeabi_dsub>
 800ae98:	4602      	mov	r2, r0
 800ae9a:	460b      	mov	r3, r1
 800ae9c:	4640      	mov	r0, r8
 800ae9e:	4649      	mov	r1, r9
 800aea0:	f7f5 fe1c 	bl	8000adc <__aeabi_dcmplt>
 800aea4:	2800      	cmp	r0, #0
 800aea6:	f43f af35 	beq.w	800ad14 <_dtoa_r+0x464>
 800aeaa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aeac:	1e6b      	subs	r3, r5, #1
 800aeae:	930f      	str	r3, [sp, #60]	; 0x3c
 800aeb0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aeb4:	2b30      	cmp	r3, #48	; 0x30
 800aeb6:	d0f8      	beq.n	800aeaa <_dtoa_r+0x5fa>
 800aeb8:	9700      	str	r7, [sp, #0]
 800aeba:	e049      	b.n	800af50 <_dtoa_r+0x6a0>
 800aebc:	4b05      	ldr	r3, [pc, #20]	; (800aed4 <_dtoa_r+0x624>)
 800aebe:	f7f5 fb9b 	bl	80005f8 <__aeabi_dmul>
 800aec2:	4680      	mov	r8, r0
 800aec4:	4689      	mov	r9, r1
 800aec6:	e7bd      	b.n	800ae44 <_dtoa_r+0x594>
 800aec8:	0800f7f0 	.word	0x0800f7f0
 800aecc:	0800f7c8 	.word	0x0800f7c8
 800aed0:	3ff00000 	.word	0x3ff00000
 800aed4:	40240000 	.word	0x40240000
 800aed8:	401c0000 	.word	0x401c0000
 800aedc:	40140000 	.word	0x40140000
 800aee0:	3fe00000 	.word	0x3fe00000
 800aee4:	9d01      	ldr	r5, [sp, #4]
 800aee6:	4656      	mov	r6, sl
 800aee8:	465f      	mov	r7, fp
 800aeea:	4642      	mov	r2, r8
 800aeec:	464b      	mov	r3, r9
 800aeee:	4630      	mov	r0, r6
 800aef0:	4639      	mov	r1, r7
 800aef2:	f7f5 fcab 	bl	800084c <__aeabi_ddiv>
 800aef6:	f7f5 fe2f 	bl	8000b58 <__aeabi_d2iz>
 800aefa:	4682      	mov	sl, r0
 800aefc:	f7f5 fb12 	bl	8000524 <__aeabi_i2d>
 800af00:	4642      	mov	r2, r8
 800af02:	464b      	mov	r3, r9
 800af04:	f7f5 fb78 	bl	80005f8 <__aeabi_dmul>
 800af08:	4602      	mov	r2, r0
 800af0a:	460b      	mov	r3, r1
 800af0c:	4630      	mov	r0, r6
 800af0e:	4639      	mov	r1, r7
 800af10:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800af14:	f7f5 f9b8 	bl	8000288 <__aeabi_dsub>
 800af18:	f805 6b01 	strb.w	r6, [r5], #1
 800af1c:	9e01      	ldr	r6, [sp, #4]
 800af1e:	9f03      	ldr	r7, [sp, #12]
 800af20:	1bae      	subs	r6, r5, r6
 800af22:	42b7      	cmp	r7, r6
 800af24:	4602      	mov	r2, r0
 800af26:	460b      	mov	r3, r1
 800af28:	d135      	bne.n	800af96 <_dtoa_r+0x6e6>
 800af2a:	f7f5 f9af 	bl	800028c <__adddf3>
 800af2e:	4642      	mov	r2, r8
 800af30:	464b      	mov	r3, r9
 800af32:	4606      	mov	r6, r0
 800af34:	460f      	mov	r7, r1
 800af36:	f7f5 fdef 	bl	8000b18 <__aeabi_dcmpgt>
 800af3a:	b9d0      	cbnz	r0, 800af72 <_dtoa_r+0x6c2>
 800af3c:	4642      	mov	r2, r8
 800af3e:	464b      	mov	r3, r9
 800af40:	4630      	mov	r0, r6
 800af42:	4639      	mov	r1, r7
 800af44:	f7f5 fdc0 	bl	8000ac8 <__aeabi_dcmpeq>
 800af48:	b110      	cbz	r0, 800af50 <_dtoa_r+0x6a0>
 800af4a:	f01a 0f01 	tst.w	sl, #1
 800af4e:	d110      	bne.n	800af72 <_dtoa_r+0x6c2>
 800af50:	4620      	mov	r0, r4
 800af52:	ee18 1a10 	vmov	r1, s16
 800af56:	f000 fe75 	bl	800bc44 <_Bfree>
 800af5a:	2300      	movs	r3, #0
 800af5c:	9800      	ldr	r0, [sp, #0]
 800af5e:	702b      	strb	r3, [r5, #0]
 800af60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af62:	3001      	adds	r0, #1
 800af64:	6018      	str	r0, [r3, #0]
 800af66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af68:	2b00      	cmp	r3, #0
 800af6a:	f43f acf1 	beq.w	800a950 <_dtoa_r+0xa0>
 800af6e:	601d      	str	r5, [r3, #0]
 800af70:	e4ee      	b.n	800a950 <_dtoa_r+0xa0>
 800af72:	9f00      	ldr	r7, [sp, #0]
 800af74:	462b      	mov	r3, r5
 800af76:	461d      	mov	r5, r3
 800af78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af7c:	2a39      	cmp	r2, #57	; 0x39
 800af7e:	d106      	bne.n	800af8e <_dtoa_r+0x6de>
 800af80:	9a01      	ldr	r2, [sp, #4]
 800af82:	429a      	cmp	r2, r3
 800af84:	d1f7      	bne.n	800af76 <_dtoa_r+0x6c6>
 800af86:	9901      	ldr	r1, [sp, #4]
 800af88:	2230      	movs	r2, #48	; 0x30
 800af8a:	3701      	adds	r7, #1
 800af8c:	700a      	strb	r2, [r1, #0]
 800af8e:	781a      	ldrb	r2, [r3, #0]
 800af90:	3201      	adds	r2, #1
 800af92:	701a      	strb	r2, [r3, #0]
 800af94:	e790      	b.n	800aeb8 <_dtoa_r+0x608>
 800af96:	4ba6      	ldr	r3, [pc, #664]	; (800b230 <_dtoa_r+0x980>)
 800af98:	2200      	movs	r2, #0
 800af9a:	f7f5 fb2d 	bl	80005f8 <__aeabi_dmul>
 800af9e:	2200      	movs	r2, #0
 800afa0:	2300      	movs	r3, #0
 800afa2:	4606      	mov	r6, r0
 800afa4:	460f      	mov	r7, r1
 800afa6:	f7f5 fd8f 	bl	8000ac8 <__aeabi_dcmpeq>
 800afaa:	2800      	cmp	r0, #0
 800afac:	d09d      	beq.n	800aeea <_dtoa_r+0x63a>
 800afae:	e7cf      	b.n	800af50 <_dtoa_r+0x6a0>
 800afb0:	9a08      	ldr	r2, [sp, #32]
 800afb2:	2a00      	cmp	r2, #0
 800afb4:	f000 80d7 	beq.w	800b166 <_dtoa_r+0x8b6>
 800afb8:	9a06      	ldr	r2, [sp, #24]
 800afba:	2a01      	cmp	r2, #1
 800afbc:	f300 80ba 	bgt.w	800b134 <_dtoa_r+0x884>
 800afc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800afc2:	2a00      	cmp	r2, #0
 800afc4:	f000 80b2 	beq.w	800b12c <_dtoa_r+0x87c>
 800afc8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800afcc:	9e07      	ldr	r6, [sp, #28]
 800afce:	9d04      	ldr	r5, [sp, #16]
 800afd0:	9a04      	ldr	r2, [sp, #16]
 800afd2:	441a      	add	r2, r3
 800afd4:	9204      	str	r2, [sp, #16]
 800afd6:	9a05      	ldr	r2, [sp, #20]
 800afd8:	2101      	movs	r1, #1
 800afda:	441a      	add	r2, r3
 800afdc:	4620      	mov	r0, r4
 800afde:	9205      	str	r2, [sp, #20]
 800afe0:	f000 ff32 	bl	800be48 <__i2b>
 800afe4:	4607      	mov	r7, r0
 800afe6:	2d00      	cmp	r5, #0
 800afe8:	dd0c      	ble.n	800b004 <_dtoa_r+0x754>
 800afea:	9b05      	ldr	r3, [sp, #20]
 800afec:	2b00      	cmp	r3, #0
 800afee:	dd09      	ble.n	800b004 <_dtoa_r+0x754>
 800aff0:	42ab      	cmp	r3, r5
 800aff2:	9a04      	ldr	r2, [sp, #16]
 800aff4:	bfa8      	it	ge
 800aff6:	462b      	movge	r3, r5
 800aff8:	1ad2      	subs	r2, r2, r3
 800affa:	9204      	str	r2, [sp, #16]
 800affc:	9a05      	ldr	r2, [sp, #20]
 800affe:	1aed      	subs	r5, r5, r3
 800b000:	1ad3      	subs	r3, r2, r3
 800b002:	9305      	str	r3, [sp, #20]
 800b004:	9b07      	ldr	r3, [sp, #28]
 800b006:	b31b      	cbz	r3, 800b050 <_dtoa_r+0x7a0>
 800b008:	9b08      	ldr	r3, [sp, #32]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	f000 80af 	beq.w	800b16e <_dtoa_r+0x8be>
 800b010:	2e00      	cmp	r6, #0
 800b012:	dd13      	ble.n	800b03c <_dtoa_r+0x78c>
 800b014:	4639      	mov	r1, r7
 800b016:	4632      	mov	r2, r6
 800b018:	4620      	mov	r0, r4
 800b01a:	f000 ffd5 	bl	800bfc8 <__pow5mult>
 800b01e:	ee18 2a10 	vmov	r2, s16
 800b022:	4601      	mov	r1, r0
 800b024:	4607      	mov	r7, r0
 800b026:	4620      	mov	r0, r4
 800b028:	f000 ff24 	bl	800be74 <__multiply>
 800b02c:	ee18 1a10 	vmov	r1, s16
 800b030:	4680      	mov	r8, r0
 800b032:	4620      	mov	r0, r4
 800b034:	f000 fe06 	bl	800bc44 <_Bfree>
 800b038:	ee08 8a10 	vmov	s16, r8
 800b03c:	9b07      	ldr	r3, [sp, #28]
 800b03e:	1b9a      	subs	r2, r3, r6
 800b040:	d006      	beq.n	800b050 <_dtoa_r+0x7a0>
 800b042:	ee18 1a10 	vmov	r1, s16
 800b046:	4620      	mov	r0, r4
 800b048:	f000 ffbe 	bl	800bfc8 <__pow5mult>
 800b04c:	ee08 0a10 	vmov	s16, r0
 800b050:	2101      	movs	r1, #1
 800b052:	4620      	mov	r0, r4
 800b054:	f000 fef8 	bl	800be48 <__i2b>
 800b058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	4606      	mov	r6, r0
 800b05e:	f340 8088 	ble.w	800b172 <_dtoa_r+0x8c2>
 800b062:	461a      	mov	r2, r3
 800b064:	4601      	mov	r1, r0
 800b066:	4620      	mov	r0, r4
 800b068:	f000 ffae 	bl	800bfc8 <__pow5mult>
 800b06c:	9b06      	ldr	r3, [sp, #24]
 800b06e:	2b01      	cmp	r3, #1
 800b070:	4606      	mov	r6, r0
 800b072:	f340 8081 	ble.w	800b178 <_dtoa_r+0x8c8>
 800b076:	f04f 0800 	mov.w	r8, #0
 800b07a:	6933      	ldr	r3, [r6, #16]
 800b07c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b080:	6918      	ldr	r0, [r3, #16]
 800b082:	f000 fe91 	bl	800bda8 <__hi0bits>
 800b086:	f1c0 0020 	rsb	r0, r0, #32
 800b08a:	9b05      	ldr	r3, [sp, #20]
 800b08c:	4418      	add	r0, r3
 800b08e:	f010 001f 	ands.w	r0, r0, #31
 800b092:	f000 8092 	beq.w	800b1ba <_dtoa_r+0x90a>
 800b096:	f1c0 0320 	rsb	r3, r0, #32
 800b09a:	2b04      	cmp	r3, #4
 800b09c:	f340 808a 	ble.w	800b1b4 <_dtoa_r+0x904>
 800b0a0:	f1c0 001c 	rsb	r0, r0, #28
 800b0a4:	9b04      	ldr	r3, [sp, #16]
 800b0a6:	4403      	add	r3, r0
 800b0a8:	9304      	str	r3, [sp, #16]
 800b0aa:	9b05      	ldr	r3, [sp, #20]
 800b0ac:	4403      	add	r3, r0
 800b0ae:	4405      	add	r5, r0
 800b0b0:	9305      	str	r3, [sp, #20]
 800b0b2:	9b04      	ldr	r3, [sp, #16]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	dd07      	ble.n	800b0c8 <_dtoa_r+0x818>
 800b0b8:	ee18 1a10 	vmov	r1, s16
 800b0bc:	461a      	mov	r2, r3
 800b0be:	4620      	mov	r0, r4
 800b0c0:	f000 ffdc 	bl	800c07c <__lshift>
 800b0c4:	ee08 0a10 	vmov	s16, r0
 800b0c8:	9b05      	ldr	r3, [sp, #20]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	dd05      	ble.n	800b0da <_dtoa_r+0x82a>
 800b0ce:	4631      	mov	r1, r6
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	f000 ffd2 	bl	800c07c <__lshift>
 800b0d8:	4606      	mov	r6, r0
 800b0da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d06e      	beq.n	800b1be <_dtoa_r+0x90e>
 800b0e0:	ee18 0a10 	vmov	r0, s16
 800b0e4:	4631      	mov	r1, r6
 800b0e6:	f001 f839 	bl	800c15c <__mcmp>
 800b0ea:	2800      	cmp	r0, #0
 800b0ec:	da67      	bge.n	800b1be <_dtoa_r+0x90e>
 800b0ee:	9b00      	ldr	r3, [sp, #0]
 800b0f0:	3b01      	subs	r3, #1
 800b0f2:	ee18 1a10 	vmov	r1, s16
 800b0f6:	9300      	str	r3, [sp, #0]
 800b0f8:	220a      	movs	r2, #10
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	f000 fdc3 	bl	800bc88 <__multadd>
 800b102:	9b08      	ldr	r3, [sp, #32]
 800b104:	ee08 0a10 	vmov	s16, r0
 800b108:	2b00      	cmp	r3, #0
 800b10a:	f000 81b1 	beq.w	800b470 <_dtoa_r+0xbc0>
 800b10e:	2300      	movs	r3, #0
 800b110:	4639      	mov	r1, r7
 800b112:	220a      	movs	r2, #10
 800b114:	4620      	mov	r0, r4
 800b116:	f000 fdb7 	bl	800bc88 <__multadd>
 800b11a:	9b02      	ldr	r3, [sp, #8]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	4607      	mov	r7, r0
 800b120:	f300 808e 	bgt.w	800b240 <_dtoa_r+0x990>
 800b124:	9b06      	ldr	r3, [sp, #24]
 800b126:	2b02      	cmp	r3, #2
 800b128:	dc51      	bgt.n	800b1ce <_dtoa_r+0x91e>
 800b12a:	e089      	b.n	800b240 <_dtoa_r+0x990>
 800b12c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b12e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b132:	e74b      	b.n	800afcc <_dtoa_r+0x71c>
 800b134:	9b03      	ldr	r3, [sp, #12]
 800b136:	1e5e      	subs	r6, r3, #1
 800b138:	9b07      	ldr	r3, [sp, #28]
 800b13a:	42b3      	cmp	r3, r6
 800b13c:	bfbf      	itttt	lt
 800b13e:	9b07      	ldrlt	r3, [sp, #28]
 800b140:	9607      	strlt	r6, [sp, #28]
 800b142:	1af2      	sublt	r2, r6, r3
 800b144:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b146:	bfb6      	itet	lt
 800b148:	189b      	addlt	r3, r3, r2
 800b14a:	1b9e      	subge	r6, r3, r6
 800b14c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b14e:	9b03      	ldr	r3, [sp, #12]
 800b150:	bfb8      	it	lt
 800b152:	2600      	movlt	r6, #0
 800b154:	2b00      	cmp	r3, #0
 800b156:	bfb7      	itett	lt
 800b158:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b15c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b160:	1a9d      	sublt	r5, r3, r2
 800b162:	2300      	movlt	r3, #0
 800b164:	e734      	b.n	800afd0 <_dtoa_r+0x720>
 800b166:	9e07      	ldr	r6, [sp, #28]
 800b168:	9d04      	ldr	r5, [sp, #16]
 800b16a:	9f08      	ldr	r7, [sp, #32]
 800b16c:	e73b      	b.n	800afe6 <_dtoa_r+0x736>
 800b16e:	9a07      	ldr	r2, [sp, #28]
 800b170:	e767      	b.n	800b042 <_dtoa_r+0x792>
 800b172:	9b06      	ldr	r3, [sp, #24]
 800b174:	2b01      	cmp	r3, #1
 800b176:	dc18      	bgt.n	800b1aa <_dtoa_r+0x8fa>
 800b178:	f1ba 0f00 	cmp.w	sl, #0
 800b17c:	d115      	bne.n	800b1aa <_dtoa_r+0x8fa>
 800b17e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b182:	b993      	cbnz	r3, 800b1aa <_dtoa_r+0x8fa>
 800b184:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b188:	0d1b      	lsrs	r3, r3, #20
 800b18a:	051b      	lsls	r3, r3, #20
 800b18c:	b183      	cbz	r3, 800b1b0 <_dtoa_r+0x900>
 800b18e:	9b04      	ldr	r3, [sp, #16]
 800b190:	3301      	adds	r3, #1
 800b192:	9304      	str	r3, [sp, #16]
 800b194:	9b05      	ldr	r3, [sp, #20]
 800b196:	3301      	adds	r3, #1
 800b198:	9305      	str	r3, [sp, #20]
 800b19a:	f04f 0801 	mov.w	r8, #1
 800b19e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	f47f af6a 	bne.w	800b07a <_dtoa_r+0x7ca>
 800b1a6:	2001      	movs	r0, #1
 800b1a8:	e76f      	b.n	800b08a <_dtoa_r+0x7da>
 800b1aa:	f04f 0800 	mov.w	r8, #0
 800b1ae:	e7f6      	b.n	800b19e <_dtoa_r+0x8ee>
 800b1b0:	4698      	mov	r8, r3
 800b1b2:	e7f4      	b.n	800b19e <_dtoa_r+0x8ee>
 800b1b4:	f43f af7d 	beq.w	800b0b2 <_dtoa_r+0x802>
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	301c      	adds	r0, #28
 800b1bc:	e772      	b.n	800b0a4 <_dtoa_r+0x7f4>
 800b1be:	9b03      	ldr	r3, [sp, #12]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	dc37      	bgt.n	800b234 <_dtoa_r+0x984>
 800b1c4:	9b06      	ldr	r3, [sp, #24]
 800b1c6:	2b02      	cmp	r3, #2
 800b1c8:	dd34      	ble.n	800b234 <_dtoa_r+0x984>
 800b1ca:	9b03      	ldr	r3, [sp, #12]
 800b1cc:	9302      	str	r3, [sp, #8]
 800b1ce:	9b02      	ldr	r3, [sp, #8]
 800b1d0:	b96b      	cbnz	r3, 800b1ee <_dtoa_r+0x93e>
 800b1d2:	4631      	mov	r1, r6
 800b1d4:	2205      	movs	r2, #5
 800b1d6:	4620      	mov	r0, r4
 800b1d8:	f000 fd56 	bl	800bc88 <__multadd>
 800b1dc:	4601      	mov	r1, r0
 800b1de:	4606      	mov	r6, r0
 800b1e0:	ee18 0a10 	vmov	r0, s16
 800b1e4:	f000 ffba 	bl	800c15c <__mcmp>
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	f73f adbb 	bgt.w	800ad64 <_dtoa_r+0x4b4>
 800b1ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1f0:	9d01      	ldr	r5, [sp, #4]
 800b1f2:	43db      	mvns	r3, r3
 800b1f4:	9300      	str	r3, [sp, #0]
 800b1f6:	f04f 0800 	mov.w	r8, #0
 800b1fa:	4631      	mov	r1, r6
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	f000 fd21 	bl	800bc44 <_Bfree>
 800b202:	2f00      	cmp	r7, #0
 800b204:	f43f aea4 	beq.w	800af50 <_dtoa_r+0x6a0>
 800b208:	f1b8 0f00 	cmp.w	r8, #0
 800b20c:	d005      	beq.n	800b21a <_dtoa_r+0x96a>
 800b20e:	45b8      	cmp	r8, r7
 800b210:	d003      	beq.n	800b21a <_dtoa_r+0x96a>
 800b212:	4641      	mov	r1, r8
 800b214:	4620      	mov	r0, r4
 800b216:	f000 fd15 	bl	800bc44 <_Bfree>
 800b21a:	4639      	mov	r1, r7
 800b21c:	4620      	mov	r0, r4
 800b21e:	f000 fd11 	bl	800bc44 <_Bfree>
 800b222:	e695      	b.n	800af50 <_dtoa_r+0x6a0>
 800b224:	2600      	movs	r6, #0
 800b226:	4637      	mov	r7, r6
 800b228:	e7e1      	b.n	800b1ee <_dtoa_r+0x93e>
 800b22a:	9700      	str	r7, [sp, #0]
 800b22c:	4637      	mov	r7, r6
 800b22e:	e599      	b.n	800ad64 <_dtoa_r+0x4b4>
 800b230:	40240000 	.word	0x40240000
 800b234:	9b08      	ldr	r3, [sp, #32]
 800b236:	2b00      	cmp	r3, #0
 800b238:	f000 80ca 	beq.w	800b3d0 <_dtoa_r+0xb20>
 800b23c:	9b03      	ldr	r3, [sp, #12]
 800b23e:	9302      	str	r3, [sp, #8]
 800b240:	2d00      	cmp	r5, #0
 800b242:	dd05      	ble.n	800b250 <_dtoa_r+0x9a0>
 800b244:	4639      	mov	r1, r7
 800b246:	462a      	mov	r2, r5
 800b248:	4620      	mov	r0, r4
 800b24a:	f000 ff17 	bl	800c07c <__lshift>
 800b24e:	4607      	mov	r7, r0
 800b250:	f1b8 0f00 	cmp.w	r8, #0
 800b254:	d05b      	beq.n	800b30e <_dtoa_r+0xa5e>
 800b256:	6879      	ldr	r1, [r7, #4]
 800b258:	4620      	mov	r0, r4
 800b25a:	f000 fcb3 	bl	800bbc4 <_Balloc>
 800b25e:	4605      	mov	r5, r0
 800b260:	b928      	cbnz	r0, 800b26e <_dtoa_r+0x9be>
 800b262:	4b87      	ldr	r3, [pc, #540]	; (800b480 <_dtoa_r+0xbd0>)
 800b264:	4602      	mov	r2, r0
 800b266:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b26a:	f7ff bb3b 	b.w	800a8e4 <_dtoa_r+0x34>
 800b26e:	693a      	ldr	r2, [r7, #16]
 800b270:	3202      	adds	r2, #2
 800b272:	0092      	lsls	r2, r2, #2
 800b274:	f107 010c 	add.w	r1, r7, #12
 800b278:	300c      	adds	r0, #12
 800b27a:	f000 fc95 	bl	800bba8 <memcpy>
 800b27e:	2201      	movs	r2, #1
 800b280:	4629      	mov	r1, r5
 800b282:	4620      	mov	r0, r4
 800b284:	f000 fefa 	bl	800c07c <__lshift>
 800b288:	9b01      	ldr	r3, [sp, #4]
 800b28a:	f103 0901 	add.w	r9, r3, #1
 800b28e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b292:	4413      	add	r3, r2
 800b294:	9305      	str	r3, [sp, #20]
 800b296:	f00a 0301 	and.w	r3, sl, #1
 800b29a:	46b8      	mov	r8, r7
 800b29c:	9304      	str	r3, [sp, #16]
 800b29e:	4607      	mov	r7, r0
 800b2a0:	4631      	mov	r1, r6
 800b2a2:	ee18 0a10 	vmov	r0, s16
 800b2a6:	f7ff fa77 	bl	800a798 <quorem>
 800b2aa:	4641      	mov	r1, r8
 800b2ac:	9002      	str	r0, [sp, #8]
 800b2ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b2b2:	ee18 0a10 	vmov	r0, s16
 800b2b6:	f000 ff51 	bl	800c15c <__mcmp>
 800b2ba:	463a      	mov	r2, r7
 800b2bc:	9003      	str	r0, [sp, #12]
 800b2be:	4631      	mov	r1, r6
 800b2c0:	4620      	mov	r0, r4
 800b2c2:	f000 ff67 	bl	800c194 <__mdiff>
 800b2c6:	68c2      	ldr	r2, [r0, #12]
 800b2c8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800b2cc:	4605      	mov	r5, r0
 800b2ce:	bb02      	cbnz	r2, 800b312 <_dtoa_r+0xa62>
 800b2d0:	4601      	mov	r1, r0
 800b2d2:	ee18 0a10 	vmov	r0, s16
 800b2d6:	f000 ff41 	bl	800c15c <__mcmp>
 800b2da:	4602      	mov	r2, r0
 800b2dc:	4629      	mov	r1, r5
 800b2de:	4620      	mov	r0, r4
 800b2e0:	9207      	str	r2, [sp, #28]
 800b2e2:	f000 fcaf 	bl	800bc44 <_Bfree>
 800b2e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b2ea:	ea43 0102 	orr.w	r1, r3, r2
 800b2ee:	9b04      	ldr	r3, [sp, #16]
 800b2f0:	430b      	orrs	r3, r1
 800b2f2:	464d      	mov	r5, r9
 800b2f4:	d10f      	bne.n	800b316 <_dtoa_r+0xa66>
 800b2f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b2fa:	d02a      	beq.n	800b352 <_dtoa_r+0xaa2>
 800b2fc:	9b03      	ldr	r3, [sp, #12]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	dd02      	ble.n	800b308 <_dtoa_r+0xa58>
 800b302:	9b02      	ldr	r3, [sp, #8]
 800b304:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b308:	f88b a000 	strb.w	sl, [fp]
 800b30c:	e775      	b.n	800b1fa <_dtoa_r+0x94a>
 800b30e:	4638      	mov	r0, r7
 800b310:	e7ba      	b.n	800b288 <_dtoa_r+0x9d8>
 800b312:	2201      	movs	r2, #1
 800b314:	e7e2      	b.n	800b2dc <_dtoa_r+0xa2c>
 800b316:	9b03      	ldr	r3, [sp, #12]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	db04      	blt.n	800b326 <_dtoa_r+0xa76>
 800b31c:	9906      	ldr	r1, [sp, #24]
 800b31e:	430b      	orrs	r3, r1
 800b320:	9904      	ldr	r1, [sp, #16]
 800b322:	430b      	orrs	r3, r1
 800b324:	d122      	bne.n	800b36c <_dtoa_r+0xabc>
 800b326:	2a00      	cmp	r2, #0
 800b328:	ddee      	ble.n	800b308 <_dtoa_r+0xa58>
 800b32a:	ee18 1a10 	vmov	r1, s16
 800b32e:	2201      	movs	r2, #1
 800b330:	4620      	mov	r0, r4
 800b332:	f000 fea3 	bl	800c07c <__lshift>
 800b336:	4631      	mov	r1, r6
 800b338:	ee08 0a10 	vmov	s16, r0
 800b33c:	f000 ff0e 	bl	800c15c <__mcmp>
 800b340:	2800      	cmp	r0, #0
 800b342:	dc03      	bgt.n	800b34c <_dtoa_r+0xa9c>
 800b344:	d1e0      	bne.n	800b308 <_dtoa_r+0xa58>
 800b346:	f01a 0f01 	tst.w	sl, #1
 800b34a:	d0dd      	beq.n	800b308 <_dtoa_r+0xa58>
 800b34c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b350:	d1d7      	bne.n	800b302 <_dtoa_r+0xa52>
 800b352:	2339      	movs	r3, #57	; 0x39
 800b354:	f88b 3000 	strb.w	r3, [fp]
 800b358:	462b      	mov	r3, r5
 800b35a:	461d      	mov	r5, r3
 800b35c:	3b01      	subs	r3, #1
 800b35e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b362:	2a39      	cmp	r2, #57	; 0x39
 800b364:	d071      	beq.n	800b44a <_dtoa_r+0xb9a>
 800b366:	3201      	adds	r2, #1
 800b368:	701a      	strb	r2, [r3, #0]
 800b36a:	e746      	b.n	800b1fa <_dtoa_r+0x94a>
 800b36c:	2a00      	cmp	r2, #0
 800b36e:	dd07      	ble.n	800b380 <_dtoa_r+0xad0>
 800b370:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b374:	d0ed      	beq.n	800b352 <_dtoa_r+0xaa2>
 800b376:	f10a 0301 	add.w	r3, sl, #1
 800b37a:	f88b 3000 	strb.w	r3, [fp]
 800b37e:	e73c      	b.n	800b1fa <_dtoa_r+0x94a>
 800b380:	9b05      	ldr	r3, [sp, #20]
 800b382:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b386:	4599      	cmp	r9, r3
 800b388:	d047      	beq.n	800b41a <_dtoa_r+0xb6a>
 800b38a:	ee18 1a10 	vmov	r1, s16
 800b38e:	2300      	movs	r3, #0
 800b390:	220a      	movs	r2, #10
 800b392:	4620      	mov	r0, r4
 800b394:	f000 fc78 	bl	800bc88 <__multadd>
 800b398:	45b8      	cmp	r8, r7
 800b39a:	ee08 0a10 	vmov	s16, r0
 800b39e:	f04f 0300 	mov.w	r3, #0
 800b3a2:	f04f 020a 	mov.w	r2, #10
 800b3a6:	4641      	mov	r1, r8
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	d106      	bne.n	800b3ba <_dtoa_r+0xb0a>
 800b3ac:	f000 fc6c 	bl	800bc88 <__multadd>
 800b3b0:	4680      	mov	r8, r0
 800b3b2:	4607      	mov	r7, r0
 800b3b4:	f109 0901 	add.w	r9, r9, #1
 800b3b8:	e772      	b.n	800b2a0 <_dtoa_r+0x9f0>
 800b3ba:	f000 fc65 	bl	800bc88 <__multadd>
 800b3be:	4639      	mov	r1, r7
 800b3c0:	4680      	mov	r8, r0
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	220a      	movs	r2, #10
 800b3c6:	4620      	mov	r0, r4
 800b3c8:	f000 fc5e 	bl	800bc88 <__multadd>
 800b3cc:	4607      	mov	r7, r0
 800b3ce:	e7f1      	b.n	800b3b4 <_dtoa_r+0xb04>
 800b3d0:	9b03      	ldr	r3, [sp, #12]
 800b3d2:	9302      	str	r3, [sp, #8]
 800b3d4:	9d01      	ldr	r5, [sp, #4]
 800b3d6:	ee18 0a10 	vmov	r0, s16
 800b3da:	4631      	mov	r1, r6
 800b3dc:	f7ff f9dc 	bl	800a798 <quorem>
 800b3e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b3e4:	9b01      	ldr	r3, [sp, #4]
 800b3e6:	f805 ab01 	strb.w	sl, [r5], #1
 800b3ea:	1aea      	subs	r2, r5, r3
 800b3ec:	9b02      	ldr	r3, [sp, #8]
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	dd09      	ble.n	800b406 <_dtoa_r+0xb56>
 800b3f2:	ee18 1a10 	vmov	r1, s16
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	220a      	movs	r2, #10
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f000 fc44 	bl	800bc88 <__multadd>
 800b400:	ee08 0a10 	vmov	s16, r0
 800b404:	e7e7      	b.n	800b3d6 <_dtoa_r+0xb26>
 800b406:	9b02      	ldr	r3, [sp, #8]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	bfc8      	it	gt
 800b40c:	461d      	movgt	r5, r3
 800b40e:	9b01      	ldr	r3, [sp, #4]
 800b410:	bfd8      	it	le
 800b412:	2501      	movle	r5, #1
 800b414:	441d      	add	r5, r3
 800b416:	f04f 0800 	mov.w	r8, #0
 800b41a:	ee18 1a10 	vmov	r1, s16
 800b41e:	2201      	movs	r2, #1
 800b420:	4620      	mov	r0, r4
 800b422:	f000 fe2b 	bl	800c07c <__lshift>
 800b426:	4631      	mov	r1, r6
 800b428:	ee08 0a10 	vmov	s16, r0
 800b42c:	f000 fe96 	bl	800c15c <__mcmp>
 800b430:	2800      	cmp	r0, #0
 800b432:	dc91      	bgt.n	800b358 <_dtoa_r+0xaa8>
 800b434:	d102      	bne.n	800b43c <_dtoa_r+0xb8c>
 800b436:	f01a 0f01 	tst.w	sl, #1
 800b43a:	d18d      	bne.n	800b358 <_dtoa_r+0xaa8>
 800b43c:	462b      	mov	r3, r5
 800b43e:	461d      	mov	r5, r3
 800b440:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b444:	2a30      	cmp	r2, #48	; 0x30
 800b446:	d0fa      	beq.n	800b43e <_dtoa_r+0xb8e>
 800b448:	e6d7      	b.n	800b1fa <_dtoa_r+0x94a>
 800b44a:	9a01      	ldr	r2, [sp, #4]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d184      	bne.n	800b35a <_dtoa_r+0xaaa>
 800b450:	9b00      	ldr	r3, [sp, #0]
 800b452:	3301      	adds	r3, #1
 800b454:	9300      	str	r3, [sp, #0]
 800b456:	2331      	movs	r3, #49	; 0x31
 800b458:	7013      	strb	r3, [r2, #0]
 800b45a:	e6ce      	b.n	800b1fa <_dtoa_r+0x94a>
 800b45c:	4b09      	ldr	r3, [pc, #36]	; (800b484 <_dtoa_r+0xbd4>)
 800b45e:	f7ff ba95 	b.w	800a98c <_dtoa_r+0xdc>
 800b462:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b464:	2b00      	cmp	r3, #0
 800b466:	f47f aa6e 	bne.w	800a946 <_dtoa_r+0x96>
 800b46a:	4b07      	ldr	r3, [pc, #28]	; (800b488 <_dtoa_r+0xbd8>)
 800b46c:	f7ff ba8e 	b.w	800a98c <_dtoa_r+0xdc>
 800b470:	9b02      	ldr	r3, [sp, #8]
 800b472:	2b00      	cmp	r3, #0
 800b474:	dcae      	bgt.n	800b3d4 <_dtoa_r+0xb24>
 800b476:	9b06      	ldr	r3, [sp, #24]
 800b478:	2b02      	cmp	r3, #2
 800b47a:	f73f aea8 	bgt.w	800b1ce <_dtoa_r+0x91e>
 800b47e:	e7a9      	b.n	800b3d4 <_dtoa_r+0xb24>
 800b480:	0800f6e0 	.word	0x0800f6e0
 800b484:	0800f4e4 	.word	0x0800f4e4
 800b488:	0800f661 	.word	0x0800f661

0800b48c <rshift>:
 800b48c:	6903      	ldr	r3, [r0, #16]
 800b48e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b492:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b496:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b49a:	f100 0414 	add.w	r4, r0, #20
 800b49e:	dd45      	ble.n	800b52c <rshift+0xa0>
 800b4a0:	f011 011f 	ands.w	r1, r1, #31
 800b4a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b4a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b4ac:	d10c      	bne.n	800b4c8 <rshift+0x3c>
 800b4ae:	f100 0710 	add.w	r7, r0, #16
 800b4b2:	4629      	mov	r1, r5
 800b4b4:	42b1      	cmp	r1, r6
 800b4b6:	d334      	bcc.n	800b522 <rshift+0x96>
 800b4b8:	1a9b      	subs	r3, r3, r2
 800b4ba:	009b      	lsls	r3, r3, #2
 800b4bc:	1eea      	subs	r2, r5, #3
 800b4be:	4296      	cmp	r6, r2
 800b4c0:	bf38      	it	cc
 800b4c2:	2300      	movcc	r3, #0
 800b4c4:	4423      	add	r3, r4
 800b4c6:	e015      	b.n	800b4f4 <rshift+0x68>
 800b4c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b4cc:	f1c1 0820 	rsb	r8, r1, #32
 800b4d0:	40cf      	lsrs	r7, r1
 800b4d2:	f105 0e04 	add.w	lr, r5, #4
 800b4d6:	46a1      	mov	r9, r4
 800b4d8:	4576      	cmp	r6, lr
 800b4da:	46f4      	mov	ip, lr
 800b4dc:	d815      	bhi.n	800b50a <rshift+0x7e>
 800b4de:	1a9a      	subs	r2, r3, r2
 800b4e0:	0092      	lsls	r2, r2, #2
 800b4e2:	3a04      	subs	r2, #4
 800b4e4:	3501      	adds	r5, #1
 800b4e6:	42ae      	cmp	r6, r5
 800b4e8:	bf38      	it	cc
 800b4ea:	2200      	movcc	r2, #0
 800b4ec:	18a3      	adds	r3, r4, r2
 800b4ee:	50a7      	str	r7, [r4, r2]
 800b4f0:	b107      	cbz	r7, 800b4f4 <rshift+0x68>
 800b4f2:	3304      	adds	r3, #4
 800b4f4:	1b1a      	subs	r2, r3, r4
 800b4f6:	42a3      	cmp	r3, r4
 800b4f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b4fc:	bf08      	it	eq
 800b4fe:	2300      	moveq	r3, #0
 800b500:	6102      	str	r2, [r0, #16]
 800b502:	bf08      	it	eq
 800b504:	6143      	streq	r3, [r0, #20]
 800b506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b50a:	f8dc c000 	ldr.w	ip, [ip]
 800b50e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b512:	ea4c 0707 	orr.w	r7, ip, r7
 800b516:	f849 7b04 	str.w	r7, [r9], #4
 800b51a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b51e:	40cf      	lsrs	r7, r1
 800b520:	e7da      	b.n	800b4d8 <rshift+0x4c>
 800b522:	f851 cb04 	ldr.w	ip, [r1], #4
 800b526:	f847 cf04 	str.w	ip, [r7, #4]!
 800b52a:	e7c3      	b.n	800b4b4 <rshift+0x28>
 800b52c:	4623      	mov	r3, r4
 800b52e:	e7e1      	b.n	800b4f4 <rshift+0x68>

0800b530 <__hexdig_fun>:
 800b530:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b534:	2b09      	cmp	r3, #9
 800b536:	d802      	bhi.n	800b53e <__hexdig_fun+0xe>
 800b538:	3820      	subs	r0, #32
 800b53a:	b2c0      	uxtb	r0, r0
 800b53c:	4770      	bx	lr
 800b53e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b542:	2b05      	cmp	r3, #5
 800b544:	d801      	bhi.n	800b54a <__hexdig_fun+0x1a>
 800b546:	3847      	subs	r0, #71	; 0x47
 800b548:	e7f7      	b.n	800b53a <__hexdig_fun+0xa>
 800b54a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b54e:	2b05      	cmp	r3, #5
 800b550:	d801      	bhi.n	800b556 <__hexdig_fun+0x26>
 800b552:	3827      	subs	r0, #39	; 0x27
 800b554:	e7f1      	b.n	800b53a <__hexdig_fun+0xa>
 800b556:	2000      	movs	r0, #0
 800b558:	4770      	bx	lr
	...

0800b55c <__gethex>:
 800b55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b560:	ed2d 8b02 	vpush	{d8}
 800b564:	b089      	sub	sp, #36	; 0x24
 800b566:	ee08 0a10 	vmov	s16, r0
 800b56a:	9304      	str	r3, [sp, #16]
 800b56c:	4bb4      	ldr	r3, [pc, #720]	; (800b840 <__gethex+0x2e4>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	9301      	str	r3, [sp, #4]
 800b572:	4618      	mov	r0, r3
 800b574:	468b      	mov	fp, r1
 800b576:	4690      	mov	r8, r2
 800b578:	f7f4 fe2a 	bl	80001d0 <strlen>
 800b57c:	9b01      	ldr	r3, [sp, #4]
 800b57e:	f8db 2000 	ldr.w	r2, [fp]
 800b582:	4403      	add	r3, r0
 800b584:	4682      	mov	sl, r0
 800b586:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b58a:	9305      	str	r3, [sp, #20]
 800b58c:	1c93      	adds	r3, r2, #2
 800b58e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b592:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b596:	32fe      	adds	r2, #254	; 0xfe
 800b598:	18d1      	adds	r1, r2, r3
 800b59a:	461f      	mov	r7, r3
 800b59c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b5a0:	9100      	str	r1, [sp, #0]
 800b5a2:	2830      	cmp	r0, #48	; 0x30
 800b5a4:	d0f8      	beq.n	800b598 <__gethex+0x3c>
 800b5a6:	f7ff ffc3 	bl	800b530 <__hexdig_fun>
 800b5aa:	4604      	mov	r4, r0
 800b5ac:	2800      	cmp	r0, #0
 800b5ae:	d13a      	bne.n	800b626 <__gethex+0xca>
 800b5b0:	9901      	ldr	r1, [sp, #4]
 800b5b2:	4652      	mov	r2, sl
 800b5b4:	4638      	mov	r0, r7
 800b5b6:	f001 fa33 	bl	800ca20 <strncmp>
 800b5ba:	4605      	mov	r5, r0
 800b5bc:	2800      	cmp	r0, #0
 800b5be:	d168      	bne.n	800b692 <__gethex+0x136>
 800b5c0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b5c4:	eb07 060a 	add.w	r6, r7, sl
 800b5c8:	f7ff ffb2 	bl	800b530 <__hexdig_fun>
 800b5cc:	2800      	cmp	r0, #0
 800b5ce:	d062      	beq.n	800b696 <__gethex+0x13a>
 800b5d0:	4633      	mov	r3, r6
 800b5d2:	7818      	ldrb	r0, [r3, #0]
 800b5d4:	2830      	cmp	r0, #48	; 0x30
 800b5d6:	461f      	mov	r7, r3
 800b5d8:	f103 0301 	add.w	r3, r3, #1
 800b5dc:	d0f9      	beq.n	800b5d2 <__gethex+0x76>
 800b5de:	f7ff ffa7 	bl	800b530 <__hexdig_fun>
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	fab0 f480 	clz	r4, r0
 800b5e8:	0964      	lsrs	r4, r4, #5
 800b5ea:	4635      	mov	r5, r6
 800b5ec:	9300      	str	r3, [sp, #0]
 800b5ee:	463a      	mov	r2, r7
 800b5f0:	4616      	mov	r6, r2
 800b5f2:	3201      	adds	r2, #1
 800b5f4:	7830      	ldrb	r0, [r6, #0]
 800b5f6:	f7ff ff9b 	bl	800b530 <__hexdig_fun>
 800b5fa:	2800      	cmp	r0, #0
 800b5fc:	d1f8      	bne.n	800b5f0 <__gethex+0x94>
 800b5fe:	9901      	ldr	r1, [sp, #4]
 800b600:	4652      	mov	r2, sl
 800b602:	4630      	mov	r0, r6
 800b604:	f001 fa0c 	bl	800ca20 <strncmp>
 800b608:	b980      	cbnz	r0, 800b62c <__gethex+0xd0>
 800b60a:	b94d      	cbnz	r5, 800b620 <__gethex+0xc4>
 800b60c:	eb06 050a 	add.w	r5, r6, sl
 800b610:	462a      	mov	r2, r5
 800b612:	4616      	mov	r6, r2
 800b614:	3201      	adds	r2, #1
 800b616:	7830      	ldrb	r0, [r6, #0]
 800b618:	f7ff ff8a 	bl	800b530 <__hexdig_fun>
 800b61c:	2800      	cmp	r0, #0
 800b61e:	d1f8      	bne.n	800b612 <__gethex+0xb6>
 800b620:	1bad      	subs	r5, r5, r6
 800b622:	00ad      	lsls	r5, r5, #2
 800b624:	e004      	b.n	800b630 <__gethex+0xd4>
 800b626:	2400      	movs	r4, #0
 800b628:	4625      	mov	r5, r4
 800b62a:	e7e0      	b.n	800b5ee <__gethex+0x92>
 800b62c:	2d00      	cmp	r5, #0
 800b62e:	d1f7      	bne.n	800b620 <__gethex+0xc4>
 800b630:	7833      	ldrb	r3, [r6, #0]
 800b632:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b636:	2b50      	cmp	r3, #80	; 0x50
 800b638:	d13b      	bne.n	800b6b2 <__gethex+0x156>
 800b63a:	7873      	ldrb	r3, [r6, #1]
 800b63c:	2b2b      	cmp	r3, #43	; 0x2b
 800b63e:	d02c      	beq.n	800b69a <__gethex+0x13e>
 800b640:	2b2d      	cmp	r3, #45	; 0x2d
 800b642:	d02e      	beq.n	800b6a2 <__gethex+0x146>
 800b644:	1c71      	adds	r1, r6, #1
 800b646:	f04f 0900 	mov.w	r9, #0
 800b64a:	7808      	ldrb	r0, [r1, #0]
 800b64c:	f7ff ff70 	bl	800b530 <__hexdig_fun>
 800b650:	1e43      	subs	r3, r0, #1
 800b652:	b2db      	uxtb	r3, r3
 800b654:	2b18      	cmp	r3, #24
 800b656:	d82c      	bhi.n	800b6b2 <__gethex+0x156>
 800b658:	f1a0 0210 	sub.w	r2, r0, #16
 800b65c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b660:	f7ff ff66 	bl	800b530 <__hexdig_fun>
 800b664:	1e43      	subs	r3, r0, #1
 800b666:	b2db      	uxtb	r3, r3
 800b668:	2b18      	cmp	r3, #24
 800b66a:	d91d      	bls.n	800b6a8 <__gethex+0x14c>
 800b66c:	f1b9 0f00 	cmp.w	r9, #0
 800b670:	d000      	beq.n	800b674 <__gethex+0x118>
 800b672:	4252      	negs	r2, r2
 800b674:	4415      	add	r5, r2
 800b676:	f8cb 1000 	str.w	r1, [fp]
 800b67a:	b1e4      	cbz	r4, 800b6b6 <__gethex+0x15a>
 800b67c:	9b00      	ldr	r3, [sp, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	bf14      	ite	ne
 800b682:	2700      	movne	r7, #0
 800b684:	2706      	moveq	r7, #6
 800b686:	4638      	mov	r0, r7
 800b688:	b009      	add	sp, #36	; 0x24
 800b68a:	ecbd 8b02 	vpop	{d8}
 800b68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b692:	463e      	mov	r6, r7
 800b694:	4625      	mov	r5, r4
 800b696:	2401      	movs	r4, #1
 800b698:	e7ca      	b.n	800b630 <__gethex+0xd4>
 800b69a:	f04f 0900 	mov.w	r9, #0
 800b69e:	1cb1      	adds	r1, r6, #2
 800b6a0:	e7d3      	b.n	800b64a <__gethex+0xee>
 800b6a2:	f04f 0901 	mov.w	r9, #1
 800b6a6:	e7fa      	b.n	800b69e <__gethex+0x142>
 800b6a8:	230a      	movs	r3, #10
 800b6aa:	fb03 0202 	mla	r2, r3, r2, r0
 800b6ae:	3a10      	subs	r2, #16
 800b6b0:	e7d4      	b.n	800b65c <__gethex+0x100>
 800b6b2:	4631      	mov	r1, r6
 800b6b4:	e7df      	b.n	800b676 <__gethex+0x11a>
 800b6b6:	1bf3      	subs	r3, r6, r7
 800b6b8:	3b01      	subs	r3, #1
 800b6ba:	4621      	mov	r1, r4
 800b6bc:	2b07      	cmp	r3, #7
 800b6be:	dc0b      	bgt.n	800b6d8 <__gethex+0x17c>
 800b6c0:	ee18 0a10 	vmov	r0, s16
 800b6c4:	f000 fa7e 	bl	800bbc4 <_Balloc>
 800b6c8:	4604      	mov	r4, r0
 800b6ca:	b940      	cbnz	r0, 800b6de <__gethex+0x182>
 800b6cc:	4b5d      	ldr	r3, [pc, #372]	; (800b844 <__gethex+0x2e8>)
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	21de      	movs	r1, #222	; 0xde
 800b6d2:	485d      	ldr	r0, [pc, #372]	; (800b848 <__gethex+0x2ec>)
 800b6d4:	f001 f9c6 	bl	800ca64 <__assert_func>
 800b6d8:	3101      	adds	r1, #1
 800b6da:	105b      	asrs	r3, r3, #1
 800b6dc:	e7ee      	b.n	800b6bc <__gethex+0x160>
 800b6de:	f100 0914 	add.w	r9, r0, #20
 800b6e2:	f04f 0b00 	mov.w	fp, #0
 800b6e6:	f1ca 0301 	rsb	r3, sl, #1
 800b6ea:	f8cd 9008 	str.w	r9, [sp, #8]
 800b6ee:	f8cd b000 	str.w	fp, [sp]
 800b6f2:	9306      	str	r3, [sp, #24]
 800b6f4:	42b7      	cmp	r7, r6
 800b6f6:	d340      	bcc.n	800b77a <__gethex+0x21e>
 800b6f8:	9802      	ldr	r0, [sp, #8]
 800b6fa:	9b00      	ldr	r3, [sp, #0]
 800b6fc:	f840 3b04 	str.w	r3, [r0], #4
 800b700:	eba0 0009 	sub.w	r0, r0, r9
 800b704:	1080      	asrs	r0, r0, #2
 800b706:	0146      	lsls	r6, r0, #5
 800b708:	6120      	str	r0, [r4, #16]
 800b70a:	4618      	mov	r0, r3
 800b70c:	f000 fb4c 	bl	800bda8 <__hi0bits>
 800b710:	1a30      	subs	r0, r6, r0
 800b712:	f8d8 6000 	ldr.w	r6, [r8]
 800b716:	42b0      	cmp	r0, r6
 800b718:	dd63      	ble.n	800b7e2 <__gethex+0x286>
 800b71a:	1b87      	subs	r7, r0, r6
 800b71c:	4639      	mov	r1, r7
 800b71e:	4620      	mov	r0, r4
 800b720:	f000 fef0 	bl	800c504 <__any_on>
 800b724:	4682      	mov	sl, r0
 800b726:	b1a8      	cbz	r0, 800b754 <__gethex+0x1f8>
 800b728:	1e7b      	subs	r3, r7, #1
 800b72a:	1159      	asrs	r1, r3, #5
 800b72c:	f003 021f 	and.w	r2, r3, #31
 800b730:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b734:	f04f 0a01 	mov.w	sl, #1
 800b738:	fa0a f202 	lsl.w	r2, sl, r2
 800b73c:	420a      	tst	r2, r1
 800b73e:	d009      	beq.n	800b754 <__gethex+0x1f8>
 800b740:	4553      	cmp	r3, sl
 800b742:	dd05      	ble.n	800b750 <__gethex+0x1f4>
 800b744:	1eb9      	subs	r1, r7, #2
 800b746:	4620      	mov	r0, r4
 800b748:	f000 fedc 	bl	800c504 <__any_on>
 800b74c:	2800      	cmp	r0, #0
 800b74e:	d145      	bne.n	800b7dc <__gethex+0x280>
 800b750:	f04f 0a02 	mov.w	sl, #2
 800b754:	4639      	mov	r1, r7
 800b756:	4620      	mov	r0, r4
 800b758:	f7ff fe98 	bl	800b48c <rshift>
 800b75c:	443d      	add	r5, r7
 800b75e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b762:	42ab      	cmp	r3, r5
 800b764:	da4c      	bge.n	800b800 <__gethex+0x2a4>
 800b766:	ee18 0a10 	vmov	r0, s16
 800b76a:	4621      	mov	r1, r4
 800b76c:	f000 fa6a 	bl	800bc44 <_Bfree>
 800b770:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b772:	2300      	movs	r3, #0
 800b774:	6013      	str	r3, [r2, #0]
 800b776:	27a3      	movs	r7, #163	; 0xa3
 800b778:	e785      	b.n	800b686 <__gethex+0x12a>
 800b77a:	1e73      	subs	r3, r6, #1
 800b77c:	9a05      	ldr	r2, [sp, #20]
 800b77e:	9303      	str	r3, [sp, #12]
 800b780:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b784:	4293      	cmp	r3, r2
 800b786:	d019      	beq.n	800b7bc <__gethex+0x260>
 800b788:	f1bb 0f20 	cmp.w	fp, #32
 800b78c:	d107      	bne.n	800b79e <__gethex+0x242>
 800b78e:	9b02      	ldr	r3, [sp, #8]
 800b790:	9a00      	ldr	r2, [sp, #0]
 800b792:	f843 2b04 	str.w	r2, [r3], #4
 800b796:	9302      	str	r3, [sp, #8]
 800b798:	2300      	movs	r3, #0
 800b79a:	9300      	str	r3, [sp, #0]
 800b79c:	469b      	mov	fp, r3
 800b79e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b7a2:	f7ff fec5 	bl	800b530 <__hexdig_fun>
 800b7a6:	9b00      	ldr	r3, [sp, #0]
 800b7a8:	f000 000f 	and.w	r0, r0, #15
 800b7ac:	fa00 f00b 	lsl.w	r0, r0, fp
 800b7b0:	4303      	orrs	r3, r0
 800b7b2:	9300      	str	r3, [sp, #0]
 800b7b4:	f10b 0b04 	add.w	fp, fp, #4
 800b7b8:	9b03      	ldr	r3, [sp, #12]
 800b7ba:	e00d      	b.n	800b7d8 <__gethex+0x27c>
 800b7bc:	9b03      	ldr	r3, [sp, #12]
 800b7be:	9a06      	ldr	r2, [sp, #24]
 800b7c0:	4413      	add	r3, r2
 800b7c2:	42bb      	cmp	r3, r7
 800b7c4:	d3e0      	bcc.n	800b788 <__gethex+0x22c>
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	9901      	ldr	r1, [sp, #4]
 800b7ca:	9307      	str	r3, [sp, #28]
 800b7cc:	4652      	mov	r2, sl
 800b7ce:	f001 f927 	bl	800ca20 <strncmp>
 800b7d2:	9b07      	ldr	r3, [sp, #28]
 800b7d4:	2800      	cmp	r0, #0
 800b7d6:	d1d7      	bne.n	800b788 <__gethex+0x22c>
 800b7d8:	461e      	mov	r6, r3
 800b7da:	e78b      	b.n	800b6f4 <__gethex+0x198>
 800b7dc:	f04f 0a03 	mov.w	sl, #3
 800b7e0:	e7b8      	b.n	800b754 <__gethex+0x1f8>
 800b7e2:	da0a      	bge.n	800b7fa <__gethex+0x29e>
 800b7e4:	1a37      	subs	r7, r6, r0
 800b7e6:	4621      	mov	r1, r4
 800b7e8:	ee18 0a10 	vmov	r0, s16
 800b7ec:	463a      	mov	r2, r7
 800b7ee:	f000 fc45 	bl	800c07c <__lshift>
 800b7f2:	1bed      	subs	r5, r5, r7
 800b7f4:	4604      	mov	r4, r0
 800b7f6:	f100 0914 	add.w	r9, r0, #20
 800b7fa:	f04f 0a00 	mov.w	sl, #0
 800b7fe:	e7ae      	b.n	800b75e <__gethex+0x202>
 800b800:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b804:	42a8      	cmp	r0, r5
 800b806:	dd72      	ble.n	800b8ee <__gethex+0x392>
 800b808:	1b45      	subs	r5, r0, r5
 800b80a:	42ae      	cmp	r6, r5
 800b80c:	dc36      	bgt.n	800b87c <__gethex+0x320>
 800b80e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b812:	2b02      	cmp	r3, #2
 800b814:	d02a      	beq.n	800b86c <__gethex+0x310>
 800b816:	2b03      	cmp	r3, #3
 800b818:	d02c      	beq.n	800b874 <__gethex+0x318>
 800b81a:	2b01      	cmp	r3, #1
 800b81c:	d11c      	bne.n	800b858 <__gethex+0x2fc>
 800b81e:	42ae      	cmp	r6, r5
 800b820:	d11a      	bne.n	800b858 <__gethex+0x2fc>
 800b822:	2e01      	cmp	r6, #1
 800b824:	d112      	bne.n	800b84c <__gethex+0x2f0>
 800b826:	9a04      	ldr	r2, [sp, #16]
 800b828:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b82c:	6013      	str	r3, [r2, #0]
 800b82e:	2301      	movs	r3, #1
 800b830:	6123      	str	r3, [r4, #16]
 800b832:	f8c9 3000 	str.w	r3, [r9]
 800b836:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b838:	2762      	movs	r7, #98	; 0x62
 800b83a:	601c      	str	r4, [r3, #0]
 800b83c:	e723      	b.n	800b686 <__gethex+0x12a>
 800b83e:	bf00      	nop
 800b840:	0800f758 	.word	0x0800f758
 800b844:	0800f6e0 	.word	0x0800f6e0
 800b848:	0800f6f1 	.word	0x0800f6f1
 800b84c:	1e71      	subs	r1, r6, #1
 800b84e:	4620      	mov	r0, r4
 800b850:	f000 fe58 	bl	800c504 <__any_on>
 800b854:	2800      	cmp	r0, #0
 800b856:	d1e6      	bne.n	800b826 <__gethex+0x2ca>
 800b858:	ee18 0a10 	vmov	r0, s16
 800b85c:	4621      	mov	r1, r4
 800b85e:	f000 f9f1 	bl	800bc44 <_Bfree>
 800b862:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b864:	2300      	movs	r3, #0
 800b866:	6013      	str	r3, [r2, #0]
 800b868:	2750      	movs	r7, #80	; 0x50
 800b86a:	e70c      	b.n	800b686 <__gethex+0x12a>
 800b86c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d1f2      	bne.n	800b858 <__gethex+0x2fc>
 800b872:	e7d8      	b.n	800b826 <__gethex+0x2ca>
 800b874:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b876:	2b00      	cmp	r3, #0
 800b878:	d1d5      	bne.n	800b826 <__gethex+0x2ca>
 800b87a:	e7ed      	b.n	800b858 <__gethex+0x2fc>
 800b87c:	1e6f      	subs	r7, r5, #1
 800b87e:	f1ba 0f00 	cmp.w	sl, #0
 800b882:	d131      	bne.n	800b8e8 <__gethex+0x38c>
 800b884:	b127      	cbz	r7, 800b890 <__gethex+0x334>
 800b886:	4639      	mov	r1, r7
 800b888:	4620      	mov	r0, r4
 800b88a:	f000 fe3b 	bl	800c504 <__any_on>
 800b88e:	4682      	mov	sl, r0
 800b890:	117b      	asrs	r3, r7, #5
 800b892:	2101      	movs	r1, #1
 800b894:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b898:	f007 071f 	and.w	r7, r7, #31
 800b89c:	fa01 f707 	lsl.w	r7, r1, r7
 800b8a0:	421f      	tst	r7, r3
 800b8a2:	4629      	mov	r1, r5
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	bf18      	it	ne
 800b8a8:	f04a 0a02 	orrne.w	sl, sl, #2
 800b8ac:	1b76      	subs	r6, r6, r5
 800b8ae:	f7ff fded 	bl	800b48c <rshift>
 800b8b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b8b6:	2702      	movs	r7, #2
 800b8b8:	f1ba 0f00 	cmp.w	sl, #0
 800b8bc:	d048      	beq.n	800b950 <__gethex+0x3f4>
 800b8be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b8c2:	2b02      	cmp	r3, #2
 800b8c4:	d015      	beq.n	800b8f2 <__gethex+0x396>
 800b8c6:	2b03      	cmp	r3, #3
 800b8c8:	d017      	beq.n	800b8fa <__gethex+0x39e>
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d109      	bne.n	800b8e2 <__gethex+0x386>
 800b8ce:	f01a 0f02 	tst.w	sl, #2
 800b8d2:	d006      	beq.n	800b8e2 <__gethex+0x386>
 800b8d4:	f8d9 0000 	ldr.w	r0, [r9]
 800b8d8:	ea4a 0a00 	orr.w	sl, sl, r0
 800b8dc:	f01a 0f01 	tst.w	sl, #1
 800b8e0:	d10e      	bne.n	800b900 <__gethex+0x3a4>
 800b8e2:	f047 0710 	orr.w	r7, r7, #16
 800b8e6:	e033      	b.n	800b950 <__gethex+0x3f4>
 800b8e8:	f04f 0a01 	mov.w	sl, #1
 800b8ec:	e7d0      	b.n	800b890 <__gethex+0x334>
 800b8ee:	2701      	movs	r7, #1
 800b8f0:	e7e2      	b.n	800b8b8 <__gethex+0x35c>
 800b8f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8f4:	f1c3 0301 	rsb	r3, r3, #1
 800b8f8:	9315      	str	r3, [sp, #84]	; 0x54
 800b8fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d0f0      	beq.n	800b8e2 <__gethex+0x386>
 800b900:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b904:	f104 0314 	add.w	r3, r4, #20
 800b908:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b90c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b910:	f04f 0c00 	mov.w	ip, #0
 800b914:	4618      	mov	r0, r3
 800b916:	f853 2b04 	ldr.w	r2, [r3], #4
 800b91a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800b91e:	d01c      	beq.n	800b95a <__gethex+0x3fe>
 800b920:	3201      	adds	r2, #1
 800b922:	6002      	str	r2, [r0, #0]
 800b924:	2f02      	cmp	r7, #2
 800b926:	f104 0314 	add.w	r3, r4, #20
 800b92a:	d13f      	bne.n	800b9ac <__gethex+0x450>
 800b92c:	f8d8 2000 	ldr.w	r2, [r8]
 800b930:	3a01      	subs	r2, #1
 800b932:	42b2      	cmp	r2, r6
 800b934:	d10a      	bne.n	800b94c <__gethex+0x3f0>
 800b936:	1171      	asrs	r1, r6, #5
 800b938:	2201      	movs	r2, #1
 800b93a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b93e:	f006 061f 	and.w	r6, r6, #31
 800b942:	fa02 f606 	lsl.w	r6, r2, r6
 800b946:	421e      	tst	r6, r3
 800b948:	bf18      	it	ne
 800b94a:	4617      	movne	r7, r2
 800b94c:	f047 0720 	orr.w	r7, r7, #32
 800b950:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b952:	601c      	str	r4, [r3, #0]
 800b954:	9b04      	ldr	r3, [sp, #16]
 800b956:	601d      	str	r5, [r3, #0]
 800b958:	e695      	b.n	800b686 <__gethex+0x12a>
 800b95a:	4299      	cmp	r1, r3
 800b95c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b960:	d8d8      	bhi.n	800b914 <__gethex+0x3b8>
 800b962:	68a3      	ldr	r3, [r4, #8]
 800b964:	459b      	cmp	fp, r3
 800b966:	db19      	blt.n	800b99c <__gethex+0x440>
 800b968:	6861      	ldr	r1, [r4, #4]
 800b96a:	ee18 0a10 	vmov	r0, s16
 800b96e:	3101      	adds	r1, #1
 800b970:	f000 f928 	bl	800bbc4 <_Balloc>
 800b974:	4681      	mov	r9, r0
 800b976:	b918      	cbnz	r0, 800b980 <__gethex+0x424>
 800b978:	4b1a      	ldr	r3, [pc, #104]	; (800b9e4 <__gethex+0x488>)
 800b97a:	4602      	mov	r2, r0
 800b97c:	2184      	movs	r1, #132	; 0x84
 800b97e:	e6a8      	b.n	800b6d2 <__gethex+0x176>
 800b980:	6922      	ldr	r2, [r4, #16]
 800b982:	3202      	adds	r2, #2
 800b984:	f104 010c 	add.w	r1, r4, #12
 800b988:	0092      	lsls	r2, r2, #2
 800b98a:	300c      	adds	r0, #12
 800b98c:	f000 f90c 	bl	800bba8 <memcpy>
 800b990:	4621      	mov	r1, r4
 800b992:	ee18 0a10 	vmov	r0, s16
 800b996:	f000 f955 	bl	800bc44 <_Bfree>
 800b99a:	464c      	mov	r4, r9
 800b99c:	6923      	ldr	r3, [r4, #16]
 800b99e:	1c5a      	adds	r2, r3, #1
 800b9a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b9a4:	6122      	str	r2, [r4, #16]
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	615a      	str	r2, [r3, #20]
 800b9aa:	e7bb      	b.n	800b924 <__gethex+0x3c8>
 800b9ac:	6922      	ldr	r2, [r4, #16]
 800b9ae:	455a      	cmp	r2, fp
 800b9b0:	dd0b      	ble.n	800b9ca <__gethex+0x46e>
 800b9b2:	2101      	movs	r1, #1
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	f7ff fd69 	bl	800b48c <rshift>
 800b9ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b9be:	3501      	adds	r5, #1
 800b9c0:	42ab      	cmp	r3, r5
 800b9c2:	f6ff aed0 	blt.w	800b766 <__gethex+0x20a>
 800b9c6:	2701      	movs	r7, #1
 800b9c8:	e7c0      	b.n	800b94c <__gethex+0x3f0>
 800b9ca:	f016 061f 	ands.w	r6, r6, #31
 800b9ce:	d0fa      	beq.n	800b9c6 <__gethex+0x46a>
 800b9d0:	4453      	add	r3, sl
 800b9d2:	f1c6 0620 	rsb	r6, r6, #32
 800b9d6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b9da:	f000 f9e5 	bl	800bda8 <__hi0bits>
 800b9de:	42b0      	cmp	r0, r6
 800b9e0:	dbe7      	blt.n	800b9b2 <__gethex+0x456>
 800b9e2:	e7f0      	b.n	800b9c6 <__gethex+0x46a>
 800b9e4:	0800f6e0 	.word	0x0800f6e0

0800b9e8 <L_shift>:
 800b9e8:	f1c2 0208 	rsb	r2, r2, #8
 800b9ec:	0092      	lsls	r2, r2, #2
 800b9ee:	b570      	push	{r4, r5, r6, lr}
 800b9f0:	f1c2 0620 	rsb	r6, r2, #32
 800b9f4:	6843      	ldr	r3, [r0, #4]
 800b9f6:	6804      	ldr	r4, [r0, #0]
 800b9f8:	fa03 f506 	lsl.w	r5, r3, r6
 800b9fc:	432c      	orrs	r4, r5
 800b9fe:	40d3      	lsrs	r3, r2
 800ba00:	6004      	str	r4, [r0, #0]
 800ba02:	f840 3f04 	str.w	r3, [r0, #4]!
 800ba06:	4288      	cmp	r0, r1
 800ba08:	d3f4      	bcc.n	800b9f4 <L_shift+0xc>
 800ba0a:	bd70      	pop	{r4, r5, r6, pc}

0800ba0c <__match>:
 800ba0c:	b530      	push	{r4, r5, lr}
 800ba0e:	6803      	ldr	r3, [r0, #0]
 800ba10:	3301      	adds	r3, #1
 800ba12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba16:	b914      	cbnz	r4, 800ba1e <__match+0x12>
 800ba18:	6003      	str	r3, [r0, #0]
 800ba1a:	2001      	movs	r0, #1
 800ba1c:	bd30      	pop	{r4, r5, pc}
 800ba1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba22:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ba26:	2d19      	cmp	r5, #25
 800ba28:	bf98      	it	ls
 800ba2a:	3220      	addls	r2, #32
 800ba2c:	42a2      	cmp	r2, r4
 800ba2e:	d0f0      	beq.n	800ba12 <__match+0x6>
 800ba30:	2000      	movs	r0, #0
 800ba32:	e7f3      	b.n	800ba1c <__match+0x10>

0800ba34 <__hexnan>:
 800ba34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba38:	680b      	ldr	r3, [r1, #0]
 800ba3a:	115e      	asrs	r6, r3, #5
 800ba3c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ba40:	f013 031f 	ands.w	r3, r3, #31
 800ba44:	b087      	sub	sp, #28
 800ba46:	bf18      	it	ne
 800ba48:	3604      	addne	r6, #4
 800ba4a:	2500      	movs	r5, #0
 800ba4c:	1f37      	subs	r7, r6, #4
 800ba4e:	4690      	mov	r8, r2
 800ba50:	6802      	ldr	r2, [r0, #0]
 800ba52:	9301      	str	r3, [sp, #4]
 800ba54:	4682      	mov	sl, r0
 800ba56:	f846 5c04 	str.w	r5, [r6, #-4]
 800ba5a:	46b9      	mov	r9, r7
 800ba5c:	463c      	mov	r4, r7
 800ba5e:	9502      	str	r5, [sp, #8]
 800ba60:	46ab      	mov	fp, r5
 800ba62:	7851      	ldrb	r1, [r2, #1]
 800ba64:	1c53      	adds	r3, r2, #1
 800ba66:	9303      	str	r3, [sp, #12]
 800ba68:	b341      	cbz	r1, 800babc <__hexnan+0x88>
 800ba6a:	4608      	mov	r0, r1
 800ba6c:	9205      	str	r2, [sp, #20]
 800ba6e:	9104      	str	r1, [sp, #16]
 800ba70:	f7ff fd5e 	bl	800b530 <__hexdig_fun>
 800ba74:	2800      	cmp	r0, #0
 800ba76:	d14f      	bne.n	800bb18 <__hexnan+0xe4>
 800ba78:	9904      	ldr	r1, [sp, #16]
 800ba7a:	9a05      	ldr	r2, [sp, #20]
 800ba7c:	2920      	cmp	r1, #32
 800ba7e:	d818      	bhi.n	800bab2 <__hexnan+0x7e>
 800ba80:	9b02      	ldr	r3, [sp, #8]
 800ba82:	459b      	cmp	fp, r3
 800ba84:	dd13      	ble.n	800baae <__hexnan+0x7a>
 800ba86:	454c      	cmp	r4, r9
 800ba88:	d206      	bcs.n	800ba98 <__hexnan+0x64>
 800ba8a:	2d07      	cmp	r5, #7
 800ba8c:	dc04      	bgt.n	800ba98 <__hexnan+0x64>
 800ba8e:	462a      	mov	r2, r5
 800ba90:	4649      	mov	r1, r9
 800ba92:	4620      	mov	r0, r4
 800ba94:	f7ff ffa8 	bl	800b9e8 <L_shift>
 800ba98:	4544      	cmp	r4, r8
 800ba9a:	d950      	bls.n	800bb3e <__hexnan+0x10a>
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	f1a4 0904 	sub.w	r9, r4, #4
 800baa2:	f844 3c04 	str.w	r3, [r4, #-4]
 800baa6:	f8cd b008 	str.w	fp, [sp, #8]
 800baaa:	464c      	mov	r4, r9
 800baac:	461d      	mov	r5, r3
 800baae:	9a03      	ldr	r2, [sp, #12]
 800bab0:	e7d7      	b.n	800ba62 <__hexnan+0x2e>
 800bab2:	2929      	cmp	r1, #41	; 0x29
 800bab4:	d156      	bne.n	800bb64 <__hexnan+0x130>
 800bab6:	3202      	adds	r2, #2
 800bab8:	f8ca 2000 	str.w	r2, [sl]
 800babc:	f1bb 0f00 	cmp.w	fp, #0
 800bac0:	d050      	beq.n	800bb64 <__hexnan+0x130>
 800bac2:	454c      	cmp	r4, r9
 800bac4:	d206      	bcs.n	800bad4 <__hexnan+0xa0>
 800bac6:	2d07      	cmp	r5, #7
 800bac8:	dc04      	bgt.n	800bad4 <__hexnan+0xa0>
 800baca:	462a      	mov	r2, r5
 800bacc:	4649      	mov	r1, r9
 800bace:	4620      	mov	r0, r4
 800bad0:	f7ff ff8a 	bl	800b9e8 <L_shift>
 800bad4:	4544      	cmp	r4, r8
 800bad6:	d934      	bls.n	800bb42 <__hexnan+0x10e>
 800bad8:	f1a8 0204 	sub.w	r2, r8, #4
 800badc:	4623      	mov	r3, r4
 800bade:	f853 1b04 	ldr.w	r1, [r3], #4
 800bae2:	f842 1f04 	str.w	r1, [r2, #4]!
 800bae6:	429f      	cmp	r7, r3
 800bae8:	d2f9      	bcs.n	800bade <__hexnan+0xaa>
 800baea:	1b3b      	subs	r3, r7, r4
 800baec:	f023 0303 	bic.w	r3, r3, #3
 800baf0:	3304      	adds	r3, #4
 800baf2:	3401      	adds	r4, #1
 800baf4:	3e03      	subs	r6, #3
 800baf6:	42b4      	cmp	r4, r6
 800baf8:	bf88      	it	hi
 800bafa:	2304      	movhi	r3, #4
 800bafc:	4443      	add	r3, r8
 800bafe:	2200      	movs	r2, #0
 800bb00:	f843 2b04 	str.w	r2, [r3], #4
 800bb04:	429f      	cmp	r7, r3
 800bb06:	d2fb      	bcs.n	800bb00 <__hexnan+0xcc>
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	b91b      	cbnz	r3, 800bb14 <__hexnan+0xe0>
 800bb0c:	4547      	cmp	r7, r8
 800bb0e:	d127      	bne.n	800bb60 <__hexnan+0x12c>
 800bb10:	2301      	movs	r3, #1
 800bb12:	603b      	str	r3, [r7, #0]
 800bb14:	2005      	movs	r0, #5
 800bb16:	e026      	b.n	800bb66 <__hexnan+0x132>
 800bb18:	3501      	adds	r5, #1
 800bb1a:	2d08      	cmp	r5, #8
 800bb1c:	f10b 0b01 	add.w	fp, fp, #1
 800bb20:	dd06      	ble.n	800bb30 <__hexnan+0xfc>
 800bb22:	4544      	cmp	r4, r8
 800bb24:	d9c3      	bls.n	800baae <__hexnan+0x7a>
 800bb26:	2300      	movs	r3, #0
 800bb28:	f844 3c04 	str.w	r3, [r4, #-4]
 800bb2c:	2501      	movs	r5, #1
 800bb2e:	3c04      	subs	r4, #4
 800bb30:	6822      	ldr	r2, [r4, #0]
 800bb32:	f000 000f 	and.w	r0, r0, #15
 800bb36:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bb3a:	6022      	str	r2, [r4, #0]
 800bb3c:	e7b7      	b.n	800baae <__hexnan+0x7a>
 800bb3e:	2508      	movs	r5, #8
 800bb40:	e7b5      	b.n	800baae <__hexnan+0x7a>
 800bb42:	9b01      	ldr	r3, [sp, #4]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d0df      	beq.n	800bb08 <__hexnan+0xd4>
 800bb48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb4c:	f1c3 0320 	rsb	r3, r3, #32
 800bb50:	fa22 f303 	lsr.w	r3, r2, r3
 800bb54:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bb58:	401a      	ands	r2, r3
 800bb5a:	f846 2c04 	str.w	r2, [r6, #-4]
 800bb5e:	e7d3      	b.n	800bb08 <__hexnan+0xd4>
 800bb60:	3f04      	subs	r7, #4
 800bb62:	e7d1      	b.n	800bb08 <__hexnan+0xd4>
 800bb64:	2004      	movs	r0, #4
 800bb66:	b007      	add	sp, #28
 800bb68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bb6c <_localeconv_r>:
 800bb6c:	4800      	ldr	r0, [pc, #0]	; (800bb70 <_localeconv_r+0x4>)
 800bb6e:	4770      	bx	lr
 800bb70:	20000188 	.word	0x20000188

0800bb74 <malloc>:
 800bb74:	4b02      	ldr	r3, [pc, #8]	; (800bb80 <malloc+0xc>)
 800bb76:	4601      	mov	r1, r0
 800bb78:	6818      	ldr	r0, [r3, #0]
 800bb7a:	f000 bd67 	b.w	800c64c <_malloc_r>
 800bb7e:	bf00      	nop
 800bb80:	20000030 	.word	0x20000030

0800bb84 <__ascii_mbtowc>:
 800bb84:	b082      	sub	sp, #8
 800bb86:	b901      	cbnz	r1, 800bb8a <__ascii_mbtowc+0x6>
 800bb88:	a901      	add	r1, sp, #4
 800bb8a:	b142      	cbz	r2, 800bb9e <__ascii_mbtowc+0x1a>
 800bb8c:	b14b      	cbz	r3, 800bba2 <__ascii_mbtowc+0x1e>
 800bb8e:	7813      	ldrb	r3, [r2, #0]
 800bb90:	600b      	str	r3, [r1, #0]
 800bb92:	7812      	ldrb	r2, [r2, #0]
 800bb94:	1e10      	subs	r0, r2, #0
 800bb96:	bf18      	it	ne
 800bb98:	2001      	movne	r0, #1
 800bb9a:	b002      	add	sp, #8
 800bb9c:	4770      	bx	lr
 800bb9e:	4610      	mov	r0, r2
 800bba0:	e7fb      	b.n	800bb9a <__ascii_mbtowc+0x16>
 800bba2:	f06f 0001 	mvn.w	r0, #1
 800bba6:	e7f8      	b.n	800bb9a <__ascii_mbtowc+0x16>

0800bba8 <memcpy>:
 800bba8:	440a      	add	r2, r1
 800bbaa:	4291      	cmp	r1, r2
 800bbac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bbb0:	d100      	bne.n	800bbb4 <memcpy+0xc>
 800bbb2:	4770      	bx	lr
 800bbb4:	b510      	push	{r4, lr}
 800bbb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbbe:	4291      	cmp	r1, r2
 800bbc0:	d1f9      	bne.n	800bbb6 <memcpy+0xe>
 800bbc2:	bd10      	pop	{r4, pc}

0800bbc4 <_Balloc>:
 800bbc4:	b570      	push	{r4, r5, r6, lr}
 800bbc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bbc8:	4604      	mov	r4, r0
 800bbca:	460d      	mov	r5, r1
 800bbcc:	b976      	cbnz	r6, 800bbec <_Balloc+0x28>
 800bbce:	2010      	movs	r0, #16
 800bbd0:	f7ff ffd0 	bl	800bb74 <malloc>
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	6260      	str	r0, [r4, #36]	; 0x24
 800bbd8:	b920      	cbnz	r0, 800bbe4 <_Balloc+0x20>
 800bbda:	4b18      	ldr	r3, [pc, #96]	; (800bc3c <_Balloc+0x78>)
 800bbdc:	4818      	ldr	r0, [pc, #96]	; (800bc40 <_Balloc+0x7c>)
 800bbde:	2166      	movs	r1, #102	; 0x66
 800bbe0:	f000 ff40 	bl	800ca64 <__assert_func>
 800bbe4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bbe8:	6006      	str	r6, [r0, #0]
 800bbea:	60c6      	str	r6, [r0, #12]
 800bbec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bbee:	68f3      	ldr	r3, [r6, #12]
 800bbf0:	b183      	cbz	r3, 800bc14 <_Balloc+0x50>
 800bbf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbf4:	68db      	ldr	r3, [r3, #12]
 800bbf6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bbfa:	b9b8      	cbnz	r0, 800bc2c <_Balloc+0x68>
 800bbfc:	2101      	movs	r1, #1
 800bbfe:	fa01 f605 	lsl.w	r6, r1, r5
 800bc02:	1d72      	adds	r2, r6, #5
 800bc04:	0092      	lsls	r2, r2, #2
 800bc06:	4620      	mov	r0, r4
 800bc08:	f000 fc9d 	bl	800c546 <_calloc_r>
 800bc0c:	b160      	cbz	r0, 800bc28 <_Balloc+0x64>
 800bc0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bc12:	e00e      	b.n	800bc32 <_Balloc+0x6e>
 800bc14:	2221      	movs	r2, #33	; 0x21
 800bc16:	2104      	movs	r1, #4
 800bc18:	4620      	mov	r0, r4
 800bc1a:	f000 fc94 	bl	800c546 <_calloc_r>
 800bc1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc20:	60f0      	str	r0, [r6, #12]
 800bc22:	68db      	ldr	r3, [r3, #12]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d1e4      	bne.n	800bbf2 <_Balloc+0x2e>
 800bc28:	2000      	movs	r0, #0
 800bc2a:	bd70      	pop	{r4, r5, r6, pc}
 800bc2c:	6802      	ldr	r2, [r0, #0]
 800bc2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bc32:	2300      	movs	r3, #0
 800bc34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bc38:	e7f7      	b.n	800bc2a <_Balloc+0x66>
 800bc3a:	bf00      	nop
 800bc3c:	0800f66e 	.word	0x0800f66e
 800bc40:	0800f76c 	.word	0x0800f76c

0800bc44 <_Bfree>:
 800bc44:	b570      	push	{r4, r5, r6, lr}
 800bc46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bc48:	4605      	mov	r5, r0
 800bc4a:	460c      	mov	r4, r1
 800bc4c:	b976      	cbnz	r6, 800bc6c <_Bfree+0x28>
 800bc4e:	2010      	movs	r0, #16
 800bc50:	f7ff ff90 	bl	800bb74 <malloc>
 800bc54:	4602      	mov	r2, r0
 800bc56:	6268      	str	r0, [r5, #36]	; 0x24
 800bc58:	b920      	cbnz	r0, 800bc64 <_Bfree+0x20>
 800bc5a:	4b09      	ldr	r3, [pc, #36]	; (800bc80 <_Bfree+0x3c>)
 800bc5c:	4809      	ldr	r0, [pc, #36]	; (800bc84 <_Bfree+0x40>)
 800bc5e:	218a      	movs	r1, #138	; 0x8a
 800bc60:	f000 ff00 	bl	800ca64 <__assert_func>
 800bc64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc68:	6006      	str	r6, [r0, #0]
 800bc6a:	60c6      	str	r6, [r0, #12]
 800bc6c:	b13c      	cbz	r4, 800bc7e <_Bfree+0x3a>
 800bc6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bc70:	6862      	ldr	r2, [r4, #4]
 800bc72:	68db      	ldr	r3, [r3, #12]
 800bc74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bc78:	6021      	str	r1, [r4, #0]
 800bc7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bc7e:	bd70      	pop	{r4, r5, r6, pc}
 800bc80:	0800f66e 	.word	0x0800f66e
 800bc84:	0800f76c 	.word	0x0800f76c

0800bc88 <__multadd>:
 800bc88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc8c:	690d      	ldr	r5, [r1, #16]
 800bc8e:	4607      	mov	r7, r0
 800bc90:	460c      	mov	r4, r1
 800bc92:	461e      	mov	r6, r3
 800bc94:	f101 0c14 	add.w	ip, r1, #20
 800bc98:	2000      	movs	r0, #0
 800bc9a:	f8dc 3000 	ldr.w	r3, [ip]
 800bc9e:	b299      	uxth	r1, r3
 800bca0:	fb02 6101 	mla	r1, r2, r1, r6
 800bca4:	0c1e      	lsrs	r6, r3, #16
 800bca6:	0c0b      	lsrs	r3, r1, #16
 800bca8:	fb02 3306 	mla	r3, r2, r6, r3
 800bcac:	b289      	uxth	r1, r1
 800bcae:	3001      	adds	r0, #1
 800bcb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bcb4:	4285      	cmp	r5, r0
 800bcb6:	f84c 1b04 	str.w	r1, [ip], #4
 800bcba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bcbe:	dcec      	bgt.n	800bc9a <__multadd+0x12>
 800bcc0:	b30e      	cbz	r6, 800bd06 <__multadd+0x7e>
 800bcc2:	68a3      	ldr	r3, [r4, #8]
 800bcc4:	42ab      	cmp	r3, r5
 800bcc6:	dc19      	bgt.n	800bcfc <__multadd+0x74>
 800bcc8:	6861      	ldr	r1, [r4, #4]
 800bcca:	4638      	mov	r0, r7
 800bccc:	3101      	adds	r1, #1
 800bcce:	f7ff ff79 	bl	800bbc4 <_Balloc>
 800bcd2:	4680      	mov	r8, r0
 800bcd4:	b928      	cbnz	r0, 800bce2 <__multadd+0x5a>
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	4b0c      	ldr	r3, [pc, #48]	; (800bd0c <__multadd+0x84>)
 800bcda:	480d      	ldr	r0, [pc, #52]	; (800bd10 <__multadd+0x88>)
 800bcdc:	21b5      	movs	r1, #181	; 0xb5
 800bcde:	f000 fec1 	bl	800ca64 <__assert_func>
 800bce2:	6922      	ldr	r2, [r4, #16]
 800bce4:	3202      	adds	r2, #2
 800bce6:	f104 010c 	add.w	r1, r4, #12
 800bcea:	0092      	lsls	r2, r2, #2
 800bcec:	300c      	adds	r0, #12
 800bcee:	f7ff ff5b 	bl	800bba8 <memcpy>
 800bcf2:	4621      	mov	r1, r4
 800bcf4:	4638      	mov	r0, r7
 800bcf6:	f7ff ffa5 	bl	800bc44 <_Bfree>
 800bcfa:	4644      	mov	r4, r8
 800bcfc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bd00:	3501      	adds	r5, #1
 800bd02:	615e      	str	r6, [r3, #20]
 800bd04:	6125      	str	r5, [r4, #16]
 800bd06:	4620      	mov	r0, r4
 800bd08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd0c:	0800f6e0 	.word	0x0800f6e0
 800bd10:	0800f76c 	.word	0x0800f76c

0800bd14 <__s2b>:
 800bd14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd18:	460c      	mov	r4, r1
 800bd1a:	4615      	mov	r5, r2
 800bd1c:	461f      	mov	r7, r3
 800bd1e:	2209      	movs	r2, #9
 800bd20:	3308      	adds	r3, #8
 800bd22:	4606      	mov	r6, r0
 800bd24:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd28:	2100      	movs	r1, #0
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	db09      	blt.n	800bd44 <__s2b+0x30>
 800bd30:	4630      	mov	r0, r6
 800bd32:	f7ff ff47 	bl	800bbc4 <_Balloc>
 800bd36:	b940      	cbnz	r0, 800bd4a <__s2b+0x36>
 800bd38:	4602      	mov	r2, r0
 800bd3a:	4b19      	ldr	r3, [pc, #100]	; (800bda0 <__s2b+0x8c>)
 800bd3c:	4819      	ldr	r0, [pc, #100]	; (800bda4 <__s2b+0x90>)
 800bd3e:	21ce      	movs	r1, #206	; 0xce
 800bd40:	f000 fe90 	bl	800ca64 <__assert_func>
 800bd44:	0052      	lsls	r2, r2, #1
 800bd46:	3101      	adds	r1, #1
 800bd48:	e7f0      	b.n	800bd2c <__s2b+0x18>
 800bd4a:	9b08      	ldr	r3, [sp, #32]
 800bd4c:	6143      	str	r3, [r0, #20]
 800bd4e:	2d09      	cmp	r5, #9
 800bd50:	f04f 0301 	mov.w	r3, #1
 800bd54:	6103      	str	r3, [r0, #16]
 800bd56:	dd16      	ble.n	800bd86 <__s2b+0x72>
 800bd58:	f104 0909 	add.w	r9, r4, #9
 800bd5c:	46c8      	mov	r8, r9
 800bd5e:	442c      	add	r4, r5
 800bd60:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bd64:	4601      	mov	r1, r0
 800bd66:	3b30      	subs	r3, #48	; 0x30
 800bd68:	220a      	movs	r2, #10
 800bd6a:	4630      	mov	r0, r6
 800bd6c:	f7ff ff8c 	bl	800bc88 <__multadd>
 800bd70:	45a0      	cmp	r8, r4
 800bd72:	d1f5      	bne.n	800bd60 <__s2b+0x4c>
 800bd74:	f1a5 0408 	sub.w	r4, r5, #8
 800bd78:	444c      	add	r4, r9
 800bd7a:	1b2d      	subs	r5, r5, r4
 800bd7c:	1963      	adds	r3, r4, r5
 800bd7e:	42bb      	cmp	r3, r7
 800bd80:	db04      	blt.n	800bd8c <__s2b+0x78>
 800bd82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd86:	340a      	adds	r4, #10
 800bd88:	2509      	movs	r5, #9
 800bd8a:	e7f6      	b.n	800bd7a <__s2b+0x66>
 800bd8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bd90:	4601      	mov	r1, r0
 800bd92:	3b30      	subs	r3, #48	; 0x30
 800bd94:	220a      	movs	r2, #10
 800bd96:	4630      	mov	r0, r6
 800bd98:	f7ff ff76 	bl	800bc88 <__multadd>
 800bd9c:	e7ee      	b.n	800bd7c <__s2b+0x68>
 800bd9e:	bf00      	nop
 800bda0:	0800f6e0 	.word	0x0800f6e0
 800bda4:	0800f76c 	.word	0x0800f76c

0800bda8 <__hi0bits>:
 800bda8:	0c03      	lsrs	r3, r0, #16
 800bdaa:	041b      	lsls	r3, r3, #16
 800bdac:	b9d3      	cbnz	r3, 800bde4 <__hi0bits+0x3c>
 800bdae:	0400      	lsls	r0, r0, #16
 800bdb0:	2310      	movs	r3, #16
 800bdb2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bdb6:	bf04      	itt	eq
 800bdb8:	0200      	lsleq	r0, r0, #8
 800bdba:	3308      	addeq	r3, #8
 800bdbc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bdc0:	bf04      	itt	eq
 800bdc2:	0100      	lsleq	r0, r0, #4
 800bdc4:	3304      	addeq	r3, #4
 800bdc6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bdca:	bf04      	itt	eq
 800bdcc:	0080      	lsleq	r0, r0, #2
 800bdce:	3302      	addeq	r3, #2
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	db05      	blt.n	800bde0 <__hi0bits+0x38>
 800bdd4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bdd8:	f103 0301 	add.w	r3, r3, #1
 800bddc:	bf08      	it	eq
 800bdde:	2320      	moveq	r3, #32
 800bde0:	4618      	mov	r0, r3
 800bde2:	4770      	bx	lr
 800bde4:	2300      	movs	r3, #0
 800bde6:	e7e4      	b.n	800bdb2 <__hi0bits+0xa>

0800bde8 <__lo0bits>:
 800bde8:	6803      	ldr	r3, [r0, #0]
 800bdea:	f013 0207 	ands.w	r2, r3, #7
 800bdee:	4601      	mov	r1, r0
 800bdf0:	d00b      	beq.n	800be0a <__lo0bits+0x22>
 800bdf2:	07da      	lsls	r2, r3, #31
 800bdf4:	d423      	bmi.n	800be3e <__lo0bits+0x56>
 800bdf6:	0798      	lsls	r0, r3, #30
 800bdf8:	bf49      	itett	mi
 800bdfa:	085b      	lsrmi	r3, r3, #1
 800bdfc:	089b      	lsrpl	r3, r3, #2
 800bdfe:	2001      	movmi	r0, #1
 800be00:	600b      	strmi	r3, [r1, #0]
 800be02:	bf5c      	itt	pl
 800be04:	600b      	strpl	r3, [r1, #0]
 800be06:	2002      	movpl	r0, #2
 800be08:	4770      	bx	lr
 800be0a:	b298      	uxth	r0, r3
 800be0c:	b9a8      	cbnz	r0, 800be3a <__lo0bits+0x52>
 800be0e:	0c1b      	lsrs	r3, r3, #16
 800be10:	2010      	movs	r0, #16
 800be12:	b2da      	uxtb	r2, r3
 800be14:	b90a      	cbnz	r2, 800be1a <__lo0bits+0x32>
 800be16:	3008      	adds	r0, #8
 800be18:	0a1b      	lsrs	r3, r3, #8
 800be1a:	071a      	lsls	r2, r3, #28
 800be1c:	bf04      	itt	eq
 800be1e:	091b      	lsreq	r3, r3, #4
 800be20:	3004      	addeq	r0, #4
 800be22:	079a      	lsls	r2, r3, #30
 800be24:	bf04      	itt	eq
 800be26:	089b      	lsreq	r3, r3, #2
 800be28:	3002      	addeq	r0, #2
 800be2a:	07da      	lsls	r2, r3, #31
 800be2c:	d403      	bmi.n	800be36 <__lo0bits+0x4e>
 800be2e:	085b      	lsrs	r3, r3, #1
 800be30:	f100 0001 	add.w	r0, r0, #1
 800be34:	d005      	beq.n	800be42 <__lo0bits+0x5a>
 800be36:	600b      	str	r3, [r1, #0]
 800be38:	4770      	bx	lr
 800be3a:	4610      	mov	r0, r2
 800be3c:	e7e9      	b.n	800be12 <__lo0bits+0x2a>
 800be3e:	2000      	movs	r0, #0
 800be40:	4770      	bx	lr
 800be42:	2020      	movs	r0, #32
 800be44:	4770      	bx	lr
	...

0800be48 <__i2b>:
 800be48:	b510      	push	{r4, lr}
 800be4a:	460c      	mov	r4, r1
 800be4c:	2101      	movs	r1, #1
 800be4e:	f7ff feb9 	bl	800bbc4 <_Balloc>
 800be52:	4602      	mov	r2, r0
 800be54:	b928      	cbnz	r0, 800be62 <__i2b+0x1a>
 800be56:	4b05      	ldr	r3, [pc, #20]	; (800be6c <__i2b+0x24>)
 800be58:	4805      	ldr	r0, [pc, #20]	; (800be70 <__i2b+0x28>)
 800be5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800be5e:	f000 fe01 	bl	800ca64 <__assert_func>
 800be62:	2301      	movs	r3, #1
 800be64:	6144      	str	r4, [r0, #20]
 800be66:	6103      	str	r3, [r0, #16]
 800be68:	bd10      	pop	{r4, pc}
 800be6a:	bf00      	nop
 800be6c:	0800f6e0 	.word	0x0800f6e0
 800be70:	0800f76c 	.word	0x0800f76c

0800be74 <__multiply>:
 800be74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be78:	4691      	mov	r9, r2
 800be7a:	690a      	ldr	r2, [r1, #16]
 800be7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800be80:	429a      	cmp	r2, r3
 800be82:	bfb8      	it	lt
 800be84:	460b      	movlt	r3, r1
 800be86:	460c      	mov	r4, r1
 800be88:	bfbc      	itt	lt
 800be8a:	464c      	movlt	r4, r9
 800be8c:	4699      	movlt	r9, r3
 800be8e:	6927      	ldr	r7, [r4, #16]
 800be90:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800be94:	68a3      	ldr	r3, [r4, #8]
 800be96:	6861      	ldr	r1, [r4, #4]
 800be98:	eb07 060a 	add.w	r6, r7, sl
 800be9c:	42b3      	cmp	r3, r6
 800be9e:	b085      	sub	sp, #20
 800bea0:	bfb8      	it	lt
 800bea2:	3101      	addlt	r1, #1
 800bea4:	f7ff fe8e 	bl	800bbc4 <_Balloc>
 800bea8:	b930      	cbnz	r0, 800beb8 <__multiply+0x44>
 800beaa:	4602      	mov	r2, r0
 800beac:	4b44      	ldr	r3, [pc, #272]	; (800bfc0 <__multiply+0x14c>)
 800beae:	4845      	ldr	r0, [pc, #276]	; (800bfc4 <__multiply+0x150>)
 800beb0:	f240 115d 	movw	r1, #349	; 0x15d
 800beb4:	f000 fdd6 	bl	800ca64 <__assert_func>
 800beb8:	f100 0514 	add.w	r5, r0, #20
 800bebc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bec0:	462b      	mov	r3, r5
 800bec2:	2200      	movs	r2, #0
 800bec4:	4543      	cmp	r3, r8
 800bec6:	d321      	bcc.n	800bf0c <__multiply+0x98>
 800bec8:	f104 0314 	add.w	r3, r4, #20
 800becc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bed0:	f109 0314 	add.w	r3, r9, #20
 800bed4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bed8:	9202      	str	r2, [sp, #8]
 800beda:	1b3a      	subs	r2, r7, r4
 800bedc:	3a15      	subs	r2, #21
 800bede:	f022 0203 	bic.w	r2, r2, #3
 800bee2:	3204      	adds	r2, #4
 800bee4:	f104 0115 	add.w	r1, r4, #21
 800bee8:	428f      	cmp	r7, r1
 800beea:	bf38      	it	cc
 800beec:	2204      	movcc	r2, #4
 800beee:	9201      	str	r2, [sp, #4]
 800bef0:	9a02      	ldr	r2, [sp, #8]
 800bef2:	9303      	str	r3, [sp, #12]
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d80c      	bhi.n	800bf12 <__multiply+0x9e>
 800bef8:	2e00      	cmp	r6, #0
 800befa:	dd03      	ble.n	800bf04 <__multiply+0x90>
 800befc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d05a      	beq.n	800bfba <__multiply+0x146>
 800bf04:	6106      	str	r6, [r0, #16]
 800bf06:	b005      	add	sp, #20
 800bf08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf0c:	f843 2b04 	str.w	r2, [r3], #4
 800bf10:	e7d8      	b.n	800bec4 <__multiply+0x50>
 800bf12:	f8b3 a000 	ldrh.w	sl, [r3]
 800bf16:	f1ba 0f00 	cmp.w	sl, #0
 800bf1a:	d024      	beq.n	800bf66 <__multiply+0xf2>
 800bf1c:	f104 0e14 	add.w	lr, r4, #20
 800bf20:	46a9      	mov	r9, r5
 800bf22:	f04f 0c00 	mov.w	ip, #0
 800bf26:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bf2a:	f8d9 1000 	ldr.w	r1, [r9]
 800bf2e:	fa1f fb82 	uxth.w	fp, r2
 800bf32:	b289      	uxth	r1, r1
 800bf34:	fb0a 110b 	mla	r1, sl, fp, r1
 800bf38:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bf3c:	f8d9 2000 	ldr.w	r2, [r9]
 800bf40:	4461      	add	r1, ip
 800bf42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bf46:	fb0a c20b 	mla	r2, sl, fp, ip
 800bf4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bf4e:	b289      	uxth	r1, r1
 800bf50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bf54:	4577      	cmp	r7, lr
 800bf56:	f849 1b04 	str.w	r1, [r9], #4
 800bf5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bf5e:	d8e2      	bhi.n	800bf26 <__multiply+0xb2>
 800bf60:	9a01      	ldr	r2, [sp, #4]
 800bf62:	f845 c002 	str.w	ip, [r5, r2]
 800bf66:	9a03      	ldr	r2, [sp, #12]
 800bf68:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bf6c:	3304      	adds	r3, #4
 800bf6e:	f1b9 0f00 	cmp.w	r9, #0
 800bf72:	d020      	beq.n	800bfb6 <__multiply+0x142>
 800bf74:	6829      	ldr	r1, [r5, #0]
 800bf76:	f104 0c14 	add.w	ip, r4, #20
 800bf7a:	46ae      	mov	lr, r5
 800bf7c:	f04f 0a00 	mov.w	sl, #0
 800bf80:	f8bc b000 	ldrh.w	fp, [ip]
 800bf84:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bf88:	fb09 220b 	mla	r2, r9, fp, r2
 800bf8c:	4492      	add	sl, r2
 800bf8e:	b289      	uxth	r1, r1
 800bf90:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bf94:	f84e 1b04 	str.w	r1, [lr], #4
 800bf98:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bf9c:	f8be 1000 	ldrh.w	r1, [lr]
 800bfa0:	0c12      	lsrs	r2, r2, #16
 800bfa2:	fb09 1102 	mla	r1, r9, r2, r1
 800bfa6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bfaa:	4567      	cmp	r7, ip
 800bfac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bfb0:	d8e6      	bhi.n	800bf80 <__multiply+0x10c>
 800bfb2:	9a01      	ldr	r2, [sp, #4]
 800bfb4:	50a9      	str	r1, [r5, r2]
 800bfb6:	3504      	adds	r5, #4
 800bfb8:	e79a      	b.n	800bef0 <__multiply+0x7c>
 800bfba:	3e01      	subs	r6, #1
 800bfbc:	e79c      	b.n	800bef8 <__multiply+0x84>
 800bfbe:	bf00      	nop
 800bfc0:	0800f6e0 	.word	0x0800f6e0
 800bfc4:	0800f76c 	.word	0x0800f76c

0800bfc8 <__pow5mult>:
 800bfc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfcc:	4615      	mov	r5, r2
 800bfce:	f012 0203 	ands.w	r2, r2, #3
 800bfd2:	4606      	mov	r6, r0
 800bfd4:	460f      	mov	r7, r1
 800bfd6:	d007      	beq.n	800bfe8 <__pow5mult+0x20>
 800bfd8:	4c25      	ldr	r4, [pc, #148]	; (800c070 <__pow5mult+0xa8>)
 800bfda:	3a01      	subs	r2, #1
 800bfdc:	2300      	movs	r3, #0
 800bfde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bfe2:	f7ff fe51 	bl	800bc88 <__multadd>
 800bfe6:	4607      	mov	r7, r0
 800bfe8:	10ad      	asrs	r5, r5, #2
 800bfea:	d03d      	beq.n	800c068 <__pow5mult+0xa0>
 800bfec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bfee:	b97c      	cbnz	r4, 800c010 <__pow5mult+0x48>
 800bff0:	2010      	movs	r0, #16
 800bff2:	f7ff fdbf 	bl	800bb74 <malloc>
 800bff6:	4602      	mov	r2, r0
 800bff8:	6270      	str	r0, [r6, #36]	; 0x24
 800bffa:	b928      	cbnz	r0, 800c008 <__pow5mult+0x40>
 800bffc:	4b1d      	ldr	r3, [pc, #116]	; (800c074 <__pow5mult+0xac>)
 800bffe:	481e      	ldr	r0, [pc, #120]	; (800c078 <__pow5mult+0xb0>)
 800c000:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c004:	f000 fd2e 	bl	800ca64 <__assert_func>
 800c008:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c00c:	6004      	str	r4, [r0, #0]
 800c00e:	60c4      	str	r4, [r0, #12]
 800c010:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c014:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c018:	b94c      	cbnz	r4, 800c02e <__pow5mult+0x66>
 800c01a:	f240 2171 	movw	r1, #625	; 0x271
 800c01e:	4630      	mov	r0, r6
 800c020:	f7ff ff12 	bl	800be48 <__i2b>
 800c024:	2300      	movs	r3, #0
 800c026:	f8c8 0008 	str.w	r0, [r8, #8]
 800c02a:	4604      	mov	r4, r0
 800c02c:	6003      	str	r3, [r0, #0]
 800c02e:	f04f 0900 	mov.w	r9, #0
 800c032:	07eb      	lsls	r3, r5, #31
 800c034:	d50a      	bpl.n	800c04c <__pow5mult+0x84>
 800c036:	4639      	mov	r1, r7
 800c038:	4622      	mov	r2, r4
 800c03a:	4630      	mov	r0, r6
 800c03c:	f7ff ff1a 	bl	800be74 <__multiply>
 800c040:	4639      	mov	r1, r7
 800c042:	4680      	mov	r8, r0
 800c044:	4630      	mov	r0, r6
 800c046:	f7ff fdfd 	bl	800bc44 <_Bfree>
 800c04a:	4647      	mov	r7, r8
 800c04c:	106d      	asrs	r5, r5, #1
 800c04e:	d00b      	beq.n	800c068 <__pow5mult+0xa0>
 800c050:	6820      	ldr	r0, [r4, #0]
 800c052:	b938      	cbnz	r0, 800c064 <__pow5mult+0x9c>
 800c054:	4622      	mov	r2, r4
 800c056:	4621      	mov	r1, r4
 800c058:	4630      	mov	r0, r6
 800c05a:	f7ff ff0b 	bl	800be74 <__multiply>
 800c05e:	6020      	str	r0, [r4, #0]
 800c060:	f8c0 9000 	str.w	r9, [r0]
 800c064:	4604      	mov	r4, r0
 800c066:	e7e4      	b.n	800c032 <__pow5mult+0x6a>
 800c068:	4638      	mov	r0, r7
 800c06a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c06e:	bf00      	nop
 800c070:	0800f8b8 	.word	0x0800f8b8
 800c074:	0800f66e 	.word	0x0800f66e
 800c078:	0800f76c 	.word	0x0800f76c

0800c07c <__lshift>:
 800c07c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c080:	460c      	mov	r4, r1
 800c082:	6849      	ldr	r1, [r1, #4]
 800c084:	6923      	ldr	r3, [r4, #16]
 800c086:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c08a:	68a3      	ldr	r3, [r4, #8]
 800c08c:	4607      	mov	r7, r0
 800c08e:	4691      	mov	r9, r2
 800c090:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c094:	f108 0601 	add.w	r6, r8, #1
 800c098:	42b3      	cmp	r3, r6
 800c09a:	db0b      	blt.n	800c0b4 <__lshift+0x38>
 800c09c:	4638      	mov	r0, r7
 800c09e:	f7ff fd91 	bl	800bbc4 <_Balloc>
 800c0a2:	4605      	mov	r5, r0
 800c0a4:	b948      	cbnz	r0, 800c0ba <__lshift+0x3e>
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	4b2a      	ldr	r3, [pc, #168]	; (800c154 <__lshift+0xd8>)
 800c0aa:	482b      	ldr	r0, [pc, #172]	; (800c158 <__lshift+0xdc>)
 800c0ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c0b0:	f000 fcd8 	bl	800ca64 <__assert_func>
 800c0b4:	3101      	adds	r1, #1
 800c0b6:	005b      	lsls	r3, r3, #1
 800c0b8:	e7ee      	b.n	800c098 <__lshift+0x1c>
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	f100 0114 	add.w	r1, r0, #20
 800c0c0:	f100 0210 	add.w	r2, r0, #16
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	4553      	cmp	r3, sl
 800c0c8:	db37      	blt.n	800c13a <__lshift+0xbe>
 800c0ca:	6920      	ldr	r0, [r4, #16]
 800c0cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c0d0:	f104 0314 	add.w	r3, r4, #20
 800c0d4:	f019 091f 	ands.w	r9, r9, #31
 800c0d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c0dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c0e0:	d02f      	beq.n	800c142 <__lshift+0xc6>
 800c0e2:	f1c9 0e20 	rsb	lr, r9, #32
 800c0e6:	468a      	mov	sl, r1
 800c0e8:	f04f 0c00 	mov.w	ip, #0
 800c0ec:	681a      	ldr	r2, [r3, #0]
 800c0ee:	fa02 f209 	lsl.w	r2, r2, r9
 800c0f2:	ea42 020c 	orr.w	r2, r2, ip
 800c0f6:	f84a 2b04 	str.w	r2, [sl], #4
 800c0fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0fe:	4298      	cmp	r0, r3
 800c100:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c104:	d8f2      	bhi.n	800c0ec <__lshift+0x70>
 800c106:	1b03      	subs	r3, r0, r4
 800c108:	3b15      	subs	r3, #21
 800c10a:	f023 0303 	bic.w	r3, r3, #3
 800c10e:	3304      	adds	r3, #4
 800c110:	f104 0215 	add.w	r2, r4, #21
 800c114:	4290      	cmp	r0, r2
 800c116:	bf38      	it	cc
 800c118:	2304      	movcc	r3, #4
 800c11a:	f841 c003 	str.w	ip, [r1, r3]
 800c11e:	f1bc 0f00 	cmp.w	ip, #0
 800c122:	d001      	beq.n	800c128 <__lshift+0xac>
 800c124:	f108 0602 	add.w	r6, r8, #2
 800c128:	3e01      	subs	r6, #1
 800c12a:	4638      	mov	r0, r7
 800c12c:	612e      	str	r6, [r5, #16]
 800c12e:	4621      	mov	r1, r4
 800c130:	f7ff fd88 	bl	800bc44 <_Bfree>
 800c134:	4628      	mov	r0, r5
 800c136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c13a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c13e:	3301      	adds	r3, #1
 800c140:	e7c1      	b.n	800c0c6 <__lshift+0x4a>
 800c142:	3904      	subs	r1, #4
 800c144:	f853 2b04 	ldr.w	r2, [r3], #4
 800c148:	f841 2f04 	str.w	r2, [r1, #4]!
 800c14c:	4298      	cmp	r0, r3
 800c14e:	d8f9      	bhi.n	800c144 <__lshift+0xc8>
 800c150:	e7ea      	b.n	800c128 <__lshift+0xac>
 800c152:	bf00      	nop
 800c154:	0800f6e0 	.word	0x0800f6e0
 800c158:	0800f76c 	.word	0x0800f76c

0800c15c <__mcmp>:
 800c15c:	b530      	push	{r4, r5, lr}
 800c15e:	6902      	ldr	r2, [r0, #16]
 800c160:	690c      	ldr	r4, [r1, #16]
 800c162:	1b12      	subs	r2, r2, r4
 800c164:	d10e      	bne.n	800c184 <__mcmp+0x28>
 800c166:	f100 0314 	add.w	r3, r0, #20
 800c16a:	3114      	adds	r1, #20
 800c16c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c170:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c174:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c178:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c17c:	42a5      	cmp	r5, r4
 800c17e:	d003      	beq.n	800c188 <__mcmp+0x2c>
 800c180:	d305      	bcc.n	800c18e <__mcmp+0x32>
 800c182:	2201      	movs	r2, #1
 800c184:	4610      	mov	r0, r2
 800c186:	bd30      	pop	{r4, r5, pc}
 800c188:	4283      	cmp	r3, r0
 800c18a:	d3f3      	bcc.n	800c174 <__mcmp+0x18>
 800c18c:	e7fa      	b.n	800c184 <__mcmp+0x28>
 800c18e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c192:	e7f7      	b.n	800c184 <__mcmp+0x28>

0800c194 <__mdiff>:
 800c194:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c198:	460c      	mov	r4, r1
 800c19a:	4606      	mov	r6, r0
 800c19c:	4611      	mov	r1, r2
 800c19e:	4620      	mov	r0, r4
 800c1a0:	4690      	mov	r8, r2
 800c1a2:	f7ff ffdb 	bl	800c15c <__mcmp>
 800c1a6:	1e05      	subs	r5, r0, #0
 800c1a8:	d110      	bne.n	800c1cc <__mdiff+0x38>
 800c1aa:	4629      	mov	r1, r5
 800c1ac:	4630      	mov	r0, r6
 800c1ae:	f7ff fd09 	bl	800bbc4 <_Balloc>
 800c1b2:	b930      	cbnz	r0, 800c1c2 <__mdiff+0x2e>
 800c1b4:	4b3a      	ldr	r3, [pc, #232]	; (800c2a0 <__mdiff+0x10c>)
 800c1b6:	4602      	mov	r2, r0
 800c1b8:	f240 2132 	movw	r1, #562	; 0x232
 800c1bc:	4839      	ldr	r0, [pc, #228]	; (800c2a4 <__mdiff+0x110>)
 800c1be:	f000 fc51 	bl	800ca64 <__assert_func>
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c1c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1cc:	bfa4      	itt	ge
 800c1ce:	4643      	movge	r3, r8
 800c1d0:	46a0      	movge	r8, r4
 800c1d2:	4630      	mov	r0, r6
 800c1d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c1d8:	bfa6      	itte	ge
 800c1da:	461c      	movge	r4, r3
 800c1dc:	2500      	movge	r5, #0
 800c1de:	2501      	movlt	r5, #1
 800c1e0:	f7ff fcf0 	bl	800bbc4 <_Balloc>
 800c1e4:	b920      	cbnz	r0, 800c1f0 <__mdiff+0x5c>
 800c1e6:	4b2e      	ldr	r3, [pc, #184]	; (800c2a0 <__mdiff+0x10c>)
 800c1e8:	4602      	mov	r2, r0
 800c1ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c1ee:	e7e5      	b.n	800c1bc <__mdiff+0x28>
 800c1f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c1f4:	6926      	ldr	r6, [r4, #16]
 800c1f6:	60c5      	str	r5, [r0, #12]
 800c1f8:	f104 0914 	add.w	r9, r4, #20
 800c1fc:	f108 0514 	add.w	r5, r8, #20
 800c200:	f100 0e14 	add.w	lr, r0, #20
 800c204:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c208:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c20c:	f108 0210 	add.w	r2, r8, #16
 800c210:	46f2      	mov	sl, lr
 800c212:	2100      	movs	r1, #0
 800c214:	f859 3b04 	ldr.w	r3, [r9], #4
 800c218:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c21c:	fa1f f883 	uxth.w	r8, r3
 800c220:	fa11 f18b 	uxtah	r1, r1, fp
 800c224:	0c1b      	lsrs	r3, r3, #16
 800c226:	eba1 0808 	sub.w	r8, r1, r8
 800c22a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c22e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c232:	fa1f f888 	uxth.w	r8, r8
 800c236:	1419      	asrs	r1, r3, #16
 800c238:	454e      	cmp	r6, r9
 800c23a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c23e:	f84a 3b04 	str.w	r3, [sl], #4
 800c242:	d8e7      	bhi.n	800c214 <__mdiff+0x80>
 800c244:	1b33      	subs	r3, r6, r4
 800c246:	3b15      	subs	r3, #21
 800c248:	f023 0303 	bic.w	r3, r3, #3
 800c24c:	3304      	adds	r3, #4
 800c24e:	3415      	adds	r4, #21
 800c250:	42a6      	cmp	r6, r4
 800c252:	bf38      	it	cc
 800c254:	2304      	movcc	r3, #4
 800c256:	441d      	add	r5, r3
 800c258:	4473      	add	r3, lr
 800c25a:	469e      	mov	lr, r3
 800c25c:	462e      	mov	r6, r5
 800c25e:	4566      	cmp	r6, ip
 800c260:	d30e      	bcc.n	800c280 <__mdiff+0xec>
 800c262:	f10c 0203 	add.w	r2, ip, #3
 800c266:	1b52      	subs	r2, r2, r5
 800c268:	f022 0203 	bic.w	r2, r2, #3
 800c26c:	3d03      	subs	r5, #3
 800c26e:	45ac      	cmp	ip, r5
 800c270:	bf38      	it	cc
 800c272:	2200      	movcc	r2, #0
 800c274:	441a      	add	r2, r3
 800c276:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c27a:	b17b      	cbz	r3, 800c29c <__mdiff+0x108>
 800c27c:	6107      	str	r7, [r0, #16]
 800c27e:	e7a3      	b.n	800c1c8 <__mdiff+0x34>
 800c280:	f856 8b04 	ldr.w	r8, [r6], #4
 800c284:	fa11 f288 	uxtah	r2, r1, r8
 800c288:	1414      	asrs	r4, r2, #16
 800c28a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c28e:	b292      	uxth	r2, r2
 800c290:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c294:	f84e 2b04 	str.w	r2, [lr], #4
 800c298:	1421      	asrs	r1, r4, #16
 800c29a:	e7e0      	b.n	800c25e <__mdiff+0xca>
 800c29c:	3f01      	subs	r7, #1
 800c29e:	e7ea      	b.n	800c276 <__mdiff+0xe2>
 800c2a0:	0800f6e0 	.word	0x0800f6e0
 800c2a4:	0800f76c 	.word	0x0800f76c

0800c2a8 <__ulp>:
 800c2a8:	b082      	sub	sp, #8
 800c2aa:	ed8d 0b00 	vstr	d0, [sp]
 800c2ae:	9b01      	ldr	r3, [sp, #4]
 800c2b0:	4912      	ldr	r1, [pc, #72]	; (800c2fc <__ulp+0x54>)
 800c2b2:	4019      	ands	r1, r3
 800c2b4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c2b8:	2900      	cmp	r1, #0
 800c2ba:	dd05      	ble.n	800c2c8 <__ulp+0x20>
 800c2bc:	2200      	movs	r2, #0
 800c2be:	460b      	mov	r3, r1
 800c2c0:	ec43 2b10 	vmov	d0, r2, r3
 800c2c4:	b002      	add	sp, #8
 800c2c6:	4770      	bx	lr
 800c2c8:	4249      	negs	r1, r1
 800c2ca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c2ce:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c2d2:	f04f 0200 	mov.w	r2, #0
 800c2d6:	f04f 0300 	mov.w	r3, #0
 800c2da:	da04      	bge.n	800c2e6 <__ulp+0x3e>
 800c2dc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c2e0:	fa41 f300 	asr.w	r3, r1, r0
 800c2e4:	e7ec      	b.n	800c2c0 <__ulp+0x18>
 800c2e6:	f1a0 0114 	sub.w	r1, r0, #20
 800c2ea:	291e      	cmp	r1, #30
 800c2ec:	bfda      	itte	le
 800c2ee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c2f2:	fa20 f101 	lsrle.w	r1, r0, r1
 800c2f6:	2101      	movgt	r1, #1
 800c2f8:	460a      	mov	r2, r1
 800c2fa:	e7e1      	b.n	800c2c0 <__ulp+0x18>
 800c2fc:	7ff00000 	.word	0x7ff00000

0800c300 <__b2d>:
 800c300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c302:	6905      	ldr	r5, [r0, #16]
 800c304:	f100 0714 	add.w	r7, r0, #20
 800c308:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c30c:	1f2e      	subs	r6, r5, #4
 800c30e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c312:	4620      	mov	r0, r4
 800c314:	f7ff fd48 	bl	800bda8 <__hi0bits>
 800c318:	f1c0 0320 	rsb	r3, r0, #32
 800c31c:	280a      	cmp	r0, #10
 800c31e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c39c <__b2d+0x9c>
 800c322:	600b      	str	r3, [r1, #0]
 800c324:	dc14      	bgt.n	800c350 <__b2d+0x50>
 800c326:	f1c0 0e0b 	rsb	lr, r0, #11
 800c32a:	fa24 f10e 	lsr.w	r1, r4, lr
 800c32e:	42b7      	cmp	r7, r6
 800c330:	ea41 030c 	orr.w	r3, r1, ip
 800c334:	bf34      	ite	cc
 800c336:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c33a:	2100      	movcs	r1, #0
 800c33c:	3015      	adds	r0, #21
 800c33e:	fa04 f000 	lsl.w	r0, r4, r0
 800c342:	fa21 f10e 	lsr.w	r1, r1, lr
 800c346:	ea40 0201 	orr.w	r2, r0, r1
 800c34a:	ec43 2b10 	vmov	d0, r2, r3
 800c34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c350:	42b7      	cmp	r7, r6
 800c352:	bf3a      	itte	cc
 800c354:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c358:	f1a5 0608 	subcc.w	r6, r5, #8
 800c35c:	2100      	movcs	r1, #0
 800c35e:	380b      	subs	r0, #11
 800c360:	d017      	beq.n	800c392 <__b2d+0x92>
 800c362:	f1c0 0c20 	rsb	ip, r0, #32
 800c366:	fa04 f500 	lsl.w	r5, r4, r0
 800c36a:	42be      	cmp	r6, r7
 800c36c:	fa21 f40c 	lsr.w	r4, r1, ip
 800c370:	ea45 0504 	orr.w	r5, r5, r4
 800c374:	bf8c      	ite	hi
 800c376:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c37a:	2400      	movls	r4, #0
 800c37c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c380:	fa01 f000 	lsl.w	r0, r1, r0
 800c384:	fa24 f40c 	lsr.w	r4, r4, ip
 800c388:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c38c:	ea40 0204 	orr.w	r2, r0, r4
 800c390:	e7db      	b.n	800c34a <__b2d+0x4a>
 800c392:	ea44 030c 	orr.w	r3, r4, ip
 800c396:	460a      	mov	r2, r1
 800c398:	e7d7      	b.n	800c34a <__b2d+0x4a>
 800c39a:	bf00      	nop
 800c39c:	3ff00000 	.word	0x3ff00000

0800c3a0 <__d2b>:
 800c3a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c3a4:	4689      	mov	r9, r1
 800c3a6:	2101      	movs	r1, #1
 800c3a8:	ec57 6b10 	vmov	r6, r7, d0
 800c3ac:	4690      	mov	r8, r2
 800c3ae:	f7ff fc09 	bl	800bbc4 <_Balloc>
 800c3b2:	4604      	mov	r4, r0
 800c3b4:	b930      	cbnz	r0, 800c3c4 <__d2b+0x24>
 800c3b6:	4602      	mov	r2, r0
 800c3b8:	4b25      	ldr	r3, [pc, #148]	; (800c450 <__d2b+0xb0>)
 800c3ba:	4826      	ldr	r0, [pc, #152]	; (800c454 <__d2b+0xb4>)
 800c3bc:	f240 310a 	movw	r1, #778	; 0x30a
 800c3c0:	f000 fb50 	bl	800ca64 <__assert_func>
 800c3c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c3c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c3cc:	bb35      	cbnz	r5, 800c41c <__d2b+0x7c>
 800c3ce:	2e00      	cmp	r6, #0
 800c3d0:	9301      	str	r3, [sp, #4]
 800c3d2:	d028      	beq.n	800c426 <__d2b+0x86>
 800c3d4:	4668      	mov	r0, sp
 800c3d6:	9600      	str	r6, [sp, #0]
 800c3d8:	f7ff fd06 	bl	800bde8 <__lo0bits>
 800c3dc:	9900      	ldr	r1, [sp, #0]
 800c3de:	b300      	cbz	r0, 800c422 <__d2b+0x82>
 800c3e0:	9a01      	ldr	r2, [sp, #4]
 800c3e2:	f1c0 0320 	rsb	r3, r0, #32
 800c3e6:	fa02 f303 	lsl.w	r3, r2, r3
 800c3ea:	430b      	orrs	r3, r1
 800c3ec:	40c2      	lsrs	r2, r0
 800c3ee:	6163      	str	r3, [r4, #20]
 800c3f0:	9201      	str	r2, [sp, #4]
 800c3f2:	9b01      	ldr	r3, [sp, #4]
 800c3f4:	61a3      	str	r3, [r4, #24]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	bf14      	ite	ne
 800c3fa:	2202      	movne	r2, #2
 800c3fc:	2201      	moveq	r2, #1
 800c3fe:	6122      	str	r2, [r4, #16]
 800c400:	b1d5      	cbz	r5, 800c438 <__d2b+0x98>
 800c402:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c406:	4405      	add	r5, r0
 800c408:	f8c9 5000 	str.w	r5, [r9]
 800c40c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c410:	f8c8 0000 	str.w	r0, [r8]
 800c414:	4620      	mov	r0, r4
 800c416:	b003      	add	sp, #12
 800c418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c41c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c420:	e7d5      	b.n	800c3ce <__d2b+0x2e>
 800c422:	6161      	str	r1, [r4, #20]
 800c424:	e7e5      	b.n	800c3f2 <__d2b+0x52>
 800c426:	a801      	add	r0, sp, #4
 800c428:	f7ff fcde 	bl	800bde8 <__lo0bits>
 800c42c:	9b01      	ldr	r3, [sp, #4]
 800c42e:	6163      	str	r3, [r4, #20]
 800c430:	2201      	movs	r2, #1
 800c432:	6122      	str	r2, [r4, #16]
 800c434:	3020      	adds	r0, #32
 800c436:	e7e3      	b.n	800c400 <__d2b+0x60>
 800c438:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c43c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c440:	f8c9 0000 	str.w	r0, [r9]
 800c444:	6918      	ldr	r0, [r3, #16]
 800c446:	f7ff fcaf 	bl	800bda8 <__hi0bits>
 800c44a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c44e:	e7df      	b.n	800c410 <__d2b+0x70>
 800c450:	0800f6e0 	.word	0x0800f6e0
 800c454:	0800f76c 	.word	0x0800f76c

0800c458 <__ratio>:
 800c458:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c45c:	4688      	mov	r8, r1
 800c45e:	4669      	mov	r1, sp
 800c460:	4681      	mov	r9, r0
 800c462:	f7ff ff4d 	bl	800c300 <__b2d>
 800c466:	a901      	add	r1, sp, #4
 800c468:	4640      	mov	r0, r8
 800c46a:	ec55 4b10 	vmov	r4, r5, d0
 800c46e:	f7ff ff47 	bl	800c300 <__b2d>
 800c472:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c476:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c47a:	eba3 0c02 	sub.w	ip, r3, r2
 800c47e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c482:	1a9b      	subs	r3, r3, r2
 800c484:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c488:	ec51 0b10 	vmov	r0, r1, d0
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	bfd6      	itet	le
 800c490:	460a      	movle	r2, r1
 800c492:	462a      	movgt	r2, r5
 800c494:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c498:	468b      	mov	fp, r1
 800c49a:	462f      	mov	r7, r5
 800c49c:	bfd4      	ite	le
 800c49e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c4a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c4a6:	4620      	mov	r0, r4
 800c4a8:	ee10 2a10 	vmov	r2, s0
 800c4ac:	465b      	mov	r3, fp
 800c4ae:	4639      	mov	r1, r7
 800c4b0:	f7f4 f9cc 	bl	800084c <__aeabi_ddiv>
 800c4b4:	ec41 0b10 	vmov	d0, r0, r1
 800c4b8:	b003      	add	sp, #12
 800c4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c4be <__copybits>:
 800c4be:	3901      	subs	r1, #1
 800c4c0:	b570      	push	{r4, r5, r6, lr}
 800c4c2:	1149      	asrs	r1, r1, #5
 800c4c4:	6914      	ldr	r4, [r2, #16]
 800c4c6:	3101      	adds	r1, #1
 800c4c8:	f102 0314 	add.w	r3, r2, #20
 800c4cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c4d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c4d4:	1f05      	subs	r5, r0, #4
 800c4d6:	42a3      	cmp	r3, r4
 800c4d8:	d30c      	bcc.n	800c4f4 <__copybits+0x36>
 800c4da:	1aa3      	subs	r3, r4, r2
 800c4dc:	3b11      	subs	r3, #17
 800c4de:	f023 0303 	bic.w	r3, r3, #3
 800c4e2:	3211      	adds	r2, #17
 800c4e4:	42a2      	cmp	r2, r4
 800c4e6:	bf88      	it	hi
 800c4e8:	2300      	movhi	r3, #0
 800c4ea:	4418      	add	r0, r3
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	4288      	cmp	r0, r1
 800c4f0:	d305      	bcc.n	800c4fe <__copybits+0x40>
 800c4f2:	bd70      	pop	{r4, r5, r6, pc}
 800c4f4:	f853 6b04 	ldr.w	r6, [r3], #4
 800c4f8:	f845 6f04 	str.w	r6, [r5, #4]!
 800c4fc:	e7eb      	b.n	800c4d6 <__copybits+0x18>
 800c4fe:	f840 3b04 	str.w	r3, [r0], #4
 800c502:	e7f4      	b.n	800c4ee <__copybits+0x30>

0800c504 <__any_on>:
 800c504:	f100 0214 	add.w	r2, r0, #20
 800c508:	6900      	ldr	r0, [r0, #16]
 800c50a:	114b      	asrs	r3, r1, #5
 800c50c:	4298      	cmp	r0, r3
 800c50e:	b510      	push	{r4, lr}
 800c510:	db11      	blt.n	800c536 <__any_on+0x32>
 800c512:	dd0a      	ble.n	800c52a <__any_on+0x26>
 800c514:	f011 011f 	ands.w	r1, r1, #31
 800c518:	d007      	beq.n	800c52a <__any_on+0x26>
 800c51a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c51e:	fa24 f001 	lsr.w	r0, r4, r1
 800c522:	fa00 f101 	lsl.w	r1, r0, r1
 800c526:	428c      	cmp	r4, r1
 800c528:	d10b      	bne.n	800c542 <__any_on+0x3e>
 800c52a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c52e:	4293      	cmp	r3, r2
 800c530:	d803      	bhi.n	800c53a <__any_on+0x36>
 800c532:	2000      	movs	r0, #0
 800c534:	bd10      	pop	{r4, pc}
 800c536:	4603      	mov	r3, r0
 800c538:	e7f7      	b.n	800c52a <__any_on+0x26>
 800c53a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c53e:	2900      	cmp	r1, #0
 800c540:	d0f5      	beq.n	800c52e <__any_on+0x2a>
 800c542:	2001      	movs	r0, #1
 800c544:	e7f6      	b.n	800c534 <__any_on+0x30>

0800c546 <_calloc_r>:
 800c546:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c548:	fba1 2402 	umull	r2, r4, r1, r2
 800c54c:	b94c      	cbnz	r4, 800c562 <_calloc_r+0x1c>
 800c54e:	4611      	mov	r1, r2
 800c550:	9201      	str	r2, [sp, #4]
 800c552:	f000 f87b 	bl	800c64c <_malloc_r>
 800c556:	9a01      	ldr	r2, [sp, #4]
 800c558:	4605      	mov	r5, r0
 800c55a:	b930      	cbnz	r0, 800c56a <_calloc_r+0x24>
 800c55c:	4628      	mov	r0, r5
 800c55e:	b003      	add	sp, #12
 800c560:	bd30      	pop	{r4, r5, pc}
 800c562:	220c      	movs	r2, #12
 800c564:	6002      	str	r2, [r0, #0]
 800c566:	2500      	movs	r5, #0
 800c568:	e7f8      	b.n	800c55c <_calloc_r+0x16>
 800c56a:	4621      	mov	r1, r4
 800c56c:	f7fc fbbe 	bl	8008cec <memset>
 800c570:	e7f4      	b.n	800c55c <_calloc_r+0x16>
	...

0800c574 <_free_r>:
 800c574:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c576:	2900      	cmp	r1, #0
 800c578:	d044      	beq.n	800c604 <_free_r+0x90>
 800c57a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c57e:	9001      	str	r0, [sp, #4]
 800c580:	2b00      	cmp	r3, #0
 800c582:	f1a1 0404 	sub.w	r4, r1, #4
 800c586:	bfb8      	it	lt
 800c588:	18e4      	addlt	r4, r4, r3
 800c58a:	f000 fab5 	bl	800caf8 <__malloc_lock>
 800c58e:	4a1e      	ldr	r2, [pc, #120]	; (800c608 <_free_r+0x94>)
 800c590:	9801      	ldr	r0, [sp, #4]
 800c592:	6813      	ldr	r3, [r2, #0]
 800c594:	b933      	cbnz	r3, 800c5a4 <_free_r+0x30>
 800c596:	6063      	str	r3, [r4, #4]
 800c598:	6014      	str	r4, [r2, #0]
 800c59a:	b003      	add	sp, #12
 800c59c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c5a0:	f000 bab0 	b.w	800cb04 <__malloc_unlock>
 800c5a4:	42a3      	cmp	r3, r4
 800c5a6:	d908      	bls.n	800c5ba <_free_r+0x46>
 800c5a8:	6825      	ldr	r5, [r4, #0]
 800c5aa:	1961      	adds	r1, r4, r5
 800c5ac:	428b      	cmp	r3, r1
 800c5ae:	bf01      	itttt	eq
 800c5b0:	6819      	ldreq	r1, [r3, #0]
 800c5b2:	685b      	ldreq	r3, [r3, #4]
 800c5b4:	1949      	addeq	r1, r1, r5
 800c5b6:	6021      	streq	r1, [r4, #0]
 800c5b8:	e7ed      	b.n	800c596 <_free_r+0x22>
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	685b      	ldr	r3, [r3, #4]
 800c5be:	b10b      	cbz	r3, 800c5c4 <_free_r+0x50>
 800c5c0:	42a3      	cmp	r3, r4
 800c5c2:	d9fa      	bls.n	800c5ba <_free_r+0x46>
 800c5c4:	6811      	ldr	r1, [r2, #0]
 800c5c6:	1855      	adds	r5, r2, r1
 800c5c8:	42a5      	cmp	r5, r4
 800c5ca:	d10b      	bne.n	800c5e4 <_free_r+0x70>
 800c5cc:	6824      	ldr	r4, [r4, #0]
 800c5ce:	4421      	add	r1, r4
 800c5d0:	1854      	adds	r4, r2, r1
 800c5d2:	42a3      	cmp	r3, r4
 800c5d4:	6011      	str	r1, [r2, #0]
 800c5d6:	d1e0      	bne.n	800c59a <_free_r+0x26>
 800c5d8:	681c      	ldr	r4, [r3, #0]
 800c5da:	685b      	ldr	r3, [r3, #4]
 800c5dc:	6053      	str	r3, [r2, #4]
 800c5de:	4421      	add	r1, r4
 800c5e0:	6011      	str	r1, [r2, #0]
 800c5e2:	e7da      	b.n	800c59a <_free_r+0x26>
 800c5e4:	d902      	bls.n	800c5ec <_free_r+0x78>
 800c5e6:	230c      	movs	r3, #12
 800c5e8:	6003      	str	r3, [r0, #0]
 800c5ea:	e7d6      	b.n	800c59a <_free_r+0x26>
 800c5ec:	6825      	ldr	r5, [r4, #0]
 800c5ee:	1961      	adds	r1, r4, r5
 800c5f0:	428b      	cmp	r3, r1
 800c5f2:	bf04      	itt	eq
 800c5f4:	6819      	ldreq	r1, [r3, #0]
 800c5f6:	685b      	ldreq	r3, [r3, #4]
 800c5f8:	6063      	str	r3, [r4, #4]
 800c5fa:	bf04      	itt	eq
 800c5fc:	1949      	addeq	r1, r1, r5
 800c5fe:	6021      	streq	r1, [r4, #0]
 800c600:	6054      	str	r4, [r2, #4]
 800c602:	e7ca      	b.n	800c59a <_free_r+0x26>
 800c604:	b003      	add	sp, #12
 800c606:	bd30      	pop	{r4, r5, pc}
 800c608:	20000984 	.word	0x20000984

0800c60c <sbrk_aligned>:
 800c60c:	b570      	push	{r4, r5, r6, lr}
 800c60e:	4e0e      	ldr	r6, [pc, #56]	; (800c648 <sbrk_aligned+0x3c>)
 800c610:	460c      	mov	r4, r1
 800c612:	6831      	ldr	r1, [r6, #0]
 800c614:	4605      	mov	r5, r0
 800c616:	b911      	cbnz	r1, 800c61e <sbrk_aligned+0x12>
 800c618:	f000 f9f2 	bl	800ca00 <_sbrk_r>
 800c61c:	6030      	str	r0, [r6, #0]
 800c61e:	4621      	mov	r1, r4
 800c620:	4628      	mov	r0, r5
 800c622:	f000 f9ed 	bl	800ca00 <_sbrk_r>
 800c626:	1c43      	adds	r3, r0, #1
 800c628:	d00a      	beq.n	800c640 <sbrk_aligned+0x34>
 800c62a:	1cc4      	adds	r4, r0, #3
 800c62c:	f024 0403 	bic.w	r4, r4, #3
 800c630:	42a0      	cmp	r0, r4
 800c632:	d007      	beq.n	800c644 <sbrk_aligned+0x38>
 800c634:	1a21      	subs	r1, r4, r0
 800c636:	4628      	mov	r0, r5
 800c638:	f000 f9e2 	bl	800ca00 <_sbrk_r>
 800c63c:	3001      	adds	r0, #1
 800c63e:	d101      	bne.n	800c644 <sbrk_aligned+0x38>
 800c640:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c644:	4620      	mov	r0, r4
 800c646:	bd70      	pop	{r4, r5, r6, pc}
 800c648:	20000988 	.word	0x20000988

0800c64c <_malloc_r>:
 800c64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c650:	1ccd      	adds	r5, r1, #3
 800c652:	f025 0503 	bic.w	r5, r5, #3
 800c656:	3508      	adds	r5, #8
 800c658:	2d0c      	cmp	r5, #12
 800c65a:	bf38      	it	cc
 800c65c:	250c      	movcc	r5, #12
 800c65e:	2d00      	cmp	r5, #0
 800c660:	4607      	mov	r7, r0
 800c662:	db01      	blt.n	800c668 <_malloc_r+0x1c>
 800c664:	42a9      	cmp	r1, r5
 800c666:	d905      	bls.n	800c674 <_malloc_r+0x28>
 800c668:	230c      	movs	r3, #12
 800c66a:	603b      	str	r3, [r7, #0]
 800c66c:	2600      	movs	r6, #0
 800c66e:	4630      	mov	r0, r6
 800c670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c674:	4e2e      	ldr	r6, [pc, #184]	; (800c730 <_malloc_r+0xe4>)
 800c676:	f000 fa3f 	bl	800caf8 <__malloc_lock>
 800c67a:	6833      	ldr	r3, [r6, #0]
 800c67c:	461c      	mov	r4, r3
 800c67e:	bb34      	cbnz	r4, 800c6ce <_malloc_r+0x82>
 800c680:	4629      	mov	r1, r5
 800c682:	4638      	mov	r0, r7
 800c684:	f7ff ffc2 	bl	800c60c <sbrk_aligned>
 800c688:	1c43      	adds	r3, r0, #1
 800c68a:	4604      	mov	r4, r0
 800c68c:	d14d      	bne.n	800c72a <_malloc_r+0xde>
 800c68e:	6834      	ldr	r4, [r6, #0]
 800c690:	4626      	mov	r6, r4
 800c692:	2e00      	cmp	r6, #0
 800c694:	d140      	bne.n	800c718 <_malloc_r+0xcc>
 800c696:	6823      	ldr	r3, [r4, #0]
 800c698:	4631      	mov	r1, r6
 800c69a:	4638      	mov	r0, r7
 800c69c:	eb04 0803 	add.w	r8, r4, r3
 800c6a0:	f000 f9ae 	bl	800ca00 <_sbrk_r>
 800c6a4:	4580      	cmp	r8, r0
 800c6a6:	d13a      	bne.n	800c71e <_malloc_r+0xd2>
 800c6a8:	6821      	ldr	r1, [r4, #0]
 800c6aa:	3503      	adds	r5, #3
 800c6ac:	1a6d      	subs	r5, r5, r1
 800c6ae:	f025 0503 	bic.w	r5, r5, #3
 800c6b2:	3508      	adds	r5, #8
 800c6b4:	2d0c      	cmp	r5, #12
 800c6b6:	bf38      	it	cc
 800c6b8:	250c      	movcc	r5, #12
 800c6ba:	4629      	mov	r1, r5
 800c6bc:	4638      	mov	r0, r7
 800c6be:	f7ff ffa5 	bl	800c60c <sbrk_aligned>
 800c6c2:	3001      	adds	r0, #1
 800c6c4:	d02b      	beq.n	800c71e <_malloc_r+0xd2>
 800c6c6:	6823      	ldr	r3, [r4, #0]
 800c6c8:	442b      	add	r3, r5
 800c6ca:	6023      	str	r3, [r4, #0]
 800c6cc:	e00e      	b.n	800c6ec <_malloc_r+0xa0>
 800c6ce:	6822      	ldr	r2, [r4, #0]
 800c6d0:	1b52      	subs	r2, r2, r5
 800c6d2:	d41e      	bmi.n	800c712 <_malloc_r+0xc6>
 800c6d4:	2a0b      	cmp	r2, #11
 800c6d6:	d916      	bls.n	800c706 <_malloc_r+0xba>
 800c6d8:	1961      	adds	r1, r4, r5
 800c6da:	42a3      	cmp	r3, r4
 800c6dc:	6025      	str	r5, [r4, #0]
 800c6de:	bf18      	it	ne
 800c6e0:	6059      	strne	r1, [r3, #4]
 800c6e2:	6863      	ldr	r3, [r4, #4]
 800c6e4:	bf08      	it	eq
 800c6e6:	6031      	streq	r1, [r6, #0]
 800c6e8:	5162      	str	r2, [r4, r5]
 800c6ea:	604b      	str	r3, [r1, #4]
 800c6ec:	4638      	mov	r0, r7
 800c6ee:	f104 060b 	add.w	r6, r4, #11
 800c6f2:	f000 fa07 	bl	800cb04 <__malloc_unlock>
 800c6f6:	f026 0607 	bic.w	r6, r6, #7
 800c6fa:	1d23      	adds	r3, r4, #4
 800c6fc:	1af2      	subs	r2, r6, r3
 800c6fe:	d0b6      	beq.n	800c66e <_malloc_r+0x22>
 800c700:	1b9b      	subs	r3, r3, r6
 800c702:	50a3      	str	r3, [r4, r2]
 800c704:	e7b3      	b.n	800c66e <_malloc_r+0x22>
 800c706:	6862      	ldr	r2, [r4, #4]
 800c708:	42a3      	cmp	r3, r4
 800c70a:	bf0c      	ite	eq
 800c70c:	6032      	streq	r2, [r6, #0]
 800c70e:	605a      	strne	r2, [r3, #4]
 800c710:	e7ec      	b.n	800c6ec <_malloc_r+0xa0>
 800c712:	4623      	mov	r3, r4
 800c714:	6864      	ldr	r4, [r4, #4]
 800c716:	e7b2      	b.n	800c67e <_malloc_r+0x32>
 800c718:	4634      	mov	r4, r6
 800c71a:	6876      	ldr	r6, [r6, #4]
 800c71c:	e7b9      	b.n	800c692 <_malloc_r+0x46>
 800c71e:	230c      	movs	r3, #12
 800c720:	603b      	str	r3, [r7, #0]
 800c722:	4638      	mov	r0, r7
 800c724:	f000 f9ee 	bl	800cb04 <__malloc_unlock>
 800c728:	e7a1      	b.n	800c66e <_malloc_r+0x22>
 800c72a:	6025      	str	r5, [r4, #0]
 800c72c:	e7de      	b.n	800c6ec <_malloc_r+0xa0>
 800c72e:	bf00      	nop
 800c730:	20000984 	.word	0x20000984

0800c734 <__ssputs_r>:
 800c734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c738:	688e      	ldr	r6, [r1, #8]
 800c73a:	429e      	cmp	r6, r3
 800c73c:	4682      	mov	sl, r0
 800c73e:	460c      	mov	r4, r1
 800c740:	4690      	mov	r8, r2
 800c742:	461f      	mov	r7, r3
 800c744:	d838      	bhi.n	800c7b8 <__ssputs_r+0x84>
 800c746:	898a      	ldrh	r2, [r1, #12]
 800c748:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c74c:	d032      	beq.n	800c7b4 <__ssputs_r+0x80>
 800c74e:	6825      	ldr	r5, [r4, #0]
 800c750:	6909      	ldr	r1, [r1, #16]
 800c752:	eba5 0901 	sub.w	r9, r5, r1
 800c756:	6965      	ldr	r5, [r4, #20]
 800c758:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c75c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c760:	3301      	adds	r3, #1
 800c762:	444b      	add	r3, r9
 800c764:	106d      	asrs	r5, r5, #1
 800c766:	429d      	cmp	r5, r3
 800c768:	bf38      	it	cc
 800c76a:	461d      	movcc	r5, r3
 800c76c:	0553      	lsls	r3, r2, #21
 800c76e:	d531      	bpl.n	800c7d4 <__ssputs_r+0xa0>
 800c770:	4629      	mov	r1, r5
 800c772:	f7ff ff6b 	bl	800c64c <_malloc_r>
 800c776:	4606      	mov	r6, r0
 800c778:	b950      	cbnz	r0, 800c790 <__ssputs_r+0x5c>
 800c77a:	230c      	movs	r3, #12
 800c77c:	f8ca 3000 	str.w	r3, [sl]
 800c780:	89a3      	ldrh	r3, [r4, #12]
 800c782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c786:	81a3      	strh	r3, [r4, #12]
 800c788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c78c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c790:	6921      	ldr	r1, [r4, #16]
 800c792:	464a      	mov	r2, r9
 800c794:	f7ff fa08 	bl	800bba8 <memcpy>
 800c798:	89a3      	ldrh	r3, [r4, #12]
 800c79a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c79e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7a2:	81a3      	strh	r3, [r4, #12]
 800c7a4:	6126      	str	r6, [r4, #16]
 800c7a6:	6165      	str	r5, [r4, #20]
 800c7a8:	444e      	add	r6, r9
 800c7aa:	eba5 0509 	sub.w	r5, r5, r9
 800c7ae:	6026      	str	r6, [r4, #0]
 800c7b0:	60a5      	str	r5, [r4, #8]
 800c7b2:	463e      	mov	r6, r7
 800c7b4:	42be      	cmp	r6, r7
 800c7b6:	d900      	bls.n	800c7ba <__ssputs_r+0x86>
 800c7b8:	463e      	mov	r6, r7
 800c7ba:	6820      	ldr	r0, [r4, #0]
 800c7bc:	4632      	mov	r2, r6
 800c7be:	4641      	mov	r1, r8
 800c7c0:	f000 f980 	bl	800cac4 <memmove>
 800c7c4:	68a3      	ldr	r3, [r4, #8]
 800c7c6:	1b9b      	subs	r3, r3, r6
 800c7c8:	60a3      	str	r3, [r4, #8]
 800c7ca:	6823      	ldr	r3, [r4, #0]
 800c7cc:	4433      	add	r3, r6
 800c7ce:	6023      	str	r3, [r4, #0]
 800c7d0:	2000      	movs	r0, #0
 800c7d2:	e7db      	b.n	800c78c <__ssputs_r+0x58>
 800c7d4:	462a      	mov	r2, r5
 800c7d6:	f000 f99b 	bl	800cb10 <_realloc_r>
 800c7da:	4606      	mov	r6, r0
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	d1e1      	bne.n	800c7a4 <__ssputs_r+0x70>
 800c7e0:	6921      	ldr	r1, [r4, #16]
 800c7e2:	4650      	mov	r0, sl
 800c7e4:	f7ff fec6 	bl	800c574 <_free_r>
 800c7e8:	e7c7      	b.n	800c77a <__ssputs_r+0x46>
	...

0800c7ec <_svfiprintf_r>:
 800c7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7f0:	4698      	mov	r8, r3
 800c7f2:	898b      	ldrh	r3, [r1, #12]
 800c7f4:	061b      	lsls	r3, r3, #24
 800c7f6:	b09d      	sub	sp, #116	; 0x74
 800c7f8:	4607      	mov	r7, r0
 800c7fa:	460d      	mov	r5, r1
 800c7fc:	4614      	mov	r4, r2
 800c7fe:	d50e      	bpl.n	800c81e <_svfiprintf_r+0x32>
 800c800:	690b      	ldr	r3, [r1, #16]
 800c802:	b963      	cbnz	r3, 800c81e <_svfiprintf_r+0x32>
 800c804:	2140      	movs	r1, #64	; 0x40
 800c806:	f7ff ff21 	bl	800c64c <_malloc_r>
 800c80a:	6028      	str	r0, [r5, #0]
 800c80c:	6128      	str	r0, [r5, #16]
 800c80e:	b920      	cbnz	r0, 800c81a <_svfiprintf_r+0x2e>
 800c810:	230c      	movs	r3, #12
 800c812:	603b      	str	r3, [r7, #0]
 800c814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c818:	e0d1      	b.n	800c9be <_svfiprintf_r+0x1d2>
 800c81a:	2340      	movs	r3, #64	; 0x40
 800c81c:	616b      	str	r3, [r5, #20]
 800c81e:	2300      	movs	r3, #0
 800c820:	9309      	str	r3, [sp, #36]	; 0x24
 800c822:	2320      	movs	r3, #32
 800c824:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c828:	f8cd 800c 	str.w	r8, [sp, #12]
 800c82c:	2330      	movs	r3, #48	; 0x30
 800c82e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c9d8 <_svfiprintf_r+0x1ec>
 800c832:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c836:	f04f 0901 	mov.w	r9, #1
 800c83a:	4623      	mov	r3, r4
 800c83c:	469a      	mov	sl, r3
 800c83e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c842:	b10a      	cbz	r2, 800c848 <_svfiprintf_r+0x5c>
 800c844:	2a25      	cmp	r2, #37	; 0x25
 800c846:	d1f9      	bne.n	800c83c <_svfiprintf_r+0x50>
 800c848:	ebba 0b04 	subs.w	fp, sl, r4
 800c84c:	d00b      	beq.n	800c866 <_svfiprintf_r+0x7a>
 800c84e:	465b      	mov	r3, fp
 800c850:	4622      	mov	r2, r4
 800c852:	4629      	mov	r1, r5
 800c854:	4638      	mov	r0, r7
 800c856:	f7ff ff6d 	bl	800c734 <__ssputs_r>
 800c85a:	3001      	adds	r0, #1
 800c85c:	f000 80aa 	beq.w	800c9b4 <_svfiprintf_r+0x1c8>
 800c860:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c862:	445a      	add	r2, fp
 800c864:	9209      	str	r2, [sp, #36]	; 0x24
 800c866:	f89a 3000 	ldrb.w	r3, [sl]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	f000 80a2 	beq.w	800c9b4 <_svfiprintf_r+0x1c8>
 800c870:	2300      	movs	r3, #0
 800c872:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c876:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c87a:	f10a 0a01 	add.w	sl, sl, #1
 800c87e:	9304      	str	r3, [sp, #16]
 800c880:	9307      	str	r3, [sp, #28]
 800c882:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c886:	931a      	str	r3, [sp, #104]	; 0x68
 800c888:	4654      	mov	r4, sl
 800c88a:	2205      	movs	r2, #5
 800c88c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c890:	4851      	ldr	r0, [pc, #324]	; (800c9d8 <_svfiprintf_r+0x1ec>)
 800c892:	f7f3 fca5 	bl	80001e0 <memchr>
 800c896:	9a04      	ldr	r2, [sp, #16]
 800c898:	b9d8      	cbnz	r0, 800c8d2 <_svfiprintf_r+0xe6>
 800c89a:	06d0      	lsls	r0, r2, #27
 800c89c:	bf44      	itt	mi
 800c89e:	2320      	movmi	r3, #32
 800c8a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8a4:	0711      	lsls	r1, r2, #28
 800c8a6:	bf44      	itt	mi
 800c8a8:	232b      	movmi	r3, #43	; 0x2b
 800c8aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8ae:	f89a 3000 	ldrb.w	r3, [sl]
 800c8b2:	2b2a      	cmp	r3, #42	; 0x2a
 800c8b4:	d015      	beq.n	800c8e2 <_svfiprintf_r+0xf6>
 800c8b6:	9a07      	ldr	r2, [sp, #28]
 800c8b8:	4654      	mov	r4, sl
 800c8ba:	2000      	movs	r0, #0
 800c8bc:	f04f 0c0a 	mov.w	ip, #10
 800c8c0:	4621      	mov	r1, r4
 800c8c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8c6:	3b30      	subs	r3, #48	; 0x30
 800c8c8:	2b09      	cmp	r3, #9
 800c8ca:	d94e      	bls.n	800c96a <_svfiprintf_r+0x17e>
 800c8cc:	b1b0      	cbz	r0, 800c8fc <_svfiprintf_r+0x110>
 800c8ce:	9207      	str	r2, [sp, #28]
 800c8d0:	e014      	b.n	800c8fc <_svfiprintf_r+0x110>
 800c8d2:	eba0 0308 	sub.w	r3, r0, r8
 800c8d6:	fa09 f303 	lsl.w	r3, r9, r3
 800c8da:	4313      	orrs	r3, r2
 800c8dc:	9304      	str	r3, [sp, #16]
 800c8de:	46a2      	mov	sl, r4
 800c8e0:	e7d2      	b.n	800c888 <_svfiprintf_r+0x9c>
 800c8e2:	9b03      	ldr	r3, [sp, #12]
 800c8e4:	1d19      	adds	r1, r3, #4
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	9103      	str	r1, [sp, #12]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	bfbb      	ittet	lt
 800c8ee:	425b      	neglt	r3, r3
 800c8f0:	f042 0202 	orrlt.w	r2, r2, #2
 800c8f4:	9307      	strge	r3, [sp, #28]
 800c8f6:	9307      	strlt	r3, [sp, #28]
 800c8f8:	bfb8      	it	lt
 800c8fa:	9204      	strlt	r2, [sp, #16]
 800c8fc:	7823      	ldrb	r3, [r4, #0]
 800c8fe:	2b2e      	cmp	r3, #46	; 0x2e
 800c900:	d10c      	bne.n	800c91c <_svfiprintf_r+0x130>
 800c902:	7863      	ldrb	r3, [r4, #1]
 800c904:	2b2a      	cmp	r3, #42	; 0x2a
 800c906:	d135      	bne.n	800c974 <_svfiprintf_r+0x188>
 800c908:	9b03      	ldr	r3, [sp, #12]
 800c90a:	1d1a      	adds	r2, r3, #4
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	9203      	str	r2, [sp, #12]
 800c910:	2b00      	cmp	r3, #0
 800c912:	bfb8      	it	lt
 800c914:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c918:	3402      	adds	r4, #2
 800c91a:	9305      	str	r3, [sp, #20]
 800c91c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c9e8 <_svfiprintf_r+0x1fc>
 800c920:	7821      	ldrb	r1, [r4, #0]
 800c922:	2203      	movs	r2, #3
 800c924:	4650      	mov	r0, sl
 800c926:	f7f3 fc5b 	bl	80001e0 <memchr>
 800c92a:	b140      	cbz	r0, 800c93e <_svfiprintf_r+0x152>
 800c92c:	2340      	movs	r3, #64	; 0x40
 800c92e:	eba0 000a 	sub.w	r0, r0, sl
 800c932:	fa03 f000 	lsl.w	r0, r3, r0
 800c936:	9b04      	ldr	r3, [sp, #16]
 800c938:	4303      	orrs	r3, r0
 800c93a:	3401      	adds	r4, #1
 800c93c:	9304      	str	r3, [sp, #16]
 800c93e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c942:	4826      	ldr	r0, [pc, #152]	; (800c9dc <_svfiprintf_r+0x1f0>)
 800c944:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c948:	2206      	movs	r2, #6
 800c94a:	f7f3 fc49 	bl	80001e0 <memchr>
 800c94e:	2800      	cmp	r0, #0
 800c950:	d038      	beq.n	800c9c4 <_svfiprintf_r+0x1d8>
 800c952:	4b23      	ldr	r3, [pc, #140]	; (800c9e0 <_svfiprintf_r+0x1f4>)
 800c954:	bb1b      	cbnz	r3, 800c99e <_svfiprintf_r+0x1b2>
 800c956:	9b03      	ldr	r3, [sp, #12]
 800c958:	3307      	adds	r3, #7
 800c95a:	f023 0307 	bic.w	r3, r3, #7
 800c95e:	3308      	adds	r3, #8
 800c960:	9303      	str	r3, [sp, #12]
 800c962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c964:	4433      	add	r3, r6
 800c966:	9309      	str	r3, [sp, #36]	; 0x24
 800c968:	e767      	b.n	800c83a <_svfiprintf_r+0x4e>
 800c96a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c96e:	460c      	mov	r4, r1
 800c970:	2001      	movs	r0, #1
 800c972:	e7a5      	b.n	800c8c0 <_svfiprintf_r+0xd4>
 800c974:	2300      	movs	r3, #0
 800c976:	3401      	adds	r4, #1
 800c978:	9305      	str	r3, [sp, #20]
 800c97a:	4619      	mov	r1, r3
 800c97c:	f04f 0c0a 	mov.w	ip, #10
 800c980:	4620      	mov	r0, r4
 800c982:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c986:	3a30      	subs	r2, #48	; 0x30
 800c988:	2a09      	cmp	r2, #9
 800c98a:	d903      	bls.n	800c994 <_svfiprintf_r+0x1a8>
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d0c5      	beq.n	800c91c <_svfiprintf_r+0x130>
 800c990:	9105      	str	r1, [sp, #20]
 800c992:	e7c3      	b.n	800c91c <_svfiprintf_r+0x130>
 800c994:	fb0c 2101 	mla	r1, ip, r1, r2
 800c998:	4604      	mov	r4, r0
 800c99a:	2301      	movs	r3, #1
 800c99c:	e7f0      	b.n	800c980 <_svfiprintf_r+0x194>
 800c99e:	ab03      	add	r3, sp, #12
 800c9a0:	9300      	str	r3, [sp, #0]
 800c9a2:	462a      	mov	r2, r5
 800c9a4:	4b0f      	ldr	r3, [pc, #60]	; (800c9e4 <_svfiprintf_r+0x1f8>)
 800c9a6:	a904      	add	r1, sp, #16
 800c9a8:	4638      	mov	r0, r7
 800c9aa:	f7fc fa47 	bl	8008e3c <_printf_float>
 800c9ae:	1c42      	adds	r2, r0, #1
 800c9b0:	4606      	mov	r6, r0
 800c9b2:	d1d6      	bne.n	800c962 <_svfiprintf_r+0x176>
 800c9b4:	89ab      	ldrh	r3, [r5, #12]
 800c9b6:	065b      	lsls	r3, r3, #25
 800c9b8:	f53f af2c 	bmi.w	800c814 <_svfiprintf_r+0x28>
 800c9bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9be:	b01d      	add	sp, #116	; 0x74
 800c9c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9c4:	ab03      	add	r3, sp, #12
 800c9c6:	9300      	str	r3, [sp, #0]
 800c9c8:	462a      	mov	r2, r5
 800c9ca:	4b06      	ldr	r3, [pc, #24]	; (800c9e4 <_svfiprintf_r+0x1f8>)
 800c9cc:	a904      	add	r1, sp, #16
 800c9ce:	4638      	mov	r0, r7
 800c9d0:	f7fc fcd8 	bl	8009384 <_printf_i>
 800c9d4:	e7eb      	b.n	800c9ae <_svfiprintf_r+0x1c2>
 800c9d6:	bf00      	nop
 800c9d8:	0800f8c4 	.word	0x0800f8c4
 800c9dc:	0800f8ce 	.word	0x0800f8ce
 800c9e0:	08008e3d 	.word	0x08008e3d
 800c9e4:	0800c735 	.word	0x0800c735
 800c9e8:	0800f8ca 	.word	0x0800f8ca
 800c9ec:	00000000 	.word	0x00000000

0800c9f0 <nan>:
 800c9f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c9f8 <nan+0x8>
 800c9f4:	4770      	bx	lr
 800c9f6:	bf00      	nop
 800c9f8:	00000000 	.word	0x00000000
 800c9fc:	7ff80000 	.word	0x7ff80000

0800ca00 <_sbrk_r>:
 800ca00:	b538      	push	{r3, r4, r5, lr}
 800ca02:	4d06      	ldr	r5, [pc, #24]	; (800ca1c <_sbrk_r+0x1c>)
 800ca04:	2300      	movs	r3, #0
 800ca06:	4604      	mov	r4, r0
 800ca08:	4608      	mov	r0, r1
 800ca0a:	602b      	str	r3, [r5, #0]
 800ca0c:	f7f5 fd1a 	bl	8002444 <_sbrk>
 800ca10:	1c43      	adds	r3, r0, #1
 800ca12:	d102      	bne.n	800ca1a <_sbrk_r+0x1a>
 800ca14:	682b      	ldr	r3, [r5, #0]
 800ca16:	b103      	cbz	r3, 800ca1a <_sbrk_r+0x1a>
 800ca18:	6023      	str	r3, [r4, #0]
 800ca1a:	bd38      	pop	{r3, r4, r5, pc}
 800ca1c:	2000098c 	.word	0x2000098c

0800ca20 <strncmp>:
 800ca20:	b510      	push	{r4, lr}
 800ca22:	b17a      	cbz	r2, 800ca44 <strncmp+0x24>
 800ca24:	4603      	mov	r3, r0
 800ca26:	3901      	subs	r1, #1
 800ca28:	1884      	adds	r4, r0, r2
 800ca2a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ca2e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ca32:	4290      	cmp	r0, r2
 800ca34:	d101      	bne.n	800ca3a <strncmp+0x1a>
 800ca36:	42a3      	cmp	r3, r4
 800ca38:	d101      	bne.n	800ca3e <strncmp+0x1e>
 800ca3a:	1a80      	subs	r0, r0, r2
 800ca3c:	bd10      	pop	{r4, pc}
 800ca3e:	2800      	cmp	r0, #0
 800ca40:	d1f3      	bne.n	800ca2a <strncmp+0xa>
 800ca42:	e7fa      	b.n	800ca3a <strncmp+0x1a>
 800ca44:	4610      	mov	r0, r2
 800ca46:	e7f9      	b.n	800ca3c <strncmp+0x1c>

0800ca48 <__ascii_wctomb>:
 800ca48:	b149      	cbz	r1, 800ca5e <__ascii_wctomb+0x16>
 800ca4a:	2aff      	cmp	r2, #255	; 0xff
 800ca4c:	bf85      	ittet	hi
 800ca4e:	238a      	movhi	r3, #138	; 0x8a
 800ca50:	6003      	strhi	r3, [r0, #0]
 800ca52:	700a      	strbls	r2, [r1, #0]
 800ca54:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ca58:	bf98      	it	ls
 800ca5a:	2001      	movls	r0, #1
 800ca5c:	4770      	bx	lr
 800ca5e:	4608      	mov	r0, r1
 800ca60:	4770      	bx	lr
	...

0800ca64 <__assert_func>:
 800ca64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca66:	4614      	mov	r4, r2
 800ca68:	461a      	mov	r2, r3
 800ca6a:	4b09      	ldr	r3, [pc, #36]	; (800ca90 <__assert_func+0x2c>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4605      	mov	r5, r0
 800ca70:	68d8      	ldr	r0, [r3, #12]
 800ca72:	b14c      	cbz	r4, 800ca88 <__assert_func+0x24>
 800ca74:	4b07      	ldr	r3, [pc, #28]	; (800ca94 <__assert_func+0x30>)
 800ca76:	9100      	str	r1, [sp, #0]
 800ca78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca7c:	4906      	ldr	r1, [pc, #24]	; (800ca98 <__assert_func+0x34>)
 800ca7e:	462b      	mov	r3, r5
 800ca80:	f000 f80e 	bl	800caa0 <fiprintf>
 800ca84:	f000 fa8c 	bl	800cfa0 <abort>
 800ca88:	4b04      	ldr	r3, [pc, #16]	; (800ca9c <__assert_func+0x38>)
 800ca8a:	461c      	mov	r4, r3
 800ca8c:	e7f3      	b.n	800ca76 <__assert_func+0x12>
 800ca8e:	bf00      	nop
 800ca90:	20000030 	.word	0x20000030
 800ca94:	0800f8d5 	.word	0x0800f8d5
 800ca98:	0800f8e2 	.word	0x0800f8e2
 800ca9c:	0800f910 	.word	0x0800f910

0800caa0 <fiprintf>:
 800caa0:	b40e      	push	{r1, r2, r3}
 800caa2:	b503      	push	{r0, r1, lr}
 800caa4:	4601      	mov	r1, r0
 800caa6:	ab03      	add	r3, sp, #12
 800caa8:	4805      	ldr	r0, [pc, #20]	; (800cac0 <fiprintf+0x20>)
 800caaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800caae:	6800      	ldr	r0, [r0, #0]
 800cab0:	9301      	str	r3, [sp, #4]
 800cab2:	f000 f885 	bl	800cbc0 <_vfiprintf_r>
 800cab6:	b002      	add	sp, #8
 800cab8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cabc:	b003      	add	sp, #12
 800cabe:	4770      	bx	lr
 800cac0:	20000030 	.word	0x20000030

0800cac4 <memmove>:
 800cac4:	4288      	cmp	r0, r1
 800cac6:	b510      	push	{r4, lr}
 800cac8:	eb01 0402 	add.w	r4, r1, r2
 800cacc:	d902      	bls.n	800cad4 <memmove+0x10>
 800cace:	4284      	cmp	r4, r0
 800cad0:	4623      	mov	r3, r4
 800cad2:	d807      	bhi.n	800cae4 <memmove+0x20>
 800cad4:	1e43      	subs	r3, r0, #1
 800cad6:	42a1      	cmp	r1, r4
 800cad8:	d008      	beq.n	800caec <memmove+0x28>
 800cada:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cade:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cae2:	e7f8      	b.n	800cad6 <memmove+0x12>
 800cae4:	4402      	add	r2, r0
 800cae6:	4601      	mov	r1, r0
 800cae8:	428a      	cmp	r2, r1
 800caea:	d100      	bne.n	800caee <memmove+0x2a>
 800caec:	bd10      	pop	{r4, pc}
 800caee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800caf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800caf6:	e7f7      	b.n	800cae8 <memmove+0x24>

0800caf8 <__malloc_lock>:
 800caf8:	4801      	ldr	r0, [pc, #4]	; (800cb00 <__malloc_lock+0x8>)
 800cafa:	f000 bc11 	b.w	800d320 <__retarget_lock_acquire_recursive>
 800cafe:	bf00      	nop
 800cb00:	20000990 	.word	0x20000990

0800cb04 <__malloc_unlock>:
 800cb04:	4801      	ldr	r0, [pc, #4]	; (800cb0c <__malloc_unlock+0x8>)
 800cb06:	f000 bc0c 	b.w	800d322 <__retarget_lock_release_recursive>
 800cb0a:	bf00      	nop
 800cb0c:	20000990 	.word	0x20000990

0800cb10 <_realloc_r>:
 800cb10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb14:	4680      	mov	r8, r0
 800cb16:	4614      	mov	r4, r2
 800cb18:	460e      	mov	r6, r1
 800cb1a:	b921      	cbnz	r1, 800cb26 <_realloc_r+0x16>
 800cb1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb20:	4611      	mov	r1, r2
 800cb22:	f7ff bd93 	b.w	800c64c <_malloc_r>
 800cb26:	b92a      	cbnz	r2, 800cb34 <_realloc_r+0x24>
 800cb28:	f7ff fd24 	bl	800c574 <_free_r>
 800cb2c:	4625      	mov	r5, r4
 800cb2e:	4628      	mov	r0, r5
 800cb30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb34:	f000 fc5c 	bl	800d3f0 <_malloc_usable_size_r>
 800cb38:	4284      	cmp	r4, r0
 800cb3a:	4607      	mov	r7, r0
 800cb3c:	d802      	bhi.n	800cb44 <_realloc_r+0x34>
 800cb3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cb42:	d812      	bhi.n	800cb6a <_realloc_r+0x5a>
 800cb44:	4621      	mov	r1, r4
 800cb46:	4640      	mov	r0, r8
 800cb48:	f7ff fd80 	bl	800c64c <_malloc_r>
 800cb4c:	4605      	mov	r5, r0
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	d0ed      	beq.n	800cb2e <_realloc_r+0x1e>
 800cb52:	42bc      	cmp	r4, r7
 800cb54:	4622      	mov	r2, r4
 800cb56:	4631      	mov	r1, r6
 800cb58:	bf28      	it	cs
 800cb5a:	463a      	movcs	r2, r7
 800cb5c:	f7ff f824 	bl	800bba8 <memcpy>
 800cb60:	4631      	mov	r1, r6
 800cb62:	4640      	mov	r0, r8
 800cb64:	f7ff fd06 	bl	800c574 <_free_r>
 800cb68:	e7e1      	b.n	800cb2e <_realloc_r+0x1e>
 800cb6a:	4635      	mov	r5, r6
 800cb6c:	e7df      	b.n	800cb2e <_realloc_r+0x1e>

0800cb6e <__sfputc_r>:
 800cb6e:	6893      	ldr	r3, [r2, #8]
 800cb70:	3b01      	subs	r3, #1
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	b410      	push	{r4}
 800cb76:	6093      	str	r3, [r2, #8]
 800cb78:	da08      	bge.n	800cb8c <__sfputc_r+0x1e>
 800cb7a:	6994      	ldr	r4, [r2, #24]
 800cb7c:	42a3      	cmp	r3, r4
 800cb7e:	db01      	blt.n	800cb84 <__sfputc_r+0x16>
 800cb80:	290a      	cmp	r1, #10
 800cb82:	d103      	bne.n	800cb8c <__sfputc_r+0x1e>
 800cb84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb88:	f000 b94a 	b.w	800ce20 <__swbuf_r>
 800cb8c:	6813      	ldr	r3, [r2, #0]
 800cb8e:	1c58      	adds	r0, r3, #1
 800cb90:	6010      	str	r0, [r2, #0]
 800cb92:	7019      	strb	r1, [r3, #0]
 800cb94:	4608      	mov	r0, r1
 800cb96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb9a:	4770      	bx	lr

0800cb9c <__sfputs_r>:
 800cb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb9e:	4606      	mov	r6, r0
 800cba0:	460f      	mov	r7, r1
 800cba2:	4614      	mov	r4, r2
 800cba4:	18d5      	adds	r5, r2, r3
 800cba6:	42ac      	cmp	r4, r5
 800cba8:	d101      	bne.n	800cbae <__sfputs_r+0x12>
 800cbaa:	2000      	movs	r0, #0
 800cbac:	e007      	b.n	800cbbe <__sfputs_r+0x22>
 800cbae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbb2:	463a      	mov	r2, r7
 800cbb4:	4630      	mov	r0, r6
 800cbb6:	f7ff ffda 	bl	800cb6e <__sfputc_r>
 800cbba:	1c43      	adds	r3, r0, #1
 800cbbc:	d1f3      	bne.n	800cba6 <__sfputs_r+0xa>
 800cbbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cbc0 <_vfiprintf_r>:
 800cbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbc4:	460d      	mov	r5, r1
 800cbc6:	b09d      	sub	sp, #116	; 0x74
 800cbc8:	4614      	mov	r4, r2
 800cbca:	4698      	mov	r8, r3
 800cbcc:	4606      	mov	r6, r0
 800cbce:	b118      	cbz	r0, 800cbd8 <_vfiprintf_r+0x18>
 800cbd0:	6983      	ldr	r3, [r0, #24]
 800cbd2:	b90b      	cbnz	r3, 800cbd8 <_vfiprintf_r+0x18>
 800cbd4:	f000 fb06 	bl	800d1e4 <__sinit>
 800cbd8:	4b89      	ldr	r3, [pc, #548]	; (800ce00 <_vfiprintf_r+0x240>)
 800cbda:	429d      	cmp	r5, r3
 800cbdc:	d11b      	bne.n	800cc16 <_vfiprintf_r+0x56>
 800cbde:	6875      	ldr	r5, [r6, #4]
 800cbe0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cbe2:	07d9      	lsls	r1, r3, #31
 800cbe4:	d405      	bmi.n	800cbf2 <_vfiprintf_r+0x32>
 800cbe6:	89ab      	ldrh	r3, [r5, #12]
 800cbe8:	059a      	lsls	r2, r3, #22
 800cbea:	d402      	bmi.n	800cbf2 <_vfiprintf_r+0x32>
 800cbec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cbee:	f000 fb97 	bl	800d320 <__retarget_lock_acquire_recursive>
 800cbf2:	89ab      	ldrh	r3, [r5, #12]
 800cbf4:	071b      	lsls	r3, r3, #28
 800cbf6:	d501      	bpl.n	800cbfc <_vfiprintf_r+0x3c>
 800cbf8:	692b      	ldr	r3, [r5, #16]
 800cbfa:	b9eb      	cbnz	r3, 800cc38 <_vfiprintf_r+0x78>
 800cbfc:	4629      	mov	r1, r5
 800cbfe:	4630      	mov	r0, r6
 800cc00:	f000 f960 	bl	800cec4 <__swsetup_r>
 800cc04:	b1c0      	cbz	r0, 800cc38 <_vfiprintf_r+0x78>
 800cc06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc08:	07dc      	lsls	r4, r3, #31
 800cc0a:	d50e      	bpl.n	800cc2a <_vfiprintf_r+0x6a>
 800cc0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc10:	b01d      	add	sp, #116	; 0x74
 800cc12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc16:	4b7b      	ldr	r3, [pc, #492]	; (800ce04 <_vfiprintf_r+0x244>)
 800cc18:	429d      	cmp	r5, r3
 800cc1a:	d101      	bne.n	800cc20 <_vfiprintf_r+0x60>
 800cc1c:	68b5      	ldr	r5, [r6, #8]
 800cc1e:	e7df      	b.n	800cbe0 <_vfiprintf_r+0x20>
 800cc20:	4b79      	ldr	r3, [pc, #484]	; (800ce08 <_vfiprintf_r+0x248>)
 800cc22:	429d      	cmp	r5, r3
 800cc24:	bf08      	it	eq
 800cc26:	68f5      	ldreq	r5, [r6, #12]
 800cc28:	e7da      	b.n	800cbe0 <_vfiprintf_r+0x20>
 800cc2a:	89ab      	ldrh	r3, [r5, #12]
 800cc2c:	0598      	lsls	r0, r3, #22
 800cc2e:	d4ed      	bmi.n	800cc0c <_vfiprintf_r+0x4c>
 800cc30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc32:	f000 fb76 	bl	800d322 <__retarget_lock_release_recursive>
 800cc36:	e7e9      	b.n	800cc0c <_vfiprintf_r+0x4c>
 800cc38:	2300      	movs	r3, #0
 800cc3a:	9309      	str	r3, [sp, #36]	; 0x24
 800cc3c:	2320      	movs	r3, #32
 800cc3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc42:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc46:	2330      	movs	r3, #48	; 0x30
 800cc48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ce0c <_vfiprintf_r+0x24c>
 800cc4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc50:	f04f 0901 	mov.w	r9, #1
 800cc54:	4623      	mov	r3, r4
 800cc56:	469a      	mov	sl, r3
 800cc58:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc5c:	b10a      	cbz	r2, 800cc62 <_vfiprintf_r+0xa2>
 800cc5e:	2a25      	cmp	r2, #37	; 0x25
 800cc60:	d1f9      	bne.n	800cc56 <_vfiprintf_r+0x96>
 800cc62:	ebba 0b04 	subs.w	fp, sl, r4
 800cc66:	d00b      	beq.n	800cc80 <_vfiprintf_r+0xc0>
 800cc68:	465b      	mov	r3, fp
 800cc6a:	4622      	mov	r2, r4
 800cc6c:	4629      	mov	r1, r5
 800cc6e:	4630      	mov	r0, r6
 800cc70:	f7ff ff94 	bl	800cb9c <__sfputs_r>
 800cc74:	3001      	adds	r0, #1
 800cc76:	f000 80aa 	beq.w	800cdce <_vfiprintf_r+0x20e>
 800cc7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc7c:	445a      	add	r2, fp
 800cc7e:	9209      	str	r2, [sp, #36]	; 0x24
 800cc80:	f89a 3000 	ldrb.w	r3, [sl]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	f000 80a2 	beq.w	800cdce <_vfiprintf_r+0x20e>
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc94:	f10a 0a01 	add.w	sl, sl, #1
 800cc98:	9304      	str	r3, [sp, #16]
 800cc9a:	9307      	str	r3, [sp, #28]
 800cc9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cca0:	931a      	str	r3, [sp, #104]	; 0x68
 800cca2:	4654      	mov	r4, sl
 800cca4:	2205      	movs	r2, #5
 800cca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccaa:	4858      	ldr	r0, [pc, #352]	; (800ce0c <_vfiprintf_r+0x24c>)
 800ccac:	f7f3 fa98 	bl	80001e0 <memchr>
 800ccb0:	9a04      	ldr	r2, [sp, #16]
 800ccb2:	b9d8      	cbnz	r0, 800ccec <_vfiprintf_r+0x12c>
 800ccb4:	06d1      	lsls	r1, r2, #27
 800ccb6:	bf44      	itt	mi
 800ccb8:	2320      	movmi	r3, #32
 800ccba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccbe:	0713      	lsls	r3, r2, #28
 800ccc0:	bf44      	itt	mi
 800ccc2:	232b      	movmi	r3, #43	; 0x2b
 800ccc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccc8:	f89a 3000 	ldrb.w	r3, [sl]
 800cccc:	2b2a      	cmp	r3, #42	; 0x2a
 800ccce:	d015      	beq.n	800ccfc <_vfiprintf_r+0x13c>
 800ccd0:	9a07      	ldr	r2, [sp, #28]
 800ccd2:	4654      	mov	r4, sl
 800ccd4:	2000      	movs	r0, #0
 800ccd6:	f04f 0c0a 	mov.w	ip, #10
 800ccda:	4621      	mov	r1, r4
 800ccdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cce0:	3b30      	subs	r3, #48	; 0x30
 800cce2:	2b09      	cmp	r3, #9
 800cce4:	d94e      	bls.n	800cd84 <_vfiprintf_r+0x1c4>
 800cce6:	b1b0      	cbz	r0, 800cd16 <_vfiprintf_r+0x156>
 800cce8:	9207      	str	r2, [sp, #28]
 800ccea:	e014      	b.n	800cd16 <_vfiprintf_r+0x156>
 800ccec:	eba0 0308 	sub.w	r3, r0, r8
 800ccf0:	fa09 f303 	lsl.w	r3, r9, r3
 800ccf4:	4313      	orrs	r3, r2
 800ccf6:	9304      	str	r3, [sp, #16]
 800ccf8:	46a2      	mov	sl, r4
 800ccfa:	e7d2      	b.n	800cca2 <_vfiprintf_r+0xe2>
 800ccfc:	9b03      	ldr	r3, [sp, #12]
 800ccfe:	1d19      	adds	r1, r3, #4
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	9103      	str	r1, [sp, #12]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	bfbb      	ittet	lt
 800cd08:	425b      	neglt	r3, r3
 800cd0a:	f042 0202 	orrlt.w	r2, r2, #2
 800cd0e:	9307      	strge	r3, [sp, #28]
 800cd10:	9307      	strlt	r3, [sp, #28]
 800cd12:	bfb8      	it	lt
 800cd14:	9204      	strlt	r2, [sp, #16]
 800cd16:	7823      	ldrb	r3, [r4, #0]
 800cd18:	2b2e      	cmp	r3, #46	; 0x2e
 800cd1a:	d10c      	bne.n	800cd36 <_vfiprintf_r+0x176>
 800cd1c:	7863      	ldrb	r3, [r4, #1]
 800cd1e:	2b2a      	cmp	r3, #42	; 0x2a
 800cd20:	d135      	bne.n	800cd8e <_vfiprintf_r+0x1ce>
 800cd22:	9b03      	ldr	r3, [sp, #12]
 800cd24:	1d1a      	adds	r2, r3, #4
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	9203      	str	r2, [sp, #12]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	bfb8      	it	lt
 800cd2e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cd32:	3402      	adds	r4, #2
 800cd34:	9305      	str	r3, [sp, #20]
 800cd36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ce1c <_vfiprintf_r+0x25c>
 800cd3a:	7821      	ldrb	r1, [r4, #0]
 800cd3c:	2203      	movs	r2, #3
 800cd3e:	4650      	mov	r0, sl
 800cd40:	f7f3 fa4e 	bl	80001e0 <memchr>
 800cd44:	b140      	cbz	r0, 800cd58 <_vfiprintf_r+0x198>
 800cd46:	2340      	movs	r3, #64	; 0x40
 800cd48:	eba0 000a 	sub.w	r0, r0, sl
 800cd4c:	fa03 f000 	lsl.w	r0, r3, r0
 800cd50:	9b04      	ldr	r3, [sp, #16]
 800cd52:	4303      	orrs	r3, r0
 800cd54:	3401      	adds	r4, #1
 800cd56:	9304      	str	r3, [sp, #16]
 800cd58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd5c:	482c      	ldr	r0, [pc, #176]	; (800ce10 <_vfiprintf_r+0x250>)
 800cd5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd62:	2206      	movs	r2, #6
 800cd64:	f7f3 fa3c 	bl	80001e0 <memchr>
 800cd68:	2800      	cmp	r0, #0
 800cd6a:	d03f      	beq.n	800cdec <_vfiprintf_r+0x22c>
 800cd6c:	4b29      	ldr	r3, [pc, #164]	; (800ce14 <_vfiprintf_r+0x254>)
 800cd6e:	bb1b      	cbnz	r3, 800cdb8 <_vfiprintf_r+0x1f8>
 800cd70:	9b03      	ldr	r3, [sp, #12]
 800cd72:	3307      	adds	r3, #7
 800cd74:	f023 0307 	bic.w	r3, r3, #7
 800cd78:	3308      	adds	r3, #8
 800cd7a:	9303      	str	r3, [sp, #12]
 800cd7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd7e:	443b      	add	r3, r7
 800cd80:	9309      	str	r3, [sp, #36]	; 0x24
 800cd82:	e767      	b.n	800cc54 <_vfiprintf_r+0x94>
 800cd84:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd88:	460c      	mov	r4, r1
 800cd8a:	2001      	movs	r0, #1
 800cd8c:	e7a5      	b.n	800ccda <_vfiprintf_r+0x11a>
 800cd8e:	2300      	movs	r3, #0
 800cd90:	3401      	adds	r4, #1
 800cd92:	9305      	str	r3, [sp, #20]
 800cd94:	4619      	mov	r1, r3
 800cd96:	f04f 0c0a 	mov.w	ip, #10
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cda0:	3a30      	subs	r2, #48	; 0x30
 800cda2:	2a09      	cmp	r2, #9
 800cda4:	d903      	bls.n	800cdae <_vfiprintf_r+0x1ee>
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d0c5      	beq.n	800cd36 <_vfiprintf_r+0x176>
 800cdaa:	9105      	str	r1, [sp, #20]
 800cdac:	e7c3      	b.n	800cd36 <_vfiprintf_r+0x176>
 800cdae:	fb0c 2101 	mla	r1, ip, r1, r2
 800cdb2:	4604      	mov	r4, r0
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	e7f0      	b.n	800cd9a <_vfiprintf_r+0x1da>
 800cdb8:	ab03      	add	r3, sp, #12
 800cdba:	9300      	str	r3, [sp, #0]
 800cdbc:	462a      	mov	r2, r5
 800cdbe:	4b16      	ldr	r3, [pc, #88]	; (800ce18 <_vfiprintf_r+0x258>)
 800cdc0:	a904      	add	r1, sp, #16
 800cdc2:	4630      	mov	r0, r6
 800cdc4:	f7fc f83a 	bl	8008e3c <_printf_float>
 800cdc8:	4607      	mov	r7, r0
 800cdca:	1c78      	adds	r0, r7, #1
 800cdcc:	d1d6      	bne.n	800cd7c <_vfiprintf_r+0x1bc>
 800cdce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cdd0:	07d9      	lsls	r1, r3, #31
 800cdd2:	d405      	bmi.n	800cde0 <_vfiprintf_r+0x220>
 800cdd4:	89ab      	ldrh	r3, [r5, #12]
 800cdd6:	059a      	lsls	r2, r3, #22
 800cdd8:	d402      	bmi.n	800cde0 <_vfiprintf_r+0x220>
 800cdda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cddc:	f000 faa1 	bl	800d322 <__retarget_lock_release_recursive>
 800cde0:	89ab      	ldrh	r3, [r5, #12]
 800cde2:	065b      	lsls	r3, r3, #25
 800cde4:	f53f af12 	bmi.w	800cc0c <_vfiprintf_r+0x4c>
 800cde8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cdea:	e711      	b.n	800cc10 <_vfiprintf_r+0x50>
 800cdec:	ab03      	add	r3, sp, #12
 800cdee:	9300      	str	r3, [sp, #0]
 800cdf0:	462a      	mov	r2, r5
 800cdf2:	4b09      	ldr	r3, [pc, #36]	; (800ce18 <_vfiprintf_r+0x258>)
 800cdf4:	a904      	add	r1, sp, #16
 800cdf6:	4630      	mov	r0, r6
 800cdf8:	f7fc fac4 	bl	8009384 <_printf_i>
 800cdfc:	e7e4      	b.n	800cdc8 <_vfiprintf_r+0x208>
 800cdfe:	bf00      	nop
 800ce00:	0800f934 	.word	0x0800f934
 800ce04:	0800f954 	.word	0x0800f954
 800ce08:	0800f914 	.word	0x0800f914
 800ce0c:	0800f8c4 	.word	0x0800f8c4
 800ce10:	0800f8ce 	.word	0x0800f8ce
 800ce14:	08008e3d 	.word	0x08008e3d
 800ce18:	0800cb9d 	.word	0x0800cb9d
 800ce1c:	0800f8ca 	.word	0x0800f8ca

0800ce20 <__swbuf_r>:
 800ce20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce22:	460e      	mov	r6, r1
 800ce24:	4614      	mov	r4, r2
 800ce26:	4605      	mov	r5, r0
 800ce28:	b118      	cbz	r0, 800ce32 <__swbuf_r+0x12>
 800ce2a:	6983      	ldr	r3, [r0, #24]
 800ce2c:	b90b      	cbnz	r3, 800ce32 <__swbuf_r+0x12>
 800ce2e:	f000 f9d9 	bl	800d1e4 <__sinit>
 800ce32:	4b21      	ldr	r3, [pc, #132]	; (800ceb8 <__swbuf_r+0x98>)
 800ce34:	429c      	cmp	r4, r3
 800ce36:	d12b      	bne.n	800ce90 <__swbuf_r+0x70>
 800ce38:	686c      	ldr	r4, [r5, #4]
 800ce3a:	69a3      	ldr	r3, [r4, #24]
 800ce3c:	60a3      	str	r3, [r4, #8]
 800ce3e:	89a3      	ldrh	r3, [r4, #12]
 800ce40:	071a      	lsls	r2, r3, #28
 800ce42:	d52f      	bpl.n	800cea4 <__swbuf_r+0x84>
 800ce44:	6923      	ldr	r3, [r4, #16]
 800ce46:	b36b      	cbz	r3, 800cea4 <__swbuf_r+0x84>
 800ce48:	6923      	ldr	r3, [r4, #16]
 800ce4a:	6820      	ldr	r0, [r4, #0]
 800ce4c:	1ac0      	subs	r0, r0, r3
 800ce4e:	6963      	ldr	r3, [r4, #20]
 800ce50:	b2f6      	uxtb	r6, r6
 800ce52:	4283      	cmp	r3, r0
 800ce54:	4637      	mov	r7, r6
 800ce56:	dc04      	bgt.n	800ce62 <__swbuf_r+0x42>
 800ce58:	4621      	mov	r1, r4
 800ce5a:	4628      	mov	r0, r5
 800ce5c:	f000 f92e 	bl	800d0bc <_fflush_r>
 800ce60:	bb30      	cbnz	r0, 800ceb0 <__swbuf_r+0x90>
 800ce62:	68a3      	ldr	r3, [r4, #8]
 800ce64:	3b01      	subs	r3, #1
 800ce66:	60a3      	str	r3, [r4, #8]
 800ce68:	6823      	ldr	r3, [r4, #0]
 800ce6a:	1c5a      	adds	r2, r3, #1
 800ce6c:	6022      	str	r2, [r4, #0]
 800ce6e:	701e      	strb	r6, [r3, #0]
 800ce70:	6963      	ldr	r3, [r4, #20]
 800ce72:	3001      	adds	r0, #1
 800ce74:	4283      	cmp	r3, r0
 800ce76:	d004      	beq.n	800ce82 <__swbuf_r+0x62>
 800ce78:	89a3      	ldrh	r3, [r4, #12]
 800ce7a:	07db      	lsls	r3, r3, #31
 800ce7c:	d506      	bpl.n	800ce8c <__swbuf_r+0x6c>
 800ce7e:	2e0a      	cmp	r6, #10
 800ce80:	d104      	bne.n	800ce8c <__swbuf_r+0x6c>
 800ce82:	4621      	mov	r1, r4
 800ce84:	4628      	mov	r0, r5
 800ce86:	f000 f919 	bl	800d0bc <_fflush_r>
 800ce8a:	b988      	cbnz	r0, 800ceb0 <__swbuf_r+0x90>
 800ce8c:	4638      	mov	r0, r7
 800ce8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce90:	4b0a      	ldr	r3, [pc, #40]	; (800cebc <__swbuf_r+0x9c>)
 800ce92:	429c      	cmp	r4, r3
 800ce94:	d101      	bne.n	800ce9a <__swbuf_r+0x7a>
 800ce96:	68ac      	ldr	r4, [r5, #8]
 800ce98:	e7cf      	b.n	800ce3a <__swbuf_r+0x1a>
 800ce9a:	4b09      	ldr	r3, [pc, #36]	; (800cec0 <__swbuf_r+0xa0>)
 800ce9c:	429c      	cmp	r4, r3
 800ce9e:	bf08      	it	eq
 800cea0:	68ec      	ldreq	r4, [r5, #12]
 800cea2:	e7ca      	b.n	800ce3a <__swbuf_r+0x1a>
 800cea4:	4621      	mov	r1, r4
 800cea6:	4628      	mov	r0, r5
 800cea8:	f000 f80c 	bl	800cec4 <__swsetup_r>
 800ceac:	2800      	cmp	r0, #0
 800ceae:	d0cb      	beq.n	800ce48 <__swbuf_r+0x28>
 800ceb0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ceb4:	e7ea      	b.n	800ce8c <__swbuf_r+0x6c>
 800ceb6:	bf00      	nop
 800ceb8:	0800f934 	.word	0x0800f934
 800cebc:	0800f954 	.word	0x0800f954
 800cec0:	0800f914 	.word	0x0800f914

0800cec4 <__swsetup_r>:
 800cec4:	4b32      	ldr	r3, [pc, #200]	; (800cf90 <__swsetup_r+0xcc>)
 800cec6:	b570      	push	{r4, r5, r6, lr}
 800cec8:	681d      	ldr	r5, [r3, #0]
 800ceca:	4606      	mov	r6, r0
 800cecc:	460c      	mov	r4, r1
 800cece:	b125      	cbz	r5, 800ceda <__swsetup_r+0x16>
 800ced0:	69ab      	ldr	r3, [r5, #24]
 800ced2:	b913      	cbnz	r3, 800ceda <__swsetup_r+0x16>
 800ced4:	4628      	mov	r0, r5
 800ced6:	f000 f985 	bl	800d1e4 <__sinit>
 800ceda:	4b2e      	ldr	r3, [pc, #184]	; (800cf94 <__swsetup_r+0xd0>)
 800cedc:	429c      	cmp	r4, r3
 800cede:	d10f      	bne.n	800cf00 <__swsetup_r+0x3c>
 800cee0:	686c      	ldr	r4, [r5, #4]
 800cee2:	89a3      	ldrh	r3, [r4, #12]
 800cee4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cee8:	0719      	lsls	r1, r3, #28
 800ceea:	d42c      	bmi.n	800cf46 <__swsetup_r+0x82>
 800ceec:	06dd      	lsls	r5, r3, #27
 800ceee:	d411      	bmi.n	800cf14 <__swsetup_r+0x50>
 800cef0:	2309      	movs	r3, #9
 800cef2:	6033      	str	r3, [r6, #0]
 800cef4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cef8:	81a3      	strh	r3, [r4, #12]
 800cefa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cefe:	e03e      	b.n	800cf7e <__swsetup_r+0xba>
 800cf00:	4b25      	ldr	r3, [pc, #148]	; (800cf98 <__swsetup_r+0xd4>)
 800cf02:	429c      	cmp	r4, r3
 800cf04:	d101      	bne.n	800cf0a <__swsetup_r+0x46>
 800cf06:	68ac      	ldr	r4, [r5, #8]
 800cf08:	e7eb      	b.n	800cee2 <__swsetup_r+0x1e>
 800cf0a:	4b24      	ldr	r3, [pc, #144]	; (800cf9c <__swsetup_r+0xd8>)
 800cf0c:	429c      	cmp	r4, r3
 800cf0e:	bf08      	it	eq
 800cf10:	68ec      	ldreq	r4, [r5, #12]
 800cf12:	e7e6      	b.n	800cee2 <__swsetup_r+0x1e>
 800cf14:	0758      	lsls	r0, r3, #29
 800cf16:	d512      	bpl.n	800cf3e <__swsetup_r+0x7a>
 800cf18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf1a:	b141      	cbz	r1, 800cf2e <__swsetup_r+0x6a>
 800cf1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf20:	4299      	cmp	r1, r3
 800cf22:	d002      	beq.n	800cf2a <__swsetup_r+0x66>
 800cf24:	4630      	mov	r0, r6
 800cf26:	f7ff fb25 	bl	800c574 <_free_r>
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	6363      	str	r3, [r4, #52]	; 0x34
 800cf2e:	89a3      	ldrh	r3, [r4, #12]
 800cf30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cf34:	81a3      	strh	r3, [r4, #12]
 800cf36:	2300      	movs	r3, #0
 800cf38:	6063      	str	r3, [r4, #4]
 800cf3a:	6923      	ldr	r3, [r4, #16]
 800cf3c:	6023      	str	r3, [r4, #0]
 800cf3e:	89a3      	ldrh	r3, [r4, #12]
 800cf40:	f043 0308 	orr.w	r3, r3, #8
 800cf44:	81a3      	strh	r3, [r4, #12]
 800cf46:	6923      	ldr	r3, [r4, #16]
 800cf48:	b94b      	cbnz	r3, 800cf5e <__swsetup_r+0x9a>
 800cf4a:	89a3      	ldrh	r3, [r4, #12]
 800cf4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cf50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf54:	d003      	beq.n	800cf5e <__swsetup_r+0x9a>
 800cf56:	4621      	mov	r1, r4
 800cf58:	4630      	mov	r0, r6
 800cf5a:	f000 fa09 	bl	800d370 <__smakebuf_r>
 800cf5e:	89a0      	ldrh	r0, [r4, #12]
 800cf60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf64:	f010 0301 	ands.w	r3, r0, #1
 800cf68:	d00a      	beq.n	800cf80 <__swsetup_r+0xbc>
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	60a3      	str	r3, [r4, #8]
 800cf6e:	6963      	ldr	r3, [r4, #20]
 800cf70:	425b      	negs	r3, r3
 800cf72:	61a3      	str	r3, [r4, #24]
 800cf74:	6923      	ldr	r3, [r4, #16]
 800cf76:	b943      	cbnz	r3, 800cf8a <__swsetup_r+0xc6>
 800cf78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cf7c:	d1ba      	bne.n	800cef4 <__swsetup_r+0x30>
 800cf7e:	bd70      	pop	{r4, r5, r6, pc}
 800cf80:	0781      	lsls	r1, r0, #30
 800cf82:	bf58      	it	pl
 800cf84:	6963      	ldrpl	r3, [r4, #20]
 800cf86:	60a3      	str	r3, [r4, #8]
 800cf88:	e7f4      	b.n	800cf74 <__swsetup_r+0xb0>
 800cf8a:	2000      	movs	r0, #0
 800cf8c:	e7f7      	b.n	800cf7e <__swsetup_r+0xba>
 800cf8e:	bf00      	nop
 800cf90:	20000030 	.word	0x20000030
 800cf94:	0800f934 	.word	0x0800f934
 800cf98:	0800f954 	.word	0x0800f954
 800cf9c:	0800f914 	.word	0x0800f914

0800cfa0 <abort>:
 800cfa0:	b508      	push	{r3, lr}
 800cfa2:	2006      	movs	r0, #6
 800cfa4:	f000 fa54 	bl	800d450 <raise>
 800cfa8:	2001      	movs	r0, #1
 800cfaa:	f7f5 f9d3 	bl	8002354 <_exit>
	...

0800cfb0 <__sflush_r>:
 800cfb0:	898a      	ldrh	r2, [r1, #12]
 800cfb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfb6:	4605      	mov	r5, r0
 800cfb8:	0710      	lsls	r0, r2, #28
 800cfba:	460c      	mov	r4, r1
 800cfbc:	d458      	bmi.n	800d070 <__sflush_r+0xc0>
 800cfbe:	684b      	ldr	r3, [r1, #4]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	dc05      	bgt.n	800cfd0 <__sflush_r+0x20>
 800cfc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	dc02      	bgt.n	800cfd0 <__sflush_r+0x20>
 800cfca:	2000      	movs	r0, #0
 800cfcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cfd2:	2e00      	cmp	r6, #0
 800cfd4:	d0f9      	beq.n	800cfca <__sflush_r+0x1a>
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cfdc:	682f      	ldr	r7, [r5, #0]
 800cfde:	602b      	str	r3, [r5, #0]
 800cfe0:	d032      	beq.n	800d048 <__sflush_r+0x98>
 800cfe2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cfe4:	89a3      	ldrh	r3, [r4, #12]
 800cfe6:	075a      	lsls	r2, r3, #29
 800cfe8:	d505      	bpl.n	800cff6 <__sflush_r+0x46>
 800cfea:	6863      	ldr	r3, [r4, #4]
 800cfec:	1ac0      	subs	r0, r0, r3
 800cfee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cff0:	b10b      	cbz	r3, 800cff6 <__sflush_r+0x46>
 800cff2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cff4:	1ac0      	subs	r0, r0, r3
 800cff6:	2300      	movs	r3, #0
 800cff8:	4602      	mov	r2, r0
 800cffa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cffc:	6a21      	ldr	r1, [r4, #32]
 800cffe:	4628      	mov	r0, r5
 800d000:	47b0      	blx	r6
 800d002:	1c43      	adds	r3, r0, #1
 800d004:	89a3      	ldrh	r3, [r4, #12]
 800d006:	d106      	bne.n	800d016 <__sflush_r+0x66>
 800d008:	6829      	ldr	r1, [r5, #0]
 800d00a:	291d      	cmp	r1, #29
 800d00c:	d82c      	bhi.n	800d068 <__sflush_r+0xb8>
 800d00e:	4a2a      	ldr	r2, [pc, #168]	; (800d0b8 <__sflush_r+0x108>)
 800d010:	40ca      	lsrs	r2, r1
 800d012:	07d6      	lsls	r6, r2, #31
 800d014:	d528      	bpl.n	800d068 <__sflush_r+0xb8>
 800d016:	2200      	movs	r2, #0
 800d018:	6062      	str	r2, [r4, #4]
 800d01a:	04d9      	lsls	r1, r3, #19
 800d01c:	6922      	ldr	r2, [r4, #16]
 800d01e:	6022      	str	r2, [r4, #0]
 800d020:	d504      	bpl.n	800d02c <__sflush_r+0x7c>
 800d022:	1c42      	adds	r2, r0, #1
 800d024:	d101      	bne.n	800d02a <__sflush_r+0x7a>
 800d026:	682b      	ldr	r3, [r5, #0]
 800d028:	b903      	cbnz	r3, 800d02c <__sflush_r+0x7c>
 800d02a:	6560      	str	r0, [r4, #84]	; 0x54
 800d02c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d02e:	602f      	str	r7, [r5, #0]
 800d030:	2900      	cmp	r1, #0
 800d032:	d0ca      	beq.n	800cfca <__sflush_r+0x1a>
 800d034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d038:	4299      	cmp	r1, r3
 800d03a:	d002      	beq.n	800d042 <__sflush_r+0x92>
 800d03c:	4628      	mov	r0, r5
 800d03e:	f7ff fa99 	bl	800c574 <_free_r>
 800d042:	2000      	movs	r0, #0
 800d044:	6360      	str	r0, [r4, #52]	; 0x34
 800d046:	e7c1      	b.n	800cfcc <__sflush_r+0x1c>
 800d048:	6a21      	ldr	r1, [r4, #32]
 800d04a:	2301      	movs	r3, #1
 800d04c:	4628      	mov	r0, r5
 800d04e:	47b0      	blx	r6
 800d050:	1c41      	adds	r1, r0, #1
 800d052:	d1c7      	bne.n	800cfe4 <__sflush_r+0x34>
 800d054:	682b      	ldr	r3, [r5, #0]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d0c4      	beq.n	800cfe4 <__sflush_r+0x34>
 800d05a:	2b1d      	cmp	r3, #29
 800d05c:	d001      	beq.n	800d062 <__sflush_r+0xb2>
 800d05e:	2b16      	cmp	r3, #22
 800d060:	d101      	bne.n	800d066 <__sflush_r+0xb6>
 800d062:	602f      	str	r7, [r5, #0]
 800d064:	e7b1      	b.n	800cfca <__sflush_r+0x1a>
 800d066:	89a3      	ldrh	r3, [r4, #12]
 800d068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d06c:	81a3      	strh	r3, [r4, #12]
 800d06e:	e7ad      	b.n	800cfcc <__sflush_r+0x1c>
 800d070:	690f      	ldr	r7, [r1, #16]
 800d072:	2f00      	cmp	r7, #0
 800d074:	d0a9      	beq.n	800cfca <__sflush_r+0x1a>
 800d076:	0793      	lsls	r3, r2, #30
 800d078:	680e      	ldr	r6, [r1, #0]
 800d07a:	bf08      	it	eq
 800d07c:	694b      	ldreq	r3, [r1, #20]
 800d07e:	600f      	str	r7, [r1, #0]
 800d080:	bf18      	it	ne
 800d082:	2300      	movne	r3, #0
 800d084:	eba6 0807 	sub.w	r8, r6, r7
 800d088:	608b      	str	r3, [r1, #8]
 800d08a:	f1b8 0f00 	cmp.w	r8, #0
 800d08e:	dd9c      	ble.n	800cfca <__sflush_r+0x1a>
 800d090:	6a21      	ldr	r1, [r4, #32]
 800d092:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d094:	4643      	mov	r3, r8
 800d096:	463a      	mov	r2, r7
 800d098:	4628      	mov	r0, r5
 800d09a:	47b0      	blx	r6
 800d09c:	2800      	cmp	r0, #0
 800d09e:	dc06      	bgt.n	800d0ae <__sflush_r+0xfe>
 800d0a0:	89a3      	ldrh	r3, [r4, #12]
 800d0a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0a6:	81a3      	strh	r3, [r4, #12]
 800d0a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d0ac:	e78e      	b.n	800cfcc <__sflush_r+0x1c>
 800d0ae:	4407      	add	r7, r0
 800d0b0:	eba8 0800 	sub.w	r8, r8, r0
 800d0b4:	e7e9      	b.n	800d08a <__sflush_r+0xda>
 800d0b6:	bf00      	nop
 800d0b8:	20400001 	.word	0x20400001

0800d0bc <_fflush_r>:
 800d0bc:	b538      	push	{r3, r4, r5, lr}
 800d0be:	690b      	ldr	r3, [r1, #16]
 800d0c0:	4605      	mov	r5, r0
 800d0c2:	460c      	mov	r4, r1
 800d0c4:	b913      	cbnz	r3, 800d0cc <_fflush_r+0x10>
 800d0c6:	2500      	movs	r5, #0
 800d0c8:	4628      	mov	r0, r5
 800d0ca:	bd38      	pop	{r3, r4, r5, pc}
 800d0cc:	b118      	cbz	r0, 800d0d6 <_fflush_r+0x1a>
 800d0ce:	6983      	ldr	r3, [r0, #24]
 800d0d0:	b90b      	cbnz	r3, 800d0d6 <_fflush_r+0x1a>
 800d0d2:	f000 f887 	bl	800d1e4 <__sinit>
 800d0d6:	4b14      	ldr	r3, [pc, #80]	; (800d128 <_fflush_r+0x6c>)
 800d0d8:	429c      	cmp	r4, r3
 800d0da:	d11b      	bne.n	800d114 <_fflush_r+0x58>
 800d0dc:	686c      	ldr	r4, [r5, #4]
 800d0de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d0ef      	beq.n	800d0c6 <_fflush_r+0xa>
 800d0e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d0e8:	07d0      	lsls	r0, r2, #31
 800d0ea:	d404      	bmi.n	800d0f6 <_fflush_r+0x3a>
 800d0ec:	0599      	lsls	r1, r3, #22
 800d0ee:	d402      	bmi.n	800d0f6 <_fflush_r+0x3a>
 800d0f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0f2:	f000 f915 	bl	800d320 <__retarget_lock_acquire_recursive>
 800d0f6:	4628      	mov	r0, r5
 800d0f8:	4621      	mov	r1, r4
 800d0fa:	f7ff ff59 	bl	800cfb0 <__sflush_r>
 800d0fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d100:	07da      	lsls	r2, r3, #31
 800d102:	4605      	mov	r5, r0
 800d104:	d4e0      	bmi.n	800d0c8 <_fflush_r+0xc>
 800d106:	89a3      	ldrh	r3, [r4, #12]
 800d108:	059b      	lsls	r3, r3, #22
 800d10a:	d4dd      	bmi.n	800d0c8 <_fflush_r+0xc>
 800d10c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d10e:	f000 f908 	bl	800d322 <__retarget_lock_release_recursive>
 800d112:	e7d9      	b.n	800d0c8 <_fflush_r+0xc>
 800d114:	4b05      	ldr	r3, [pc, #20]	; (800d12c <_fflush_r+0x70>)
 800d116:	429c      	cmp	r4, r3
 800d118:	d101      	bne.n	800d11e <_fflush_r+0x62>
 800d11a:	68ac      	ldr	r4, [r5, #8]
 800d11c:	e7df      	b.n	800d0de <_fflush_r+0x22>
 800d11e:	4b04      	ldr	r3, [pc, #16]	; (800d130 <_fflush_r+0x74>)
 800d120:	429c      	cmp	r4, r3
 800d122:	bf08      	it	eq
 800d124:	68ec      	ldreq	r4, [r5, #12]
 800d126:	e7da      	b.n	800d0de <_fflush_r+0x22>
 800d128:	0800f934 	.word	0x0800f934
 800d12c:	0800f954 	.word	0x0800f954
 800d130:	0800f914 	.word	0x0800f914

0800d134 <std>:
 800d134:	2300      	movs	r3, #0
 800d136:	b510      	push	{r4, lr}
 800d138:	4604      	mov	r4, r0
 800d13a:	e9c0 3300 	strd	r3, r3, [r0]
 800d13e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d142:	6083      	str	r3, [r0, #8]
 800d144:	8181      	strh	r1, [r0, #12]
 800d146:	6643      	str	r3, [r0, #100]	; 0x64
 800d148:	81c2      	strh	r2, [r0, #14]
 800d14a:	6183      	str	r3, [r0, #24]
 800d14c:	4619      	mov	r1, r3
 800d14e:	2208      	movs	r2, #8
 800d150:	305c      	adds	r0, #92	; 0x5c
 800d152:	f7fb fdcb 	bl	8008cec <memset>
 800d156:	4b05      	ldr	r3, [pc, #20]	; (800d16c <std+0x38>)
 800d158:	6263      	str	r3, [r4, #36]	; 0x24
 800d15a:	4b05      	ldr	r3, [pc, #20]	; (800d170 <std+0x3c>)
 800d15c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d15e:	4b05      	ldr	r3, [pc, #20]	; (800d174 <std+0x40>)
 800d160:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d162:	4b05      	ldr	r3, [pc, #20]	; (800d178 <std+0x44>)
 800d164:	6224      	str	r4, [r4, #32]
 800d166:	6323      	str	r3, [r4, #48]	; 0x30
 800d168:	bd10      	pop	{r4, pc}
 800d16a:	bf00      	nop
 800d16c:	0800d489 	.word	0x0800d489
 800d170:	0800d4ab 	.word	0x0800d4ab
 800d174:	0800d4e3 	.word	0x0800d4e3
 800d178:	0800d507 	.word	0x0800d507

0800d17c <_cleanup_r>:
 800d17c:	4901      	ldr	r1, [pc, #4]	; (800d184 <_cleanup_r+0x8>)
 800d17e:	f000 b8af 	b.w	800d2e0 <_fwalk_reent>
 800d182:	bf00      	nop
 800d184:	0800d0bd 	.word	0x0800d0bd

0800d188 <__sfmoreglue>:
 800d188:	b570      	push	{r4, r5, r6, lr}
 800d18a:	2268      	movs	r2, #104	; 0x68
 800d18c:	1e4d      	subs	r5, r1, #1
 800d18e:	4355      	muls	r5, r2
 800d190:	460e      	mov	r6, r1
 800d192:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d196:	f7ff fa59 	bl	800c64c <_malloc_r>
 800d19a:	4604      	mov	r4, r0
 800d19c:	b140      	cbz	r0, 800d1b0 <__sfmoreglue+0x28>
 800d19e:	2100      	movs	r1, #0
 800d1a0:	e9c0 1600 	strd	r1, r6, [r0]
 800d1a4:	300c      	adds	r0, #12
 800d1a6:	60a0      	str	r0, [r4, #8]
 800d1a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d1ac:	f7fb fd9e 	bl	8008cec <memset>
 800d1b0:	4620      	mov	r0, r4
 800d1b2:	bd70      	pop	{r4, r5, r6, pc}

0800d1b4 <__sfp_lock_acquire>:
 800d1b4:	4801      	ldr	r0, [pc, #4]	; (800d1bc <__sfp_lock_acquire+0x8>)
 800d1b6:	f000 b8b3 	b.w	800d320 <__retarget_lock_acquire_recursive>
 800d1ba:	bf00      	nop
 800d1bc:	20000991 	.word	0x20000991

0800d1c0 <__sfp_lock_release>:
 800d1c0:	4801      	ldr	r0, [pc, #4]	; (800d1c8 <__sfp_lock_release+0x8>)
 800d1c2:	f000 b8ae 	b.w	800d322 <__retarget_lock_release_recursive>
 800d1c6:	bf00      	nop
 800d1c8:	20000991 	.word	0x20000991

0800d1cc <__sinit_lock_acquire>:
 800d1cc:	4801      	ldr	r0, [pc, #4]	; (800d1d4 <__sinit_lock_acquire+0x8>)
 800d1ce:	f000 b8a7 	b.w	800d320 <__retarget_lock_acquire_recursive>
 800d1d2:	bf00      	nop
 800d1d4:	20000992 	.word	0x20000992

0800d1d8 <__sinit_lock_release>:
 800d1d8:	4801      	ldr	r0, [pc, #4]	; (800d1e0 <__sinit_lock_release+0x8>)
 800d1da:	f000 b8a2 	b.w	800d322 <__retarget_lock_release_recursive>
 800d1de:	bf00      	nop
 800d1e0:	20000992 	.word	0x20000992

0800d1e4 <__sinit>:
 800d1e4:	b510      	push	{r4, lr}
 800d1e6:	4604      	mov	r4, r0
 800d1e8:	f7ff fff0 	bl	800d1cc <__sinit_lock_acquire>
 800d1ec:	69a3      	ldr	r3, [r4, #24]
 800d1ee:	b11b      	cbz	r3, 800d1f8 <__sinit+0x14>
 800d1f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1f4:	f7ff bff0 	b.w	800d1d8 <__sinit_lock_release>
 800d1f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d1fc:	6523      	str	r3, [r4, #80]	; 0x50
 800d1fe:	4b13      	ldr	r3, [pc, #76]	; (800d24c <__sinit+0x68>)
 800d200:	4a13      	ldr	r2, [pc, #76]	; (800d250 <__sinit+0x6c>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	62a2      	str	r2, [r4, #40]	; 0x28
 800d206:	42a3      	cmp	r3, r4
 800d208:	bf04      	itt	eq
 800d20a:	2301      	moveq	r3, #1
 800d20c:	61a3      	streq	r3, [r4, #24]
 800d20e:	4620      	mov	r0, r4
 800d210:	f000 f820 	bl	800d254 <__sfp>
 800d214:	6060      	str	r0, [r4, #4]
 800d216:	4620      	mov	r0, r4
 800d218:	f000 f81c 	bl	800d254 <__sfp>
 800d21c:	60a0      	str	r0, [r4, #8]
 800d21e:	4620      	mov	r0, r4
 800d220:	f000 f818 	bl	800d254 <__sfp>
 800d224:	2200      	movs	r2, #0
 800d226:	60e0      	str	r0, [r4, #12]
 800d228:	2104      	movs	r1, #4
 800d22a:	6860      	ldr	r0, [r4, #4]
 800d22c:	f7ff ff82 	bl	800d134 <std>
 800d230:	68a0      	ldr	r0, [r4, #8]
 800d232:	2201      	movs	r2, #1
 800d234:	2109      	movs	r1, #9
 800d236:	f7ff ff7d 	bl	800d134 <std>
 800d23a:	68e0      	ldr	r0, [r4, #12]
 800d23c:	2202      	movs	r2, #2
 800d23e:	2112      	movs	r1, #18
 800d240:	f7ff ff78 	bl	800d134 <std>
 800d244:	2301      	movs	r3, #1
 800d246:	61a3      	str	r3, [r4, #24]
 800d248:	e7d2      	b.n	800d1f0 <__sinit+0xc>
 800d24a:	bf00      	nop
 800d24c:	0800f4d0 	.word	0x0800f4d0
 800d250:	0800d17d 	.word	0x0800d17d

0800d254 <__sfp>:
 800d254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d256:	4607      	mov	r7, r0
 800d258:	f7ff ffac 	bl	800d1b4 <__sfp_lock_acquire>
 800d25c:	4b1e      	ldr	r3, [pc, #120]	; (800d2d8 <__sfp+0x84>)
 800d25e:	681e      	ldr	r6, [r3, #0]
 800d260:	69b3      	ldr	r3, [r6, #24]
 800d262:	b913      	cbnz	r3, 800d26a <__sfp+0x16>
 800d264:	4630      	mov	r0, r6
 800d266:	f7ff ffbd 	bl	800d1e4 <__sinit>
 800d26a:	3648      	adds	r6, #72	; 0x48
 800d26c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d270:	3b01      	subs	r3, #1
 800d272:	d503      	bpl.n	800d27c <__sfp+0x28>
 800d274:	6833      	ldr	r3, [r6, #0]
 800d276:	b30b      	cbz	r3, 800d2bc <__sfp+0x68>
 800d278:	6836      	ldr	r6, [r6, #0]
 800d27a:	e7f7      	b.n	800d26c <__sfp+0x18>
 800d27c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d280:	b9d5      	cbnz	r5, 800d2b8 <__sfp+0x64>
 800d282:	4b16      	ldr	r3, [pc, #88]	; (800d2dc <__sfp+0x88>)
 800d284:	60e3      	str	r3, [r4, #12]
 800d286:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d28a:	6665      	str	r5, [r4, #100]	; 0x64
 800d28c:	f000 f847 	bl	800d31e <__retarget_lock_init_recursive>
 800d290:	f7ff ff96 	bl	800d1c0 <__sfp_lock_release>
 800d294:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d298:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d29c:	6025      	str	r5, [r4, #0]
 800d29e:	61a5      	str	r5, [r4, #24]
 800d2a0:	2208      	movs	r2, #8
 800d2a2:	4629      	mov	r1, r5
 800d2a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d2a8:	f7fb fd20 	bl	8008cec <memset>
 800d2ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d2b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d2b4:	4620      	mov	r0, r4
 800d2b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2b8:	3468      	adds	r4, #104	; 0x68
 800d2ba:	e7d9      	b.n	800d270 <__sfp+0x1c>
 800d2bc:	2104      	movs	r1, #4
 800d2be:	4638      	mov	r0, r7
 800d2c0:	f7ff ff62 	bl	800d188 <__sfmoreglue>
 800d2c4:	4604      	mov	r4, r0
 800d2c6:	6030      	str	r0, [r6, #0]
 800d2c8:	2800      	cmp	r0, #0
 800d2ca:	d1d5      	bne.n	800d278 <__sfp+0x24>
 800d2cc:	f7ff ff78 	bl	800d1c0 <__sfp_lock_release>
 800d2d0:	230c      	movs	r3, #12
 800d2d2:	603b      	str	r3, [r7, #0]
 800d2d4:	e7ee      	b.n	800d2b4 <__sfp+0x60>
 800d2d6:	bf00      	nop
 800d2d8:	0800f4d0 	.word	0x0800f4d0
 800d2dc:	ffff0001 	.word	0xffff0001

0800d2e0 <_fwalk_reent>:
 800d2e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2e4:	4606      	mov	r6, r0
 800d2e6:	4688      	mov	r8, r1
 800d2e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d2ec:	2700      	movs	r7, #0
 800d2ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d2f2:	f1b9 0901 	subs.w	r9, r9, #1
 800d2f6:	d505      	bpl.n	800d304 <_fwalk_reent+0x24>
 800d2f8:	6824      	ldr	r4, [r4, #0]
 800d2fa:	2c00      	cmp	r4, #0
 800d2fc:	d1f7      	bne.n	800d2ee <_fwalk_reent+0xe>
 800d2fe:	4638      	mov	r0, r7
 800d300:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d304:	89ab      	ldrh	r3, [r5, #12]
 800d306:	2b01      	cmp	r3, #1
 800d308:	d907      	bls.n	800d31a <_fwalk_reent+0x3a>
 800d30a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d30e:	3301      	adds	r3, #1
 800d310:	d003      	beq.n	800d31a <_fwalk_reent+0x3a>
 800d312:	4629      	mov	r1, r5
 800d314:	4630      	mov	r0, r6
 800d316:	47c0      	blx	r8
 800d318:	4307      	orrs	r7, r0
 800d31a:	3568      	adds	r5, #104	; 0x68
 800d31c:	e7e9      	b.n	800d2f2 <_fwalk_reent+0x12>

0800d31e <__retarget_lock_init_recursive>:
 800d31e:	4770      	bx	lr

0800d320 <__retarget_lock_acquire_recursive>:
 800d320:	4770      	bx	lr

0800d322 <__retarget_lock_release_recursive>:
 800d322:	4770      	bx	lr

0800d324 <__swhatbuf_r>:
 800d324:	b570      	push	{r4, r5, r6, lr}
 800d326:	460e      	mov	r6, r1
 800d328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d32c:	2900      	cmp	r1, #0
 800d32e:	b096      	sub	sp, #88	; 0x58
 800d330:	4614      	mov	r4, r2
 800d332:	461d      	mov	r5, r3
 800d334:	da08      	bge.n	800d348 <__swhatbuf_r+0x24>
 800d336:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d33a:	2200      	movs	r2, #0
 800d33c:	602a      	str	r2, [r5, #0]
 800d33e:	061a      	lsls	r2, r3, #24
 800d340:	d410      	bmi.n	800d364 <__swhatbuf_r+0x40>
 800d342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d346:	e00e      	b.n	800d366 <__swhatbuf_r+0x42>
 800d348:	466a      	mov	r2, sp
 800d34a:	f000 f903 	bl	800d554 <_fstat_r>
 800d34e:	2800      	cmp	r0, #0
 800d350:	dbf1      	blt.n	800d336 <__swhatbuf_r+0x12>
 800d352:	9a01      	ldr	r2, [sp, #4]
 800d354:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d358:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d35c:	425a      	negs	r2, r3
 800d35e:	415a      	adcs	r2, r3
 800d360:	602a      	str	r2, [r5, #0]
 800d362:	e7ee      	b.n	800d342 <__swhatbuf_r+0x1e>
 800d364:	2340      	movs	r3, #64	; 0x40
 800d366:	2000      	movs	r0, #0
 800d368:	6023      	str	r3, [r4, #0]
 800d36a:	b016      	add	sp, #88	; 0x58
 800d36c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d370 <__smakebuf_r>:
 800d370:	898b      	ldrh	r3, [r1, #12]
 800d372:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d374:	079d      	lsls	r5, r3, #30
 800d376:	4606      	mov	r6, r0
 800d378:	460c      	mov	r4, r1
 800d37a:	d507      	bpl.n	800d38c <__smakebuf_r+0x1c>
 800d37c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d380:	6023      	str	r3, [r4, #0]
 800d382:	6123      	str	r3, [r4, #16]
 800d384:	2301      	movs	r3, #1
 800d386:	6163      	str	r3, [r4, #20]
 800d388:	b002      	add	sp, #8
 800d38a:	bd70      	pop	{r4, r5, r6, pc}
 800d38c:	ab01      	add	r3, sp, #4
 800d38e:	466a      	mov	r2, sp
 800d390:	f7ff ffc8 	bl	800d324 <__swhatbuf_r>
 800d394:	9900      	ldr	r1, [sp, #0]
 800d396:	4605      	mov	r5, r0
 800d398:	4630      	mov	r0, r6
 800d39a:	f7ff f957 	bl	800c64c <_malloc_r>
 800d39e:	b948      	cbnz	r0, 800d3b4 <__smakebuf_r+0x44>
 800d3a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3a4:	059a      	lsls	r2, r3, #22
 800d3a6:	d4ef      	bmi.n	800d388 <__smakebuf_r+0x18>
 800d3a8:	f023 0303 	bic.w	r3, r3, #3
 800d3ac:	f043 0302 	orr.w	r3, r3, #2
 800d3b0:	81a3      	strh	r3, [r4, #12]
 800d3b2:	e7e3      	b.n	800d37c <__smakebuf_r+0xc>
 800d3b4:	4b0d      	ldr	r3, [pc, #52]	; (800d3ec <__smakebuf_r+0x7c>)
 800d3b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d3b8:	89a3      	ldrh	r3, [r4, #12]
 800d3ba:	6020      	str	r0, [r4, #0]
 800d3bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3c0:	81a3      	strh	r3, [r4, #12]
 800d3c2:	9b00      	ldr	r3, [sp, #0]
 800d3c4:	6163      	str	r3, [r4, #20]
 800d3c6:	9b01      	ldr	r3, [sp, #4]
 800d3c8:	6120      	str	r0, [r4, #16]
 800d3ca:	b15b      	cbz	r3, 800d3e4 <__smakebuf_r+0x74>
 800d3cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3d0:	4630      	mov	r0, r6
 800d3d2:	f000 f8d1 	bl	800d578 <_isatty_r>
 800d3d6:	b128      	cbz	r0, 800d3e4 <__smakebuf_r+0x74>
 800d3d8:	89a3      	ldrh	r3, [r4, #12]
 800d3da:	f023 0303 	bic.w	r3, r3, #3
 800d3de:	f043 0301 	orr.w	r3, r3, #1
 800d3e2:	81a3      	strh	r3, [r4, #12]
 800d3e4:	89a0      	ldrh	r0, [r4, #12]
 800d3e6:	4305      	orrs	r5, r0
 800d3e8:	81a5      	strh	r5, [r4, #12]
 800d3ea:	e7cd      	b.n	800d388 <__smakebuf_r+0x18>
 800d3ec:	0800d17d 	.word	0x0800d17d

0800d3f0 <_malloc_usable_size_r>:
 800d3f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3f4:	1f18      	subs	r0, r3, #4
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	bfbc      	itt	lt
 800d3fa:	580b      	ldrlt	r3, [r1, r0]
 800d3fc:	18c0      	addlt	r0, r0, r3
 800d3fe:	4770      	bx	lr

0800d400 <_raise_r>:
 800d400:	291f      	cmp	r1, #31
 800d402:	b538      	push	{r3, r4, r5, lr}
 800d404:	4604      	mov	r4, r0
 800d406:	460d      	mov	r5, r1
 800d408:	d904      	bls.n	800d414 <_raise_r+0x14>
 800d40a:	2316      	movs	r3, #22
 800d40c:	6003      	str	r3, [r0, #0]
 800d40e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d412:	bd38      	pop	{r3, r4, r5, pc}
 800d414:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d416:	b112      	cbz	r2, 800d41e <_raise_r+0x1e>
 800d418:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d41c:	b94b      	cbnz	r3, 800d432 <_raise_r+0x32>
 800d41e:	4620      	mov	r0, r4
 800d420:	f000 f830 	bl	800d484 <_getpid_r>
 800d424:	462a      	mov	r2, r5
 800d426:	4601      	mov	r1, r0
 800d428:	4620      	mov	r0, r4
 800d42a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d42e:	f000 b817 	b.w	800d460 <_kill_r>
 800d432:	2b01      	cmp	r3, #1
 800d434:	d00a      	beq.n	800d44c <_raise_r+0x4c>
 800d436:	1c59      	adds	r1, r3, #1
 800d438:	d103      	bne.n	800d442 <_raise_r+0x42>
 800d43a:	2316      	movs	r3, #22
 800d43c:	6003      	str	r3, [r0, #0]
 800d43e:	2001      	movs	r0, #1
 800d440:	e7e7      	b.n	800d412 <_raise_r+0x12>
 800d442:	2400      	movs	r4, #0
 800d444:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d448:	4628      	mov	r0, r5
 800d44a:	4798      	blx	r3
 800d44c:	2000      	movs	r0, #0
 800d44e:	e7e0      	b.n	800d412 <_raise_r+0x12>

0800d450 <raise>:
 800d450:	4b02      	ldr	r3, [pc, #8]	; (800d45c <raise+0xc>)
 800d452:	4601      	mov	r1, r0
 800d454:	6818      	ldr	r0, [r3, #0]
 800d456:	f7ff bfd3 	b.w	800d400 <_raise_r>
 800d45a:	bf00      	nop
 800d45c:	20000030 	.word	0x20000030

0800d460 <_kill_r>:
 800d460:	b538      	push	{r3, r4, r5, lr}
 800d462:	4d07      	ldr	r5, [pc, #28]	; (800d480 <_kill_r+0x20>)
 800d464:	2300      	movs	r3, #0
 800d466:	4604      	mov	r4, r0
 800d468:	4608      	mov	r0, r1
 800d46a:	4611      	mov	r1, r2
 800d46c:	602b      	str	r3, [r5, #0]
 800d46e:	f7f4 ff61 	bl	8002334 <_kill>
 800d472:	1c43      	adds	r3, r0, #1
 800d474:	d102      	bne.n	800d47c <_kill_r+0x1c>
 800d476:	682b      	ldr	r3, [r5, #0]
 800d478:	b103      	cbz	r3, 800d47c <_kill_r+0x1c>
 800d47a:	6023      	str	r3, [r4, #0]
 800d47c:	bd38      	pop	{r3, r4, r5, pc}
 800d47e:	bf00      	nop
 800d480:	2000098c 	.word	0x2000098c

0800d484 <_getpid_r>:
 800d484:	f7f4 bf4e 	b.w	8002324 <_getpid>

0800d488 <__sread>:
 800d488:	b510      	push	{r4, lr}
 800d48a:	460c      	mov	r4, r1
 800d48c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d490:	f000 f894 	bl	800d5bc <_read_r>
 800d494:	2800      	cmp	r0, #0
 800d496:	bfab      	itete	ge
 800d498:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d49a:	89a3      	ldrhlt	r3, [r4, #12]
 800d49c:	181b      	addge	r3, r3, r0
 800d49e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d4a2:	bfac      	ite	ge
 800d4a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d4a6:	81a3      	strhlt	r3, [r4, #12]
 800d4a8:	bd10      	pop	{r4, pc}

0800d4aa <__swrite>:
 800d4aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ae:	461f      	mov	r7, r3
 800d4b0:	898b      	ldrh	r3, [r1, #12]
 800d4b2:	05db      	lsls	r3, r3, #23
 800d4b4:	4605      	mov	r5, r0
 800d4b6:	460c      	mov	r4, r1
 800d4b8:	4616      	mov	r6, r2
 800d4ba:	d505      	bpl.n	800d4c8 <__swrite+0x1e>
 800d4bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4c0:	2302      	movs	r3, #2
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	f000 f868 	bl	800d598 <_lseek_r>
 800d4c8:	89a3      	ldrh	r3, [r4, #12]
 800d4ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d4d2:	81a3      	strh	r3, [r4, #12]
 800d4d4:	4632      	mov	r2, r6
 800d4d6:	463b      	mov	r3, r7
 800d4d8:	4628      	mov	r0, r5
 800d4da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4de:	f000 b817 	b.w	800d510 <_write_r>

0800d4e2 <__sseek>:
 800d4e2:	b510      	push	{r4, lr}
 800d4e4:	460c      	mov	r4, r1
 800d4e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4ea:	f000 f855 	bl	800d598 <_lseek_r>
 800d4ee:	1c43      	adds	r3, r0, #1
 800d4f0:	89a3      	ldrh	r3, [r4, #12]
 800d4f2:	bf15      	itete	ne
 800d4f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800d4f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d4fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d4fe:	81a3      	strheq	r3, [r4, #12]
 800d500:	bf18      	it	ne
 800d502:	81a3      	strhne	r3, [r4, #12]
 800d504:	bd10      	pop	{r4, pc}

0800d506 <__sclose>:
 800d506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d50a:	f000 b813 	b.w	800d534 <_close_r>
	...

0800d510 <_write_r>:
 800d510:	b538      	push	{r3, r4, r5, lr}
 800d512:	4d07      	ldr	r5, [pc, #28]	; (800d530 <_write_r+0x20>)
 800d514:	4604      	mov	r4, r0
 800d516:	4608      	mov	r0, r1
 800d518:	4611      	mov	r1, r2
 800d51a:	2200      	movs	r2, #0
 800d51c:	602a      	str	r2, [r5, #0]
 800d51e:	461a      	mov	r2, r3
 800d520:	f7f4 ff3f 	bl	80023a2 <_write>
 800d524:	1c43      	adds	r3, r0, #1
 800d526:	d102      	bne.n	800d52e <_write_r+0x1e>
 800d528:	682b      	ldr	r3, [r5, #0]
 800d52a:	b103      	cbz	r3, 800d52e <_write_r+0x1e>
 800d52c:	6023      	str	r3, [r4, #0]
 800d52e:	bd38      	pop	{r3, r4, r5, pc}
 800d530:	2000098c 	.word	0x2000098c

0800d534 <_close_r>:
 800d534:	b538      	push	{r3, r4, r5, lr}
 800d536:	4d06      	ldr	r5, [pc, #24]	; (800d550 <_close_r+0x1c>)
 800d538:	2300      	movs	r3, #0
 800d53a:	4604      	mov	r4, r0
 800d53c:	4608      	mov	r0, r1
 800d53e:	602b      	str	r3, [r5, #0]
 800d540:	f7f4 ff4b 	bl	80023da <_close>
 800d544:	1c43      	adds	r3, r0, #1
 800d546:	d102      	bne.n	800d54e <_close_r+0x1a>
 800d548:	682b      	ldr	r3, [r5, #0]
 800d54a:	b103      	cbz	r3, 800d54e <_close_r+0x1a>
 800d54c:	6023      	str	r3, [r4, #0]
 800d54e:	bd38      	pop	{r3, r4, r5, pc}
 800d550:	2000098c 	.word	0x2000098c

0800d554 <_fstat_r>:
 800d554:	b538      	push	{r3, r4, r5, lr}
 800d556:	4d07      	ldr	r5, [pc, #28]	; (800d574 <_fstat_r+0x20>)
 800d558:	2300      	movs	r3, #0
 800d55a:	4604      	mov	r4, r0
 800d55c:	4608      	mov	r0, r1
 800d55e:	4611      	mov	r1, r2
 800d560:	602b      	str	r3, [r5, #0]
 800d562:	f7f4 ff46 	bl	80023f2 <_fstat>
 800d566:	1c43      	adds	r3, r0, #1
 800d568:	d102      	bne.n	800d570 <_fstat_r+0x1c>
 800d56a:	682b      	ldr	r3, [r5, #0]
 800d56c:	b103      	cbz	r3, 800d570 <_fstat_r+0x1c>
 800d56e:	6023      	str	r3, [r4, #0]
 800d570:	bd38      	pop	{r3, r4, r5, pc}
 800d572:	bf00      	nop
 800d574:	2000098c 	.word	0x2000098c

0800d578 <_isatty_r>:
 800d578:	b538      	push	{r3, r4, r5, lr}
 800d57a:	4d06      	ldr	r5, [pc, #24]	; (800d594 <_isatty_r+0x1c>)
 800d57c:	2300      	movs	r3, #0
 800d57e:	4604      	mov	r4, r0
 800d580:	4608      	mov	r0, r1
 800d582:	602b      	str	r3, [r5, #0]
 800d584:	f7f4 ff45 	bl	8002412 <_isatty>
 800d588:	1c43      	adds	r3, r0, #1
 800d58a:	d102      	bne.n	800d592 <_isatty_r+0x1a>
 800d58c:	682b      	ldr	r3, [r5, #0]
 800d58e:	b103      	cbz	r3, 800d592 <_isatty_r+0x1a>
 800d590:	6023      	str	r3, [r4, #0]
 800d592:	bd38      	pop	{r3, r4, r5, pc}
 800d594:	2000098c 	.word	0x2000098c

0800d598 <_lseek_r>:
 800d598:	b538      	push	{r3, r4, r5, lr}
 800d59a:	4d07      	ldr	r5, [pc, #28]	; (800d5b8 <_lseek_r+0x20>)
 800d59c:	4604      	mov	r4, r0
 800d59e:	4608      	mov	r0, r1
 800d5a0:	4611      	mov	r1, r2
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	602a      	str	r2, [r5, #0]
 800d5a6:	461a      	mov	r2, r3
 800d5a8:	f7f4 ff3e 	bl	8002428 <_lseek>
 800d5ac:	1c43      	adds	r3, r0, #1
 800d5ae:	d102      	bne.n	800d5b6 <_lseek_r+0x1e>
 800d5b0:	682b      	ldr	r3, [r5, #0]
 800d5b2:	b103      	cbz	r3, 800d5b6 <_lseek_r+0x1e>
 800d5b4:	6023      	str	r3, [r4, #0]
 800d5b6:	bd38      	pop	{r3, r4, r5, pc}
 800d5b8:	2000098c 	.word	0x2000098c

0800d5bc <_read_r>:
 800d5bc:	b538      	push	{r3, r4, r5, lr}
 800d5be:	4d07      	ldr	r5, [pc, #28]	; (800d5dc <_read_r+0x20>)
 800d5c0:	4604      	mov	r4, r0
 800d5c2:	4608      	mov	r0, r1
 800d5c4:	4611      	mov	r1, r2
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	602a      	str	r2, [r5, #0]
 800d5ca:	461a      	mov	r2, r3
 800d5cc:	f7f4 fecc 	bl	8002368 <_read>
 800d5d0:	1c43      	adds	r3, r0, #1
 800d5d2:	d102      	bne.n	800d5da <_read_r+0x1e>
 800d5d4:	682b      	ldr	r3, [r5, #0]
 800d5d6:	b103      	cbz	r3, 800d5da <_read_r+0x1e>
 800d5d8:	6023      	str	r3, [r4, #0]
 800d5da:	bd38      	pop	{r3, r4, r5, pc}
 800d5dc:	2000098c 	.word	0x2000098c

0800d5e0 <tan>:
 800d5e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d5e2:	ec53 2b10 	vmov	r2, r3, d0
 800d5e6:	4816      	ldr	r0, [pc, #88]	; (800d640 <tan+0x60>)
 800d5e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d5ec:	4281      	cmp	r1, r0
 800d5ee:	dc07      	bgt.n	800d600 <tan+0x20>
 800d5f0:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800d638 <tan+0x58>
 800d5f4:	2001      	movs	r0, #1
 800d5f6:	b005      	add	sp, #20
 800d5f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5fc:	f001 bbd4 	b.w	800eda8 <__kernel_tan>
 800d600:	4810      	ldr	r0, [pc, #64]	; (800d644 <tan+0x64>)
 800d602:	4281      	cmp	r1, r0
 800d604:	dd09      	ble.n	800d61a <tan+0x3a>
 800d606:	ee10 0a10 	vmov	r0, s0
 800d60a:	4619      	mov	r1, r3
 800d60c:	f7f2 fe3c 	bl	8000288 <__aeabi_dsub>
 800d610:	ec41 0b10 	vmov	d0, r0, r1
 800d614:	b005      	add	sp, #20
 800d616:	f85d fb04 	ldr.w	pc, [sp], #4
 800d61a:	4668      	mov	r0, sp
 800d61c:	f000 fdb4 	bl	800e188 <__ieee754_rem_pio2>
 800d620:	0040      	lsls	r0, r0, #1
 800d622:	f000 0002 	and.w	r0, r0, #2
 800d626:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d62a:	ed9d 0b00 	vldr	d0, [sp]
 800d62e:	f1c0 0001 	rsb	r0, r0, #1
 800d632:	f001 fbb9 	bl	800eda8 <__kernel_tan>
 800d636:	e7ed      	b.n	800d614 <tan+0x34>
	...
 800d640:	3fe921fb 	.word	0x3fe921fb
 800d644:	7fefffff 	.word	0x7fefffff

0800d648 <pow>:
 800d648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d64a:	ed2d 8b02 	vpush	{d8}
 800d64e:	eeb0 8a40 	vmov.f32	s16, s0
 800d652:	eef0 8a60 	vmov.f32	s17, s1
 800d656:	ec55 4b11 	vmov	r4, r5, d1
 800d65a:	f000 f865 	bl	800d728 <__ieee754_pow>
 800d65e:	4622      	mov	r2, r4
 800d660:	462b      	mov	r3, r5
 800d662:	4620      	mov	r0, r4
 800d664:	4629      	mov	r1, r5
 800d666:	ec57 6b10 	vmov	r6, r7, d0
 800d66a:	f7f3 fa5f 	bl	8000b2c <__aeabi_dcmpun>
 800d66e:	2800      	cmp	r0, #0
 800d670:	d13b      	bne.n	800d6ea <pow+0xa2>
 800d672:	ec51 0b18 	vmov	r0, r1, d8
 800d676:	2200      	movs	r2, #0
 800d678:	2300      	movs	r3, #0
 800d67a:	f7f3 fa25 	bl	8000ac8 <__aeabi_dcmpeq>
 800d67e:	b1b8      	cbz	r0, 800d6b0 <pow+0x68>
 800d680:	2200      	movs	r2, #0
 800d682:	2300      	movs	r3, #0
 800d684:	4620      	mov	r0, r4
 800d686:	4629      	mov	r1, r5
 800d688:	f7f3 fa1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d68c:	2800      	cmp	r0, #0
 800d68e:	d146      	bne.n	800d71e <pow+0xd6>
 800d690:	ec45 4b10 	vmov	d0, r4, r5
 800d694:	f001 fdcb 	bl	800f22e <finite>
 800d698:	b338      	cbz	r0, 800d6ea <pow+0xa2>
 800d69a:	2200      	movs	r2, #0
 800d69c:	2300      	movs	r3, #0
 800d69e:	4620      	mov	r0, r4
 800d6a0:	4629      	mov	r1, r5
 800d6a2:	f7f3 fa1b 	bl	8000adc <__aeabi_dcmplt>
 800d6a6:	b300      	cbz	r0, 800d6ea <pow+0xa2>
 800d6a8:	f7fb faf6 	bl	8008c98 <__errno>
 800d6ac:	2322      	movs	r3, #34	; 0x22
 800d6ae:	e01b      	b.n	800d6e8 <pow+0xa0>
 800d6b0:	ec47 6b10 	vmov	d0, r6, r7
 800d6b4:	f001 fdbb 	bl	800f22e <finite>
 800d6b8:	b9e0      	cbnz	r0, 800d6f4 <pow+0xac>
 800d6ba:	eeb0 0a48 	vmov.f32	s0, s16
 800d6be:	eef0 0a68 	vmov.f32	s1, s17
 800d6c2:	f001 fdb4 	bl	800f22e <finite>
 800d6c6:	b1a8      	cbz	r0, 800d6f4 <pow+0xac>
 800d6c8:	ec45 4b10 	vmov	d0, r4, r5
 800d6cc:	f001 fdaf 	bl	800f22e <finite>
 800d6d0:	b180      	cbz	r0, 800d6f4 <pow+0xac>
 800d6d2:	4632      	mov	r2, r6
 800d6d4:	463b      	mov	r3, r7
 800d6d6:	4630      	mov	r0, r6
 800d6d8:	4639      	mov	r1, r7
 800d6da:	f7f3 fa27 	bl	8000b2c <__aeabi_dcmpun>
 800d6de:	2800      	cmp	r0, #0
 800d6e0:	d0e2      	beq.n	800d6a8 <pow+0x60>
 800d6e2:	f7fb fad9 	bl	8008c98 <__errno>
 800d6e6:	2321      	movs	r3, #33	; 0x21
 800d6e8:	6003      	str	r3, [r0, #0]
 800d6ea:	ecbd 8b02 	vpop	{d8}
 800d6ee:	ec47 6b10 	vmov	d0, r6, r7
 800d6f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	4630      	mov	r0, r6
 800d6fa:	4639      	mov	r1, r7
 800d6fc:	f7f3 f9e4 	bl	8000ac8 <__aeabi_dcmpeq>
 800d700:	2800      	cmp	r0, #0
 800d702:	d0f2      	beq.n	800d6ea <pow+0xa2>
 800d704:	eeb0 0a48 	vmov.f32	s0, s16
 800d708:	eef0 0a68 	vmov.f32	s1, s17
 800d70c:	f001 fd8f 	bl	800f22e <finite>
 800d710:	2800      	cmp	r0, #0
 800d712:	d0ea      	beq.n	800d6ea <pow+0xa2>
 800d714:	ec45 4b10 	vmov	d0, r4, r5
 800d718:	f001 fd89 	bl	800f22e <finite>
 800d71c:	e7c3      	b.n	800d6a6 <pow+0x5e>
 800d71e:	4f01      	ldr	r7, [pc, #4]	; (800d724 <pow+0xdc>)
 800d720:	2600      	movs	r6, #0
 800d722:	e7e2      	b.n	800d6ea <pow+0xa2>
 800d724:	3ff00000 	.word	0x3ff00000

0800d728 <__ieee754_pow>:
 800d728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d72c:	ed2d 8b06 	vpush	{d8-d10}
 800d730:	b089      	sub	sp, #36	; 0x24
 800d732:	ed8d 1b00 	vstr	d1, [sp]
 800d736:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d73a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d73e:	ea58 0102 	orrs.w	r1, r8, r2
 800d742:	ec57 6b10 	vmov	r6, r7, d0
 800d746:	d115      	bne.n	800d774 <__ieee754_pow+0x4c>
 800d748:	19b3      	adds	r3, r6, r6
 800d74a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800d74e:	4152      	adcs	r2, r2
 800d750:	4299      	cmp	r1, r3
 800d752:	4b89      	ldr	r3, [pc, #548]	; (800d978 <__ieee754_pow+0x250>)
 800d754:	4193      	sbcs	r3, r2
 800d756:	f080 84d2 	bcs.w	800e0fe <__ieee754_pow+0x9d6>
 800d75a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d75e:	4630      	mov	r0, r6
 800d760:	4639      	mov	r1, r7
 800d762:	f7f2 fd93 	bl	800028c <__adddf3>
 800d766:	ec41 0b10 	vmov	d0, r0, r1
 800d76a:	b009      	add	sp, #36	; 0x24
 800d76c:	ecbd 8b06 	vpop	{d8-d10}
 800d770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d774:	4b81      	ldr	r3, [pc, #516]	; (800d97c <__ieee754_pow+0x254>)
 800d776:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800d77a:	429c      	cmp	r4, r3
 800d77c:	ee10 aa10 	vmov	sl, s0
 800d780:	463d      	mov	r5, r7
 800d782:	dc06      	bgt.n	800d792 <__ieee754_pow+0x6a>
 800d784:	d101      	bne.n	800d78a <__ieee754_pow+0x62>
 800d786:	2e00      	cmp	r6, #0
 800d788:	d1e7      	bne.n	800d75a <__ieee754_pow+0x32>
 800d78a:	4598      	cmp	r8, r3
 800d78c:	dc01      	bgt.n	800d792 <__ieee754_pow+0x6a>
 800d78e:	d10f      	bne.n	800d7b0 <__ieee754_pow+0x88>
 800d790:	b172      	cbz	r2, 800d7b0 <__ieee754_pow+0x88>
 800d792:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800d796:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800d79a:	ea55 050a 	orrs.w	r5, r5, sl
 800d79e:	d1dc      	bne.n	800d75a <__ieee754_pow+0x32>
 800d7a0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d7a4:	18db      	adds	r3, r3, r3
 800d7a6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800d7aa:	4152      	adcs	r2, r2
 800d7ac:	429d      	cmp	r5, r3
 800d7ae:	e7d0      	b.n	800d752 <__ieee754_pow+0x2a>
 800d7b0:	2d00      	cmp	r5, #0
 800d7b2:	da3b      	bge.n	800d82c <__ieee754_pow+0x104>
 800d7b4:	4b72      	ldr	r3, [pc, #456]	; (800d980 <__ieee754_pow+0x258>)
 800d7b6:	4598      	cmp	r8, r3
 800d7b8:	dc51      	bgt.n	800d85e <__ieee754_pow+0x136>
 800d7ba:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d7be:	4598      	cmp	r8, r3
 800d7c0:	f340 84ac 	ble.w	800e11c <__ieee754_pow+0x9f4>
 800d7c4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d7c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d7cc:	2b14      	cmp	r3, #20
 800d7ce:	dd0f      	ble.n	800d7f0 <__ieee754_pow+0xc8>
 800d7d0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d7d4:	fa22 f103 	lsr.w	r1, r2, r3
 800d7d8:	fa01 f303 	lsl.w	r3, r1, r3
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	f040 849d 	bne.w	800e11c <__ieee754_pow+0x9f4>
 800d7e2:	f001 0101 	and.w	r1, r1, #1
 800d7e6:	f1c1 0302 	rsb	r3, r1, #2
 800d7ea:	9304      	str	r3, [sp, #16]
 800d7ec:	b182      	cbz	r2, 800d810 <__ieee754_pow+0xe8>
 800d7ee:	e05f      	b.n	800d8b0 <__ieee754_pow+0x188>
 800d7f0:	2a00      	cmp	r2, #0
 800d7f2:	d15b      	bne.n	800d8ac <__ieee754_pow+0x184>
 800d7f4:	f1c3 0314 	rsb	r3, r3, #20
 800d7f8:	fa48 f103 	asr.w	r1, r8, r3
 800d7fc:	fa01 f303 	lsl.w	r3, r1, r3
 800d800:	4543      	cmp	r3, r8
 800d802:	f040 8488 	bne.w	800e116 <__ieee754_pow+0x9ee>
 800d806:	f001 0101 	and.w	r1, r1, #1
 800d80a:	f1c1 0302 	rsb	r3, r1, #2
 800d80e:	9304      	str	r3, [sp, #16]
 800d810:	4b5c      	ldr	r3, [pc, #368]	; (800d984 <__ieee754_pow+0x25c>)
 800d812:	4598      	cmp	r8, r3
 800d814:	d132      	bne.n	800d87c <__ieee754_pow+0x154>
 800d816:	f1b9 0f00 	cmp.w	r9, #0
 800d81a:	f280 8478 	bge.w	800e10e <__ieee754_pow+0x9e6>
 800d81e:	4959      	ldr	r1, [pc, #356]	; (800d984 <__ieee754_pow+0x25c>)
 800d820:	4632      	mov	r2, r6
 800d822:	463b      	mov	r3, r7
 800d824:	2000      	movs	r0, #0
 800d826:	f7f3 f811 	bl	800084c <__aeabi_ddiv>
 800d82a:	e79c      	b.n	800d766 <__ieee754_pow+0x3e>
 800d82c:	2300      	movs	r3, #0
 800d82e:	9304      	str	r3, [sp, #16]
 800d830:	2a00      	cmp	r2, #0
 800d832:	d13d      	bne.n	800d8b0 <__ieee754_pow+0x188>
 800d834:	4b51      	ldr	r3, [pc, #324]	; (800d97c <__ieee754_pow+0x254>)
 800d836:	4598      	cmp	r8, r3
 800d838:	d1ea      	bne.n	800d810 <__ieee754_pow+0xe8>
 800d83a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d83e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d842:	ea53 030a 	orrs.w	r3, r3, sl
 800d846:	f000 845a 	beq.w	800e0fe <__ieee754_pow+0x9d6>
 800d84a:	4b4f      	ldr	r3, [pc, #316]	; (800d988 <__ieee754_pow+0x260>)
 800d84c:	429c      	cmp	r4, r3
 800d84e:	dd08      	ble.n	800d862 <__ieee754_pow+0x13a>
 800d850:	f1b9 0f00 	cmp.w	r9, #0
 800d854:	f2c0 8457 	blt.w	800e106 <__ieee754_pow+0x9de>
 800d858:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d85c:	e783      	b.n	800d766 <__ieee754_pow+0x3e>
 800d85e:	2302      	movs	r3, #2
 800d860:	e7e5      	b.n	800d82e <__ieee754_pow+0x106>
 800d862:	f1b9 0f00 	cmp.w	r9, #0
 800d866:	f04f 0000 	mov.w	r0, #0
 800d86a:	f04f 0100 	mov.w	r1, #0
 800d86e:	f6bf af7a 	bge.w	800d766 <__ieee754_pow+0x3e>
 800d872:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d876:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d87a:	e774      	b.n	800d766 <__ieee754_pow+0x3e>
 800d87c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d880:	d106      	bne.n	800d890 <__ieee754_pow+0x168>
 800d882:	4632      	mov	r2, r6
 800d884:	463b      	mov	r3, r7
 800d886:	4630      	mov	r0, r6
 800d888:	4639      	mov	r1, r7
 800d88a:	f7f2 feb5 	bl	80005f8 <__aeabi_dmul>
 800d88e:	e76a      	b.n	800d766 <__ieee754_pow+0x3e>
 800d890:	4b3e      	ldr	r3, [pc, #248]	; (800d98c <__ieee754_pow+0x264>)
 800d892:	4599      	cmp	r9, r3
 800d894:	d10c      	bne.n	800d8b0 <__ieee754_pow+0x188>
 800d896:	2d00      	cmp	r5, #0
 800d898:	db0a      	blt.n	800d8b0 <__ieee754_pow+0x188>
 800d89a:	ec47 6b10 	vmov	d0, r6, r7
 800d89e:	b009      	add	sp, #36	; 0x24
 800d8a0:	ecbd 8b06 	vpop	{d8-d10}
 800d8a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8a8:	f000 be7a 	b.w	800e5a0 <__ieee754_sqrt>
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	9304      	str	r3, [sp, #16]
 800d8b0:	ec47 6b10 	vmov	d0, r6, r7
 800d8b4:	f001 fcb2 	bl	800f21c <fabs>
 800d8b8:	ec51 0b10 	vmov	r0, r1, d0
 800d8bc:	f1ba 0f00 	cmp.w	sl, #0
 800d8c0:	d129      	bne.n	800d916 <__ieee754_pow+0x1ee>
 800d8c2:	b124      	cbz	r4, 800d8ce <__ieee754_pow+0x1a6>
 800d8c4:	4b2f      	ldr	r3, [pc, #188]	; (800d984 <__ieee754_pow+0x25c>)
 800d8c6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	d123      	bne.n	800d916 <__ieee754_pow+0x1ee>
 800d8ce:	f1b9 0f00 	cmp.w	r9, #0
 800d8d2:	da05      	bge.n	800d8e0 <__ieee754_pow+0x1b8>
 800d8d4:	4602      	mov	r2, r0
 800d8d6:	460b      	mov	r3, r1
 800d8d8:	2000      	movs	r0, #0
 800d8da:	492a      	ldr	r1, [pc, #168]	; (800d984 <__ieee754_pow+0x25c>)
 800d8dc:	f7f2 ffb6 	bl	800084c <__aeabi_ddiv>
 800d8e0:	2d00      	cmp	r5, #0
 800d8e2:	f6bf af40 	bge.w	800d766 <__ieee754_pow+0x3e>
 800d8e6:	9b04      	ldr	r3, [sp, #16]
 800d8e8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d8ec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d8f0:	4323      	orrs	r3, r4
 800d8f2:	d108      	bne.n	800d906 <__ieee754_pow+0x1de>
 800d8f4:	4602      	mov	r2, r0
 800d8f6:	460b      	mov	r3, r1
 800d8f8:	4610      	mov	r0, r2
 800d8fa:	4619      	mov	r1, r3
 800d8fc:	f7f2 fcc4 	bl	8000288 <__aeabi_dsub>
 800d900:	4602      	mov	r2, r0
 800d902:	460b      	mov	r3, r1
 800d904:	e78f      	b.n	800d826 <__ieee754_pow+0xfe>
 800d906:	9b04      	ldr	r3, [sp, #16]
 800d908:	2b01      	cmp	r3, #1
 800d90a:	f47f af2c 	bne.w	800d766 <__ieee754_pow+0x3e>
 800d90e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d912:	4619      	mov	r1, r3
 800d914:	e727      	b.n	800d766 <__ieee754_pow+0x3e>
 800d916:	0feb      	lsrs	r3, r5, #31
 800d918:	3b01      	subs	r3, #1
 800d91a:	9306      	str	r3, [sp, #24]
 800d91c:	9a06      	ldr	r2, [sp, #24]
 800d91e:	9b04      	ldr	r3, [sp, #16]
 800d920:	4313      	orrs	r3, r2
 800d922:	d102      	bne.n	800d92a <__ieee754_pow+0x202>
 800d924:	4632      	mov	r2, r6
 800d926:	463b      	mov	r3, r7
 800d928:	e7e6      	b.n	800d8f8 <__ieee754_pow+0x1d0>
 800d92a:	4b19      	ldr	r3, [pc, #100]	; (800d990 <__ieee754_pow+0x268>)
 800d92c:	4598      	cmp	r8, r3
 800d92e:	f340 80fb 	ble.w	800db28 <__ieee754_pow+0x400>
 800d932:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d936:	4598      	cmp	r8, r3
 800d938:	4b13      	ldr	r3, [pc, #76]	; (800d988 <__ieee754_pow+0x260>)
 800d93a:	dd0c      	ble.n	800d956 <__ieee754_pow+0x22e>
 800d93c:	429c      	cmp	r4, r3
 800d93e:	dc0f      	bgt.n	800d960 <__ieee754_pow+0x238>
 800d940:	f1b9 0f00 	cmp.w	r9, #0
 800d944:	da0f      	bge.n	800d966 <__ieee754_pow+0x23e>
 800d946:	2000      	movs	r0, #0
 800d948:	b009      	add	sp, #36	; 0x24
 800d94a:	ecbd 8b06 	vpop	{d8-d10}
 800d94e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d952:	f001 bc5a 	b.w	800f20a <__math_oflow>
 800d956:	429c      	cmp	r4, r3
 800d958:	dbf2      	blt.n	800d940 <__ieee754_pow+0x218>
 800d95a:	4b0a      	ldr	r3, [pc, #40]	; (800d984 <__ieee754_pow+0x25c>)
 800d95c:	429c      	cmp	r4, r3
 800d95e:	dd19      	ble.n	800d994 <__ieee754_pow+0x26c>
 800d960:	f1b9 0f00 	cmp.w	r9, #0
 800d964:	dcef      	bgt.n	800d946 <__ieee754_pow+0x21e>
 800d966:	2000      	movs	r0, #0
 800d968:	b009      	add	sp, #36	; 0x24
 800d96a:	ecbd 8b06 	vpop	{d8-d10}
 800d96e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d972:	f001 bc41 	b.w	800f1f8 <__math_uflow>
 800d976:	bf00      	nop
 800d978:	fff00000 	.word	0xfff00000
 800d97c:	7ff00000 	.word	0x7ff00000
 800d980:	433fffff 	.word	0x433fffff
 800d984:	3ff00000 	.word	0x3ff00000
 800d988:	3fefffff 	.word	0x3fefffff
 800d98c:	3fe00000 	.word	0x3fe00000
 800d990:	41e00000 	.word	0x41e00000
 800d994:	4b60      	ldr	r3, [pc, #384]	; (800db18 <__ieee754_pow+0x3f0>)
 800d996:	2200      	movs	r2, #0
 800d998:	f7f2 fc76 	bl	8000288 <__aeabi_dsub>
 800d99c:	a354      	add	r3, pc, #336	; (adr r3, 800daf0 <__ieee754_pow+0x3c8>)
 800d99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a2:	4604      	mov	r4, r0
 800d9a4:	460d      	mov	r5, r1
 800d9a6:	f7f2 fe27 	bl	80005f8 <__aeabi_dmul>
 800d9aa:	a353      	add	r3, pc, #332	; (adr r3, 800daf8 <__ieee754_pow+0x3d0>)
 800d9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b0:	4606      	mov	r6, r0
 800d9b2:	460f      	mov	r7, r1
 800d9b4:	4620      	mov	r0, r4
 800d9b6:	4629      	mov	r1, r5
 800d9b8:	f7f2 fe1e 	bl	80005f8 <__aeabi_dmul>
 800d9bc:	4b57      	ldr	r3, [pc, #348]	; (800db1c <__ieee754_pow+0x3f4>)
 800d9be:	4682      	mov	sl, r0
 800d9c0:	468b      	mov	fp, r1
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	4620      	mov	r0, r4
 800d9c6:	4629      	mov	r1, r5
 800d9c8:	f7f2 fe16 	bl	80005f8 <__aeabi_dmul>
 800d9cc:	4602      	mov	r2, r0
 800d9ce:	460b      	mov	r3, r1
 800d9d0:	a14b      	add	r1, pc, #300	; (adr r1, 800db00 <__ieee754_pow+0x3d8>)
 800d9d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9d6:	f7f2 fc57 	bl	8000288 <__aeabi_dsub>
 800d9da:	4622      	mov	r2, r4
 800d9dc:	462b      	mov	r3, r5
 800d9de:	f7f2 fe0b 	bl	80005f8 <__aeabi_dmul>
 800d9e2:	4602      	mov	r2, r0
 800d9e4:	460b      	mov	r3, r1
 800d9e6:	2000      	movs	r0, #0
 800d9e8:	494d      	ldr	r1, [pc, #308]	; (800db20 <__ieee754_pow+0x3f8>)
 800d9ea:	f7f2 fc4d 	bl	8000288 <__aeabi_dsub>
 800d9ee:	4622      	mov	r2, r4
 800d9f0:	4680      	mov	r8, r0
 800d9f2:	4689      	mov	r9, r1
 800d9f4:	462b      	mov	r3, r5
 800d9f6:	4620      	mov	r0, r4
 800d9f8:	4629      	mov	r1, r5
 800d9fa:	f7f2 fdfd 	bl	80005f8 <__aeabi_dmul>
 800d9fe:	4602      	mov	r2, r0
 800da00:	460b      	mov	r3, r1
 800da02:	4640      	mov	r0, r8
 800da04:	4649      	mov	r1, r9
 800da06:	f7f2 fdf7 	bl	80005f8 <__aeabi_dmul>
 800da0a:	a33f      	add	r3, pc, #252	; (adr r3, 800db08 <__ieee754_pow+0x3e0>)
 800da0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da10:	f7f2 fdf2 	bl	80005f8 <__aeabi_dmul>
 800da14:	4602      	mov	r2, r0
 800da16:	460b      	mov	r3, r1
 800da18:	4650      	mov	r0, sl
 800da1a:	4659      	mov	r1, fp
 800da1c:	f7f2 fc34 	bl	8000288 <__aeabi_dsub>
 800da20:	4602      	mov	r2, r0
 800da22:	460b      	mov	r3, r1
 800da24:	4680      	mov	r8, r0
 800da26:	4689      	mov	r9, r1
 800da28:	4630      	mov	r0, r6
 800da2a:	4639      	mov	r1, r7
 800da2c:	f7f2 fc2e 	bl	800028c <__adddf3>
 800da30:	2000      	movs	r0, #0
 800da32:	4632      	mov	r2, r6
 800da34:	463b      	mov	r3, r7
 800da36:	4604      	mov	r4, r0
 800da38:	460d      	mov	r5, r1
 800da3a:	f7f2 fc25 	bl	8000288 <__aeabi_dsub>
 800da3e:	4602      	mov	r2, r0
 800da40:	460b      	mov	r3, r1
 800da42:	4640      	mov	r0, r8
 800da44:	4649      	mov	r1, r9
 800da46:	f7f2 fc1f 	bl	8000288 <__aeabi_dsub>
 800da4a:	9b04      	ldr	r3, [sp, #16]
 800da4c:	9a06      	ldr	r2, [sp, #24]
 800da4e:	3b01      	subs	r3, #1
 800da50:	4313      	orrs	r3, r2
 800da52:	4682      	mov	sl, r0
 800da54:	468b      	mov	fp, r1
 800da56:	f040 81e7 	bne.w	800de28 <__ieee754_pow+0x700>
 800da5a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800db10 <__ieee754_pow+0x3e8>
 800da5e:	eeb0 8a47 	vmov.f32	s16, s14
 800da62:	eef0 8a67 	vmov.f32	s17, s15
 800da66:	e9dd 6700 	ldrd	r6, r7, [sp]
 800da6a:	2600      	movs	r6, #0
 800da6c:	4632      	mov	r2, r6
 800da6e:	463b      	mov	r3, r7
 800da70:	e9dd 0100 	ldrd	r0, r1, [sp]
 800da74:	f7f2 fc08 	bl	8000288 <__aeabi_dsub>
 800da78:	4622      	mov	r2, r4
 800da7a:	462b      	mov	r3, r5
 800da7c:	f7f2 fdbc 	bl	80005f8 <__aeabi_dmul>
 800da80:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da84:	4680      	mov	r8, r0
 800da86:	4689      	mov	r9, r1
 800da88:	4650      	mov	r0, sl
 800da8a:	4659      	mov	r1, fp
 800da8c:	f7f2 fdb4 	bl	80005f8 <__aeabi_dmul>
 800da90:	4602      	mov	r2, r0
 800da92:	460b      	mov	r3, r1
 800da94:	4640      	mov	r0, r8
 800da96:	4649      	mov	r1, r9
 800da98:	f7f2 fbf8 	bl	800028c <__adddf3>
 800da9c:	4632      	mov	r2, r6
 800da9e:	463b      	mov	r3, r7
 800daa0:	4680      	mov	r8, r0
 800daa2:	4689      	mov	r9, r1
 800daa4:	4620      	mov	r0, r4
 800daa6:	4629      	mov	r1, r5
 800daa8:	f7f2 fda6 	bl	80005f8 <__aeabi_dmul>
 800daac:	460b      	mov	r3, r1
 800daae:	4604      	mov	r4, r0
 800dab0:	460d      	mov	r5, r1
 800dab2:	4602      	mov	r2, r0
 800dab4:	4649      	mov	r1, r9
 800dab6:	4640      	mov	r0, r8
 800dab8:	f7f2 fbe8 	bl	800028c <__adddf3>
 800dabc:	4b19      	ldr	r3, [pc, #100]	; (800db24 <__ieee754_pow+0x3fc>)
 800dabe:	4299      	cmp	r1, r3
 800dac0:	ec45 4b19 	vmov	d9, r4, r5
 800dac4:	4606      	mov	r6, r0
 800dac6:	460f      	mov	r7, r1
 800dac8:	468b      	mov	fp, r1
 800daca:	f340 82f1 	ble.w	800e0b0 <__ieee754_pow+0x988>
 800dace:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800dad2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800dad6:	4303      	orrs	r3, r0
 800dad8:	f000 81e4 	beq.w	800dea4 <__ieee754_pow+0x77c>
 800dadc:	ec51 0b18 	vmov	r0, r1, d8
 800dae0:	2200      	movs	r2, #0
 800dae2:	2300      	movs	r3, #0
 800dae4:	f7f2 fffa 	bl	8000adc <__aeabi_dcmplt>
 800dae8:	3800      	subs	r0, #0
 800daea:	bf18      	it	ne
 800daec:	2001      	movne	r0, #1
 800daee:	e72b      	b.n	800d948 <__ieee754_pow+0x220>
 800daf0:	60000000 	.word	0x60000000
 800daf4:	3ff71547 	.word	0x3ff71547
 800daf8:	f85ddf44 	.word	0xf85ddf44
 800dafc:	3e54ae0b 	.word	0x3e54ae0b
 800db00:	55555555 	.word	0x55555555
 800db04:	3fd55555 	.word	0x3fd55555
 800db08:	652b82fe 	.word	0x652b82fe
 800db0c:	3ff71547 	.word	0x3ff71547
 800db10:	00000000 	.word	0x00000000
 800db14:	bff00000 	.word	0xbff00000
 800db18:	3ff00000 	.word	0x3ff00000
 800db1c:	3fd00000 	.word	0x3fd00000
 800db20:	3fe00000 	.word	0x3fe00000
 800db24:	408fffff 	.word	0x408fffff
 800db28:	4bd5      	ldr	r3, [pc, #852]	; (800de80 <__ieee754_pow+0x758>)
 800db2a:	402b      	ands	r3, r5
 800db2c:	2200      	movs	r2, #0
 800db2e:	b92b      	cbnz	r3, 800db3c <__ieee754_pow+0x414>
 800db30:	4bd4      	ldr	r3, [pc, #848]	; (800de84 <__ieee754_pow+0x75c>)
 800db32:	f7f2 fd61 	bl	80005f8 <__aeabi_dmul>
 800db36:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800db3a:	460c      	mov	r4, r1
 800db3c:	1523      	asrs	r3, r4, #20
 800db3e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800db42:	4413      	add	r3, r2
 800db44:	9305      	str	r3, [sp, #20]
 800db46:	4bd0      	ldr	r3, [pc, #832]	; (800de88 <__ieee754_pow+0x760>)
 800db48:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800db4c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800db50:	429c      	cmp	r4, r3
 800db52:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800db56:	dd08      	ble.n	800db6a <__ieee754_pow+0x442>
 800db58:	4bcc      	ldr	r3, [pc, #816]	; (800de8c <__ieee754_pow+0x764>)
 800db5a:	429c      	cmp	r4, r3
 800db5c:	f340 8162 	ble.w	800de24 <__ieee754_pow+0x6fc>
 800db60:	9b05      	ldr	r3, [sp, #20]
 800db62:	3301      	adds	r3, #1
 800db64:	9305      	str	r3, [sp, #20]
 800db66:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800db6a:	2400      	movs	r4, #0
 800db6c:	00e3      	lsls	r3, r4, #3
 800db6e:	9307      	str	r3, [sp, #28]
 800db70:	4bc7      	ldr	r3, [pc, #796]	; (800de90 <__ieee754_pow+0x768>)
 800db72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800db76:	ed93 7b00 	vldr	d7, [r3]
 800db7a:	4629      	mov	r1, r5
 800db7c:	ec53 2b17 	vmov	r2, r3, d7
 800db80:	eeb0 9a47 	vmov.f32	s18, s14
 800db84:	eef0 9a67 	vmov.f32	s19, s15
 800db88:	4682      	mov	sl, r0
 800db8a:	f7f2 fb7d 	bl	8000288 <__aeabi_dsub>
 800db8e:	4652      	mov	r2, sl
 800db90:	4606      	mov	r6, r0
 800db92:	460f      	mov	r7, r1
 800db94:	462b      	mov	r3, r5
 800db96:	ec51 0b19 	vmov	r0, r1, d9
 800db9a:	f7f2 fb77 	bl	800028c <__adddf3>
 800db9e:	4602      	mov	r2, r0
 800dba0:	460b      	mov	r3, r1
 800dba2:	2000      	movs	r0, #0
 800dba4:	49bb      	ldr	r1, [pc, #748]	; (800de94 <__ieee754_pow+0x76c>)
 800dba6:	f7f2 fe51 	bl	800084c <__aeabi_ddiv>
 800dbaa:	ec41 0b1a 	vmov	d10, r0, r1
 800dbae:	4602      	mov	r2, r0
 800dbb0:	460b      	mov	r3, r1
 800dbb2:	4630      	mov	r0, r6
 800dbb4:	4639      	mov	r1, r7
 800dbb6:	f7f2 fd1f 	bl	80005f8 <__aeabi_dmul>
 800dbba:	2300      	movs	r3, #0
 800dbbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dbc0:	9302      	str	r3, [sp, #8]
 800dbc2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dbc6:	46ab      	mov	fp, r5
 800dbc8:	106d      	asrs	r5, r5, #1
 800dbca:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800dbce:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800dbd2:	ec41 0b18 	vmov	d8, r0, r1
 800dbd6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800dbda:	2200      	movs	r2, #0
 800dbdc:	4640      	mov	r0, r8
 800dbde:	4649      	mov	r1, r9
 800dbe0:	4614      	mov	r4, r2
 800dbe2:	461d      	mov	r5, r3
 800dbe4:	f7f2 fd08 	bl	80005f8 <__aeabi_dmul>
 800dbe8:	4602      	mov	r2, r0
 800dbea:	460b      	mov	r3, r1
 800dbec:	4630      	mov	r0, r6
 800dbee:	4639      	mov	r1, r7
 800dbf0:	f7f2 fb4a 	bl	8000288 <__aeabi_dsub>
 800dbf4:	ec53 2b19 	vmov	r2, r3, d9
 800dbf8:	4606      	mov	r6, r0
 800dbfa:	460f      	mov	r7, r1
 800dbfc:	4620      	mov	r0, r4
 800dbfe:	4629      	mov	r1, r5
 800dc00:	f7f2 fb42 	bl	8000288 <__aeabi_dsub>
 800dc04:	4602      	mov	r2, r0
 800dc06:	460b      	mov	r3, r1
 800dc08:	4650      	mov	r0, sl
 800dc0a:	4659      	mov	r1, fp
 800dc0c:	f7f2 fb3c 	bl	8000288 <__aeabi_dsub>
 800dc10:	4642      	mov	r2, r8
 800dc12:	464b      	mov	r3, r9
 800dc14:	f7f2 fcf0 	bl	80005f8 <__aeabi_dmul>
 800dc18:	4602      	mov	r2, r0
 800dc1a:	460b      	mov	r3, r1
 800dc1c:	4630      	mov	r0, r6
 800dc1e:	4639      	mov	r1, r7
 800dc20:	f7f2 fb32 	bl	8000288 <__aeabi_dsub>
 800dc24:	ec53 2b1a 	vmov	r2, r3, d10
 800dc28:	f7f2 fce6 	bl	80005f8 <__aeabi_dmul>
 800dc2c:	ec53 2b18 	vmov	r2, r3, d8
 800dc30:	ec41 0b19 	vmov	d9, r0, r1
 800dc34:	ec51 0b18 	vmov	r0, r1, d8
 800dc38:	f7f2 fcde 	bl	80005f8 <__aeabi_dmul>
 800dc3c:	a37c      	add	r3, pc, #496	; (adr r3, 800de30 <__ieee754_pow+0x708>)
 800dc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc42:	4604      	mov	r4, r0
 800dc44:	460d      	mov	r5, r1
 800dc46:	f7f2 fcd7 	bl	80005f8 <__aeabi_dmul>
 800dc4a:	a37b      	add	r3, pc, #492	; (adr r3, 800de38 <__ieee754_pow+0x710>)
 800dc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc50:	f7f2 fb1c 	bl	800028c <__adddf3>
 800dc54:	4622      	mov	r2, r4
 800dc56:	462b      	mov	r3, r5
 800dc58:	f7f2 fcce 	bl	80005f8 <__aeabi_dmul>
 800dc5c:	a378      	add	r3, pc, #480	; (adr r3, 800de40 <__ieee754_pow+0x718>)
 800dc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc62:	f7f2 fb13 	bl	800028c <__adddf3>
 800dc66:	4622      	mov	r2, r4
 800dc68:	462b      	mov	r3, r5
 800dc6a:	f7f2 fcc5 	bl	80005f8 <__aeabi_dmul>
 800dc6e:	a376      	add	r3, pc, #472	; (adr r3, 800de48 <__ieee754_pow+0x720>)
 800dc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc74:	f7f2 fb0a 	bl	800028c <__adddf3>
 800dc78:	4622      	mov	r2, r4
 800dc7a:	462b      	mov	r3, r5
 800dc7c:	f7f2 fcbc 	bl	80005f8 <__aeabi_dmul>
 800dc80:	a373      	add	r3, pc, #460	; (adr r3, 800de50 <__ieee754_pow+0x728>)
 800dc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc86:	f7f2 fb01 	bl	800028c <__adddf3>
 800dc8a:	4622      	mov	r2, r4
 800dc8c:	462b      	mov	r3, r5
 800dc8e:	f7f2 fcb3 	bl	80005f8 <__aeabi_dmul>
 800dc92:	a371      	add	r3, pc, #452	; (adr r3, 800de58 <__ieee754_pow+0x730>)
 800dc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc98:	f7f2 faf8 	bl	800028c <__adddf3>
 800dc9c:	4622      	mov	r2, r4
 800dc9e:	4606      	mov	r6, r0
 800dca0:	460f      	mov	r7, r1
 800dca2:	462b      	mov	r3, r5
 800dca4:	4620      	mov	r0, r4
 800dca6:	4629      	mov	r1, r5
 800dca8:	f7f2 fca6 	bl	80005f8 <__aeabi_dmul>
 800dcac:	4602      	mov	r2, r0
 800dcae:	460b      	mov	r3, r1
 800dcb0:	4630      	mov	r0, r6
 800dcb2:	4639      	mov	r1, r7
 800dcb4:	f7f2 fca0 	bl	80005f8 <__aeabi_dmul>
 800dcb8:	4642      	mov	r2, r8
 800dcba:	4604      	mov	r4, r0
 800dcbc:	460d      	mov	r5, r1
 800dcbe:	464b      	mov	r3, r9
 800dcc0:	ec51 0b18 	vmov	r0, r1, d8
 800dcc4:	f7f2 fae2 	bl	800028c <__adddf3>
 800dcc8:	ec53 2b19 	vmov	r2, r3, d9
 800dccc:	f7f2 fc94 	bl	80005f8 <__aeabi_dmul>
 800dcd0:	4622      	mov	r2, r4
 800dcd2:	462b      	mov	r3, r5
 800dcd4:	f7f2 fada 	bl	800028c <__adddf3>
 800dcd8:	4642      	mov	r2, r8
 800dcda:	4682      	mov	sl, r0
 800dcdc:	468b      	mov	fp, r1
 800dcde:	464b      	mov	r3, r9
 800dce0:	4640      	mov	r0, r8
 800dce2:	4649      	mov	r1, r9
 800dce4:	f7f2 fc88 	bl	80005f8 <__aeabi_dmul>
 800dce8:	4b6b      	ldr	r3, [pc, #428]	; (800de98 <__ieee754_pow+0x770>)
 800dcea:	2200      	movs	r2, #0
 800dcec:	4606      	mov	r6, r0
 800dcee:	460f      	mov	r7, r1
 800dcf0:	f7f2 facc 	bl	800028c <__adddf3>
 800dcf4:	4652      	mov	r2, sl
 800dcf6:	465b      	mov	r3, fp
 800dcf8:	f7f2 fac8 	bl	800028c <__adddf3>
 800dcfc:	2000      	movs	r0, #0
 800dcfe:	4604      	mov	r4, r0
 800dd00:	460d      	mov	r5, r1
 800dd02:	4602      	mov	r2, r0
 800dd04:	460b      	mov	r3, r1
 800dd06:	4640      	mov	r0, r8
 800dd08:	4649      	mov	r1, r9
 800dd0a:	f7f2 fc75 	bl	80005f8 <__aeabi_dmul>
 800dd0e:	4b62      	ldr	r3, [pc, #392]	; (800de98 <__ieee754_pow+0x770>)
 800dd10:	4680      	mov	r8, r0
 800dd12:	4689      	mov	r9, r1
 800dd14:	2200      	movs	r2, #0
 800dd16:	4620      	mov	r0, r4
 800dd18:	4629      	mov	r1, r5
 800dd1a:	f7f2 fab5 	bl	8000288 <__aeabi_dsub>
 800dd1e:	4632      	mov	r2, r6
 800dd20:	463b      	mov	r3, r7
 800dd22:	f7f2 fab1 	bl	8000288 <__aeabi_dsub>
 800dd26:	4602      	mov	r2, r0
 800dd28:	460b      	mov	r3, r1
 800dd2a:	4650      	mov	r0, sl
 800dd2c:	4659      	mov	r1, fp
 800dd2e:	f7f2 faab 	bl	8000288 <__aeabi_dsub>
 800dd32:	ec53 2b18 	vmov	r2, r3, d8
 800dd36:	f7f2 fc5f 	bl	80005f8 <__aeabi_dmul>
 800dd3a:	4622      	mov	r2, r4
 800dd3c:	4606      	mov	r6, r0
 800dd3e:	460f      	mov	r7, r1
 800dd40:	462b      	mov	r3, r5
 800dd42:	ec51 0b19 	vmov	r0, r1, d9
 800dd46:	f7f2 fc57 	bl	80005f8 <__aeabi_dmul>
 800dd4a:	4602      	mov	r2, r0
 800dd4c:	460b      	mov	r3, r1
 800dd4e:	4630      	mov	r0, r6
 800dd50:	4639      	mov	r1, r7
 800dd52:	f7f2 fa9b 	bl	800028c <__adddf3>
 800dd56:	4606      	mov	r6, r0
 800dd58:	460f      	mov	r7, r1
 800dd5a:	4602      	mov	r2, r0
 800dd5c:	460b      	mov	r3, r1
 800dd5e:	4640      	mov	r0, r8
 800dd60:	4649      	mov	r1, r9
 800dd62:	f7f2 fa93 	bl	800028c <__adddf3>
 800dd66:	a33e      	add	r3, pc, #248	; (adr r3, 800de60 <__ieee754_pow+0x738>)
 800dd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd6c:	2000      	movs	r0, #0
 800dd6e:	4604      	mov	r4, r0
 800dd70:	460d      	mov	r5, r1
 800dd72:	f7f2 fc41 	bl	80005f8 <__aeabi_dmul>
 800dd76:	4642      	mov	r2, r8
 800dd78:	ec41 0b18 	vmov	d8, r0, r1
 800dd7c:	464b      	mov	r3, r9
 800dd7e:	4620      	mov	r0, r4
 800dd80:	4629      	mov	r1, r5
 800dd82:	f7f2 fa81 	bl	8000288 <__aeabi_dsub>
 800dd86:	4602      	mov	r2, r0
 800dd88:	460b      	mov	r3, r1
 800dd8a:	4630      	mov	r0, r6
 800dd8c:	4639      	mov	r1, r7
 800dd8e:	f7f2 fa7b 	bl	8000288 <__aeabi_dsub>
 800dd92:	a335      	add	r3, pc, #212	; (adr r3, 800de68 <__ieee754_pow+0x740>)
 800dd94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd98:	f7f2 fc2e 	bl	80005f8 <__aeabi_dmul>
 800dd9c:	a334      	add	r3, pc, #208	; (adr r3, 800de70 <__ieee754_pow+0x748>)
 800dd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dda2:	4606      	mov	r6, r0
 800dda4:	460f      	mov	r7, r1
 800dda6:	4620      	mov	r0, r4
 800dda8:	4629      	mov	r1, r5
 800ddaa:	f7f2 fc25 	bl	80005f8 <__aeabi_dmul>
 800ddae:	4602      	mov	r2, r0
 800ddb0:	460b      	mov	r3, r1
 800ddb2:	4630      	mov	r0, r6
 800ddb4:	4639      	mov	r1, r7
 800ddb6:	f7f2 fa69 	bl	800028c <__adddf3>
 800ddba:	9a07      	ldr	r2, [sp, #28]
 800ddbc:	4b37      	ldr	r3, [pc, #220]	; (800de9c <__ieee754_pow+0x774>)
 800ddbe:	4413      	add	r3, r2
 800ddc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddc4:	f7f2 fa62 	bl	800028c <__adddf3>
 800ddc8:	4682      	mov	sl, r0
 800ddca:	9805      	ldr	r0, [sp, #20]
 800ddcc:	468b      	mov	fp, r1
 800ddce:	f7f2 fba9 	bl	8000524 <__aeabi_i2d>
 800ddd2:	9a07      	ldr	r2, [sp, #28]
 800ddd4:	4b32      	ldr	r3, [pc, #200]	; (800dea0 <__ieee754_pow+0x778>)
 800ddd6:	4413      	add	r3, r2
 800ddd8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dddc:	4606      	mov	r6, r0
 800ddde:	460f      	mov	r7, r1
 800dde0:	4652      	mov	r2, sl
 800dde2:	465b      	mov	r3, fp
 800dde4:	ec51 0b18 	vmov	r0, r1, d8
 800dde8:	f7f2 fa50 	bl	800028c <__adddf3>
 800ddec:	4642      	mov	r2, r8
 800ddee:	464b      	mov	r3, r9
 800ddf0:	f7f2 fa4c 	bl	800028c <__adddf3>
 800ddf4:	4632      	mov	r2, r6
 800ddf6:	463b      	mov	r3, r7
 800ddf8:	f7f2 fa48 	bl	800028c <__adddf3>
 800ddfc:	2000      	movs	r0, #0
 800ddfe:	4632      	mov	r2, r6
 800de00:	463b      	mov	r3, r7
 800de02:	4604      	mov	r4, r0
 800de04:	460d      	mov	r5, r1
 800de06:	f7f2 fa3f 	bl	8000288 <__aeabi_dsub>
 800de0a:	4642      	mov	r2, r8
 800de0c:	464b      	mov	r3, r9
 800de0e:	f7f2 fa3b 	bl	8000288 <__aeabi_dsub>
 800de12:	ec53 2b18 	vmov	r2, r3, d8
 800de16:	f7f2 fa37 	bl	8000288 <__aeabi_dsub>
 800de1a:	4602      	mov	r2, r0
 800de1c:	460b      	mov	r3, r1
 800de1e:	4650      	mov	r0, sl
 800de20:	4659      	mov	r1, fp
 800de22:	e610      	b.n	800da46 <__ieee754_pow+0x31e>
 800de24:	2401      	movs	r4, #1
 800de26:	e6a1      	b.n	800db6c <__ieee754_pow+0x444>
 800de28:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800de78 <__ieee754_pow+0x750>
 800de2c:	e617      	b.n	800da5e <__ieee754_pow+0x336>
 800de2e:	bf00      	nop
 800de30:	4a454eef 	.word	0x4a454eef
 800de34:	3fca7e28 	.word	0x3fca7e28
 800de38:	93c9db65 	.word	0x93c9db65
 800de3c:	3fcd864a 	.word	0x3fcd864a
 800de40:	a91d4101 	.word	0xa91d4101
 800de44:	3fd17460 	.word	0x3fd17460
 800de48:	518f264d 	.word	0x518f264d
 800de4c:	3fd55555 	.word	0x3fd55555
 800de50:	db6fabff 	.word	0xdb6fabff
 800de54:	3fdb6db6 	.word	0x3fdb6db6
 800de58:	33333303 	.word	0x33333303
 800de5c:	3fe33333 	.word	0x3fe33333
 800de60:	e0000000 	.word	0xe0000000
 800de64:	3feec709 	.word	0x3feec709
 800de68:	dc3a03fd 	.word	0xdc3a03fd
 800de6c:	3feec709 	.word	0x3feec709
 800de70:	145b01f5 	.word	0x145b01f5
 800de74:	be3e2fe0 	.word	0xbe3e2fe0
 800de78:	00000000 	.word	0x00000000
 800de7c:	3ff00000 	.word	0x3ff00000
 800de80:	7ff00000 	.word	0x7ff00000
 800de84:	43400000 	.word	0x43400000
 800de88:	0003988e 	.word	0x0003988e
 800de8c:	000bb679 	.word	0x000bb679
 800de90:	0800f978 	.word	0x0800f978
 800de94:	3ff00000 	.word	0x3ff00000
 800de98:	40080000 	.word	0x40080000
 800de9c:	0800f998 	.word	0x0800f998
 800dea0:	0800f988 	.word	0x0800f988
 800dea4:	a3b5      	add	r3, pc, #724	; (adr r3, 800e17c <__ieee754_pow+0xa54>)
 800dea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deaa:	4640      	mov	r0, r8
 800deac:	4649      	mov	r1, r9
 800deae:	f7f2 f9ed 	bl	800028c <__adddf3>
 800deb2:	4622      	mov	r2, r4
 800deb4:	ec41 0b1a 	vmov	d10, r0, r1
 800deb8:	462b      	mov	r3, r5
 800deba:	4630      	mov	r0, r6
 800debc:	4639      	mov	r1, r7
 800debe:	f7f2 f9e3 	bl	8000288 <__aeabi_dsub>
 800dec2:	4602      	mov	r2, r0
 800dec4:	460b      	mov	r3, r1
 800dec6:	ec51 0b1a 	vmov	r0, r1, d10
 800deca:	f7f2 fe25 	bl	8000b18 <__aeabi_dcmpgt>
 800dece:	2800      	cmp	r0, #0
 800ded0:	f47f ae04 	bne.w	800dadc <__ieee754_pow+0x3b4>
 800ded4:	4aa4      	ldr	r2, [pc, #656]	; (800e168 <__ieee754_pow+0xa40>)
 800ded6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800deda:	4293      	cmp	r3, r2
 800dedc:	f340 8108 	ble.w	800e0f0 <__ieee754_pow+0x9c8>
 800dee0:	151b      	asrs	r3, r3, #20
 800dee2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800dee6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800deea:	fa4a f303 	asr.w	r3, sl, r3
 800deee:	445b      	add	r3, fp
 800def0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800def4:	4e9d      	ldr	r6, [pc, #628]	; (800e16c <__ieee754_pow+0xa44>)
 800def6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800defa:	4116      	asrs	r6, r2
 800defc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800df00:	2000      	movs	r0, #0
 800df02:	ea23 0106 	bic.w	r1, r3, r6
 800df06:	f1c2 0214 	rsb	r2, r2, #20
 800df0a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800df0e:	fa4a fa02 	asr.w	sl, sl, r2
 800df12:	f1bb 0f00 	cmp.w	fp, #0
 800df16:	4602      	mov	r2, r0
 800df18:	460b      	mov	r3, r1
 800df1a:	4620      	mov	r0, r4
 800df1c:	4629      	mov	r1, r5
 800df1e:	bfb8      	it	lt
 800df20:	f1ca 0a00 	rsblt	sl, sl, #0
 800df24:	f7f2 f9b0 	bl	8000288 <__aeabi_dsub>
 800df28:	ec41 0b19 	vmov	d9, r0, r1
 800df2c:	4642      	mov	r2, r8
 800df2e:	464b      	mov	r3, r9
 800df30:	ec51 0b19 	vmov	r0, r1, d9
 800df34:	f7f2 f9aa 	bl	800028c <__adddf3>
 800df38:	a37b      	add	r3, pc, #492	; (adr r3, 800e128 <__ieee754_pow+0xa00>)
 800df3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df3e:	2000      	movs	r0, #0
 800df40:	4604      	mov	r4, r0
 800df42:	460d      	mov	r5, r1
 800df44:	f7f2 fb58 	bl	80005f8 <__aeabi_dmul>
 800df48:	ec53 2b19 	vmov	r2, r3, d9
 800df4c:	4606      	mov	r6, r0
 800df4e:	460f      	mov	r7, r1
 800df50:	4620      	mov	r0, r4
 800df52:	4629      	mov	r1, r5
 800df54:	f7f2 f998 	bl	8000288 <__aeabi_dsub>
 800df58:	4602      	mov	r2, r0
 800df5a:	460b      	mov	r3, r1
 800df5c:	4640      	mov	r0, r8
 800df5e:	4649      	mov	r1, r9
 800df60:	f7f2 f992 	bl	8000288 <__aeabi_dsub>
 800df64:	a372      	add	r3, pc, #456	; (adr r3, 800e130 <__ieee754_pow+0xa08>)
 800df66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df6a:	f7f2 fb45 	bl	80005f8 <__aeabi_dmul>
 800df6e:	a372      	add	r3, pc, #456	; (adr r3, 800e138 <__ieee754_pow+0xa10>)
 800df70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df74:	4680      	mov	r8, r0
 800df76:	4689      	mov	r9, r1
 800df78:	4620      	mov	r0, r4
 800df7a:	4629      	mov	r1, r5
 800df7c:	f7f2 fb3c 	bl	80005f8 <__aeabi_dmul>
 800df80:	4602      	mov	r2, r0
 800df82:	460b      	mov	r3, r1
 800df84:	4640      	mov	r0, r8
 800df86:	4649      	mov	r1, r9
 800df88:	f7f2 f980 	bl	800028c <__adddf3>
 800df8c:	4604      	mov	r4, r0
 800df8e:	460d      	mov	r5, r1
 800df90:	4602      	mov	r2, r0
 800df92:	460b      	mov	r3, r1
 800df94:	4630      	mov	r0, r6
 800df96:	4639      	mov	r1, r7
 800df98:	f7f2 f978 	bl	800028c <__adddf3>
 800df9c:	4632      	mov	r2, r6
 800df9e:	463b      	mov	r3, r7
 800dfa0:	4680      	mov	r8, r0
 800dfa2:	4689      	mov	r9, r1
 800dfa4:	f7f2 f970 	bl	8000288 <__aeabi_dsub>
 800dfa8:	4602      	mov	r2, r0
 800dfaa:	460b      	mov	r3, r1
 800dfac:	4620      	mov	r0, r4
 800dfae:	4629      	mov	r1, r5
 800dfb0:	f7f2 f96a 	bl	8000288 <__aeabi_dsub>
 800dfb4:	4642      	mov	r2, r8
 800dfb6:	4606      	mov	r6, r0
 800dfb8:	460f      	mov	r7, r1
 800dfba:	464b      	mov	r3, r9
 800dfbc:	4640      	mov	r0, r8
 800dfbe:	4649      	mov	r1, r9
 800dfc0:	f7f2 fb1a 	bl	80005f8 <__aeabi_dmul>
 800dfc4:	a35e      	add	r3, pc, #376	; (adr r3, 800e140 <__ieee754_pow+0xa18>)
 800dfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfca:	4604      	mov	r4, r0
 800dfcc:	460d      	mov	r5, r1
 800dfce:	f7f2 fb13 	bl	80005f8 <__aeabi_dmul>
 800dfd2:	a35d      	add	r3, pc, #372	; (adr r3, 800e148 <__ieee754_pow+0xa20>)
 800dfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd8:	f7f2 f956 	bl	8000288 <__aeabi_dsub>
 800dfdc:	4622      	mov	r2, r4
 800dfde:	462b      	mov	r3, r5
 800dfe0:	f7f2 fb0a 	bl	80005f8 <__aeabi_dmul>
 800dfe4:	a35a      	add	r3, pc, #360	; (adr r3, 800e150 <__ieee754_pow+0xa28>)
 800dfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfea:	f7f2 f94f 	bl	800028c <__adddf3>
 800dfee:	4622      	mov	r2, r4
 800dff0:	462b      	mov	r3, r5
 800dff2:	f7f2 fb01 	bl	80005f8 <__aeabi_dmul>
 800dff6:	a358      	add	r3, pc, #352	; (adr r3, 800e158 <__ieee754_pow+0xa30>)
 800dff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dffc:	f7f2 f944 	bl	8000288 <__aeabi_dsub>
 800e000:	4622      	mov	r2, r4
 800e002:	462b      	mov	r3, r5
 800e004:	f7f2 faf8 	bl	80005f8 <__aeabi_dmul>
 800e008:	a355      	add	r3, pc, #340	; (adr r3, 800e160 <__ieee754_pow+0xa38>)
 800e00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e00e:	f7f2 f93d 	bl	800028c <__adddf3>
 800e012:	4622      	mov	r2, r4
 800e014:	462b      	mov	r3, r5
 800e016:	f7f2 faef 	bl	80005f8 <__aeabi_dmul>
 800e01a:	4602      	mov	r2, r0
 800e01c:	460b      	mov	r3, r1
 800e01e:	4640      	mov	r0, r8
 800e020:	4649      	mov	r1, r9
 800e022:	f7f2 f931 	bl	8000288 <__aeabi_dsub>
 800e026:	4604      	mov	r4, r0
 800e028:	460d      	mov	r5, r1
 800e02a:	4602      	mov	r2, r0
 800e02c:	460b      	mov	r3, r1
 800e02e:	4640      	mov	r0, r8
 800e030:	4649      	mov	r1, r9
 800e032:	f7f2 fae1 	bl	80005f8 <__aeabi_dmul>
 800e036:	2200      	movs	r2, #0
 800e038:	ec41 0b19 	vmov	d9, r0, r1
 800e03c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e040:	4620      	mov	r0, r4
 800e042:	4629      	mov	r1, r5
 800e044:	f7f2 f920 	bl	8000288 <__aeabi_dsub>
 800e048:	4602      	mov	r2, r0
 800e04a:	460b      	mov	r3, r1
 800e04c:	ec51 0b19 	vmov	r0, r1, d9
 800e050:	f7f2 fbfc 	bl	800084c <__aeabi_ddiv>
 800e054:	4632      	mov	r2, r6
 800e056:	4604      	mov	r4, r0
 800e058:	460d      	mov	r5, r1
 800e05a:	463b      	mov	r3, r7
 800e05c:	4640      	mov	r0, r8
 800e05e:	4649      	mov	r1, r9
 800e060:	f7f2 faca 	bl	80005f8 <__aeabi_dmul>
 800e064:	4632      	mov	r2, r6
 800e066:	463b      	mov	r3, r7
 800e068:	f7f2 f910 	bl	800028c <__adddf3>
 800e06c:	4602      	mov	r2, r0
 800e06e:	460b      	mov	r3, r1
 800e070:	4620      	mov	r0, r4
 800e072:	4629      	mov	r1, r5
 800e074:	f7f2 f908 	bl	8000288 <__aeabi_dsub>
 800e078:	4642      	mov	r2, r8
 800e07a:	464b      	mov	r3, r9
 800e07c:	f7f2 f904 	bl	8000288 <__aeabi_dsub>
 800e080:	460b      	mov	r3, r1
 800e082:	4602      	mov	r2, r0
 800e084:	493a      	ldr	r1, [pc, #232]	; (800e170 <__ieee754_pow+0xa48>)
 800e086:	2000      	movs	r0, #0
 800e088:	f7f2 f8fe 	bl	8000288 <__aeabi_dsub>
 800e08c:	ec41 0b10 	vmov	d0, r0, r1
 800e090:	ee10 3a90 	vmov	r3, s1
 800e094:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e098:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e09c:	da2b      	bge.n	800e0f6 <__ieee754_pow+0x9ce>
 800e09e:	4650      	mov	r0, sl
 800e0a0:	f001 f952 	bl	800f348 <scalbn>
 800e0a4:	ec51 0b10 	vmov	r0, r1, d0
 800e0a8:	ec53 2b18 	vmov	r2, r3, d8
 800e0ac:	f7ff bbed 	b.w	800d88a <__ieee754_pow+0x162>
 800e0b0:	4b30      	ldr	r3, [pc, #192]	; (800e174 <__ieee754_pow+0xa4c>)
 800e0b2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e0b6:	429e      	cmp	r6, r3
 800e0b8:	f77f af0c 	ble.w	800ded4 <__ieee754_pow+0x7ac>
 800e0bc:	4b2e      	ldr	r3, [pc, #184]	; (800e178 <__ieee754_pow+0xa50>)
 800e0be:	440b      	add	r3, r1
 800e0c0:	4303      	orrs	r3, r0
 800e0c2:	d009      	beq.n	800e0d8 <__ieee754_pow+0x9b0>
 800e0c4:	ec51 0b18 	vmov	r0, r1, d8
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	f7f2 fd06 	bl	8000adc <__aeabi_dcmplt>
 800e0d0:	3800      	subs	r0, #0
 800e0d2:	bf18      	it	ne
 800e0d4:	2001      	movne	r0, #1
 800e0d6:	e447      	b.n	800d968 <__ieee754_pow+0x240>
 800e0d8:	4622      	mov	r2, r4
 800e0da:	462b      	mov	r3, r5
 800e0dc:	f7f2 f8d4 	bl	8000288 <__aeabi_dsub>
 800e0e0:	4642      	mov	r2, r8
 800e0e2:	464b      	mov	r3, r9
 800e0e4:	f7f2 fd0e 	bl	8000b04 <__aeabi_dcmpge>
 800e0e8:	2800      	cmp	r0, #0
 800e0ea:	f43f aef3 	beq.w	800ded4 <__ieee754_pow+0x7ac>
 800e0ee:	e7e9      	b.n	800e0c4 <__ieee754_pow+0x99c>
 800e0f0:	f04f 0a00 	mov.w	sl, #0
 800e0f4:	e71a      	b.n	800df2c <__ieee754_pow+0x804>
 800e0f6:	ec51 0b10 	vmov	r0, r1, d0
 800e0fa:	4619      	mov	r1, r3
 800e0fc:	e7d4      	b.n	800e0a8 <__ieee754_pow+0x980>
 800e0fe:	491c      	ldr	r1, [pc, #112]	; (800e170 <__ieee754_pow+0xa48>)
 800e100:	2000      	movs	r0, #0
 800e102:	f7ff bb30 	b.w	800d766 <__ieee754_pow+0x3e>
 800e106:	2000      	movs	r0, #0
 800e108:	2100      	movs	r1, #0
 800e10a:	f7ff bb2c 	b.w	800d766 <__ieee754_pow+0x3e>
 800e10e:	4630      	mov	r0, r6
 800e110:	4639      	mov	r1, r7
 800e112:	f7ff bb28 	b.w	800d766 <__ieee754_pow+0x3e>
 800e116:	9204      	str	r2, [sp, #16]
 800e118:	f7ff bb7a 	b.w	800d810 <__ieee754_pow+0xe8>
 800e11c:	2300      	movs	r3, #0
 800e11e:	f7ff bb64 	b.w	800d7ea <__ieee754_pow+0xc2>
 800e122:	bf00      	nop
 800e124:	f3af 8000 	nop.w
 800e128:	00000000 	.word	0x00000000
 800e12c:	3fe62e43 	.word	0x3fe62e43
 800e130:	fefa39ef 	.word	0xfefa39ef
 800e134:	3fe62e42 	.word	0x3fe62e42
 800e138:	0ca86c39 	.word	0x0ca86c39
 800e13c:	be205c61 	.word	0xbe205c61
 800e140:	72bea4d0 	.word	0x72bea4d0
 800e144:	3e663769 	.word	0x3e663769
 800e148:	c5d26bf1 	.word	0xc5d26bf1
 800e14c:	3ebbbd41 	.word	0x3ebbbd41
 800e150:	af25de2c 	.word	0xaf25de2c
 800e154:	3f11566a 	.word	0x3f11566a
 800e158:	16bebd93 	.word	0x16bebd93
 800e15c:	3f66c16c 	.word	0x3f66c16c
 800e160:	5555553e 	.word	0x5555553e
 800e164:	3fc55555 	.word	0x3fc55555
 800e168:	3fe00000 	.word	0x3fe00000
 800e16c:	000fffff 	.word	0x000fffff
 800e170:	3ff00000 	.word	0x3ff00000
 800e174:	4090cbff 	.word	0x4090cbff
 800e178:	3f6f3400 	.word	0x3f6f3400
 800e17c:	652b82fe 	.word	0x652b82fe
 800e180:	3c971547 	.word	0x3c971547
 800e184:	00000000 	.word	0x00000000

0800e188 <__ieee754_rem_pio2>:
 800e188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e18c:	ed2d 8b02 	vpush	{d8}
 800e190:	ec55 4b10 	vmov	r4, r5, d0
 800e194:	4bca      	ldr	r3, [pc, #808]	; (800e4c0 <__ieee754_rem_pio2+0x338>)
 800e196:	b08b      	sub	sp, #44	; 0x2c
 800e198:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e19c:	4598      	cmp	r8, r3
 800e19e:	4682      	mov	sl, r0
 800e1a0:	9502      	str	r5, [sp, #8]
 800e1a2:	dc08      	bgt.n	800e1b6 <__ieee754_rem_pio2+0x2e>
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	ed80 0b00 	vstr	d0, [r0]
 800e1ac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e1b0:	f04f 0b00 	mov.w	fp, #0
 800e1b4:	e028      	b.n	800e208 <__ieee754_rem_pio2+0x80>
 800e1b6:	4bc3      	ldr	r3, [pc, #780]	; (800e4c4 <__ieee754_rem_pio2+0x33c>)
 800e1b8:	4598      	cmp	r8, r3
 800e1ba:	dc78      	bgt.n	800e2ae <__ieee754_rem_pio2+0x126>
 800e1bc:	9b02      	ldr	r3, [sp, #8]
 800e1be:	4ec2      	ldr	r6, [pc, #776]	; (800e4c8 <__ieee754_rem_pio2+0x340>)
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	ee10 0a10 	vmov	r0, s0
 800e1c6:	a3b0      	add	r3, pc, #704	; (adr r3, 800e488 <__ieee754_rem_pio2+0x300>)
 800e1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1cc:	4629      	mov	r1, r5
 800e1ce:	dd39      	ble.n	800e244 <__ieee754_rem_pio2+0xbc>
 800e1d0:	f7f2 f85a 	bl	8000288 <__aeabi_dsub>
 800e1d4:	45b0      	cmp	r8, r6
 800e1d6:	4604      	mov	r4, r0
 800e1d8:	460d      	mov	r5, r1
 800e1da:	d01b      	beq.n	800e214 <__ieee754_rem_pio2+0x8c>
 800e1dc:	a3ac      	add	r3, pc, #688	; (adr r3, 800e490 <__ieee754_rem_pio2+0x308>)
 800e1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e2:	f7f2 f851 	bl	8000288 <__aeabi_dsub>
 800e1e6:	4602      	mov	r2, r0
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	e9ca 2300 	strd	r2, r3, [sl]
 800e1ee:	4620      	mov	r0, r4
 800e1f0:	4629      	mov	r1, r5
 800e1f2:	f7f2 f849 	bl	8000288 <__aeabi_dsub>
 800e1f6:	a3a6      	add	r3, pc, #664	; (adr r3, 800e490 <__ieee754_rem_pio2+0x308>)
 800e1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1fc:	f7f2 f844 	bl	8000288 <__aeabi_dsub>
 800e200:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e204:	f04f 0b01 	mov.w	fp, #1
 800e208:	4658      	mov	r0, fp
 800e20a:	b00b      	add	sp, #44	; 0x2c
 800e20c:	ecbd 8b02 	vpop	{d8}
 800e210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e214:	a3a0      	add	r3, pc, #640	; (adr r3, 800e498 <__ieee754_rem_pio2+0x310>)
 800e216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e21a:	f7f2 f835 	bl	8000288 <__aeabi_dsub>
 800e21e:	a3a0      	add	r3, pc, #640	; (adr r3, 800e4a0 <__ieee754_rem_pio2+0x318>)
 800e220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e224:	4604      	mov	r4, r0
 800e226:	460d      	mov	r5, r1
 800e228:	f7f2 f82e 	bl	8000288 <__aeabi_dsub>
 800e22c:	4602      	mov	r2, r0
 800e22e:	460b      	mov	r3, r1
 800e230:	e9ca 2300 	strd	r2, r3, [sl]
 800e234:	4620      	mov	r0, r4
 800e236:	4629      	mov	r1, r5
 800e238:	f7f2 f826 	bl	8000288 <__aeabi_dsub>
 800e23c:	a398      	add	r3, pc, #608	; (adr r3, 800e4a0 <__ieee754_rem_pio2+0x318>)
 800e23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e242:	e7db      	b.n	800e1fc <__ieee754_rem_pio2+0x74>
 800e244:	f7f2 f822 	bl	800028c <__adddf3>
 800e248:	45b0      	cmp	r8, r6
 800e24a:	4604      	mov	r4, r0
 800e24c:	460d      	mov	r5, r1
 800e24e:	d016      	beq.n	800e27e <__ieee754_rem_pio2+0xf6>
 800e250:	a38f      	add	r3, pc, #572	; (adr r3, 800e490 <__ieee754_rem_pio2+0x308>)
 800e252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e256:	f7f2 f819 	bl	800028c <__adddf3>
 800e25a:	4602      	mov	r2, r0
 800e25c:	460b      	mov	r3, r1
 800e25e:	e9ca 2300 	strd	r2, r3, [sl]
 800e262:	4620      	mov	r0, r4
 800e264:	4629      	mov	r1, r5
 800e266:	f7f2 f80f 	bl	8000288 <__aeabi_dsub>
 800e26a:	a389      	add	r3, pc, #548	; (adr r3, 800e490 <__ieee754_rem_pio2+0x308>)
 800e26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e270:	f7f2 f80c 	bl	800028c <__adddf3>
 800e274:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800e278:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e27c:	e7c4      	b.n	800e208 <__ieee754_rem_pio2+0x80>
 800e27e:	a386      	add	r3, pc, #536	; (adr r3, 800e498 <__ieee754_rem_pio2+0x310>)
 800e280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e284:	f7f2 f802 	bl	800028c <__adddf3>
 800e288:	a385      	add	r3, pc, #532	; (adr r3, 800e4a0 <__ieee754_rem_pio2+0x318>)
 800e28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e28e:	4604      	mov	r4, r0
 800e290:	460d      	mov	r5, r1
 800e292:	f7f1 fffb 	bl	800028c <__adddf3>
 800e296:	4602      	mov	r2, r0
 800e298:	460b      	mov	r3, r1
 800e29a:	e9ca 2300 	strd	r2, r3, [sl]
 800e29e:	4620      	mov	r0, r4
 800e2a0:	4629      	mov	r1, r5
 800e2a2:	f7f1 fff1 	bl	8000288 <__aeabi_dsub>
 800e2a6:	a37e      	add	r3, pc, #504	; (adr r3, 800e4a0 <__ieee754_rem_pio2+0x318>)
 800e2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ac:	e7e0      	b.n	800e270 <__ieee754_rem_pio2+0xe8>
 800e2ae:	4b87      	ldr	r3, [pc, #540]	; (800e4cc <__ieee754_rem_pio2+0x344>)
 800e2b0:	4598      	cmp	r8, r3
 800e2b2:	f300 80d9 	bgt.w	800e468 <__ieee754_rem_pio2+0x2e0>
 800e2b6:	f000 ffb1 	bl	800f21c <fabs>
 800e2ba:	ec55 4b10 	vmov	r4, r5, d0
 800e2be:	ee10 0a10 	vmov	r0, s0
 800e2c2:	a379      	add	r3, pc, #484	; (adr r3, 800e4a8 <__ieee754_rem_pio2+0x320>)
 800e2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c8:	4629      	mov	r1, r5
 800e2ca:	f7f2 f995 	bl	80005f8 <__aeabi_dmul>
 800e2ce:	4b80      	ldr	r3, [pc, #512]	; (800e4d0 <__ieee754_rem_pio2+0x348>)
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	f7f1 ffdb 	bl	800028c <__adddf3>
 800e2d6:	f7f2 fc3f 	bl	8000b58 <__aeabi_d2iz>
 800e2da:	4683      	mov	fp, r0
 800e2dc:	f7f2 f922 	bl	8000524 <__aeabi_i2d>
 800e2e0:	4602      	mov	r2, r0
 800e2e2:	460b      	mov	r3, r1
 800e2e4:	ec43 2b18 	vmov	d8, r2, r3
 800e2e8:	a367      	add	r3, pc, #412	; (adr r3, 800e488 <__ieee754_rem_pio2+0x300>)
 800e2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ee:	f7f2 f983 	bl	80005f8 <__aeabi_dmul>
 800e2f2:	4602      	mov	r2, r0
 800e2f4:	460b      	mov	r3, r1
 800e2f6:	4620      	mov	r0, r4
 800e2f8:	4629      	mov	r1, r5
 800e2fa:	f7f1 ffc5 	bl	8000288 <__aeabi_dsub>
 800e2fe:	a364      	add	r3, pc, #400	; (adr r3, 800e490 <__ieee754_rem_pio2+0x308>)
 800e300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e304:	4606      	mov	r6, r0
 800e306:	460f      	mov	r7, r1
 800e308:	ec51 0b18 	vmov	r0, r1, d8
 800e30c:	f7f2 f974 	bl	80005f8 <__aeabi_dmul>
 800e310:	f1bb 0f1f 	cmp.w	fp, #31
 800e314:	4604      	mov	r4, r0
 800e316:	460d      	mov	r5, r1
 800e318:	dc0d      	bgt.n	800e336 <__ieee754_rem_pio2+0x1ae>
 800e31a:	4b6e      	ldr	r3, [pc, #440]	; (800e4d4 <__ieee754_rem_pio2+0x34c>)
 800e31c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800e320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e324:	4543      	cmp	r3, r8
 800e326:	d006      	beq.n	800e336 <__ieee754_rem_pio2+0x1ae>
 800e328:	4622      	mov	r2, r4
 800e32a:	462b      	mov	r3, r5
 800e32c:	4630      	mov	r0, r6
 800e32e:	4639      	mov	r1, r7
 800e330:	f7f1 ffaa 	bl	8000288 <__aeabi_dsub>
 800e334:	e00f      	b.n	800e356 <__ieee754_rem_pio2+0x1ce>
 800e336:	462b      	mov	r3, r5
 800e338:	4622      	mov	r2, r4
 800e33a:	4630      	mov	r0, r6
 800e33c:	4639      	mov	r1, r7
 800e33e:	f7f1 ffa3 	bl	8000288 <__aeabi_dsub>
 800e342:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e346:	9303      	str	r3, [sp, #12]
 800e348:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e34c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800e350:	f1b8 0f10 	cmp.w	r8, #16
 800e354:	dc02      	bgt.n	800e35c <__ieee754_rem_pio2+0x1d4>
 800e356:	e9ca 0100 	strd	r0, r1, [sl]
 800e35a:	e039      	b.n	800e3d0 <__ieee754_rem_pio2+0x248>
 800e35c:	a34e      	add	r3, pc, #312	; (adr r3, 800e498 <__ieee754_rem_pio2+0x310>)
 800e35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e362:	ec51 0b18 	vmov	r0, r1, d8
 800e366:	f7f2 f947 	bl	80005f8 <__aeabi_dmul>
 800e36a:	4604      	mov	r4, r0
 800e36c:	460d      	mov	r5, r1
 800e36e:	4602      	mov	r2, r0
 800e370:	460b      	mov	r3, r1
 800e372:	4630      	mov	r0, r6
 800e374:	4639      	mov	r1, r7
 800e376:	f7f1 ff87 	bl	8000288 <__aeabi_dsub>
 800e37a:	4602      	mov	r2, r0
 800e37c:	460b      	mov	r3, r1
 800e37e:	4680      	mov	r8, r0
 800e380:	4689      	mov	r9, r1
 800e382:	4630      	mov	r0, r6
 800e384:	4639      	mov	r1, r7
 800e386:	f7f1 ff7f 	bl	8000288 <__aeabi_dsub>
 800e38a:	4622      	mov	r2, r4
 800e38c:	462b      	mov	r3, r5
 800e38e:	f7f1 ff7b 	bl	8000288 <__aeabi_dsub>
 800e392:	a343      	add	r3, pc, #268	; (adr r3, 800e4a0 <__ieee754_rem_pio2+0x318>)
 800e394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e398:	4604      	mov	r4, r0
 800e39a:	460d      	mov	r5, r1
 800e39c:	ec51 0b18 	vmov	r0, r1, d8
 800e3a0:	f7f2 f92a 	bl	80005f8 <__aeabi_dmul>
 800e3a4:	4622      	mov	r2, r4
 800e3a6:	462b      	mov	r3, r5
 800e3a8:	f7f1 ff6e 	bl	8000288 <__aeabi_dsub>
 800e3ac:	4602      	mov	r2, r0
 800e3ae:	460b      	mov	r3, r1
 800e3b0:	4604      	mov	r4, r0
 800e3b2:	460d      	mov	r5, r1
 800e3b4:	4640      	mov	r0, r8
 800e3b6:	4649      	mov	r1, r9
 800e3b8:	f7f1 ff66 	bl	8000288 <__aeabi_dsub>
 800e3bc:	9a03      	ldr	r2, [sp, #12]
 800e3be:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e3c2:	1ad3      	subs	r3, r2, r3
 800e3c4:	2b31      	cmp	r3, #49	; 0x31
 800e3c6:	dc24      	bgt.n	800e412 <__ieee754_rem_pio2+0x28a>
 800e3c8:	e9ca 0100 	strd	r0, r1, [sl]
 800e3cc:	4646      	mov	r6, r8
 800e3ce:	464f      	mov	r7, r9
 800e3d0:	e9da 8900 	ldrd	r8, r9, [sl]
 800e3d4:	4630      	mov	r0, r6
 800e3d6:	4642      	mov	r2, r8
 800e3d8:	464b      	mov	r3, r9
 800e3da:	4639      	mov	r1, r7
 800e3dc:	f7f1 ff54 	bl	8000288 <__aeabi_dsub>
 800e3e0:	462b      	mov	r3, r5
 800e3e2:	4622      	mov	r2, r4
 800e3e4:	f7f1 ff50 	bl	8000288 <__aeabi_dsub>
 800e3e8:	9b02      	ldr	r3, [sp, #8]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e3f0:	f6bf af0a 	bge.w	800e208 <__ieee754_rem_pio2+0x80>
 800e3f4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e3f8:	f8ca 3004 	str.w	r3, [sl, #4]
 800e3fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e400:	f8ca 8000 	str.w	r8, [sl]
 800e404:	f8ca 0008 	str.w	r0, [sl, #8]
 800e408:	f8ca 300c 	str.w	r3, [sl, #12]
 800e40c:	f1cb 0b00 	rsb	fp, fp, #0
 800e410:	e6fa      	b.n	800e208 <__ieee754_rem_pio2+0x80>
 800e412:	a327      	add	r3, pc, #156	; (adr r3, 800e4b0 <__ieee754_rem_pio2+0x328>)
 800e414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e418:	ec51 0b18 	vmov	r0, r1, d8
 800e41c:	f7f2 f8ec 	bl	80005f8 <__aeabi_dmul>
 800e420:	4604      	mov	r4, r0
 800e422:	460d      	mov	r5, r1
 800e424:	4602      	mov	r2, r0
 800e426:	460b      	mov	r3, r1
 800e428:	4640      	mov	r0, r8
 800e42a:	4649      	mov	r1, r9
 800e42c:	f7f1 ff2c 	bl	8000288 <__aeabi_dsub>
 800e430:	4602      	mov	r2, r0
 800e432:	460b      	mov	r3, r1
 800e434:	4606      	mov	r6, r0
 800e436:	460f      	mov	r7, r1
 800e438:	4640      	mov	r0, r8
 800e43a:	4649      	mov	r1, r9
 800e43c:	f7f1 ff24 	bl	8000288 <__aeabi_dsub>
 800e440:	4622      	mov	r2, r4
 800e442:	462b      	mov	r3, r5
 800e444:	f7f1 ff20 	bl	8000288 <__aeabi_dsub>
 800e448:	a31b      	add	r3, pc, #108	; (adr r3, 800e4b8 <__ieee754_rem_pio2+0x330>)
 800e44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e44e:	4604      	mov	r4, r0
 800e450:	460d      	mov	r5, r1
 800e452:	ec51 0b18 	vmov	r0, r1, d8
 800e456:	f7f2 f8cf 	bl	80005f8 <__aeabi_dmul>
 800e45a:	4622      	mov	r2, r4
 800e45c:	462b      	mov	r3, r5
 800e45e:	f7f1 ff13 	bl	8000288 <__aeabi_dsub>
 800e462:	4604      	mov	r4, r0
 800e464:	460d      	mov	r5, r1
 800e466:	e75f      	b.n	800e328 <__ieee754_rem_pio2+0x1a0>
 800e468:	4b1b      	ldr	r3, [pc, #108]	; (800e4d8 <__ieee754_rem_pio2+0x350>)
 800e46a:	4598      	cmp	r8, r3
 800e46c:	dd36      	ble.n	800e4dc <__ieee754_rem_pio2+0x354>
 800e46e:	ee10 2a10 	vmov	r2, s0
 800e472:	462b      	mov	r3, r5
 800e474:	4620      	mov	r0, r4
 800e476:	4629      	mov	r1, r5
 800e478:	f7f1 ff06 	bl	8000288 <__aeabi_dsub>
 800e47c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e480:	e9ca 0100 	strd	r0, r1, [sl]
 800e484:	e694      	b.n	800e1b0 <__ieee754_rem_pio2+0x28>
 800e486:	bf00      	nop
 800e488:	54400000 	.word	0x54400000
 800e48c:	3ff921fb 	.word	0x3ff921fb
 800e490:	1a626331 	.word	0x1a626331
 800e494:	3dd0b461 	.word	0x3dd0b461
 800e498:	1a600000 	.word	0x1a600000
 800e49c:	3dd0b461 	.word	0x3dd0b461
 800e4a0:	2e037073 	.word	0x2e037073
 800e4a4:	3ba3198a 	.word	0x3ba3198a
 800e4a8:	6dc9c883 	.word	0x6dc9c883
 800e4ac:	3fe45f30 	.word	0x3fe45f30
 800e4b0:	2e000000 	.word	0x2e000000
 800e4b4:	3ba3198a 	.word	0x3ba3198a
 800e4b8:	252049c1 	.word	0x252049c1
 800e4bc:	397b839a 	.word	0x397b839a
 800e4c0:	3fe921fb 	.word	0x3fe921fb
 800e4c4:	4002d97b 	.word	0x4002d97b
 800e4c8:	3ff921fb 	.word	0x3ff921fb
 800e4cc:	413921fb 	.word	0x413921fb
 800e4d0:	3fe00000 	.word	0x3fe00000
 800e4d4:	0800f9a8 	.word	0x0800f9a8
 800e4d8:	7fefffff 	.word	0x7fefffff
 800e4dc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800e4e0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800e4e4:	ee10 0a10 	vmov	r0, s0
 800e4e8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800e4ec:	ee10 6a10 	vmov	r6, s0
 800e4f0:	460f      	mov	r7, r1
 800e4f2:	f7f2 fb31 	bl	8000b58 <__aeabi_d2iz>
 800e4f6:	f7f2 f815 	bl	8000524 <__aeabi_i2d>
 800e4fa:	4602      	mov	r2, r0
 800e4fc:	460b      	mov	r3, r1
 800e4fe:	4630      	mov	r0, r6
 800e500:	4639      	mov	r1, r7
 800e502:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e506:	f7f1 febf 	bl	8000288 <__aeabi_dsub>
 800e50a:	4b23      	ldr	r3, [pc, #140]	; (800e598 <__ieee754_rem_pio2+0x410>)
 800e50c:	2200      	movs	r2, #0
 800e50e:	f7f2 f873 	bl	80005f8 <__aeabi_dmul>
 800e512:	460f      	mov	r7, r1
 800e514:	4606      	mov	r6, r0
 800e516:	f7f2 fb1f 	bl	8000b58 <__aeabi_d2iz>
 800e51a:	f7f2 f803 	bl	8000524 <__aeabi_i2d>
 800e51e:	4602      	mov	r2, r0
 800e520:	460b      	mov	r3, r1
 800e522:	4630      	mov	r0, r6
 800e524:	4639      	mov	r1, r7
 800e526:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e52a:	f7f1 fead 	bl	8000288 <__aeabi_dsub>
 800e52e:	4b1a      	ldr	r3, [pc, #104]	; (800e598 <__ieee754_rem_pio2+0x410>)
 800e530:	2200      	movs	r2, #0
 800e532:	f7f2 f861 	bl	80005f8 <__aeabi_dmul>
 800e536:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e53a:	ad04      	add	r5, sp, #16
 800e53c:	f04f 0803 	mov.w	r8, #3
 800e540:	46a9      	mov	r9, r5
 800e542:	2600      	movs	r6, #0
 800e544:	2700      	movs	r7, #0
 800e546:	4632      	mov	r2, r6
 800e548:	463b      	mov	r3, r7
 800e54a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800e54e:	46c3      	mov	fp, r8
 800e550:	3d08      	subs	r5, #8
 800e552:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800e556:	f7f2 fab7 	bl	8000ac8 <__aeabi_dcmpeq>
 800e55a:	2800      	cmp	r0, #0
 800e55c:	d1f3      	bne.n	800e546 <__ieee754_rem_pio2+0x3be>
 800e55e:	4b0f      	ldr	r3, [pc, #60]	; (800e59c <__ieee754_rem_pio2+0x414>)
 800e560:	9301      	str	r3, [sp, #4]
 800e562:	2302      	movs	r3, #2
 800e564:	9300      	str	r3, [sp, #0]
 800e566:	4622      	mov	r2, r4
 800e568:	465b      	mov	r3, fp
 800e56a:	4651      	mov	r1, sl
 800e56c:	4648      	mov	r0, r9
 800e56e:	f000 f8cb 	bl	800e708 <__kernel_rem_pio2>
 800e572:	9b02      	ldr	r3, [sp, #8]
 800e574:	2b00      	cmp	r3, #0
 800e576:	4683      	mov	fp, r0
 800e578:	f6bf ae46 	bge.w	800e208 <__ieee754_rem_pio2+0x80>
 800e57c:	e9da 2100 	ldrd	r2, r1, [sl]
 800e580:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e584:	e9ca 2300 	strd	r2, r3, [sl]
 800e588:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800e58c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e590:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e594:	e73a      	b.n	800e40c <__ieee754_rem_pio2+0x284>
 800e596:	bf00      	nop
 800e598:	41700000 	.word	0x41700000
 800e59c:	0800fa28 	.word	0x0800fa28

0800e5a0 <__ieee754_sqrt>:
 800e5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5a4:	ec55 4b10 	vmov	r4, r5, d0
 800e5a8:	4e55      	ldr	r6, [pc, #340]	; (800e700 <__ieee754_sqrt+0x160>)
 800e5aa:	43ae      	bics	r6, r5
 800e5ac:	ee10 0a10 	vmov	r0, s0
 800e5b0:	ee10 3a10 	vmov	r3, s0
 800e5b4:	462a      	mov	r2, r5
 800e5b6:	4629      	mov	r1, r5
 800e5b8:	d110      	bne.n	800e5dc <__ieee754_sqrt+0x3c>
 800e5ba:	ee10 2a10 	vmov	r2, s0
 800e5be:	462b      	mov	r3, r5
 800e5c0:	f7f2 f81a 	bl	80005f8 <__aeabi_dmul>
 800e5c4:	4602      	mov	r2, r0
 800e5c6:	460b      	mov	r3, r1
 800e5c8:	4620      	mov	r0, r4
 800e5ca:	4629      	mov	r1, r5
 800e5cc:	f7f1 fe5e 	bl	800028c <__adddf3>
 800e5d0:	4604      	mov	r4, r0
 800e5d2:	460d      	mov	r5, r1
 800e5d4:	ec45 4b10 	vmov	d0, r4, r5
 800e5d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5dc:	2d00      	cmp	r5, #0
 800e5de:	dc10      	bgt.n	800e602 <__ieee754_sqrt+0x62>
 800e5e0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e5e4:	4330      	orrs	r0, r6
 800e5e6:	d0f5      	beq.n	800e5d4 <__ieee754_sqrt+0x34>
 800e5e8:	b15d      	cbz	r5, 800e602 <__ieee754_sqrt+0x62>
 800e5ea:	ee10 2a10 	vmov	r2, s0
 800e5ee:	462b      	mov	r3, r5
 800e5f0:	ee10 0a10 	vmov	r0, s0
 800e5f4:	f7f1 fe48 	bl	8000288 <__aeabi_dsub>
 800e5f8:	4602      	mov	r2, r0
 800e5fa:	460b      	mov	r3, r1
 800e5fc:	f7f2 f926 	bl	800084c <__aeabi_ddiv>
 800e600:	e7e6      	b.n	800e5d0 <__ieee754_sqrt+0x30>
 800e602:	1512      	asrs	r2, r2, #20
 800e604:	d074      	beq.n	800e6f0 <__ieee754_sqrt+0x150>
 800e606:	07d4      	lsls	r4, r2, #31
 800e608:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e60c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800e610:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e614:	bf5e      	ittt	pl
 800e616:	0fda      	lsrpl	r2, r3, #31
 800e618:	005b      	lslpl	r3, r3, #1
 800e61a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800e61e:	2400      	movs	r4, #0
 800e620:	0fda      	lsrs	r2, r3, #31
 800e622:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e626:	107f      	asrs	r7, r7, #1
 800e628:	005b      	lsls	r3, r3, #1
 800e62a:	2516      	movs	r5, #22
 800e62c:	4620      	mov	r0, r4
 800e62e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e632:	1886      	adds	r6, r0, r2
 800e634:	428e      	cmp	r6, r1
 800e636:	bfde      	ittt	le
 800e638:	1b89      	suble	r1, r1, r6
 800e63a:	18b0      	addle	r0, r6, r2
 800e63c:	18a4      	addle	r4, r4, r2
 800e63e:	0049      	lsls	r1, r1, #1
 800e640:	3d01      	subs	r5, #1
 800e642:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800e646:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e64a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e64e:	d1f0      	bne.n	800e632 <__ieee754_sqrt+0x92>
 800e650:	462a      	mov	r2, r5
 800e652:	f04f 0e20 	mov.w	lr, #32
 800e656:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e65a:	4281      	cmp	r1, r0
 800e65c:	eb06 0c05 	add.w	ip, r6, r5
 800e660:	dc02      	bgt.n	800e668 <__ieee754_sqrt+0xc8>
 800e662:	d113      	bne.n	800e68c <__ieee754_sqrt+0xec>
 800e664:	459c      	cmp	ip, r3
 800e666:	d811      	bhi.n	800e68c <__ieee754_sqrt+0xec>
 800e668:	f1bc 0f00 	cmp.w	ip, #0
 800e66c:	eb0c 0506 	add.w	r5, ip, r6
 800e670:	da43      	bge.n	800e6fa <__ieee754_sqrt+0x15a>
 800e672:	2d00      	cmp	r5, #0
 800e674:	db41      	blt.n	800e6fa <__ieee754_sqrt+0x15a>
 800e676:	f100 0801 	add.w	r8, r0, #1
 800e67a:	1a09      	subs	r1, r1, r0
 800e67c:	459c      	cmp	ip, r3
 800e67e:	bf88      	it	hi
 800e680:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800e684:	eba3 030c 	sub.w	r3, r3, ip
 800e688:	4432      	add	r2, r6
 800e68a:	4640      	mov	r0, r8
 800e68c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e690:	f1be 0e01 	subs.w	lr, lr, #1
 800e694:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800e698:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e69c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e6a0:	d1db      	bne.n	800e65a <__ieee754_sqrt+0xba>
 800e6a2:	430b      	orrs	r3, r1
 800e6a4:	d006      	beq.n	800e6b4 <__ieee754_sqrt+0x114>
 800e6a6:	1c50      	adds	r0, r2, #1
 800e6a8:	bf13      	iteet	ne
 800e6aa:	3201      	addne	r2, #1
 800e6ac:	3401      	addeq	r4, #1
 800e6ae:	4672      	moveq	r2, lr
 800e6b0:	f022 0201 	bicne.w	r2, r2, #1
 800e6b4:	1063      	asrs	r3, r4, #1
 800e6b6:	0852      	lsrs	r2, r2, #1
 800e6b8:	07e1      	lsls	r1, r4, #31
 800e6ba:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e6be:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e6c2:	bf48      	it	mi
 800e6c4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800e6c8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e6cc:	4614      	mov	r4, r2
 800e6ce:	e781      	b.n	800e5d4 <__ieee754_sqrt+0x34>
 800e6d0:	0ad9      	lsrs	r1, r3, #11
 800e6d2:	3815      	subs	r0, #21
 800e6d4:	055b      	lsls	r3, r3, #21
 800e6d6:	2900      	cmp	r1, #0
 800e6d8:	d0fa      	beq.n	800e6d0 <__ieee754_sqrt+0x130>
 800e6da:	02cd      	lsls	r5, r1, #11
 800e6dc:	d50a      	bpl.n	800e6f4 <__ieee754_sqrt+0x154>
 800e6de:	f1c2 0420 	rsb	r4, r2, #32
 800e6e2:	fa23 f404 	lsr.w	r4, r3, r4
 800e6e6:	1e55      	subs	r5, r2, #1
 800e6e8:	4093      	lsls	r3, r2
 800e6ea:	4321      	orrs	r1, r4
 800e6ec:	1b42      	subs	r2, r0, r5
 800e6ee:	e78a      	b.n	800e606 <__ieee754_sqrt+0x66>
 800e6f0:	4610      	mov	r0, r2
 800e6f2:	e7f0      	b.n	800e6d6 <__ieee754_sqrt+0x136>
 800e6f4:	0049      	lsls	r1, r1, #1
 800e6f6:	3201      	adds	r2, #1
 800e6f8:	e7ef      	b.n	800e6da <__ieee754_sqrt+0x13a>
 800e6fa:	4680      	mov	r8, r0
 800e6fc:	e7bd      	b.n	800e67a <__ieee754_sqrt+0xda>
 800e6fe:	bf00      	nop
 800e700:	7ff00000 	.word	0x7ff00000
 800e704:	00000000 	.word	0x00000000

0800e708 <__kernel_rem_pio2>:
 800e708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e70c:	ed2d 8b02 	vpush	{d8}
 800e710:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800e714:	f112 0f14 	cmn.w	r2, #20
 800e718:	9308      	str	r3, [sp, #32]
 800e71a:	9101      	str	r1, [sp, #4]
 800e71c:	4bc4      	ldr	r3, [pc, #784]	; (800ea30 <__kernel_rem_pio2+0x328>)
 800e71e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800e720:	900b      	str	r0, [sp, #44]	; 0x2c
 800e722:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e726:	9302      	str	r3, [sp, #8]
 800e728:	9b08      	ldr	r3, [sp, #32]
 800e72a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800e72e:	bfa8      	it	ge
 800e730:	1ed4      	subge	r4, r2, #3
 800e732:	9306      	str	r3, [sp, #24]
 800e734:	bfb2      	itee	lt
 800e736:	2400      	movlt	r4, #0
 800e738:	2318      	movge	r3, #24
 800e73a:	fb94 f4f3 	sdivge	r4, r4, r3
 800e73e:	f06f 0317 	mvn.w	r3, #23
 800e742:	fb04 3303 	mla	r3, r4, r3, r3
 800e746:	eb03 0a02 	add.w	sl, r3, r2
 800e74a:	9b02      	ldr	r3, [sp, #8]
 800e74c:	9a06      	ldr	r2, [sp, #24]
 800e74e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800ea20 <__kernel_rem_pio2+0x318>
 800e752:	eb03 0802 	add.w	r8, r3, r2
 800e756:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e758:	1aa7      	subs	r7, r4, r2
 800e75a:	ae22      	add	r6, sp, #136	; 0x88
 800e75c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e760:	2500      	movs	r5, #0
 800e762:	4545      	cmp	r5, r8
 800e764:	dd13      	ble.n	800e78e <__kernel_rem_pio2+0x86>
 800e766:	9b08      	ldr	r3, [sp, #32]
 800e768:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800ea20 <__kernel_rem_pio2+0x318>
 800e76c:	aa22      	add	r2, sp, #136	; 0x88
 800e76e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e772:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800e776:	f04f 0800 	mov.w	r8, #0
 800e77a:	9b02      	ldr	r3, [sp, #8]
 800e77c:	4598      	cmp	r8, r3
 800e77e:	dc2f      	bgt.n	800e7e0 <__kernel_rem_pio2+0xd8>
 800e780:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e784:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800e788:	462f      	mov	r7, r5
 800e78a:	2600      	movs	r6, #0
 800e78c:	e01b      	b.n	800e7c6 <__kernel_rem_pio2+0xbe>
 800e78e:	42ef      	cmn	r7, r5
 800e790:	d407      	bmi.n	800e7a2 <__kernel_rem_pio2+0x9a>
 800e792:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e796:	f7f1 fec5 	bl	8000524 <__aeabi_i2d>
 800e79a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e79e:	3501      	adds	r5, #1
 800e7a0:	e7df      	b.n	800e762 <__kernel_rem_pio2+0x5a>
 800e7a2:	ec51 0b18 	vmov	r0, r1, d8
 800e7a6:	e7f8      	b.n	800e79a <__kernel_rem_pio2+0x92>
 800e7a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7ac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e7b0:	f7f1 ff22 	bl	80005f8 <__aeabi_dmul>
 800e7b4:	4602      	mov	r2, r0
 800e7b6:	460b      	mov	r3, r1
 800e7b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e7bc:	f7f1 fd66 	bl	800028c <__adddf3>
 800e7c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e7c4:	3601      	adds	r6, #1
 800e7c6:	9b06      	ldr	r3, [sp, #24]
 800e7c8:	429e      	cmp	r6, r3
 800e7ca:	f1a7 0708 	sub.w	r7, r7, #8
 800e7ce:	ddeb      	ble.n	800e7a8 <__kernel_rem_pio2+0xa0>
 800e7d0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e7d4:	f108 0801 	add.w	r8, r8, #1
 800e7d8:	ecab 7b02 	vstmia	fp!, {d7}
 800e7dc:	3508      	adds	r5, #8
 800e7de:	e7cc      	b.n	800e77a <__kernel_rem_pio2+0x72>
 800e7e0:	9b02      	ldr	r3, [sp, #8]
 800e7e2:	aa0e      	add	r2, sp, #56	; 0x38
 800e7e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e7e8:	930d      	str	r3, [sp, #52]	; 0x34
 800e7ea:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e7ec:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e7f0:	9c02      	ldr	r4, [sp, #8]
 800e7f2:	930c      	str	r3, [sp, #48]	; 0x30
 800e7f4:	00e3      	lsls	r3, r4, #3
 800e7f6:	930a      	str	r3, [sp, #40]	; 0x28
 800e7f8:	ab9a      	add	r3, sp, #616	; 0x268
 800e7fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e7fe:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e802:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800e806:	ab72      	add	r3, sp, #456	; 0x1c8
 800e808:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e80c:	46c3      	mov	fp, r8
 800e80e:	46a1      	mov	r9, r4
 800e810:	f1b9 0f00 	cmp.w	r9, #0
 800e814:	f1a5 0508 	sub.w	r5, r5, #8
 800e818:	dc77      	bgt.n	800e90a <__kernel_rem_pio2+0x202>
 800e81a:	ec47 6b10 	vmov	d0, r6, r7
 800e81e:	4650      	mov	r0, sl
 800e820:	f000 fd92 	bl	800f348 <scalbn>
 800e824:	ec57 6b10 	vmov	r6, r7, d0
 800e828:	2200      	movs	r2, #0
 800e82a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e82e:	ee10 0a10 	vmov	r0, s0
 800e832:	4639      	mov	r1, r7
 800e834:	f7f1 fee0 	bl	80005f8 <__aeabi_dmul>
 800e838:	ec41 0b10 	vmov	d0, r0, r1
 800e83c:	f000 fd04 	bl	800f248 <floor>
 800e840:	4b7c      	ldr	r3, [pc, #496]	; (800ea34 <__kernel_rem_pio2+0x32c>)
 800e842:	ec51 0b10 	vmov	r0, r1, d0
 800e846:	2200      	movs	r2, #0
 800e848:	f7f1 fed6 	bl	80005f8 <__aeabi_dmul>
 800e84c:	4602      	mov	r2, r0
 800e84e:	460b      	mov	r3, r1
 800e850:	4630      	mov	r0, r6
 800e852:	4639      	mov	r1, r7
 800e854:	f7f1 fd18 	bl	8000288 <__aeabi_dsub>
 800e858:	460f      	mov	r7, r1
 800e85a:	4606      	mov	r6, r0
 800e85c:	f7f2 f97c 	bl	8000b58 <__aeabi_d2iz>
 800e860:	9004      	str	r0, [sp, #16]
 800e862:	f7f1 fe5f 	bl	8000524 <__aeabi_i2d>
 800e866:	4602      	mov	r2, r0
 800e868:	460b      	mov	r3, r1
 800e86a:	4630      	mov	r0, r6
 800e86c:	4639      	mov	r1, r7
 800e86e:	f7f1 fd0b 	bl	8000288 <__aeabi_dsub>
 800e872:	f1ba 0f00 	cmp.w	sl, #0
 800e876:	4606      	mov	r6, r0
 800e878:	460f      	mov	r7, r1
 800e87a:	dd6d      	ble.n	800e958 <__kernel_rem_pio2+0x250>
 800e87c:	1e62      	subs	r2, r4, #1
 800e87e:	ab0e      	add	r3, sp, #56	; 0x38
 800e880:	9d04      	ldr	r5, [sp, #16]
 800e882:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e886:	f1ca 0118 	rsb	r1, sl, #24
 800e88a:	fa40 f301 	asr.w	r3, r0, r1
 800e88e:	441d      	add	r5, r3
 800e890:	408b      	lsls	r3, r1
 800e892:	1ac0      	subs	r0, r0, r3
 800e894:	ab0e      	add	r3, sp, #56	; 0x38
 800e896:	9504      	str	r5, [sp, #16]
 800e898:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e89c:	f1ca 0317 	rsb	r3, sl, #23
 800e8a0:	fa40 fb03 	asr.w	fp, r0, r3
 800e8a4:	f1bb 0f00 	cmp.w	fp, #0
 800e8a8:	dd65      	ble.n	800e976 <__kernel_rem_pio2+0x26e>
 800e8aa:	9b04      	ldr	r3, [sp, #16]
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	3301      	adds	r3, #1
 800e8b0:	9304      	str	r3, [sp, #16]
 800e8b2:	4615      	mov	r5, r2
 800e8b4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e8b8:	4294      	cmp	r4, r2
 800e8ba:	f300 809c 	bgt.w	800e9f6 <__kernel_rem_pio2+0x2ee>
 800e8be:	f1ba 0f00 	cmp.w	sl, #0
 800e8c2:	dd07      	ble.n	800e8d4 <__kernel_rem_pio2+0x1cc>
 800e8c4:	f1ba 0f01 	cmp.w	sl, #1
 800e8c8:	f000 80c0 	beq.w	800ea4c <__kernel_rem_pio2+0x344>
 800e8cc:	f1ba 0f02 	cmp.w	sl, #2
 800e8d0:	f000 80c6 	beq.w	800ea60 <__kernel_rem_pio2+0x358>
 800e8d4:	f1bb 0f02 	cmp.w	fp, #2
 800e8d8:	d14d      	bne.n	800e976 <__kernel_rem_pio2+0x26e>
 800e8da:	4632      	mov	r2, r6
 800e8dc:	463b      	mov	r3, r7
 800e8de:	4956      	ldr	r1, [pc, #344]	; (800ea38 <__kernel_rem_pio2+0x330>)
 800e8e0:	2000      	movs	r0, #0
 800e8e2:	f7f1 fcd1 	bl	8000288 <__aeabi_dsub>
 800e8e6:	4606      	mov	r6, r0
 800e8e8:	460f      	mov	r7, r1
 800e8ea:	2d00      	cmp	r5, #0
 800e8ec:	d043      	beq.n	800e976 <__kernel_rem_pio2+0x26e>
 800e8ee:	4650      	mov	r0, sl
 800e8f0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800ea28 <__kernel_rem_pio2+0x320>
 800e8f4:	f000 fd28 	bl	800f348 <scalbn>
 800e8f8:	4630      	mov	r0, r6
 800e8fa:	4639      	mov	r1, r7
 800e8fc:	ec53 2b10 	vmov	r2, r3, d0
 800e900:	f7f1 fcc2 	bl	8000288 <__aeabi_dsub>
 800e904:	4606      	mov	r6, r0
 800e906:	460f      	mov	r7, r1
 800e908:	e035      	b.n	800e976 <__kernel_rem_pio2+0x26e>
 800e90a:	4b4c      	ldr	r3, [pc, #304]	; (800ea3c <__kernel_rem_pio2+0x334>)
 800e90c:	2200      	movs	r2, #0
 800e90e:	4630      	mov	r0, r6
 800e910:	4639      	mov	r1, r7
 800e912:	f7f1 fe71 	bl	80005f8 <__aeabi_dmul>
 800e916:	f7f2 f91f 	bl	8000b58 <__aeabi_d2iz>
 800e91a:	f7f1 fe03 	bl	8000524 <__aeabi_i2d>
 800e91e:	4602      	mov	r2, r0
 800e920:	460b      	mov	r3, r1
 800e922:	ec43 2b18 	vmov	d8, r2, r3
 800e926:	4b46      	ldr	r3, [pc, #280]	; (800ea40 <__kernel_rem_pio2+0x338>)
 800e928:	2200      	movs	r2, #0
 800e92a:	f7f1 fe65 	bl	80005f8 <__aeabi_dmul>
 800e92e:	4602      	mov	r2, r0
 800e930:	460b      	mov	r3, r1
 800e932:	4630      	mov	r0, r6
 800e934:	4639      	mov	r1, r7
 800e936:	f7f1 fca7 	bl	8000288 <__aeabi_dsub>
 800e93a:	f7f2 f90d 	bl	8000b58 <__aeabi_d2iz>
 800e93e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e942:	f84b 0b04 	str.w	r0, [fp], #4
 800e946:	ec51 0b18 	vmov	r0, r1, d8
 800e94a:	f7f1 fc9f 	bl	800028c <__adddf3>
 800e94e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800e952:	4606      	mov	r6, r0
 800e954:	460f      	mov	r7, r1
 800e956:	e75b      	b.n	800e810 <__kernel_rem_pio2+0x108>
 800e958:	d106      	bne.n	800e968 <__kernel_rem_pio2+0x260>
 800e95a:	1e63      	subs	r3, r4, #1
 800e95c:	aa0e      	add	r2, sp, #56	; 0x38
 800e95e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e962:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800e966:	e79d      	b.n	800e8a4 <__kernel_rem_pio2+0x19c>
 800e968:	4b36      	ldr	r3, [pc, #216]	; (800ea44 <__kernel_rem_pio2+0x33c>)
 800e96a:	2200      	movs	r2, #0
 800e96c:	f7f2 f8ca 	bl	8000b04 <__aeabi_dcmpge>
 800e970:	2800      	cmp	r0, #0
 800e972:	d13d      	bne.n	800e9f0 <__kernel_rem_pio2+0x2e8>
 800e974:	4683      	mov	fp, r0
 800e976:	2200      	movs	r2, #0
 800e978:	2300      	movs	r3, #0
 800e97a:	4630      	mov	r0, r6
 800e97c:	4639      	mov	r1, r7
 800e97e:	f7f2 f8a3 	bl	8000ac8 <__aeabi_dcmpeq>
 800e982:	2800      	cmp	r0, #0
 800e984:	f000 80c0 	beq.w	800eb08 <__kernel_rem_pio2+0x400>
 800e988:	1e65      	subs	r5, r4, #1
 800e98a:	462b      	mov	r3, r5
 800e98c:	2200      	movs	r2, #0
 800e98e:	9902      	ldr	r1, [sp, #8]
 800e990:	428b      	cmp	r3, r1
 800e992:	da6c      	bge.n	800ea6e <__kernel_rem_pio2+0x366>
 800e994:	2a00      	cmp	r2, #0
 800e996:	f000 8089 	beq.w	800eaac <__kernel_rem_pio2+0x3a4>
 800e99a:	ab0e      	add	r3, sp, #56	; 0x38
 800e99c:	f1aa 0a18 	sub.w	sl, sl, #24
 800e9a0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	f000 80ad 	beq.w	800eb04 <__kernel_rem_pio2+0x3fc>
 800e9aa:	4650      	mov	r0, sl
 800e9ac:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800ea28 <__kernel_rem_pio2+0x320>
 800e9b0:	f000 fcca 	bl	800f348 <scalbn>
 800e9b4:	ab9a      	add	r3, sp, #616	; 0x268
 800e9b6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e9ba:	ec57 6b10 	vmov	r6, r7, d0
 800e9be:	00ec      	lsls	r4, r5, #3
 800e9c0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800e9c4:	46aa      	mov	sl, r5
 800e9c6:	f1ba 0f00 	cmp.w	sl, #0
 800e9ca:	f280 80d6 	bge.w	800eb7a <__kernel_rem_pio2+0x472>
 800e9ce:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800ea20 <__kernel_rem_pio2+0x318>
 800e9d2:	462e      	mov	r6, r5
 800e9d4:	2e00      	cmp	r6, #0
 800e9d6:	f2c0 8104 	blt.w	800ebe2 <__kernel_rem_pio2+0x4da>
 800e9da:	ab72      	add	r3, sp, #456	; 0x1c8
 800e9dc:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e9e0:	f8df a064 	ldr.w	sl, [pc, #100]	; 800ea48 <__kernel_rem_pio2+0x340>
 800e9e4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800e9e8:	f04f 0800 	mov.w	r8, #0
 800e9ec:	1baf      	subs	r7, r5, r6
 800e9ee:	e0ea      	b.n	800ebc6 <__kernel_rem_pio2+0x4be>
 800e9f0:	f04f 0b02 	mov.w	fp, #2
 800e9f4:	e759      	b.n	800e8aa <__kernel_rem_pio2+0x1a2>
 800e9f6:	f8d8 3000 	ldr.w	r3, [r8]
 800e9fa:	b955      	cbnz	r5, 800ea12 <__kernel_rem_pio2+0x30a>
 800e9fc:	b123      	cbz	r3, 800ea08 <__kernel_rem_pio2+0x300>
 800e9fe:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ea02:	f8c8 3000 	str.w	r3, [r8]
 800ea06:	2301      	movs	r3, #1
 800ea08:	3201      	adds	r2, #1
 800ea0a:	f108 0804 	add.w	r8, r8, #4
 800ea0e:	461d      	mov	r5, r3
 800ea10:	e752      	b.n	800e8b8 <__kernel_rem_pio2+0x1b0>
 800ea12:	1acb      	subs	r3, r1, r3
 800ea14:	f8c8 3000 	str.w	r3, [r8]
 800ea18:	462b      	mov	r3, r5
 800ea1a:	e7f5      	b.n	800ea08 <__kernel_rem_pio2+0x300>
 800ea1c:	f3af 8000 	nop.w
	...
 800ea2c:	3ff00000 	.word	0x3ff00000
 800ea30:	0800fb70 	.word	0x0800fb70
 800ea34:	40200000 	.word	0x40200000
 800ea38:	3ff00000 	.word	0x3ff00000
 800ea3c:	3e700000 	.word	0x3e700000
 800ea40:	41700000 	.word	0x41700000
 800ea44:	3fe00000 	.word	0x3fe00000
 800ea48:	0800fb30 	.word	0x0800fb30
 800ea4c:	1e62      	subs	r2, r4, #1
 800ea4e:	ab0e      	add	r3, sp, #56	; 0x38
 800ea50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea54:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ea58:	a90e      	add	r1, sp, #56	; 0x38
 800ea5a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ea5e:	e739      	b.n	800e8d4 <__kernel_rem_pio2+0x1cc>
 800ea60:	1e62      	subs	r2, r4, #1
 800ea62:	ab0e      	add	r3, sp, #56	; 0x38
 800ea64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea68:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ea6c:	e7f4      	b.n	800ea58 <__kernel_rem_pio2+0x350>
 800ea6e:	a90e      	add	r1, sp, #56	; 0x38
 800ea70:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ea74:	3b01      	subs	r3, #1
 800ea76:	430a      	orrs	r2, r1
 800ea78:	e789      	b.n	800e98e <__kernel_rem_pio2+0x286>
 800ea7a:	3301      	adds	r3, #1
 800ea7c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ea80:	2900      	cmp	r1, #0
 800ea82:	d0fa      	beq.n	800ea7a <__kernel_rem_pio2+0x372>
 800ea84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea86:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800ea8a:	446a      	add	r2, sp
 800ea8c:	3a98      	subs	r2, #152	; 0x98
 800ea8e:	920a      	str	r2, [sp, #40]	; 0x28
 800ea90:	9a08      	ldr	r2, [sp, #32]
 800ea92:	18e3      	adds	r3, r4, r3
 800ea94:	18a5      	adds	r5, r4, r2
 800ea96:	aa22      	add	r2, sp, #136	; 0x88
 800ea98:	f104 0801 	add.w	r8, r4, #1
 800ea9c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800eaa0:	9304      	str	r3, [sp, #16]
 800eaa2:	9b04      	ldr	r3, [sp, #16]
 800eaa4:	4543      	cmp	r3, r8
 800eaa6:	da04      	bge.n	800eab2 <__kernel_rem_pio2+0x3aa>
 800eaa8:	461c      	mov	r4, r3
 800eaaa:	e6a3      	b.n	800e7f4 <__kernel_rem_pio2+0xec>
 800eaac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800eaae:	2301      	movs	r3, #1
 800eab0:	e7e4      	b.n	800ea7c <__kernel_rem_pio2+0x374>
 800eab2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eab4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800eab8:	f7f1 fd34 	bl	8000524 <__aeabi_i2d>
 800eabc:	e8e5 0102 	strd	r0, r1, [r5], #8
 800eac0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eac2:	46ab      	mov	fp, r5
 800eac4:	461c      	mov	r4, r3
 800eac6:	f04f 0900 	mov.w	r9, #0
 800eaca:	2600      	movs	r6, #0
 800eacc:	2700      	movs	r7, #0
 800eace:	9b06      	ldr	r3, [sp, #24]
 800ead0:	4599      	cmp	r9, r3
 800ead2:	dd06      	ble.n	800eae2 <__kernel_rem_pio2+0x3da>
 800ead4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ead6:	e8e3 6702 	strd	r6, r7, [r3], #8
 800eada:	f108 0801 	add.w	r8, r8, #1
 800eade:	930a      	str	r3, [sp, #40]	; 0x28
 800eae0:	e7df      	b.n	800eaa2 <__kernel_rem_pio2+0x39a>
 800eae2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800eae6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800eaea:	f7f1 fd85 	bl	80005f8 <__aeabi_dmul>
 800eaee:	4602      	mov	r2, r0
 800eaf0:	460b      	mov	r3, r1
 800eaf2:	4630      	mov	r0, r6
 800eaf4:	4639      	mov	r1, r7
 800eaf6:	f7f1 fbc9 	bl	800028c <__adddf3>
 800eafa:	f109 0901 	add.w	r9, r9, #1
 800eafe:	4606      	mov	r6, r0
 800eb00:	460f      	mov	r7, r1
 800eb02:	e7e4      	b.n	800eace <__kernel_rem_pio2+0x3c6>
 800eb04:	3d01      	subs	r5, #1
 800eb06:	e748      	b.n	800e99a <__kernel_rem_pio2+0x292>
 800eb08:	ec47 6b10 	vmov	d0, r6, r7
 800eb0c:	f1ca 0000 	rsb	r0, sl, #0
 800eb10:	f000 fc1a 	bl	800f348 <scalbn>
 800eb14:	ec57 6b10 	vmov	r6, r7, d0
 800eb18:	4ba0      	ldr	r3, [pc, #640]	; (800ed9c <__kernel_rem_pio2+0x694>)
 800eb1a:	ee10 0a10 	vmov	r0, s0
 800eb1e:	2200      	movs	r2, #0
 800eb20:	4639      	mov	r1, r7
 800eb22:	f7f1 ffef 	bl	8000b04 <__aeabi_dcmpge>
 800eb26:	b1f8      	cbz	r0, 800eb68 <__kernel_rem_pio2+0x460>
 800eb28:	4b9d      	ldr	r3, [pc, #628]	; (800eda0 <__kernel_rem_pio2+0x698>)
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	4630      	mov	r0, r6
 800eb2e:	4639      	mov	r1, r7
 800eb30:	f7f1 fd62 	bl	80005f8 <__aeabi_dmul>
 800eb34:	f7f2 f810 	bl	8000b58 <__aeabi_d2iz>
 800eb38:	4680      	mov	r8, r0
 800eb3a:	f7f1 fcf3 	bl	8000524 <__aeabi_i2d>
 800eb3e:	4b97      	ldr	r3, [pc, #604]	; (800ed9c <__kernel_rem_pio2+0x694>)
 800eb40:	2200      	movs	r2, #0
 800eb42:	f7f1 fd59 	bl	80005f8 <__aeabi_dmul>
 800eb46:	460b      	mov	r3, r1
 800eb48:	4602      	mov	r2, r0
 800eb4a:	4639      	mov	r1, r7
 800eb4c:	4630      	mov	r0, r6
 800eb4e:	f7f1 fb9b 	bl	8000288 <__aeabi_dsub>
 800eb52:	f7f2 f801 	bl	8000b58 <__aeabi_d2iz>
 800eb56:	1c65      	adds	r5, r4, #1
 800eb58:	ab0e      	add	r3, sp, #56	; 0x38
 800eb5a:	f10a 0a18 	add.w	sl, sl, #24
 800eb5e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800eb62:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800eb66:	e720      	b.n	800e9aa <__kernel_rem_pio2+0x2a2>
 800eb68:	4630      	mov	r0, r6
 800eb6a:	4639      	mov	r1, r7
 800eb6c:	f7f1 fff4 	bl	8000b58 <__aeabi_d2iz>
 800eb70:	ab0e      	add	r3, sp, #56	; 0x38
 800eb72:	4625      	mov	r5, r4
 800eb74:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800eb78:	e717      	b.n	800e9aa <__kernel_rem_pio2+0x2a2>
 800eb7a:	ab0e      	add	r3, sp, #56	; 0x38
 800eb7c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800eb80:	f7f1 fcd0 	bl	8000524 <__aeabi_i2d>
 800eb84:	4632      	mov	r2, r6
 800eb86:	463b      	mov	r3, r7
 800eb88:	f7f1 fd36 	bl	80005f8 <__aeabi_dmul>
 800eb8c:	4b84      	ldr	r3, [pc, #528]	; (800eda0 <__kernel_rem_pio2+0x698>)
 800eb8e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800eb92:	2200      	movs	r2, #0
 800eb94:	4630      	mov	r0, r6
 800eb96:	4639      	mov	r1, r7
 800eb98:	f7f1 fd2e 	bl	80005f8 <__aeabi_dmul>
 800eb9c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800eba0:	4606      	mov	r6, r0
 800eba2:	460f      	mov	r7, r1
 800eba4:	e70f      	b.n	800e9c6 <__kernel_rem_pio2+0x2be>
 800eba6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ebaa:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800ebae:	f7f1 fd23 	bl	80005f8 <__aeabi_dmul>
 800ebb2:	4602      	mov	r2, r0
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ebba:	f7f1 fb67 	bl	800028c <__adddf3>
 800ebbe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ebc2:	f108 0801 	add.w	r8, r8, #1
 800ebc6:	9b02      	ldr	r3, [sp, #8]
 800ebc8:	4598      	cmp	r8, r3
 800ebca:	dc01      	bgt.n	800ebd0 <__kernel_rem_pio2+0x4c8>
 800ebcc:	45b8      	cmp	r8, r7
 800ebce:	ddea      	ble.n	800eba6 <__kernel_rem_pio2+0x49e>
 800ebd0:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ebd4:	ab4a      	add	r3, sp, #296	; 0x128
 800ebd6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ebda:	ed87 7b00 	vstr	d7, [r7]
 800ebde:	3e01      	subs	r6, #1
 800ebe0:	e6f8      	b.n	800e9d4 <__kernel_rem_pio2+0x2cc>
 800ebe2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ebe4:	2b02      	cmp	r3, #2
 800ebe6:	dc0b      	bgt.n	800ec00 <__kernel_rem_pio2+0x4f8>
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	dc35      	bgt.n	800ec58 <__kernel_rem_pio2+0x550>
 800ebec:	d059      	beq.n	800eca2 <__kernel_rem_pio2+0x59a>
 800ebee:	9b04      	ldr	r3, [sp, #16]
 800ebf0:	f003 0007 	and.w	r0, r3, #7
 800ebf4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800ebf8:	ecbd 8b02 	vpop	{d8}
 800ebfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec00:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ec02:	2b03      	cmp	r3, #3
 800ec04:	d1f3      	bne.n	800ebee <__kernel_rem_pio2+0x4e6>
 800ec06:	ab4a      	add	r3, sp, #296	; 0x128
 800ec08:	4423      	add	r3, r4
 800ec0a:	9306      	str	r3, [sp, #24]
 800ec0c:	461c      	mov	r4, r3
 800ec0e:	469a      	mov	sl, r3
 800ec10:	9502      	str	r5, [sp, #8]
 800ec12:	9b02      	ldr	r3, [sp, #8]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	f1aa 0a08 	sub.w	sl, sl, #8
 800ec1a:	dc6b      	bgt.n	800ecf4 <__kernel_rem_pio2+0x5ec>
 800ec1c:	46aa      	mov	sl, r5
 800ec1e:	f1ba 0f01 	cmp.w	sl, #1
 800ec22:	f1a4 0408 	sub.w	r4, r4, #8
 800ec26:	f300 8085 	bgt.w	800ed34 <__kernel_rem_pio2+0x62c>
 800ec2a:	9c06      	ldr	r4, [sp, #24]
 800ec2c:	2000      	movs	r0, #0
 800ec2e:	3408      	adds	r4, #8
 800ec30:	2100      	movs	r1, #0
 800ec32:	2d01      	cmp	r5, #1
 800ec34:	f300 809d 	bgt.w	800ed72 <__kernel_rem_pio2+0x66a>
 800ec38:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800ec3c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800ec40:	f1bb 0f00 	cmp.w	fp, #0
 800ec44:	f040 809b 	bne.w	800ed7e <__kernel_rem_pio2+0x676>
 800ec48:	9b01      	ldr	r3, [sp, #4]
 800ec4a:	e9c3 5600 	strd	r5, r6, [r3]
 800ec4e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800ec52:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ec56:	e7ca      	b.n	800ebee <__kernel_rem_pio2+0x4e6>
 800ec58:	3408      	adds	r4, #8
 800ec5a:	ab4a      	add	r3, sp, #296	; 0x128
 800ec5c:	441c      	add	r4, r3
 800ec5e:	462e      	mov	r6, r5
 800ec60:	2000      	movs	r0, #0
 800ec62:	2100      	movs	r1, #0
 800ec64:	2e00      	cmp	r6, #0
 800ec66:	da36      	bge.n	800ecd6 <__kernel_rem_pio2+0x5ce>
 800ec68:	f1bb 0f00 	cmp.w	fp, #0
 800ec6c:	d039      	beq.n	800ece2 <__kernel_rem_pio2+0x5da>
 800ec6e:	4602      	mov	r2, r0
 800ec70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ec74:	9c01      	ldr	r4, [sp, #4]
 800ec76:	e9c4 2300 	strd	r2, r3, [r4]
 800ec7a:	4602      	mov	r2, r0
 800ec7c:	460b      	mov	r3, r1
 800ec7e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800ec82:	f7f1 fb01 	bl	8000288 <__aeabi_dsub>
 800ec86:	ae4c      	add	r6, sp, #304	; 0x130
 800ec88:	2401      	movs	r4, #1
 800ec8a:	42a5      	cmp	r5, r4
 800ec8c:	da2c      	bge.n	800ece8 <__kernel_rem_pio2+0x5e0>
 800ec8e:	f1bb 0f00 	cmp.w	fp, #0
 800ec92:	d002      	beq.n	800ec9a <__kernel_rem_pio2+0x592>
 800ec94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ec98:	4619      	mov	r1, r3
 800ec9a:	9b01      	ldr	r3, [sp, #4]
 800ec9c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800eca0:	e7a5      	b.n	800ebee <__kernel_rem_pio2+0x4e6>
 800eca2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800eca6:	eb0d 0403 	add.w	r4, sp, r3
 800ecaa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ecae:	2000      	movs	r0, #0
 800ecb0:	2100      	movs	r1, #0
 800ecb2:	2d00      	cmp	r5, #0
 800ecb4:	da09      	bge.n	800ecca <__kernel_rem_pio2+0x5c2>
 800ecb6:	f1bb 0f00 	cmp.w	fp, #0
 800ecba:	d002      	beq.n	800ecc2 <__kernel_rem_pio2+0x5ba>
 800ecbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ecc0:	4619      	mov	r1, r3
 800ecc2:	9b01      	ldr	r3, [sp, #4]
 800ecc4:	e9c3 0100 	strd	r0, r1, [r3]
 800ecc8:	e791      	b.n	800ebee <__kernel_rem_pio2+0x4e6>
 800ecca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ecce:	f7f1 fadd 	bl	800028c <__adddf3>
 800ecd2:	3d01      	subs	r5, #1
 800ecd4:	e7ed      	b.n	800ecb2 <__kernel_rem_pio2+0x5aa>
 800ecd6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ecda:	f7f1 fad7 	bl	800028c <__adddf3>
 800ecde:	3e01      	subs	r6, #1
 800ece0:	e7c0      	b.n	800ec64 <__kernel_rem_pio2+0x55c>
 800ece2:	4602      	mov	r2, r0
 800ece4:	460b      	mov	r3, r1
 800ece6:	e7c5      	b.n	800ec74 <__kernel_rem_pio2+0x56c>
 800ece8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ecec:	f7f1 face 	bl	800028c <__adddf3>
 800ecf0:	3401      	adds	r4, #1
 800ecf2:	e7ca      	b.n	800ec8a <__kernel_rem_pio2+0x582>
 800ecf4:	e9da 8900 	ldrd	r8, r9, [sl]
 800ecf8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ecfc:	9b02      	ldr	r3, [sp, #8]
 800ecfe:	3b01      	subs	r3, #1
 800ed00:	9302      	str	r3, [sp, #8]
 800ed02:	4632      	mov	r2, r6
 800ed04:	463b      	mov	r3, r7
 800ed06:	4640      	mov	r0, r8
 800ed08:	4649      	mov	r1, r9
 800ed0a:	f7f1 fabf 	bl	800028c <__adddf3>
 800ed0e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ed12:	4602      	mov	r2, r0
 800ed14:	460b      	mov	r3, r1
 800ed16:	4640      	mov	r0, r8
 800ed18:	4649      	mov	r1, r9
 800ed1a:	f7f1 fab5 	bl	8000288 <__aeabi_dsub>
 800ed1e:	4632      	mov	r2, r6
 800ed20:	463b      	mov	r3, r7
 800ed22:	f7f1 fab3 	bl	800028c <__adddf3>
 800ed26:	ed9d 7b08 	vldr	d7, [sp, #32]
 800ed2a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ed2e:	ed8a 7b00 	vstr	d7, [sl]
 800ed32:	e76e      	b.n	800ec12 <__kernel_rem_pio2+0x50a>
 800ed34:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ed38:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ed3c:	4640      	mov	r0, r8
 800ed3e:	4632      	mov	r2, r6
 800ed40:	463b      	mov	r3, r7
 800ed42:	4649      	mov	r1, r9
 800ed44:	f7f1 faa2 	bl	800028c <__adddf3>
 800ed48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed4c:	4602      	mov	r2, r0
 800ed4e:	460b      	mov	r3, r1
 800ed50:	4640      	mov	r0, r8
 800ed52:	4649      	mov	r1, r9
 800ed54:	f7f1 fa98 	bl	8000288 <__aeabi_dsub>
 800ed58:	4632      	mov	r2, r6
 800ed5a:	463b      	mov	r3, r7
 800ed5c:	f7f1 fa96 	bl	800028c <__adddf3>
 800ed60:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ed64:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ed68:	ed84 7b00 	vstr	d7, [r4]
 800ed6c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ed70:	e755      	b.n	800ec1e <__kernel_rem_pio2+0x516>
 800ed72:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ed76:	f7f1 fa89 	bl	800028c <__adddf3>
 800ed7a:	3d01      	subs	r5, #1
 800ed7c:	e759      	b.n	800ec32 <__kernel_rem_pio2+0x52a>
 800ed7e:	9b01      	ldr	r3, [sp, #4]
 800ed80:	9a01      	ldr	r2, [sp, #4]
 800ed82:	601d      	str	r5, [r3, #0]
 800ed84:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800ed88:	605c      	str	r4, [r3, #4]
 800ed8a:	609f      	str	r7, [r3, #8]
 800ed8c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ed90:	60d3      	str	r3, [r2, #12]
 800ed92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed96:	6110      	str	r0, [r2, #16]
 800ed98:	6153      	str	r3, [r2, #20]
 800ed9a:	e728      	b.n	800ebee <__kernel_rem_pio2+0x4e6>
 800ed9c:	41700000 	.word	0x41700000
 800eda0:	3e700000 	.word	0x3e700000
 800eda4:	00000000 	.word	0x00000000

0800eda8 <__kernel_tan>:
 800eda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edac:	ed2d 8b06 	vpush	{d8-d10}
 800edb0:	ec5b ab10 	vmov	sl, fp, d0
 800edb4:	4be0      	ldr	r3, [pc, #896]	; (800f138 <__kernel_tan+0x390>)
 800edb6:	b083      	sub	sp, #12
 800edb8:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800edbc:	429f      	cmp	r7, r3
 800edbe:	ec59 8b11 	vmov	r8, r9, d1
 800edc2:	4606      	mov	r6, r0
 800edc4:	f8cd b000 	str.w	fp, [sp]
 800edc8:	dc61      	bgt.n	800ee8e <__kernel_tan+0xe6>
 800edca:	ee10 0a10 	vmov	r0, s0
 800edce:	4659      	mov	r1, fp
 800edd0:	f7f1 fec2 	bl	8000b58 <__aeabi_d2iz>
 800edd4:	4605      	mov	r5, r0
 800edd6:	2800      	cmp	r0, #0
 800edd8:	f040 8083 	bne.w	800eee2 <__kernel_tan+0x13a>
 800eddc:	1c73      	adds	r3, r6, #1
 800edde:	4652      	mov	r2, sl
 800ede0:	4313      	orrs	r3, r2
 800ede2:	433b      	orrs	r3, r7
 800ede4:	d112      	bne.n	800ee0c <__kernel_tan+0x64>
 800ede6:	ec4b ab10 	vmov	d0, sl, fp
 800edea:	f000 fa17 	bl	800f21c <fabs>
 800edee:	49d3      	ldr	r1, [pc, #844]	; (800f13c <__kernel_tan+0x394>)
 800edf0:	ec53 2b10 	vmov	r2, r3, d0
 800edf4:	2000      	movs	r0, #0
 800edf6:	f7f1 fd29 	bl	800084c <__aeabi_ddiv>
 800edfa:	4682      	mov	sl, r0
 800edfc:	468b      	mov	fp, r1
 800edfe:	ec4b ab10 	vmov	d0, sl, fp
 800ee02:	b003      	add	sp, #12
 800ee04:	ecbd 8b06 	vpop	{d8-d10}
 800ee08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee0c:	2e01      	cmp	r6, #1
 800ee0e:	d0f6      	beq.n	800edfe <__kernel_tan+0x56>
 800ee10:	4642      	mov	r2, r8
 800ee12:	464b      	mov	r3, r9
 800ee14:	4650      	mov	r0, sl
 800ee16:	4659      	mov	r1, fp
 800ee18:	f7f1 fa38 	bl	800028c <__adddf3>
 800ee1c:	4602      	mov	r2, r0
 800ee1e:	460b      	mov	r3, r1
 800ee20:	460f      	mov	r7, r1
 800ee22:	2000      	movs	r0, #0
 800ee24:	49c6      	ldr	r1, [pc, #792]	; (800f140 <__kernel_tan+0x398>)
 800ee26:	f7f1 fd11 	bl	800084c <__aeabi_ddiv>
 800ee2a:	e9cd 0100 	strd	r0, r1, [sp]
 800ee2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee32:	462e      	mov	r6, r5
 800ee34:	4652      	mov	r2, sl
 800ee36:	462c      	mov	r4, r5
 800ee38:	4630      	mov	r0, r6
 800ee3a:	461d      	mov	r5, r3
 800ee3c:	4639      	mov	r1, r7
 800ee3e:	465b      	mov	r3, fp
 800ee40:	f7f1 fa22 	bl	8000288 <__aeabi_dsub>
 800ee44:	4602      	mov	r2, r0
 800ee46:	460b      	mov	r3, r1
 800ee48:	4640      	mov	r0, r8
 800ee4a:	4649      	mov	r1, r9
 800ee4c:	f7f1 fa1c 	bl	8000288 <__aeabi_dsub>
 800ee50:	4632      	mov	r2, r6
 800ee52:	462b      	mov	r3, r5
 800ee54:	f7f1 fbd0 	bl	80005f8 <__aeabi_dmul>
 800ee58:	4632      	mov	r2, r6
 800ee5a:	4680      	mov	r8, r0
 800ee5c:	4689      	mov	r9, r1
 800ee5e:	462b      	mov	r3, r5
 800ee60:	4630      	mov	r0, r6
 800ee62:	4639      	mov	r1, r7
 800ee64:	f7f1 fbc8 	bl	80005f8 <__aeabi_dmul>
 800ee68:	4bb4      	ldr	r3, [pc, #720]	; (800f13c <__kernel_tan+0x394>)
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	f7f1 fa0e 	bl	800028c <__adddf3>
 800ee70:	4602      	mov	r2, r0
 800ee72:	460b      	mov	r3, r1
 800ee74:	4640      	mov	r0, r8
 800ee76:	4649      	mov	r1, r9
 800ee78:	f7f1 fa08 	bl	800028c <__adddf3>
 800ee7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee80:	f7f1 fbba 	bl	80005f8 <__aeabi_dmul>
 800ee84:	4622      	mov	r2, r4
 800ee86:	462b      	mov	r3, r5
 800ee88:	f7f1 fa00 	bl	800028c <__adddf3>
 800ee8c:	e7b5      	b.n	800edfa <__kernel_tan+0x52>
 800ee8e:	4bad      	ldr	r3, [pc, #692]	; (800f144 <__kernel_tan+0x39c>)
 800ee90:	429f      	cmp	r7, r3
 800ee92:	dd26      	ble.n	800eee2 <__kernel_tan+0x13a>
 800ee94:	9b00      	ldr	r3, [sp, #0]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	da09      	bge.n	800eeae <__kernel_tan+0x106>
 800ee9a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ee9e:	469b      	mov	fp, r3
 800eea0:	ee10 aa10 	vmov	sl, s0
 800eea4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800eea8:	ee11 8a10 	vmov	r8, s2
 800eeac:	4699      	mov	r9, r3
 800eeae:	4652      	mov	r2, sl
 800eeb0:	465b      	mov	r3, fp
 800eeb2:	a183      	add	r1, pc, #524	; (adr r1, 800f0c0 <__kernel_tan+0x318>)
 800eeb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eeb8:	f7f1 f9e6 	bl	8000288 <__aeabi_dsub>
 800eebc:	4642      	mov	r2, r8
 800eebe:	464b      	mov	r3, r9
 800eec0:	4604      	mov	r4, r0
 800eec2:	460d      	mov	r5, r1
 800eec4:	a180      	add	r1, pc, #512	; (adr r1, 800f0c8 <__kernel_tan+0x320>)
 800eec6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eeca:	f7f1 f9dd 	bl	8000288 <__aeabi_dsub>
 800eece:	4622      	mov	r2, r4
 800eed0:	462b      	mov	r3, r5
 800eed2:	f7f1 f9db 	bl	800028c <__adddf3>
 800eed6:	f04f 0800 	mov.w	r8, #0
 800eeda:	4682      	mov	sl, r0
 800eedc:	468b      	mov	fp, r1
 800eede:	f04f 0900 	mov.w	r9, #0
 800eee2:	4652      	mov	r2, sl
 800eee4:	465b      	mov	r3, fp
 800eee6:	4650      	mov	r0, sl
 800eee8:	4659      	mov	r1, fp
 800eeea:	f7f1 fb85 	bl	80005f8 <__aeabi_dmul>
 800eeee:	4602      	mov	r2, r0
 800eef0:	460b      	mov	r3, r1
 800eef2:	ec43 2b18 	vmov	d8, r2, r3
 800eef6:	f7f1 fb7f 	bl	80005f8 <__aeabi_dmul>
 800eefa:	ec53 2b18 	vmov	r2, r3, d8
 800eefe:	4604      	mov	r4, r0
 800ef00:	460d      	mov	r5, r1
 800ef02:	4650      	mov	r0, sl
 800ef04:	4659      	mov	r1, fp
 800ef06:	f7f1 fb77 	bl	80005f8 <__aeabi_dmul>
 800ef0a:	a371      	add	r3, pc, #452	; (adr r3, 800f0d0 <__kernel_tan+0x328>)
 800ef0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef10:	ec41 0b19 	vmov	d9, r0, r1
 800ef14:	4620      	mov	r0, r4
 800ef16:	4629      	mov	r1, r5
 800ef18:	f7f1 fb6e 	bl	80005f8 <__aeabi_dmul>
 800ef1c:	a36e      	add	r3, pc, #440	; (adr r3, 800f0d8 <__kernel_tan+0x330>)
 800ef1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef22:	f7f1 f9b3 	bl	800028c <__adddf3>
 800ef26:	4622      	mov	r2, r4
 800ef28:	462b      	mov	r3, r5
 800ef2a:	f7f1 fb65 	bl	80005f8 <__aeabi_dmul>
 800ef2e:	a36c      	add	r3, pc, #432	; (adr r3, 800f0e0 <__kernel_tan+0x338>)
 800ef30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef34:	f7f1 f9aa 	bl	800028c <__adddf3>
 800ef38:	4622      	mov	r2, r4
 800ef3a:	462b      	mov	r3, r5
 800ef3c:	f7f1 fb5c 	bl	80005f8 <__aeabi_dmul>
 800ef40:	a369      	add	r3, pc, #420	; (adr r3, 800f0e8 <__kernel_tan+0x340>)
 800ef42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef46:	f7f1 f9a1 	bl	800028c <__adddf3>
 800ef4a:	4622      	mov	r2, r4
 800ef4c:	462b      	mov	r3, r5
 800ef4e:	f7f1 fb53 	bl	80005f8 <__aeabi_dmul>
 800ef52:	a367      	add	r3, pc, #412	; (adr r3, 800f0f0 <__kernel_tan+0x348>)
 800ef54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef58:	f7f1 f998 	bl	800028c <__adddf3>
 800ef5c:	4622      	mov	r2, r4
 800ef5e:	462b      	mov	r3, r5
 800ef60:	f7f1 fb4a 	bl	80005f8 <__aeabi_dmul>
 800ef64:	a364      	add	r3, pc, #400	; (adr r3, 800f0f8 <__kernel_tan+0x350>)
 800ef66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef6a:	f7f1 f98f 	bl	800028c <__adddf3>
 800ef6e:	ec53 2b18 	vmov	r2, r3, d8
 800ef72:	f7f1 fb41 	bl	80005f8 <__aeabi_dmul>
 800ef76:	a362      	add	r3, pc, #392	; (adr r3, 800f100 <__kernel_tan+0x358>)
 800ef78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef7c:	ec41 0b1a 	vmov	d10, r0, r1
 800ef80:	4620      	mov	r0, r4
 800ef82:	4629      	mov	r1, r5
 800ef84:	f7f1 fb38 	bl	80005f8 <__aeabi_dmul>
 800ef88:	a35f      	add	r3, pc, #380	; (adr r3, 800f108 <__kernel_tan+0x360>)
 800ef8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef8e:	f7f1 f97d 	bl	800028c <__adddf3>
 800ef92:	4622      	mov	r2, r4
 800ef94:	462b      	mov	r3, r5
 800ef96:	f7f1 fb2f 	bl	80005f8 <__aeabi_dmul>
 800ef9a:	a35d      	add	r3, pc, #372	; (adr r3, 800f110 <__kernel_tan+0x368>)
 800ef9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa0:	f7f1 f974 	bl	800028c <__adddf3>
 800efa4:	4622      	mov	r2, r4
 800efa6:	462b      	mov	r3, r5
 800efa8:	f7f1 fb26 	bl	80005f8 <__aeabi_dmul>
 800efac:	a35a      	add	r3, pc, #360	; (adr r3, 800f118 <__kernel_tan+0x370>)
 800efae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb2:	f7f1 f96b 	bl	800028c <__adddf3>
 800efb6:	4622      	mov	r2, r4
 800efb8:	462b      	mov	r3, r5
 800efba:	f7f1 fb1d 	bl	80005f8 <__aeabi_dmul>
 800efbe:	a358      	add	r3, pc, #352	; (adr r3, 800f120 <__kernel_tan+0x378>)
 800efc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc4:	f7f1 f962 	bl	800028c <__adddf3>
 800efc8:	4622      	mov	r2, r4
 800efca:	462b      	mov	r3, r5
 800efcc:	f7f1 fb14 	bl	80005f8 <__aeabi_dmul>
 800efd0:	a355      	add	r3, pc, #340	; (adr r3, 800f128 <__kernel_tan+0x380>)
 800efd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efd6:	f7f1 f959 	bl	800028c <__adddf3>
 800efda:	4602      	mov	r2, r0
 800efdc:	460b      	mov	r3, r1
 800efde:	ec51 0b1a 	vmov	r0, r1, d10
 800efe2:	f7f1 f953 	bl	800028c <__adddf3>
 800efe6:	ec53 2b19 	vmov	r2, r3, d9
 800efea:	f7f1 fb05 	bl	80005f8 <__aeabi_dmul>
 800efee:	4642      	mov	r2, r8
 800eff0:	464b      	mov	r3, r9
 800eff2:	f7f1 f94b 	bl	800028c <__adddf3>
 800eff6:	ec53 2b18 	vmov	r2, r3, d8
 800effa:	f7f1 fafd 	bl	80005f8 <__aeabi_dmul>
 800effe:	4642      	mov	r2, r8
 800f000:	464b      	mov	r3, r9
 800f002:	f7f1 f943 	bl	800028c <__adddf3>
 800f006:	a34a      	add	r3, pc, #296	; (adr r3, 800f130 <__kernel_tan+0x388>)
 800f008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f00c:	4604      	mov	r4, r0
 800f00e:	460d      	mov	r5, r1
 800f010:	ec51 0b19 	vmov	r0, r1, d9
 800f014:	f7f1 faf0 	bl	80005f8 <__aeabi_dmul>
 800f018:	4622      	mov	r2, r4
 800f01a:	462b      	mov	r3, r5
 800f01c:	f7f1 f936 	bl	800028c <__adddf3>
 800f020:	460b      	mov	r3, r1
 800f022:	ec41 0b18 	vmov	d8, r0, r1
 800f026:	4602      	mov	r2, r0
 800f028:	4659      	mov	r1, fp
 800f02a:	4650      	mov	r0, sl
 800f02c:	f7f1 f92e 	bl	800028c <__adddf3>
 800f030:	4b44      	ldr	r3, [pc, #272]	; (800f144 <__kernel_tan+0x39c>)
 800f032:	429f      	cmp	r7, r3
 800f034:	4604      	mov	r4, r0
 800f036:	460d      	mov	r5, r1
 800f038:	f340 8086 	ble.w	800f148 <__kernel_tan+0x3a0>
 800f03c:	4630      	mov	r0, r6
 800f03e:	f7f1 fa71 	bl	8000524 <__aeabi_i2d>
 800f042:	4622      	mov	r2, r4
 800f044:	4680      	mov	r8, r0
 800f046:	4689      	mov	r9, r1
 800f048:	462b      	mov	r3, r5
 800f04a:	4620      	mov	r0, r4
 800f04c:	4629      	mov	r1, r5
 800f04e:	f7f1 fad3 	bl	80005f8 <__aeabi_dmul>
 800f052:	4642      	mov	r2, r8
 800f054:	4606      	mov	r6, r0
 800f056:	460f      	mov	r7, r1
 800f058:	464b      	mov	r3, r9
 800f05a:	4620      	mov	r0, r4
 800f05c:	4629      	mov	r1, r5
 800f05e:	f7f1 f915 	bl	800028c <__adddf3>
 800f062:	4602      	mov	r2, r0
 800f064:	460b      	mov	r3, r1
 800f066:	4630      	mov	r0, r6
 800f068:	4639      	mov	r1, r7
 800f06a:	f7f1 fbef 	bl	800084c <__aeabi_ddiv>
 800f06e:	ec53 2b18 	vmov	r2, r3, d8
 800f072:	f7f1 f909 	bl	8000288 <__aeabi_dsub>
 800f076:	4602      	mov	r2, r0
 800f078:	460b      	mov	r3, r1
 800f07a:	4650      	mov	r0, sl
 800f07c:	4659      	mov	r1, fp
 800f07e:	f7f1 f903 	bl	8000288 <__aeabi_dsub>
 800f082:	4602      	mov	r2, r0
 800f084:	460b      	mov	r3, r1
 800f086:	f7f1 f901 	bl	800028c <__adddf3>
 800f08a:	4602      	mov	r2, r0
 800f08c:	460b      	mov	r3, r1
 800f08e:	4640      	mov	r0, r8
 800f090:	4649      	mov	r1, r9
 800f092:	f7f1 f8f9 	bl	8000288 <__aeabi_dsub>
 800f096:	9b00      	ldr	r3, [sp, #0]
 800f098:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800f09c:	f00a 0a02 	and.w	sl, sl, #2
 800f0a0:	4604      	mov	r4, r0
 800f0a2:	f1ca 0001 	rsb	r0, sl, #1
 800f0a6:	460d      	mov	r5, r1
 800f0a8:	f7f1 fa3c 	bl	8000524 <__aeabi_i2d>
 800f0ac:	4602      	mov	r2, r0
 800f0ae:	460b      	mov	r3, r1
 800f0b0:	4620      	mov	r0, r4
 800f0b2:	4629      	mov	r1, r5
 800f0b4:	f7f1 faa0 	bl	80005f8 <__aeabi_dmul>
 800f0b8:	e69f      	b.n	800edfa <__kernel_tan+0x52>
 800f0ba:	bf00      	nop
 800f0bc:	f3af 8000 	nop.w
 800f0c0:	54442d18 	.word	0x54442d18
 800f0c4:	3fe921fb 	.word	0x3fe921fb
 800f0c8:	33145c07 	.word	0x33145c07
 800f0cc:	3c81a626 	.word	0x3c81a626
 800f0d0:	74bf7ad4 	.word	0x74bf7ad4
 800f0d4:	3efb2a70 	.word	0x3efb2a70
 800f0d8:	32f0a7e9 	.word	0x32f0a7e9
 800f0dc:	3f12b80f 	.word	0x3f12b80f
 800f0e0:	1a8d1068 	.word	0x1a8d1068
 800f0e4:	3f3026f7 	.word	0x3f3026f7
 800f0e8:	fee08315 	.word	0xfee08315
 800f0ec:	3f57dbc8 	.word	0x3f57dbc8
 800f0f0:	e96e8493 	.word	0xe96e8493
 800f0f4:	3f8226e3 	.word	0x3f8226e3
 800f0f8:	1bb341fe 	.word	0x1bb341fe
 800f0fc:	3faba1ba 	.word	0x3faba1ba
 800f100:	db605373 	.word	0xdb605373
 800f104:	bef375cb 	.word	0xbef375cb
 800f108:	a03792a6 	.word	0xa03792a6
 800f10c:	3f147e88 	.word	0x3f147e88
 800f110:	f2f26501 	.word	0xf2f26501
 800f114:	3f4344d8 	.word	0x3f4344d8
 800f118:	c9560328 	.word	0xc9560328
 800f11c:	3f6d6d22 	.word	0x3f6d6d22
 800f120:	8406d637 	.word	0x8406d637
 800f124:	3f9664f4 	.word	0x3f9664f4
 800f128:	1110fe7a 	.word	0x1110fe7a
 800f12c:	3fc11111 	.word	0x3fc11111
 800f130:	55555563 	.word	0x55555563
 800f134:	3fd55555 	.word	0x3fd55555
 800f138:	3e2fffff 	.word	0x3e2fffff
 800f13c:	3ff00000 	.word	0x3ff00000
 800f140:	bff00000 	.word	0xbff00000
 800f144:	3fe59427 	.word	0x3fe59427
 800f148:	2e01      	cmp	r6, #1
 800f14a:	d02f      	beq.n	800f1ac <__kernel_tan+0x404>
 800f14c:	460f      	mov	r7, r1
 800f14e:	4602      	mov	r2, r0
 800f150:	460b      	mov	r3, r1
 800f152:	4689      	mov	r9, r1
 800f154:	2000      	movs	r0, #0
 800f156:	4917      	ldr	r1, [pc, #92]	; (800f1b4 <__kernel_tan+0x40c>)
 800f158:	f7f1 fb78 	bl	800084c <__aeabi_ddiv>
 800f15c:	2600      	movs	r6, #0
 800f15e:	e9cd 0100 	strd	r0, r1, [sp]
 800f162:	4652      	mov	r2, sl
 800f164:	465b      	mov	r3, fp
 800f166:	4630      	mov	r0, r6
 800f168:	4639      	mov	r1, r7
 800f16a:	f7f1 f88d 	bl	8000288 <__aeabi_dsub>
 800f16e:	e9dd 4500 	ldrd	r4, r5, [sp]
 800f172:	4602      	mov	r2, r0
 800f174:	460b      	mov	r3, r1
 800f176:	ec51 0b18 	vmov	r0, r1, d8
 800f17a:	f7f1 f885 	bl	8000288 <__aeabi_dsub>
 800f17e:	4632      	mov	r2, r6
 800f180:	462b      	mov	r3, r5
 800f182:	f7f1 fa39 	bl	80005f8 <__aeabi_dmul>
 800f186:	46b0      	mov	r8, r6
 800f188:	460f      	mov	r7, r1
 800f18a:	4642      	mov	r2, r8
 800f18c:	462b      	mov	r3, r5
 800f18e:	4634      	mov	r4, r6
 800f190:	4649      	mov	r1, r9
 800f192:	4606      	mov	r6, r0
 800f194:	4640      	mov	r0, r8
 800f196:	f7f1 fa2f 	bl	80005f8 <__aeabi_dmul>
 800f19a:	4b07      	ldr	r3, [pc, #28]	; (800f1b8 <__kernel_tan+0x410>)
 800f19c:	2200      	movs	r2, #0
 800f19e:	f7f1 f875 	bl	800028c <__adddf3>
 800f1a2:	4602      	mov	r2, r0
 800f1a4:	460b      	mov	r3, r1
 800f1a6:	4630      	mov	r0, r6
 800f1a8:	4639      	mov	r1, r7
 800f1aa:	e665      	b.n	800ee78 <__kernel_tan+0xd0>
 800f1ac:	4682      	mov	sl, r0
 800f1ae:	468b      	mov	fp, r1
 800f1b0:	e625      	b.n	800edfe <__kernel_tan+0x56>
 800f1b2:	bf00      	nop
 800f1b4:	bff00000 	.word	0xbff00000
 800f1b8:	3ff00000 	.word	0x3ff00000

0800f1bc <with_errno>:
 800f1bc:	b570      	push	{r4, r5, r6, lr}
 800f1be:	4604      	mov	r4, r0
 800f1c0:	460d      	mov	r5, r1
 800f1c2:	4616      	mov	r6, r2
 800f1c4:	f7f9 fd68 	bl	8008c98 <__errno>
 800f1c8:	4629      	mov	r1, r5
 800f1ca:	6006      	str	r6, [r0, #0]
 800f1cc:	4620      	mov	r0, r4
 800f1ce:	bd70      	pop	{r4, r5, r6, pc}

0800f1d0 <xflow>:
 800f1d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f1d2:	4614      	mov	r4, r2
 800f1d4:	461d      	mov	r5, r3
 800f1d6:	b108      	cbz	r0, 800f1dc <xflow+0xc>
 800f1d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f1dc:	e9cd 2300 	strd	r2, r3, [sp]
 800f1e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f1e4:	4620      	mov	r0, r4
 800f1e6:	4629      	mov	r1, r5
 800f1e8:	f7f1 fa06 	bl	80005f8 <__aeabi_dmul>
 800f1ec:	2222      	movs	r2, #34	; 0x22
 800f1ee:	b003      	add	sp, #12
 800f1f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1f4:	f7ff bfe2 	b.w	800f1bc <with_errno>

0800f1f8 <__math_uflow>:
 800f1f8:	b508      	push	{r3, lr}
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f200:	f7ff ffe6 	bl	800f1d0 <xflow>
 800f204:	ec41 0b10 	vmov	d0, r0, r1
 800f208:	bd08      	pop	{r3, pc}

0800f20a <__math_oflow>:
 800f20a:	b508      	push	{r3, lr}
 800f20c:	2200      	movs	r2, #0
 800f20e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f212:	f7ff ffdd 	bl	800f1d0 <xflow>
 800f216:	ec41 0b10 	vmov	d0, r0, r1
 800f21a:	bd08      	pop	{r3, pc}

0800f21c <fabs>:
 800f21c:	ec51 0b10 	vmov	r0, r1, d0
 800f220:	ee10 2a10 	vmov	r2, s0
 800f224:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f228:	ec43 2b10 	vmov	d0, r2, r3
 800f22c:	4770      	bx	lr

0800f22e <finite>:
 800f22e:	b082      	sub	sp, #8
 800f230:	ed8d 0b00 	vstr	d0, [sp]
 800f234:	9801      	ldr	r0, [sp, #4]
 800f236:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f23a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f23e:	0fc0      	lsrs	r0, r0, #31
 800f240:	b002      	add	sp, #8
 800f242:	4770      	bx	lr
 800f244:	0000      	movs	r0, r0
	...

0800f248 <floor>:
 800f248:	ec51 0b10 	vmov	r0, r1, d0
 800f24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f250:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f254:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f258:	2e13      	cmp	r6, #19
 800f25a:	ee10 5a10 	vmov	r5, s0
 800f25e:	ee10 8a10 	vmov	r8, s0
 800f262:	460c      	mov	r4, r1
 800f264:	dc32      	bgt.n	800f2cc <floor+0x84>
 800f266:	2e00      	cmp	r6, #0
 800f268:	da14      	bge.n	800f294 <floor+0x4c>
 800f26a:	a333      	add	r3, pc, #204	; (adr r3, 800f338 <floor+0xf0>)
 800f26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f270:	f7f1 f80c 	bl	800028c <__adddf3>
 800f274:	2200      	movs	r2, #0
 800f276:	2300      	movs	r3, #0
 800f278:	f7f1 fc4e 	bl	8000b18 <__aeabi_dcmpgt>
 800f27c:	b138      	cbz	r0, 800f28e <floor+0x46>
 800f27e:	2c00      	cmp	r4, #0
 800f280:	da57      	bge.n	800f332 <floor+0xea>
 800f282:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f286:	431d      	orrs	r5, r3
 800f288:	d001      	beq.n	800f28e <floor+0x46>
 800f28a:	4c2d      	ldr	r4, [pc, #180]	; (800f340 <floor+0xf8>)
 800f28c:	2500      	movs	r5, #0
 800f28e:	4621      	mov	r1, r4
 800f290:	4628      	mov	r0, r5
 800f292:	e025      	b.n	800f2e0 <floor+0x98>
 800f294:	4f2b      	ldr	r7, [pc, #172]	; (800f344 <floor+0xfc>)
 800f296:	4137      	asrs	r7, r6
 800f298:	ea01 0307 	and.w	r3, r1, r7
 800f29c:	4303      	orrs	r3, r0
 800f29e:	d01f      	beq.n	800f2e0 <floor+0x98>
 800f2a0:	a325      	add	r3, pc, #148	; (adr r3, 800f338 <floor+0xf0>)
 800f2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a6:	f7f0 fff1 	bl	800028c <__adddf3>
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	f7f1 fc33 	bl	8000b18 <__aeabi_dcmpgt>
 800f2b2:	2800      	cmp	r0, #0
 800f2b4:	d0eb      	beq.n	800f28e <floor+0x46>
 800f2b6:	2c00      	cmp	r4, #0
 800f2b8:	bfbe      	ittt	lt
 800f2ba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f2be:	fa43 f606 	asrlt.w	r6, r3, r6
 800f2c2:	19a4      	addlt	r4, r4, r6
 800f2c4:	ea24 0407 	bic.w	r4, r4, r7
 800f2c8:	2500      	movs	r5, #0
 800f2ca:	e7e0      	b.n	800f28e <floor+0x46>
 800f2cc:	2e33      	cmp	r6, #51	; 0x33
 800f2ce:	dd0b      	ble.n	800f2e8 <floor+0xa0>
 800f2d0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f2d4:	d104      	bne.n	800f2e0 <floor+0x98>
 800f2d6:	ee10 2a10 	vmov	r2, s0
 800f2da:	460b      	mov	r3, r1
 800f2dc:	f7f0 ffd6 	bl	800028c <__adddf3>
 800f2e0:	ec41 0b10 	vmov	d0, r0, r1
 800f2e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2e8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f2ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f2f0:	fa23 f707 	lsr.w	r7, r3, r7
 800f2f4:	4207      	tst	r7, r0
 800f2f6:	d0f3      	beq.n	800f2e0 <floor+0x98>
 800f2f8:	a30f      	add	r3, pc, #60	; (adr r3, 800f338 <floor+0xf0>)
 800f2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2fe:	f7f0 ffc5 	bl	800028c <__adddf3>
 800f302:	2200      	movs	r2, #0
 800f304:	2300      	movs	r3, #0
 800f306:	f7f1 fc07 	bl	8000b18 <__aeabi_dcmpgt>
 800f30a:	2800      	cmp	r0, #0
 800f30c:	d0bf      	beq.n	800f28e <floor+0x46>
 800f30e:	2c00      	cmp	r4, #0
 800f310:	da02      	bge.n	800f318 <floor+0xd0>
 800f312:	2e14      	cmp	r6, #20
 800f314:	d103      	bne.n	800f31e <floor+0xd6>
 800f316:	3401      	adds	r4, #1
 800f318:	ea25 0507 	bic.w	r5, r5, r7
 800f31c:	e7b7      	b.n	800f28e <floor+0x46>
 800f31e:	2301      	movs	r3, #1
 800f320:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f324:	fa03 f606 	lsl.w	r6, r3, r6
 800f328:	4435      	add	r5, r6
 800f32a:	4545      	cmp	r5, r8
 800f32c:	bf38      	it	cc
 800f32e:	18e4      	addcc	r4, r4, r3
 800f330:	e7f2      	b.n	800f318 <floor+0xd0>
 800f332:	2500      	movs	r5, #0
 800f334:	462c      	mov	r4, r5
 800f336:	e7aa      	b.n	800f28e <floor+0x46>
 800f338:	8800759c 	.word	0x8800759c
 800f33c:	7e37e43c 	.word	0x7e37e43c
 800f340:	bff00000 	.word	0xbff00000
 800f344:	000fffff 	.word	0x000fffff

0800f348 <scalbn>:
 800f348:	b570      	push	{r4, r5, r6, lr}
 800f34a:	ec55 4b10 	vmov	r4, r5, d0
 800f34e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f352:	4606      	mov	r6, r0
 800f354:	462b      	mov	r3, r5
 800f356:	b99a      	cbnz	r2, 800f380 <scalbn+0x38>
 800f358:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f35c:	4323      	orrs	r3, r4
 800f35e:	d036      	beq.n	800f3ce <scalbn+0x86>
 800f360:	4b39      	ldr	r3, [pc, #228]	; (800f448 <scalbn+0x100>)
 800f362:	4629      	mov	r1, r5
 800f364:	ee10 0a10 	vmov	r0, s0
 800f368:	2200      	movs	r2, #0
 800f36a:	f7f1 f945 	bl	80005f8 <__aeabi_dmul>
 800f36e:	4b37      	ldr	r3, [pc, #220]	; (800f44c <scalbn+0x104>)
 800f370:	429e      	cmp	r6, r3
 800f372:	4604      	mov	r4, r0
 800f374:	460d      	mov	r5, r1
 800f376:	da10      	bge.n	800f39a <scalbn+0x52>
 800f378:	a32b      	add	r3, pc, #172	; (adr r3, 800f428 <scalbn+0xe0>)
 800f37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f37e:	e03a      	b.n	800f3f6 <scalbn+0xae>
 800f380:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f384:	428a      	cmp	r2, r1
 800f386:	d10c      	bne.n	800f3a2 <scalbn+0x5a>
 800f388:	ee10 2a10 	vmov	r2, s0
 800f38c:	4620      	mov	r0, r4
 800f38e:	4629      	mov	r1, r5
 800f390:	f7f0 ff7c 	bl	800028c <__adddf3>
 800f394:	4604      	mov	r4, r0
 800f396:	460d      	mov	r5, r1
 800f398:	e019      	b.n	800f3ce <scalbn+0x86>
 800f39a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f39e:	460b      	mov	r3, r1
 800f3a0:	3a36      	subs	r2, #54	; 0x36
 800f3a2:	4432      	add	r2, r6
 800f3a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f3a8:	428a      	cmp	r2, r1
 800f3aa:	dd08      	ble.n	800f3be <scalbn+0x76>
 800f3ac:	2d00      	cmp	r5, #0
 800f3ae:	a120      	add	r1, pc, #128	; (adr r1, 800f430 <scalbn+0xe8>)
 800f3b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3b4:	da1c      	bge.n	800f3f0 <scalbn+0xa8>
 800f3b6:	a120      	add	r1, pc, #128	; (adr r1, 800f438 <scalbn+0xf0>)
 800f3b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3bc:	e018      	b.n	800f3f0 <scalbn+0xa8>
 800f3be:	2a00      	cmp	r2, #0
 800f3c0:	dd08      	ble.n	800f3d4 <scalbn+0x8c>
 800f3c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f3c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f3ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f3ce:	ec45 4b10 	vmov	d0, r4, r5
 800f3d2:	bd70      	pop	{r4, r5, r6, pc}
 800f3d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f3d8:	da19      	bge.n	800f40e <scalbn+0xc6>
 800f3da:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f3de:	429e      	cmp	r6, r3
 800f3e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f3e4:	dd0a      	ble.n	800f3fc <scalbn+0xb4>
 800f3e6:	a112      	add	r1, pc, #72	; (adr r1, 800f430 <scalbn+0xe8>)
 800f3e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d1e2      	bne.n	800f3b6 <scalbn+0x6e>
 800f3f0:	a30f      	add	r3, pc, #60	; (adr r3, 800f430 <scalbn+0xe8>)
 800f3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3f6:	f7f1 f8ff 	bl	80005f8 <__aeabi_dmul>
 800f3fa:	e7cb      	b.n	800f394 <scalbn+0x4c>
 800f3fc:	a10a      	add	r1, pc, #40	; (adr r1, 800f428 <scalbn+0xe0>)
 800f3fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d0b8      	beq.n	800f378 <scalbn+0x30>
 800f406:	a10e      	add	r1, pc, #56	; (adr r1, 800f440 <scalbn+0xf8>)
 800f408:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f40c:	e7b4      	b.n	800f378 <scalbn+0x30>
 800f40e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f412:	3236      	adds	r2, #54	; 0x36
 800f414:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f418:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f41c:	4620      	mov	r0, r4
 800f41e:	4b0c      	ldr	r3, [pc, #48]	; (800f450 <scalbn+0x108>)
 800f420:	2200      	movs	r2, #0
 800f422:	e7e8      	b.n	800f3f6 <scalbn+0xae>
 800f424:	f3af 8000 	nop.w
 800f428:	c2f8f359 	.word	0xc2f8f359
 800f42c:	01a56e1f 	.word	0x01a56e1f
 800f430:	8800759c 	.word	0x8800759c
 800f434:	7e37e43c 	.word	0x7e37e43c
 800f438:	8800759c 	.word	0x8800759c
 800f43c:	fe37e43c 	.word	0xfe37e43c
 800f440:	c2f8f359 	.word	0xc2f8f359
 800f444:	81a56e1f 	.word	0x81a56e1f
 800f448:	43500000 	.word	0x43500000
 800f44c:	ffff3cb0 	.word	0xffff3cb0
 800f450:	3c900000 	.word	0x3c900000

0800f454 <_init>:
 800f454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f456:	bf00      	nop
 800f458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f45a:	bc08      	pop	{r3}
 800f45c:	469e      	mov	lr, r3
 800f45e:	4770      	bx	lr

0800f460 <_fini>:
 800f460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f462:	bf00      	nop
 800f464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f466:	bc08      	pop	{r3}
 800f468:	469e      	mov	lr, r3
 800f46a:	4770      	bx	lr
